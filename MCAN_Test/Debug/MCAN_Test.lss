
MCAN_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005154  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00405154  00405154  00015154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  0040515c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000b14  204009c0  00405b1c  000209c0  2**2
                  ALLOC
  4 .stack        00002004  204014d4  00406630  000209c0  2**0
                  ALLOC
  5 .heap         00000200  204034d8  00408634  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001ca3f  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003e54  00000000  00000000  0003d486  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000070bc  00000000  00000000  000412da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d68  00000000  00000000  00048396  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e18  00000000  00000000  000490fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00022ae1  00000000  00000000  00049f16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000ee55  00000000  00000000  0006c9f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00098083  00000000  00000000  0007b84c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002ca8  00000000  00000000  001138d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d8 34 40 20 19 10 40 00 17 10 40 00 17 10 40 00     .4@ ..@...@...@.
  400010:	17 10 40 00 17 10 40 00 17 10 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	17 10 40 00 17 10 40 00 00 00 00 00 17 10 40 00     ..@...@.......@.
  40003c:	17 10 40 00 17 10 40 00 17 10 40 00 17 10 40 00     ..@...@...@...@.
  40004c:	17 10 40 00 17 10 40 00 17 10 40 00 17 10 40 00     ..@...@...@...@.
  40005c:	17 10 40 00 17 10 40 00 00 00 00 00 d9 0c 40 00     ..@...@.......@.
  40006c:	ed 0c 40 00 01 0d 40 00 17 10 40 00 17 10 40 00     ..@...@...@...@.
  40007c:	17 10 40 00 15 0d 40 00 29 0d 40 00 17 10 40 00     ..@...@.).@...@.
  40008c:	17 10 40 00 17 10 40 00 17 10 40 00 17 10 40 00     ..@...@...@...@.
  40009c:	17 10 40 00 17 10 40 00 17 10 40 00 17 10 40 00     ..@...@...@...@.
  4000ac:	17 10 40 00 17 10 40 00 17 10 40 00 17 10 40 00     ..@...@...@...@.
  4000bc:	17 10 40 00 17 10 40 00 17 10 40 00 17 10 40 00     ..@...@...@...@.
  4000cc:	17 10 40 00 17 10 40 00 95 16 40 00 17 10 40 00     ..@...@...@...@.
  4000dc:	17 10 40 00 17 10 40 00 17 10 40 00 17 10 40 00     ..@...@...@...@.
  4000ec:	17 10 40 00 17 10 40 00 17 10 40 00 17 10 40 00     ..@...@...@...@.
  4000fc:	17 10 40 00 17 10 40 00 17 10 40 00 17 10 40 00     ..@...@...@...@.
  40010c:	17 10 40 00 17 10 40 00 17 10 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 17 10 40 00 17 10 40 00 17 10 40 00     ......@...@...@.
  40012c:	17 10 40 00 17 10 40 00 17 10 40 00 17 10 40 00     ..@...@...@...@.
  40013c:	17 10 40 00 17 10 40 00 17 10 40 00 17 10 40 00     ..@...@...@...@.
  40014c:	17 10 40 00 17 10 40 00 17 10 40 00 17 10 40 00     ..@...@...@...@.
  40015c:	17 10 40 00 17 10 40 00 17 10 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c0 	.word	0x204009c0
  400184:	00000000 	.word	0x00000000
  400188:	0040515c 	.word	0x0040515c

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	0040515c 	.word	0x0040515c
  4001c8:	204009c4 	.word	0x204009c4
  4001cc:	0040515c 	.word	0x0040515c
  4001d0:	00000000 	.word	0x00000000

004001d4 <bb_elem_decrement_wakeup_offset>:
 * @return True if the wakeup offset was decremented, false if it was not
 */
bool_T bb_elem_decrement_wakeup_offset(BlackboardElement_T * bbElement, const uint32_t elapsedTicks)
{
    bool_T decremented = false;
    if (bbElement->wakeupOffset > elapsedTicks)
  4001d4:	68c3      	ldr	r3, [r0, #12]
  4001d6:	428b      	cmp	r3, r1
  4001d8:	d903      	bls.n	4001e2 <bb_elem_decrement_wakeup_offset+0xe>
    {
        bbElement->wakeupOffset = bbElement->wakeupOffset - elapsedTicks;
  4001da:	1a5b      	subs	r3, r3, r1
  4001dc:	60c3      	str	r3, [r0, #12]
        decremented = true;
  4001de:	2001      	movs	r0, #1
  4001e0:	4770      	bx	lr
    bool_T decremented = false;
  4001e2:	2000      	movs	r0, #0
    }
    return decremented;
}
  4001e4:	4770      	bx	lr
	...

004001e8 <bb_elem_get_data_for_can>:
 *
 * @param[out] data0 a pointer to a u32 that will be copied with the lower 4 bytes of data.
 * @param[out] data1 a pointer to a u32 that will be copied with the upper 4 bytes of data.
 */
void bb_elem_get_data_for_can(BlackboardElement_T const * bbElement, uint32_t * const data0, uint32_t * const data1)
{
  4001e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4001ea:	4606      	mov	r6, r0
  4001ec:	460f      	mov	r7, r1
  4001ee:	4615      	mov	r5, r2
    *data0 = bb_port_get_data_direct32(bbElement, 0U);
  4001f0:	2100      	movs	r1, #0
  4001f2:	4c04      	ldr	r4, [pc, #16]	; (400204 <bb_elem_get_data_for_can+0x1c>)
  4001f4:	47a0      	blx	r4
  4001f6:	6038      	str	r0, [r7, #0]
    *data1 = bb_port_get_data_direct32(bbElement, 4U);
  4001f8:	2104      	movs	r1, #4
  4001fa:	4630      	mov	r0, r6
  4001fc:	47a0      	blx	r4
  4001fe:	6028      	str	r0, [r5, #0]
  400200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400202:	bf00      	nop
  400204:	0040046d 	.word	0x0040046d

00400208 <bb_elem_set_data_from_can>:
 * @param data0 a u32 that will be copied into the lower 4 bytes of this element's data.
 * @param data1 a u32 that will be copied into the upper 4 bytes of this element's data.
 */
void bb_elem_set_data_from_can(BlackboardElement_T * bbElement, const CANElementIndex_T idx,
    const uint32_t data0, const uint32_t data1)
{
  400208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40020a:	4606      	mov	r6, r0
  40020c:	460d      	mov	r5, r1
  40020e:	4611      	mov	r1, r2
  400210:	461f      	mov	r7, r3
    bb_port_set_data_direct32(bbElement, data0, 0U);
  400212:	2200      	movs	r2, #0
  400214:	4c08      	ldr	r4, [pc, #32]	; (400238 <bb_elem_set_data_from_can+0x30>)
  400216:	47a0      	blx	r4
    bb_port_set_data_direct32(bbElement, data1, 4U);
  400218:	2204      	movs	r2, #4
  40021a:	4639      	mov	r1, r7
  40021c:	4630      	mov	r0, r6
  40021e:	47a0      	blx	r4

    const CANElement_T * canElement = can_elem_get_can_elem_idx(idx);
  400220:	4628      	mov	r0, r5
  400222:	4b06      	ldr	r3, [pc, #24]	; (40023c <bb_elem_set_data_from_can+0x34>)
  400224:	4798      	blx	r3

    if (canElement->callback.callbackFn != NULL)
  400226:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400228:	b123      	cbz	r3, 400234 <bb_elem_set_data_from_can+0x2c>
    {
        canElement->callback.callbackFn(canElement->callback.callbackCtx,
  40022a:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
  40022e:	2100      	movs	r1, #0
  400230:	6b40      	ldr	r0, [r0, #52]	; 0x34
  400232:	4798      	blx	r3
  400234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400236:	bf00      	nop
  400238:	00400441 	.word	0x00400441
  40023c:	004003cd 	.word	0x004003cd

00400240 <bb_elem_update_last_tick_count>:
 * @brief updateLastTickCount updates last tick count to the current tick if the scheduler is running
 *
 * @return none
 */
void bb_elem_update_last_tick_count(BlackboardElement_T * bbElement)
{
  400240:	b510      	push	{r4, lr}
  400242:	4604      	mov	r4, r0
    bbElement->lastUpdate_tick = bb_port_get_current_ticks();
  400244:	4b01      	ldr	r3, [pc, #4]	; (40024c <bb_elem_update_last_tick_count+0xc>)
  400246:	4798      	blx	r3
  400248:	60a0      	str	r0, [r4, #8]
  40024a:	bd10      	pop	{r4, pc}
  40024c:	004003fd 	.word	0x004003fd

00400250 <bb_elem_set_uint8_data>:
{
  400250:	b510      	push	{r4, lr}
  400252:	4604      	mov	r4, r0
    bb_port_set_data_direct8(bbElement, data8, index);
  400254:	4b02      	ldr	r3, [pc, #8]	; (400260 <bb_elem_set_uint8_data+0x10>)
  400256:	4798      	blx	r3
    bb_elem_update_last_tick_count(bbElement);
  400258:	4620      	mov	r0, r4
  40025a:	4b02      	ldr	r3, [pc, #8]	; (400264 <bb_elem_set_uint8_data+0x14>)
  40025c:	4798      	blx	r3
  40025e:	bd10      	pop	{r4, pc}
  400260:	00400409 	.word	0x00400409
  400264:	00400241 	.word	0x00400241

00400268 <bb_elem_set_int8_data>:
{
  400268:	b508      	push	{r3, lr}
    bb_elem_set_uint8_data(bbElement, bb_utils_toUnsigned8(data8), index);
  40026a:	b2c9      	uxtb	r1, r1
  40026c:	4b01      	ldr	r3, [pc, #4]	; (400274 <bb_elem_set_int8_data+0xc>)
  40026e:	4798      	blx	r3
  400270:	bd08      	pop	{r3, pc}
  400272:	bf00      	nop
  400274:	00400251 	.word	0x00400251

00400278 <bb_elem_set_uint16_data>:
{
  400278:	b510      	push	{r4, lr}
  40027a:	4604      	mov	r4, r0
    bb_port_set_data_direct16(bbElement, data16, index);
  40027c:	4b02      	ldr	r3, [pc, #8]	; (400288 <bb_elem_set_uint16_data+0x10>)
  40027e:	4798      	blx	r3
    bb_elem_update_last_tick_count(bbElement);
  400280:	4620      	mov	r0, r4
  400282:	4b02      	ldr	r3, [pc, #8]	; (40028c <bb_elem_set_uint16_data+0x14>)
  400284:	4798      	blx	r3
  400286:	bd10      	pop	{r4, pc}
  400288:	0040040d 	.word	0x0040040d
  40028c:	00400241 	.word	0x00400241

00400290 <bb_elem_set_int16_data>:
{
  400290:	b508      	push	{r3, lr}
    bb_elem_set_uint16_data(bbElement, bb_utils_toUnsigned16(data16), index);
  400292:	b289      	uxth	r1, r1
  400294:	4b01      	ldr	r3, [pc, #4]	; (40029c <bb_elem_set_int16_data+0xc>)
  400296:	4798      	blx	r3
  400298:	bd08      	pop	{r3, pc}
  40029a:	bf00      	nop
  40029c:	00400279 	.word	0x00400279

004002a0 <bb_tx_proc_init>:
void bb_tx_proc_init(BlackboardTxProcessor_T * bbTxProc,
                     uint32_t maxDelay,
                     ICANTx_T* transmitters,
                     uint32_t numTransmitters,
                     uint32_t currTimestampTicks)
{
  4002a0:	b570      	push	{r4, r5, r6, lr}
  4002a2:	9e04      	ldr	r6, [sp, #16]
    bbTxProc->maxDelay = maxDelay;
  4002a4:	6001      	str	r1, [r0, #0]
    bbTxProc->transmitters = transmitters;
  4002a6:	6042      	str	r2, [r0, #4]
    bbTxProc->numTransmitters = numTransmitters;
  4002a8:	6083      	str	r3, [r0, #8]

    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  4002aa:	2400      	movs	r4, #0
    {
        BlackboardElement_T * bbElement = bb_get_element((CANElementIndex_T)i);
  4002ac:	4d04      	ldr	r5, [pc, #16]	; (4002c0 <bb_tx_proc_init+0x20>)
  4002ae:	b2e0      	uxtb	r0, r4
  4002b0:	47a8      	blx	r5
        bb_elem_set_wakeup_offset(bbElement, currTimestampTicks + i);
  4002b2:	1933      	adds	r3, r6, r4
 *
 * @param bbElement Pointer to the blackboard element struct to set the data of
 */
static inline void bb_elem_set_wakeup_offset(BlackboardElement_T * bbElement, const uint32_t wakeupOffset)
{
    bbElement->wakeupOffset = wakeupOffset;
  4002b4:	60c3      	str	r3, [r0, #12]
    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  4002b6:	3401      	adds	r4, #1
  4002b8:	2c05      	cmp	r4, #5
  4002ba:	d1f8      	bne.n	4002ae <bb_tx_proc_init+0xe>
    }
}
  4002bc:	bd70      	pop	{r4, r5, r6, pc}
  4002be:	bf00      	nop
  4002c0:	00400499 	.word	0x00400499

004002c4 <bb_tx_proc_tx_message>:
                   const CANElement_T * canElement,
                   const BlackboardTxProcessor_T * const bbTxProc,
                   uint32_t canChannel,
                   uint32_t maskTxChannel,
                   uint32_t minimumOffsetTicks)
{
  4002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4002c6:	b083      	sub	sp, #12
  4002c8:	460f      	mov	r7, r1
  4002ca:	4615      	mov	r5, r2
  4002cc:	461e      	mov	r6, r3
    BlackboardElement_T * bbElement = bb_get_element((CANElementIndex_T)index);
  4002ce:	b2c0      	uxtb	r0, r0
  4002d0:	4b1c      	ldr	r3, [pc, #112]	; (400344 <bb_tx_proc_tx_message+0x80>)
  4002d2:	4798      	blx	r3
  4002d4:	4604      	mov	r4, r0
    if (!bb_elem_decrement_wakeup_offset(bbElement, elapsedTicks))
  4002d6:	4639      	mov	r1, r7
  4002d8:	4b1b      	ldr	r3, [pc, #108]	; (400348 <bb_tx_proc_tx_message+0x84>)
  4002da:	4798      	blx	r3
  4002dc:	b130      	cbz	r0, 4002ec <bb_tx_proc_tx_message+0x28>
 *
 * @return The smaller of the current minimum offset and the blackboard element's wakeup offset
 */
static inline uint32_t bb_elem_compute_minimum_offset_ticks(BlackboardElement_T const * bbElement, const uint32_t minimumOffsetTicks)
{
    return (minimumOffsetTicks > bbElement->wakeupOffset) ? bbElement->wakeupOffset : minimumOffsetTicks;
  4002de:	68e3      	ldr	r3, [r4, #12]
                                            CAN_NONE);                 // Rx Channel is N/A
        }
        // else Callback container is null, don't call
    }
    return bb_elem_compute_minimum_offset_ticks(bbElement, minimumOffsetTicks);
}
  4002e0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4002e2:	4298      	cmp	r0, r3
  4002e4:	bf28      	it	cs
  4002e6:	4618      	movcs	r0, r3
  4002e8:	b003      	add	sp, #12
  4002ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        const uint32_t period_ticks = BB_PORT_MS_TO_TICKS(msgInfo->period_ms);
  4002ec:	68aa      	ldr	r2, [r5, #8]
  4002ee:	23c8      	movs	r3, #200	; 0xc8
  4002f0:	fb03 f302 	mul.w	r3, r3, r2
  4002f4:	4a15      	ldr	r2, [pc, #84]	; (40034c <bb_tx_proc_tx_message+0x88>)
  4002f6:	fba2 2303 	umull	r2, r3, r2, r3
  4002fa:	099b      	lsrs	r3, r3, #6
    return elapsedTicks - bbElement->wakeupOffset;
  4002fc:	68e2      	ldr	r2, [r4, #12]
  4002fe:	1abf      	subs	r7, r7, r2
        bb_elem_set_wakeup_offset(bbElement, period_ticks - (overflow_ticks % period_ticks));
  400300:	fbb7 f2f3 	udiv	r2, r7, r3
  400304:	fb03 7712 	mls	r7, r3, r2, r7
  400308:	1bdb      	subs	r3, r3, r7
    bbElement->wakeupOffset = wakeupOffset;
  40030a:	60e3      	str	r3, [r4, #12]
        uint32_t tx_data[2] = {0, 0};
  40030c:	2300      	movs	r3, #0
  40030e:	9300      	str	r3, [sp, #0]
  400310:	9301      	str	r3, [sp, #4]
        bb_elem_get_data_for_can(bbElement, &tx_data[0], &tx_data[1]);
  400312:	aa01      	add	r2, sp, #4
  400314:	4669      	mov	r1, sp
  400316:	4620      	mov	r0, r4
  400318:	4b0d      	ldr	r3, [pc, #52]	; (400350 <bb_tx_proc_tx_message+0x8c>)
  40031a:	4798      	blx	r3
        const ICANTx_T * const transmitter = &bbTxProc->transmitters[canChannel];
  40031c:	6873      	ldr	r3, [r6, #4]
  40031e:	9a08      	ldr	r2, [sp, #32]
  400320:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
        transmitter->transmitFn(transmitter->context, msgInfo->id, (uint8_t *)(&tx_data[0]), (uint8_t)msgInfo->numBytes);
  400324:	f853 6032 	ldr.w	r6, [r3, r2, lsl #3]
  400328:	7b2b      	ldrb	r3, [r5, #12]
  40032a:	466a      	mov	r2, sp
  40032c:	6829      	ldr	r1, [r5, #0]
  40032e:	6840      	ldr	r0, [r0, #4]
  400330:	47b0      	blx	r6
        if (canElement->callback.callbackFn != NULL)
  400332:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  400334:	2b00      	cmp	r3, #0
  400336:	d0d2      	beq.n	4002de <bb_tx_proc_tx_message+0x1a>
            canElement->callback.callbackFn(canElement->callback.callbackCtx,
  400338:	2200      	movs	r2, #0
  40033a:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
  40033e:	6b68      	ldr	r0, [r5, #52]	; 0x34
  400340:	4798      	blx	r3
  400342:	e7cc      	b.n	4002de <bb_tx_proc_tx_message+0x1a>
  400344:	00400499 	.word	0x00400499
  400348:	004001d5 	.word	0x004001d5
  40034c:	10624dd3 	.word	0x10624dd3
  400350:	004001e9 	.word	0x004001e9

00400354 <bb_tx_proc_process_tx>:
{
  400354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400358:	b087      	sub	sp, #28
  40035a:	4606      	mov	r6, r0
    const uint32_t elapsedTicks = currTimestampTicks - prevTimestampTicks;
  40035c:	1a8b      	subs	r3, r1, r2
  40035e:	9305      	str	r3, [sp, #20]
    uint32_t minimumOffsetTicks = bbTxProc->maxDelay;
  400360:	f8d0 9000 	ldr.w	r9, [r0]
    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  400364:	2700      	movs	r7, #0
        const CANElement_T * canElement = can_elem_get_can_elem_idx((CANElementIndex_T)i);
  400366:	f8df b05c 	ldr.w	fp, [pc, #92]	; 4003c4 <bb_tx_proc_process_tx+0x70>
                    minimumOffsetTicks = bb_tx_proc_tx_message(i, elapsedTicks, canElement, bbTxProc, canChannel, maskTxChannel, minimumOffsetTicks);
  40036a:	f8df a05c 	ldr.w	sl, [pc, #92]	; 4003c8 <bb_tx_proc_process_tx+0x74>
  40036e:	e017      	b.n	4003a0 <bb_tx_proc_process_tx+0x4c>
            for(uint32_t canChannel = 0U; canChannel < bbTxProc->numTransmitters; canChannel++)
  400370:	3401      	adds	r4, #1
  400372:	68b3      	ldr	r3, [r6, #8]
  400374:	42a3      	cmp	r3, r4
  400376:	d910      	bls.n	40039a <bb_tx_proc_process_tx+0x46>
                const uint32_t maskTxChannel = (uint32_t)1U << canChannel;
  400378:	fa08 f304 	lsl.w	r3, r8, r4
                if (((uint32_t)canElement->txChan & maskTxChannel) > 0UL)
  40037c:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
  400380:	421a      	tst	r2, r3
  400382:	d0f5      	beq.n	400370 <bb_tx_proc_process_tx+0x1c>
                    minimumOffsetTicks = bb_tx_proc_tx_message(i, elapsedTicks, canElement, bbTxProc, canChannel, maskTxChannel, minimumOffsetTicks);
  400384:	f8cd 9008 	str.w	r9, [sp, #8]
  400388:	9301      	str	r3, [sp, #4]
  40038a:	9400      	str	r4, [sp, #0]
  40038c:	4633      	mov	r3, r6
  40038e:	462a      	mov	r2, r5
  400390:	9905      	ldr	r1, [sp, #20]
  400392:	4638      	mov	r0, r7
  400394:	47d0      	blx	sl
  400396:	4681      	mov	r9, r0
  400398:	e7ea      	b.n	400370 <bb_tx_proc_process_tx+0x1c>
    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  40039a:	3701      	adds	r7, #1
  40039c:	2f05      	cmp	r7, #5
  40039e:	d00d      	beq.n	4003bc <bb_tx_proc_process_tx+0x68>
        const CANElement_T * canElement = can_elem_get_can_elem_idx((CANElementIndex_T)i);
  4003a0:	b2f8      	uxtb	r0, r7
  4003a2:	47d8      	blx	fp
  4003a4:	4605      	mov	r5, r0
        if ((uint32_t)canElement->txChan > 0UL)
  4003a6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  4003aa:	2b00      	cmp	r3, #0
  4003ac:	d0f5      	beq.n	40039a <bb_tx_proc_process_tx+0x46>
            for(uint32_t canChannel = 0U; canChannel < bbTxProc->numTransmitters; canChannel++)
  4003ae:	68b3      	ldr	r3, [r6, #8]
  4003b0:	2b00      	cmp	r3, #0
  4003b2:	d0f2      	beq.n	40039a <bb_tx_proc_process_tx+0x46>
  4003b4:	2400      	movs	r4, #0
                const uint32_t maskTxChannel = (uint32_t)1U << canChannel;
  4003b6:	f04f 0801 	mov.w	r8, #1
  4003ba:	e7dd      	b.n	400378 <bb_tx_proc_process_tx+0x24>
}
  4003bc:	4648      	mov	r0, r9
  4003be:	b007      	add	sp, #28
  4003c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4003c4:	004003cd 	.word	0x004003cd
  4003c8:	004002c5 	.word	0x004002c5

004003cc <can_elem_get_can_elem_idx>:
 *
 * @return A pointer to the can element struct with the given index
 */
const CANElement_T * can_elem_get_can_elem_idx(const CANElementIndex_T idx)
{
    return &can_spec_can_element_list[idx];
  4003cc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
}
  4003d0:	4b01      	ldr	r3, [pc, #4]	; (4003d8 <can_elem_get_can_elem_idx+0xc>)
  4003d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4003d6:	4770      	bx	lr
  4003d8:	00404b2c 	.word	0x00404b2c

004003dc <can_elem_get_can_msg_info_idx>:
 *
 * @return A pointer to the can msg info struct with the given index
 */
const CANMsgInfo_T * can_elem_get_can_msg_info_idx(const CANElementIndex_T idx)
{
    return &can_spec_can_element_list[idx].canMsgInfo;
  4003dc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
}
  4003e0:	4b01      	ldr	r3, [pc, #4]	; (4003e8 <can_elem_get_can_msg_info_idx+0xc>)
  4003e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4003e6:	4770      	bx	lr
  4003e8:	00404b2c 	.word	0x00404b2c

004003ec <bb_port_inc_ticks>:
#ifdef BB_UNIT_TEST
static int fakeTick = 0;

void bb_port_inc_ticks(uint32_t ticks)
{
    fakeTick += ticks;
  4003ec:	4a02      	ldr	r2, [pc, #8]	; (4003f8 <bb_port_inc_ticks+0xc>)
  4003ee:	6813      	ldr	r3, [r2, #0]
  4003f0:	4418      	add	r0, r3
  4003f2:	6010      	str	r0, [r2, #0]
  4003f4:	4770      	bx	lr
  4003f6:	bf00      	nop
  4003f8:	204009dc 	.word	0x204009dc

004003fc <bb_port_get_current_ticks>:
 * g_tx_tick_count_ms.
 * @return the current time in ticks
 */
uint32_t bb_port_get_current_ticks(void)
{
  return g_tx_tick_count_ms;
  4003fc:	4b01      	ldr	r3, [pc, #4]	; (400404 <bb_port_get_current_ticks+0x8>)
  4003fe:	6818      	ldr	r0, [r3, #0]
}
  400400:	4770      	bx	lr
  400402:	bf00      	nop
  400404:	20401430 	.word	0x20401430

00400408 <bb_port_set_data_direct8>:
    const uint32_t byteOffsetInWord = (uint32_t)(byteIndexInElement) % 4U;
    const uint32_t wordIndex = (uint32_t)(byteIndexInElement) / 4U;

    volatile uint8_t * const dest8Ptr = (volatile uint8_t *)(&element->dataWords[wordIndex]) + byteOffsetInWord;

    *dest8Ptr = data8;
  400408:	5481      	strb	r1, [r0, r2]
  40040a:	4770      	bx	lr

0040040c <bb_port_set_data_direct16>:
 * perform an atomic write to the internal blackboard element storage.
 *
 * @see BlackboardPort.h for details on this method.
 */
void bb_port_set_data_direct16(BlackboardElement_T * element, const uint16_t data16, const uint8_t byteIndexInElement)
{
  40040c:	b510      	push	{r4, lr}
    const uint32_t byteOffsetInWord = (uint32_t)(byteIndexInElement) % 4U;
    const uint32_t wordIndex = (uint32_t)(byteIndexInElement) / 4U;

    // Dereferencing a u16 pointer with a byte offset.  Make sure it is u16-aligned within the
    // element.
    SLI_ASSERT((byteOffsetInWord % 2U) == 0);
  40040e:	f012 0f01 	tst.w	r2, #1
  400412:	d106      	bne.n	400422 <bb_port_set_data_direct16+0x16>
  400414:	f002 0303 	and.w	r3, r2, #3
  400418:	0894      	lsrs	r4, r2, #2
    volatile uint16_t * const dest16Ptr = (volatile uint16_t *)(((volatile uint8_t *)&element->dataWords[wordIndex]) + byteOffsetInWord);
  40041a:	eb03 0384 	add.w	r3, r3, r4, lsl #2

    *dest16Ptr = data16;
  40041e:	52c1      	strh	r1, [r0, r3]
  400420:	bd10      	pop	{r4, pc}
    SLI_ASSERT((byteOffsetInWord % 2U) == 0);
  400422:	4b03      	ldr	r3, [pc, #12]	; (400430 <bb_port_set_data_direct16+0x24>)
  400424:	4a03      	ldr	r2, [pc, #12]	; (400434 <bb_port_set_data_direct16+0x28>)
  400426:	2176      	movs	r1, #118	; 0x76
  400428:	4803      	ldr	r0, [pc, #12]	; (400438 <bb_port_set_data_direct16+0x2c>)
  40042a:	4c04      	ldr	r4, [pc, #16]	; (40043c <bb_port_set_data_direct16+0x30>)
  40042c:	47a0      	blx	r4
  40042e:	bf00      	nop
  400430:	00404adc 	.word	0x00404adc
  400434:	00404a88 	.word	0x00404a88
  400438:	00404afc 	.word	0x00404afc
  40043c:	004019f5 	.word	0x004019f5

00400440 <bb_port_set_data_direct32>:
    const uint32_t byteOffsetInWord = (uint32_t)(byteIndexInElement) % 4U;
    const uint32_t wordIndex = (uint32_t)(byteIndexInElement) / 4U;

    // Dereferencing a u32 pointer with a byte offset.  Make sure it is u32-aligned within the
    // element.
    SLI_ASSERT(byteOffsetInWord == 0);
  400440:	f012 0f03 	tst.w	r2, #3
  400444:	d103      	bne.n	40044e <bb_port_set_data_direct32+0xe>
  400446:	0893      	lsrs	r3, r2, #2
    volatile uint32_t * const dest32Ptr = (volatile uint32_t *)(&element->dataWords[wordIndex]);

    *dest32Ptr = data32;
  400448:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
  40044c:	4770      	bx	lr
{
  40044e:	b510      	push	{r4, lr}
    SLI_ASSERT(byteOffsetInWord == 0);
  400450:	4b02      	ldr	r3, [pc, #8]	; (40045c <bb_port_set_data_direct32+0x1c>)
  400452:	4a03      	ldr	r2, [pc, #12]	; (400460 <bb_port_set_data_direct32+0x20>)
  400454:	218a      	movs	r1, #138	; 0x8a
  400456:	4803      	ldr	r0, [pc, #12]	; (400464 <bb_port_set_data_direct32+0x24>)
  400458:	4c03      	ldr	r4, [pc, #12]	; (400468 <bb_port_set_data_direct32+0x28>)
  40045a:	47a0      	blx	r4
  40045c:	00404b14 	.word	0x00404b14
  400460:	00404aa4 	.word	0x00404aa4
  400464:	00404afc 	.word	0x00404afc
  400468:	004019f5 	.word	0x004019f5

0040046c <bb_port_get_data_direct32>:
    const uint32_t byteOffsetInWord = (uint32_t)(byteIndexInElement) % 4U;
    const uint32_t wordIndex = (uint32_t)(byteIndexInElement) / 4U;

    // Dereferencing a u32 pointer with a byte offset.  Make sure it is u32-aligned within the
    // element.
    SLI_ASSERT(byteOffsetInWord == 0);
  40046c:	f011 0f03 	tst.w	r1, #3
  400470:	d103      	bne.n	40047a <bb_port_get_data_direct32+0xe>
  400472:	088b      	lsrs	r3, r1, #2
    volatile uint32_t * const src32Ptr = (volatile uint32_t *)(&element->dataWords[wordIndex]);

    return *src32Ptr;
  400474:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
  400478:	4770      	bx	lr
{
  40047a:	b510      	push	{r4, lr}
    SLI_ASSERT(byteOffsetInWord == 0);
  40047c:	4b02      	ldr	r3, [pc, #8]	; (400488 <bb_port_get_data_direct32+0x1c>)
  40047e:	4a03      	ldr	r2, [pc, #12]	; (40048c <bb_port_get_data_direct32+0x20>)
  400480:	21c3      	movs	r1, #195	; 0xc3
  400482:	4803      	ldr	r0, [pc, #12]	; (400490 <bb_port_get_data_direct32+0x24>)
  400484:	4c03      	ldr	r4, [pc, #12]	; (400494 <bb_port_get_data_direct32+0x28>)
  400486:	47a0      	blx	r4
  400488:	00404b14 	.word	0x00404b14
  40048c:	00404ac0 	.word	0x00404ac0
  400490:	00404afc 	.word	0x00404afc
  400494:	004019f5 	.word	0x004019f5

00400498 <bb_get_element>:
 */
BlackboardElement_T * bb_get_element(const CANElementIndex_T idx)
{
    static Blackboard_T theBB;
    return &theBB.elements[idx];
}
  400498:	4b01      	ldr	r3, [pc, #4]	; (4004a0 <bb_get_element+0x8>)
  40049a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  40049e:	4770      	bx	lr
  4004a0:	204009e0 	.word	0x204009e0

004004a4 <bb_set_SCM_motor1MaxSpeed>:
 * @brief Sets the SCM_motor1MaxSpeed value within the blackboard.
 * @see bb_get_SCM_motor1MaxSpeed for a description of this property.
 * @param value int16_t in step/s
 */
void bb_set_SCM_motor1MaxSpeed(const float32_T value)
{
  4004a4:	b500      	push	{lr}
  4004a6:	ed2d 8b02 	vpush	{d8}
  4004aa:	b083      	sub	sp, #12
  4004ac:	ee08 0a10 	vmov	s16, r0
    const CANMsgInfo_T * canMsgInfo = can_elem_get_can_msg_info_idx(CAN_ELEM_SCM_Motor1Params1);
  4004b0:	2001      	movs	r0, #1
  4004b2:	4b0a      	ldr	r3, [pc, #40]	; (4004dc <bb_set_SCM_motor1MaxSpeed+0x38>)
  4004b4:	4798      	blx	r3
static inline int16_t bb_utils_floatToFixed16(const float32_T fvalue, const uint16_t bits)
{
    const uint32_t shift = 1UL << bits;
    const float32_T fshift = (float32_T)(shift);
    const float32_T fproduct = fvalue * fshift;
    return (int16_t)(fproduct);
  4004b6:	eef0 7a48 	vmov.f32	s15, s16
  4004ba:	eefe 7acf 	vcvt.s32.f32	s15, s15, #2
  4004be:	edcd 7a01 	vstr	s15, [sp, #4]
    BlackboardElement_T * bbElem = bb_get_element(CAN_ELEM_SCM_Motor1Params1);
    const CANDataInfo_T * dataInfo = &canMsgInfo->data_info[2];
    bb_elem_set_int16_data(bbElem, bb_utils_floatToFixed16(value, 2U), dataInfo->start_byte);
  4004c2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
  4004c6:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
  4004ca:	4805      	ldr	r0, [pc, #20]	; (4004e0 <bb_set_SCM_motor1MaxSpeed+0x3c>)
  4004cc:	4b05      	ldr	r3, [pc, #20]	; (4004e4 <bb_set_SCM_motor1MaxSpeed+0x40>)
  4004ce:	4798      	blx	r3
}
  4004d0:	b003      	add	sp, #12
  4004d2:	ecbd 8b02 	vpop	{d8}
  4004d6:	f85d fb04 	ldr.w	pc, [sp], #4
  4004da:	bf00      	nop
  4004dc:	004003dd 	.word	0x004003dd
  4004e0:	204009f0 	.word	0x204009f0
  4004e4:	00400291 	.word	0x00400291

004004e8 <bb_set_SCM_motor1MinSpeed>:
 * @brief Sets the SCM_motor1MinSpeed value within the blackboard.
 * @see bb_get_SCM_motor1MinSpeed for a description of this property.
 * @param value int16_t in step/s
 */
void bb_set_SCM_motor1MinSpeed(const float32_T value)
{
  4004e8:	b500      	push	{lr}
  4004ea:	ed2d 8b02 	vpush	{d8}
  4004ee:	b083      	sub	sp, #12
  4004f0:	ee08 0a10 	vmov	s16, r0
    const CANMsgInfo_T * canMsgInfo = can_elem_get_can_msg_info_idx(CAN_ELEM_SCM_Motor1Params1);
  4004f4:	2001      	movs	r0, #1
  4004f6:	4b0a      	ldr	r3, [pc, #40]	; (400520 <bb_set_SCM_motor1MinSpeed+0x38>)
  4004f8:	4798      	blx	r3
  4004fa:	eef0 7a48 	vmov.f32	s15, s16
  4004fe:	eefe 7acf 	vcvt.s32.f32	s15, s15, #2
  400502:	edcd 7a01 	vstr	s15, [sp, #4]
    BlackboardElement_T * bbElem = bb_get_element(CAN_ELEM_SCM_Motor1Params1);
    const CANDataInfo_T * dataInfo = &canMsgInfo->data_info[3];
    bb_elem_set_int16_data(bbElem, bb_utils_floatToFixed16(value, 2U), dataInfo->start_byte);
  400506:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
  40050a:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
  40050e:	4805      	ldr	r0, [pc, #20]	; (400524 <bb_set_SCM_motor1MinSpeed+0x3c>)
  400510:	4b05      	ldr	r3, [pc, #20]	; (400528 <bb_set_SCM_motor1MinSpeed+0x40>)
  400512:	4798      	blx	r3
}
  400514:	b003      	add	sp, #12
  400516:	ecbd 8b02 	vpop	{d8}
  40051a:	f85d fb04 	ldr.w	pc, [sp], #4
  40051e:	bf00      	nop
  400520:	004003dd 	.word	0x004003dd
  400524:	204009f0 	.word	0x204009f0
  400528:	00400291 	.word	0x00400291

0040052c <bb_set_SCM_Motor1Control>:
 * @brief Sets the SCM_Motor1Control value within the blackboard.
 * @see bb_get_SCM_Motor1Control for a description of this property.
 * @param value int8_t in steps
 */
void bb_set_SCM_Motor1Control(const int8_t value)
{
  40052c:	b510      	push	{r4, lr}
  40052e:	4604      	mov	r4, r0
    const CANMsgInfo_T * canMsgInfo = can_elem_get_can_msg_info_idx(CAN_ELEM_SCM_Motor1Control);
  400530:	2002      	movs	r0, #2
  400532:	4b04      	ldr	r3, [pc, #16]	; (400544 <bb_set_SCM_Motor1Control+0x18>)
  400534:	4798      	blx	r3
    BlackboardElement_T * bbElem = bb_get_element(CAN_ELEM_SCM_Motor1Control);
    const CANDataInfo_T * dataInfo = &canMsgInfo->data_info[0];
    bb_elem_set_int8_data(bbElem, value, dataInfo->start_byte);
  400536:	7d42      	ldrb	r2, [r0, #21]
  400538:	4621      	mov	r1, r4
  40053a:	4803      	ldr	r0, [pc, #12]	; (400548 <bb_set_SCM_Motor1Control+0x1c>)
  40053c:	4b03      	ldr	r3, [pc, #12]	; (40054c <bb_set_SCM_Motor1Control+0x20>)
  40053e:	4798      	blx	r3
  400540:	bd10      	pop	{r4, pc}
  400542:	bf00      	nop
  400544:	004003dd 	.word	0x004003dd
  400548:	20400a00 	.word	0x20400a00
  40054c:	00400269 	.word	0x00400269

00400550 <testSCMCallback>:
#include <stdio.h>

static int hackyStickyCounter = 37;

void testSCMCallback(void * SCM_EVENT_FOO, CanChannel_T rxChan, CanChannel_T txChan)
{
  400550:	b530      	push	{r4, r5, lr}
  400552:	b083      	sub	sp, #12
    SCMEvent_T scmEvent = (SCMEvent_T)(uint32_t)(uint64_t)(SCM_EVENT_FOO);
    printf("testCallback: SCM_EVENT_FOO=%d, rxChan=%d, txChan=%d, counter=%d\n", scmEvent, rxChan, txChan, hackyStickyCounter++);
  400554:	4c06      	ldr	r4, [pc, #24]	; (400570 <testSCMCallback+0x20>)
  400556:	6823      	ldr	r3, [r4, #0]
  400558:	1c5d      	adds	r5, r3, #1
  40055a:	6025      	str	r5, [r4, #0]
  40055c:	9300      	str	r3, [sp, #0]
  40055e:	4613      	mov	r3, r2
  400560:	460a      	mov	r2, r1
  400562:	b2c1      	uxtb	r1, r0
  400564:	4803      	ldr	r0, [pc, #12]	; (400574 <testSCMCallback+0x24>)
  400566:	4c04      	ldr	r4, [pc, #16]	; (400578 <testSCMCallback+0x28>)
  400568:	47a0      	blx	r4
}
  40056a:	b003      	add	sp, #12
  40056c:	bd30      	pop	{r4, r5, pc}
  40056e:	bf00      	nop
  400570:	20400000 	.word	0x20400000
  400574:	00404d44 	.word	0x00404d44
  400578:	00401aa9 	.word	0x00401aa9

0040057c <candriver_send>:
 *  @param data_byte_length - the number of bytes sending
 *
 *  @post A message is sent if the CAN was not busy at the time of sending.
 */
bool candriver_send(uint32_t msg_id, uint8_t *msg_data, uint32_t data_byte_length)
{
  40057c:	b508      	push	{r3, lr}
  mcan_send_standard_message(msg_id, msg_data,
  40057e:	4b01      	ldr	r3, [pc, #4]	; (400584 <candriver_send+0x8>)
  400580:	4798      	blx	r3
					data_byte_length); 
  // return result;
  400582:	bd08      	pop	{r3, pc}
  400584:	00401631 	.word	0x00401631

00400588 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400588:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  40058a:	4810      	ldr	r0, [pc, #64]	; (4005cc <sysclk_init+0x44>)
  40058c:	4b10      	ldr	r3, [pc, #64]	; (4005d0 <sysclk_init+0x48>)
  40058e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400590:	213e      	movs	r1, #62	; 0x3e
  400592:	2000      	movs	r0, #0
  400594:	4b0f      	ldr	r3, [pc, #60]	; (4005d4 <sysclk_init+0x4c>)
  400596:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400598:	4c0f      	ldr	r4, [pc, #60]	; (4005d8 <sysclk_init+0x50>)
  40059a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40059c:	2800      	cmp	r0, #0
  40059e:	d0fc      	beq.n	40059a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4005a0:	4b0e      	ldr	r3, [pc, #56]	; (4005dc <sysclk_init+0x54>)
  4005a2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4005a4:	4a0e      	ldr	r2, [pc, #56]	; (4005e0 <sysclk_init+0x58>)
  4005a6:	4b0f      	ldr	r3, [pc, #60]	; (4005e4 <sysclk_init+0x5c>)
  4005a8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4005aa:	4c0f      	ldr	r4, [pc, #60]	; (4005e8 <sysclk_init+0x60>)
  4005ac:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4005ae:	2800      	cmp	r0, #0
  4005b0:	d0fc      	beq.n	4005ac <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4005b2:	2002      	movs	r0, #2
  4005b4:	4b0d      	ldr	r3, [pc, #52]	; (4005ec <sysclk_init+0x64>)
  4005b6:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4005b8:	2000      	movs	r0, #0
  4005ba:	4b0d      	ldr	r3, [pc, #52]	; (4005f0 <sysclk_init+0x68>)
  4005bc:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4005be:	4b0d      	ldr	r3, [pc, #52]	; (4005f4 <sysclk_init+0x6c>)
  4005c0:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  4005c2:	4802      	ldr	r0, [pc, #8]	; (4005cc <sysclk_init+0x44>)
  4005c4:	4b02      	ldr	r3, [pc, #8]	; (4005d0 <sysclk_init+0x48>)
  4005c6:	4798      	blx	r3
  4005c8:	bd10      	pop	{r4, pc}
  4005ca:	bf00      	nop
  4005cc:	08f0d180 	.word	0x08f0d180
  4005d0:	004011ed 	.word	0x004011ed
  4005d4:	00400dd9 	.word	0x00400dd9
  4005d8:	00400e2d 	.word	0x00400e2d
  4005dc:	00400e3d 	.word	0x00400e3d
  4005e0:	20183f01 	.word	0x20183f01
  4005e4:	400e0600 	.word	0x400e0600
  4005e8:	00400e4d 	.word	0x00400e4d
  4005ec:	00400d3d 	.word	0x00400d3d
  4005f0:	00400d75 	.word	0x00400d75
  4005f4:	004010e1 	.word	0x004010e1

004005f8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4005f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4005fc:	b980      	cbnz	r0, 400620 <_read+0x28>
  4005fe:	460c      	mov	r4, r1
  400600:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400602:	2a00      	cmp	r2, #0
  400604:	dd0f      	ble.n	400626 <_read+0x2e>
  400606:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400608:	4e08      	ldr	r6, [pc, #32]	; (40062c <_read+0x34>)
  40060a:	4d09      	ldr	r5, [pc, #36]	; (400630 <_read+0x38>)
  40060c:	6830      	ldr	r0, [r6, #0]
  40060e:	4621      	mov	r1, r4
  400610:	682b      	ldr	r3, [r5, #0]
  400612:	4798      	blx	r3
		ptr++;
  400614:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400616:	42bc      	cmp	r4, r7
  400618:	d1f8      	bne.n	40060c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40061a:	4640      	mov	r0, r8
  40061c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400620:	f04f 38ff 	mov.w	r8, #4294967295
  400624:	e7f9      	b.n	40061a <_read+0x22>
	for (; len > 0; --len) {
  400626:	4680      	mov	r8, r0
  400628:	e7f7      	b.n	40061a <_read+0x22>
  40062a:	bf00      	nop
  40062c:	204014a8 	.word	0x204014a8
  400630:	204014a0 	.word	0x204014a0

00400634 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400634:	3801      	subs	r0, #1
  400636:	2802      	cmp	r0, #2
  400638:	d815      	bhi.n	400666 <_write+0x32>
{
  40063a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40063e:	460e      	mov	r6, r1
  400640:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400642:	b19a      	cbz	r2, 40066c <_write+0x38>
  400644:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400646:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400680 <_write+0x4c>
  40064a:	4f0c      	ldr	r7, [pc, #48]	; (40067c <_write+0x48>)
  40064c:	f8d8 0000 	ldr.w	r0, [r8]
  400650:	f815 1b01 	ldrb.w	r1, [r5], #1
  400654:	683b      	ldr	r3, [r7, #0]
  400656:	4798      	blx	r3
  400658:	2800      	cmp	r0, #0
  40065a:	db0a      	blt.n	400672 <_write+0x3e>
  40065c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40065e:	3c01      	subs	r4, #1
  400660:	d1f4      	bne.n	40064c <_write+0x18>
  400662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400666:	f04f 30ff 	mov.w	r0, #4294967295
  40066a:	4770      	bx	lr
	for (; len != 0; --len) {
  40066c:	4610      	mov	r0, r2
  40066e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400672:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40067a:	bf00      	nop
  40067c:	204014a4 	.word	0x204014a4
  400680:	204014a8 	.word	0x204014a8

00400684 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400684:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400686:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40068a:	4b63      	ldr	r3, [pc, #396]	; (400818 <board_init+0x194>)
  40068c:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40068e:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
  400692:	4a62      	ldr	r2, [pc, #392]	; (40081c <board_init+0x198>)
  400694:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400696:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  40069a:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  40069c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4006a0:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4006a4:	4b5e      	ldr	r3, [pc, #376]	; (400820 <board_init+0x19c>)
  4006a6:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4006aa:	f022 0201 	bic.w	r2, r2, #1
  4006ae:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4006b2:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4006b6:	f022 0201 	bic.w	r2, r2, #1
  4006ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  4006be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4006c2:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4006c6:	200a      	movs	r0, #10
  4006c8:	4c56      	ldr	r4, [pc, #344]	; (400824 <board_init+0x1a0>)
  4006ca:	47a0      	blx	r4
  4006cc:	200b      	movs	r0, #11
  4006ce:	47a0      	blx	r4
  4006d0:	200c      	movs	r0, #12
  4006d2:	47a0      	blx	r4
  4006d4:	2010      	movs	r0, #16
  4006d6:	47a0      	blx	r4
  4006d8:	2011      	movs	r0, #17
  4006da:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4006dc:	4b52      	ldr	r3, [pc, #328]	; (400828 <board_init+0x1a4>)
  4006de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4006e2:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4006e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4006e8:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4006ea:	4a50      	ldr	r2, [pc, #320]	; (40082c <board_init+0x1a8>)
  4006ec:	f44f 7100 	mov.w	r1, #512	; 0x200
  4006f0:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4006f2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4006f6:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4006f8:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4006fa:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4006fe:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400700:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400704:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400706:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  400708:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40070c:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40070e:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  400712:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400714:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400716:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  40071a:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40071c:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400720:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400724:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400728:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  40072c:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40072e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400732:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400734:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400736:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40073a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40073c:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  400740:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400742:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400744:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  400748:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40074a:	6059      	str	r1, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40074c:	4938      	ldr	r1, [pc, #224]	; (400830 <board_init+0x1ac>)
  40074e:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
  400752:	f043 0310 	orr.w	r3, r3, #16
  400756:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
		base->PIO_PUDR = mask;
  40075a:	4b36      	ldr	r3, [pc, #216]	; (400834 <board_init+0x1b0>)
  40075c:	2110      	movs	r1, #16
  40075e:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400760:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400764:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400766:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400768:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40076c:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40076e:	4308      	orrs	r0, r1
  400770:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400772:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400774:	4308      	orrs	r0, r1
  400776:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400778:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  40077a:	2108      	movs	r1, #8
  40077c:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40077e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400782:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400784:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400786:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40078a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40078c:	f020 0008 	bic.w	r0, r0, #8
  400790:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400792:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400794:	f020 0008 	bic.w	r0, r0, #8
  400798:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40079a:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  40079c:	2104      	movs	r1, #4
  40079e:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4007a0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4007a4:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4007a6:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4007a8:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4007ac:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4007ae:	f020 0004 	bic.w	r0, r0, #4
  4007b2:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4007b4:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4007b6:	f020 0004 	bic.w	r0, r0, #4
  4007ba:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4007bc:	6059      	str	r1, [r3, #4]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4007be:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  4007c2:	2101      	movs	r1, #1
  4007c4:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4007c6:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4007ca:	2102      	movs	r1, #2
  4007cc:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4007ce:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  4007d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4007d6:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4007d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4007dc:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  4007de:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4007e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4007e4:	6f11      	ldr	r1, [r2, #112]	; 0x70
  4007e6:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  4007ea:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4007ec:	6f51      	ldr	r1, [r2, #116]	; 0x74
  4007ee:	4319      	orrs	r1, r3
  4007f0:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4007f2:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  4007f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  4007f8:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4007fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4007fe:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400800:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400802:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400806:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400808:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  40080c:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40080e:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400810:	4319      	orrs	r1, r3
  400812:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400814:	6053      	str	r3, [r2, #4]
  400816:	bd10      	pop	{r4, pc}
  400818:	400e1850 	.word	0x400e1850
  40081c:	5a00080c 	.word	0x5a00080c
  400820:	e000ed00 	.word	0xe000ed00
  400824:	00400e5d 	.word	0x00400e5d
  400828:	400e0e00 	.word	0x400e0e00
  40082c:	400e1200 	.word	0x400e1200
  400830:	40088000 	.word	0x40088000
  400834:	400e1000 	.word	0x400e1000

00400838 <_mcan_enable_peripheral_clock>:
 *
 * \param module_inst  MCAN instance
 *
 */
static void _mcan_enable_peripheral_clock(struct mcan_module *const module_inst)
{
  400838:	b508      	push	{r3, lr}
	if (module_inst->hw == MCAN0) {
  40083a:	6803      	ldr	r3, [r0, #0]
  40083c:	4a07      	ldr	r2, [pc, #28]	; (40085c <_mcan_enable_peripheral_clock+0x24>)
  40083e:	4293      	cmp	r3, r2
  400840:	d003      	beq.n	40084a <_mcan_enable_peripheral_clock+0x12>
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN0);
	} else if (module_inst->hw == MCAN1) {
  400842:	4a07      	ldr	r2, [pc, #28]	; (400860 <_mcan_enable_peripheral_clock+0x28>)
  400844:	4293      	cmp	r3, r2
  400846:	d004      	beq.n	400852 <_mcan_enable_peripheral_clock+0x1a>
  400848:	bd08      	pop	{r3, pc}
		pmc_enable_periph_clk(ID_MCAN0);
  40084a:	2023      	movs	r0, #35	; 0x23
  40084c:	4b05      	ldr	r3, [pc, #20]	; (400864 <_mcan_enable_peripheral_clock+0x2c>)
  40084e:	4798      	blx	r3
  400850:	bd08      	pop	{r3, pc}
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN1);
  400852:	2025      	movs	r0, #37	; 0x25
  400854:	4b03      	ldr	r3, [pc, #12]	; (400864 <_mcan_enable_peripheral_clock+0x2c>)
  400856:	4798      	blx	r3
	}
}
  400858:	e7f6      	b.n	400848 <_mcan_enable_peripheral_clock+0x10>
  40085a:	bf00      	nop
  40085c:	40030000 	.word	0x40030000
  400860:	40034000 	.word	0x40034000
  400864:	00400e5d 	.word	0x00400e5d

00400868 <mcan_init>:
 * \param hw  Base address of MCAN.
 * \param config default configuration .
 */
void mcan_init(struct mcan_module *const module_inst, Mcan *hw,
		struct mcan_config *config)
{
  400868:	b570      	push	{r4, r5, r6, lr}
  40086a:	4606      	mov	r6, r0
  40086c:	460c      	mov	r4, r1
  40086e:	4615      	mov	r5, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
  400870:	6001      	str	r1, [r0, #0]

	pmc_disable_pck(PMC_PCK_5);
  400872:	2005      	movs	r0, #5
  400874:	4b82      	ldr	r3, [pc, #520]	; (400a80 <mcan_init+0x218>)
  400876:	4798      	blx	r3

	pmc_switch_pck_to_pllack(PMC_PCK_5, PMC_PCK_PRES(9));
  400878:	2190      	movs	r1, #144	; 0x90
  40087a:	2005      	movs	r0, #5
  40087c:	4b81      	ldr	r3, [pc, #516]	; (400a84 <mcan_init+0x21c>)
  40087e:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_5);
  400880:	2005      	movs	r0, #5
  400882:	4b81      	ldr	r3, [pc, #516]	; (400a88 <mcan_init+0x220>)
  400884:	4798      	blx	r3

	/* Enable peripheral clock */
	_mcan_enable_peripheral_clock(module_inst);
  400886:	4630      	mov	r0, r6
  400888:	4b80      	ldr	r3, [pc, #512]	; (400a8c <mcan_init+0x224>)
  40088a:	4798      	blx	r3


	/* Configuration Change Enable. */
	hw->MCAN_CCCR |= MCAN_CCCR_CCE;
  40088c:	69a3      	ldr	r3, [r4, #24]
  40088e:	f043 0302 	orr.w	r3, r3, #2
  400892:	61a3      	str	r3, [r4, #24]
	if (hw == MCAN0) {
  400894:	4b7e      	ldr	r3, [pc, #504]	; (400a90 <mcan_init+0x228>)
  400896:	429c      	cmp	r4, r3
  400898:	f000 809c 	beq.w	4009d4 <mcan_init+0x16c>
	} else if (hw == MCAN1) {
  40089c:	4b7d      	ldr	r3, [pc, #500]	; (400a94 <mcan_init+0x22c>)
  40089e:	429c      	cmp	r4, r3
  4008a0:	f000 80c3 	beq.w	400a2a <mcan_init+0x1c2>
		hw->MCAN_RXESC = MCAN_RXESC_RBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4) |
  4008a4:	2300      	movs	r3, #0
  4008a6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		hw->MCAN_TXESC = MCAN_TXESC_TBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4);
  4008aa:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	hw->MCAN_NBTP = MCAN_NBTP_NBRP(CONF_MCAN_NBTP_NBRP_VALUE) |
  4008ae:	4b7a      	ldr	r3, [pc, #488]	; (400a98 <mcan_init+0x230>)
  4008b0:	61e3      	str	r3, [r4, #28]
	hw->MCAN_DBTP = MCAN_DBTP_DBRP(CONF_MCAN_FBTP_FBRP_VALUE) |
  4008b2:	4b7a      	ldr	r3, [pc, #488]	; (400a9c <mcan_init+0x234>)
  4008b4:	60e3      	str	r3, [r4, #12]
	hw->MCAN_TDCR = MCAN_TDCR_TDCO(config->delay_compensation_offset) |
  4008b6:	7beb      	ldrb	r3, [r5, #15]
  4008b8:	021b      	lsls	r3, r3, #8
  4008ba:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
		    MCAN_TDCR_TDCF(config->delay_compensation_filter_window_length);
  4008be:	7c2a      	ldrb	r2, [r5, #16]
  4008c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	hw->MCAN_TDCR = MCAN_TDCR_TDCO(config->delay_compensation_offset) |
  4008c4:	4313      	orrs	r3, r2
  4008c6:	64a3      	str	r3, [r4, #72]	; 0x48
	if (config->tdc_enable) {
  4008c8:	7bab      	ldrb	r3, [r5, #14]
  4008ca:	b11b      	cbz	r3, 4008d4 <mcan_init+0x6c>
		hw->MCAN_DBTP |= MCAN_DBTP_TDC_ENABLED;
  4008cc:	68e3      	ldr	r3, [r4, #12]
  4008ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  4008d2:	60e3      	str	r3, [r4, #12]
	hw->MCAN_RWD |= MCAN_RWD_WDC(config->watchdog_configuration);
  4008d4:	6962      	ldr	r2, [r4, #20]
  4008d6:	786b      	ldrb	r3, [r5, #1]
  4008d8:	4313      	orrs	r3, r2
  4008da:	6163      	str	r3, [r4, #20]
	if (config->transmit_pause) {
  4008dc:	78ab      	ldrb	r3, [r5, #2]
  4008de:	b11b      	cbz	r3, 4008e8 <mcan_init+0x80>
		hw->MCAN_CCCR |= MCAN_CCCR_TXP;
  4008e0:	69a3      	ldr	r3, [r4, #24]
  4008e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  4008e6:	61a3      	str	r3, [r4, #24]
	if (!config->automatic_retransmission) {
  4008e8:	796b      	ldrb	r3, [r5, #5]
  4008ea:	b91b      	cbnz	r3, 4008f4 <mcan_init+0x8c>
		hw->MCAN_CCCR |= MCAN_CCCR_DAR;
  4008ec:	69a3      	ldr	r3, [r4, #24]
  4008ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4008f2:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_request) {
  4008f4:	79ab      	ldrb	r3, [r5, #6]
  4008f6:	b11b      	cbz	r3, 400900 <mcan_init+0x98>
		hw->MCAN_CCCR |= MCAN_CCCR_CSR;
  4008f8:	69a3      	ldr	r3, [r4, #24]
  4008fa:	f043 0310 	orr.w	r3, r3, #16
  4008fe:	61a3      	str	r3, [r4, #24]
	hw->MCAN_TSCC = MCAN_TSCC_TCP(config->timestamp_prescaler) |
  400900:	7a2b      	ldrb	r3, [r5, #8]
  400902:	041b      	lsls	r3, r3, #16
  400904:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  400908:	f043 0301 	orr.w	r3, r3, #1
  40090c:	6223      	str	r3, [r4, #32]
			config->timeout_mode | config->timeout_enable;
  40090e:	7b2b      	ldrb	r3, [r5, #12]
  400910:	7b6a      	ldrb	r2, [r5, #13]
  400912:	4313      	orrs	r3, r2
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  400914:	896a      	ldrh	r2, [r5, #10]
			config->timeout_mode | config->timeout_enable;
  400916:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  40091a:	62a3      	str	r3, [r4, #40]	; 0x28
	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  40091c:	7c6b      	ldrb	r3, [r5, #17]
  40091e:	011b      	lsls	r3, r3, #4
  400920:	f003 0330 	and.w	r3, r3, #48	; 0x30
			MCAN_GFC_ANFE(config->nonmatching_frames_action_extended);
  400924:	7caa      	ldrb	r2, [r5, #18]
  400926:	0092      	lsls	r2, r2, #2
  400928:	f002 020c 	and.w	r2, r2, #12
	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  40092c:	4313      	orrs	r3, r2
  40092e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if (config->remote_frames_standard_reject) {
  400932:	7ceb      	ldrb	r3, [r5, #19]
  400934:	b12b      	cbz	r3, 400942 <mcan_init+0xda>
		hw->MCAN_GFC |= MCAN_GFC_RRFS;
  400936:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  40093a:	f043 0302 	orr.w	r3, r3, #2
  40093e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if (config->remote_frames_extended_reject) {
  400942:	7d2b      	ldrb	r3, [r5, #20]
  400944:	b12b      	cbz	r3, 400952 <mcan_init+0xea>
		hw->MCAN_GFC|= MCAN_GFC_RRFE;
  400946:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  40094a:	f043 0301 	orr.w	r3, r3, #1
  40094e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hw->MCAN_XIDAM = config->extended_id_mask;
  400952:	69ab      	ldr	r3, [r5, #24]
  400954:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	if (config->rx_fifo_0_overwrite) {
  400958:	7f2b      	ldrb	r3, [r5, #28]
  40095a:	b12b      	cbz	r3, 400968 <mcan_init+0x100>
		hw->MCAN_RXF0C |= MCAN_RXF0C_F0OM;
  40095c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
  400960:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  400964:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	hw->MCAN_RXF0C |= MCAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
  400968:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
  40096c:	7f6b      	ldrb	r3, [r5, #29]
  40096e:	061b      	lsls	r3, r3, #24
  400970:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  400974:	4313      	orrs	r3, r2
  400976:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	if (config->rx_fifo_1_overwrite) {
  40097a:	7fab      	ldrb	r3, [r5, #30]
  40097c:	b12b      	cbz	r3, 40098a <mcan_init+0x122>
		hw->MCAN_RXF1C |= MCAN_RXF1C_F1OM;
  40097e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
  400982:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  400986:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	hw->MCAN_RXF1C |= MCAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
  40098a:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
  40098e:	7feb      	ldrb	r3, [r5, #31]
  400990:	061b      	lsls	r3, r3, #24
  400992:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  400996:	4313      	orrs	r3, r2
  400998:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	if (config->tx_queue_mode) {
  40099c:	f895 3020 	ldrb.w	r3, [r5, #32]
  4009a0:	b12b      	cbz	r3, 4009ae <mcan_init+0x146>
		hw->MCAN_TXBC |= MCAN_TXBC_TFQM;
  4009a2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
  4009a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  4009aa:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hw->MCAN_TXEFC |= MCAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
  4009ae:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
  4009b2:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
  4009b6:	061b      	lsls	r3, r3, #24
  4009b8:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  4009bc:	4313      	orrs	r3, r2
  4009be:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0

	/* Set the configuration. */
	_mcan_set_configuration(hw, config);

	/* Enable the interrupt setting which no need change. */
	hw->MCAN_ILE = MCAN_ILE_EINT0 | MCAN_ILE_EINT1;
  4009c2:	2303      	movs	r3, #3
  4009c4:	65e3      	str	r3, [r4, #92]	; 0x5c
	hw->MCAN_TXBTIE = 0xFFFFFFFFul;
  4009c6:	f04f 33ff 	mov.w	r3, #4294967295
  4009ca:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	hw->MCAN_TXBCIE = 0xFFFFFFFFul;
  4009ce:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
  4009d2:	bd70      	pop	{r4, r5, r6, pc}
		hw->MCAN_SIDFC = ((uint32_t)mcan0_rx_standard_filter & BIT_2_TO_15_MASK) |
  4009d4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  4009d8:	4931      	ldr	r1, [pc, #196]	; (400aa0 <mcan_init+0x238>)
  4009da:	4011      	ands	r1, r2
  4009dc:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  4009e0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		hw->MCAN_XIDFC = ((uint32_t)mcan0_rx_extended_filter & BIT_2_TO_15_MASK) |
  4009e4:	492f      	ldr	r1, [pc, #188]	; (400aa4 <mcan_init+0x23c>)
  4009e6:	4011      	ands	r1, r2
  4009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4009ec:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		hw->MCAN_RXF0C = ((uint32_t)mcan0_rx_fifo_0 & BIT_2_TO_15_MASK) |
  4009f0:	492d      	ldr	r1, [pc, #180]	; (400aa8 <mcan_init+0x240>)
  4009f2:	4011      	ands	r1, r2
  4009f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4009f8:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		hw->MCAN_RXF1C = ((uint32_t)mcan0_rx_fifo_1 & BIT_2_TO_15_MASK) |
  4009fc:	492b      	ldr	r1, [pc, #172]	; (400aac <mcan_init+0x244>)
  4009fe:	4011      	ands	r1, r2
  400a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400a04:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		hw->MCAN_RXBC = ((uint32_t)mcan0_rx_buffer & BIT_2_TO_15_MASK);
  400a08:	4929      	ldr	r1, [pc, #164]	; (400ab0 <mcan_init+0x248>)
  400a0a:	4011      	ands	r1, r2
  400a0c:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  400a10:	4828      	ldr	r0, [pc, #160]	; (400ab4 <mcan_init+0x24c>)
  400a12:	4010      	ands	r0, r2
				MCAN_TXBC_NDTB(CONF_MCAN0_TX_BUFFER_NUM) |
  400a14:	4928      	ldr	r1, [pc, #160]	; (400ab8 <mcan_init+0x250>)
  400a16:	4301      	orrs	r1, r0
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  400a18:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		hw->MCAN_TXEFC = ((uint32_t)mcan0_tx_event_fifo & BIT_2_TO_15_MASK) |
  400a1c:	4927      	ldr	r1, [pc, #156]	; (400abc <mcan_init+0x254>)
  400a1e:	400a      	ands	r2, r1
  400a20:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  400a24:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  400a28:	e73c      	b.n	4008a4 <mcan_init+0x3c>
		hw->MCAN_SIDFC = ((uint32_t)mcan1_rx_standard_filter & BIT_2_TO_15_MASK) |
  400a2a:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  400a2e:	4924      	ldr	r1, [pc, #144]	; (400ac0 <mcan_init+0x258>)
  400a30:	4011      	ands	r1, r2
  400a32:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  400a36:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		hw->MCAN_XIDFC = ((uint32_t)mcan1_rx_extended_filter & BIT_2_TO_15_MASK) |
  400a3a:	4922      	ldr	r1, [pc, #136]	; (400ac4 <mcan_init+0x25c>)
  400a3c:	4011      	ands	r1, r2
  400a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400a42:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		hw->MCAN_RXF0C = ((uint32_t)mcan1_rx_fifo_0 & BIT_2_TO_15_MASK) |
  400a46:	4920      	ldr	r1, [pc, #128]	; (400ac8 <mcan_init+0x260>)
  400a48:	4011      	ands	r1, r2
  400a4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400a4e:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		hw->MCAN_RXF1C = ((uint32_t)mcan1_rx_fifo_1 & BIT_2_TO_15_MASK) |
  400a52:	491e      	ldr	r1, [pc, #120]	; (400acc <mcan_init+0x264>)
  400a54:	4011      	ands	r1, r2
  400a56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400a5a:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		hw->MCAN_RXBC = ((uint32_t)mcan1_rx_buffer & BIT_2_TO_15_MASK);
  400a5e:	491c      	ldr	r1, [pc, #112]	; (400ad0 <mcan_init+0x268>)
  400a60:	4011      	ands	r1, r2
  400a62:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  400a66:	481b      	ldr	r0, [pc, #108]	; (400ad4 <mcan_init+0x26c>)
  400a68:	4010      	ands	r0, r2
				MCAN_TXBC_NDTB(CONF_MCAN1_TX_BUFFER_NUM) |
  400a6a:	4913      	ldr	r1, [pc, #76]	; (400ab8 <mcan_init+0x250>)
  400a6c:	4301      	orrs	r1, r0
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  400a6e:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		hw->MCAN_TXEFC = ((uint32_t)mcan1_tx_event_fifo & BIT_2_TO_15_MASK) |
  400a72:	4919      	ldr	r1, [pc, #100]	; (400ad8 <mcan_init+0x270>)
  400a74:	400a      	ands	r2, r1
  400a76:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  400a7a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  400a7e:	e711      	b.n	4008a4 <mcan_init+0x3c>
  400a80:	00400ecd 	.word	0x00400ecd
  400a84:	00400e7d 	.word	0x00400e7d
  400a88:	00400eb9 	.word	0x00400eb9
  400a8c:	00400839 	.word	0x00400839
  400a90:	40030000 	.word	0x40030000
  400a94:	40034000 	.word	0x40034000
  400a98:	06020a07 	.word	0x06020a07
  400a9c:	00050a33 	.word	0x00050a33
  400aa0:	20400db0 	.word	0x20400db0
  400aa4:	20400b30 	.word	0x20400b30
  400aa8:	20400bb0 	.word	0x20400bb0
  400aac:	20400cb0 	.word	0x20400cb0
  400ab0:	20400a30 	.word	0x20400a30
  400ab4:	20400e30 	.word	0x20400e30
  400ab8:	04040000 	.word	0x04040000
  400abc:	20400eb0 	.word	0x20400eb0
  400ac0:	20401270 	.word	0x20401270
  400ac4:	20400ff0 	.word	0x20400ff0
  400ac8:	20401070 	.word	0x20401070
  400acc:	20401170 	.word	0x20401170
  400ad0:	20400ef0 	.word	0x20400ef0
  400ad4:	204012f0 	.word	0x204012f0
  400ad8:	20401370 	.word	0x20401370

00400adc <mcan_start>:
 * \param module_inst  MCAN instance
 *
 */
void mcan_start(struct mcan_module *const module_inst)
{
	module_inst->hw->MCAN_CCCR &= ~MCAN_CCCR_INIT;
  400adc:	6802      	ldr	r2, [r0, #0]
  400ade:	6993      	ldr	r3, [r2, #24]
  400ae0:	f023 0301 	bic.w	r3, r3, #1
  400ae4:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT);
  400ae6:	6802      	ldr	r2, [r0, #0]
  400ae8:	6993      	ldr	r3, [r2, #24]
  400aea:	f013 0f01 	tst.w	r3, #1
  400aee:	d1fb      	bne.n	400ae8 <mcan_start+0xc>
}
  400af0:	4770      	bx	lr

00400af2 <mcan_stop>:
 * \param module_inst  MCAN instance
 *
 */
void mcan_stop(struct mcan_module *const module_inst)
{
	module_inst->hw->MCAN_CCCR |= MCAN_CCCR_INIT;
  400af2:	6802      	ldr	r2, [r0, #0]
  400af4:	6993      	ldr	r3, [r2, #24]
  400af6:	f043 0301 	orr.w	r3, r3, #1
  400afa:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (!(module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT));
  400afc:	6802      	ldr	r2, [r0, #0]
  400afe:	6993      	ldr	r3, [r2, #24]
  400b00:	f013 0f01 	tst.w	r3, #1
  400b04:	d0fb      	beq.n	400afe <mcan_stop+0xc>
}
  400b06:	4770      	bx	lr

00400b08 <mcan_get_rx_buffer_element>:
 * \return status code.
 */
enum status_code mcan_get_rx_buffer_element(
		struct mcan_module *const module_inst,
		struct mcan_rx_element_buffer *rx_element, uint32_t index)
{
  400b08:	b430      	push	{r4, r5}
  400b0a:	460d      	mov	r5, r1
	if (module_inst->hw == MCAN0) {
  400b0c:	6803      	ldr	r3, [r0, #0]
  400b0e:	490f      	ldr	r1, [pc, #60]	; (400b4c <mcan_get_rx_buffer_element+0x44>)
  400b10:	428b      	cmp	r3, r1
  400b12:	d00d      	beq.n	400b30 <mcan_get_rx_buffer_element+0x28>
		memcpy(rx_element, &mcan0_rx_buffer[index], sizeof(struct mcan_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == MCAN1) {
  400b14:	490e      	ldr	r1, [pc, #56]	; (400b50 <mcan_get_rx_buffer_element+0x48>)
  400b16:	428b      	cmp	r3, r1
  400b18:	d114      	bne.n	400b44 <mcan_get_rx_buffer_element+0x3c>
		memcpy(rx_element, &mcan1_rx_buffer[index], sizeof(struct mcan_rx_element_buffer));
  400b1a:	4c0e      	ldr	r4, [pc, #56]	; (400b54 <mcan_get_rx_buffer_element+0x4c>)
  400b1c:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  400b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400b22:	6028      	str	r0, [r5, #0]
  400b24:	6069      	str	r1, [r5, #4]
  400b26:	60aa      	str	r2, [r5, #8]
  400b28:	60eb      	str	r3, [r5, #12]
		return STATUS_OK;
  400b2a:	2000      	movs	r0, #0
	}
	return ERR_INVALID_ARG;
}
  400b2c:	bc30      	pop	{r4, r5}
  400b2e:	4770      	bx	lr
		memcpy(rx_element, &mcan0_rx_buffer[index], sizeof(struct mcan_rx_element_buffer));
  400b30:	4c09      	ldr	r4, [pc, #36]	; (400b58 <mcan_get_rx_buffer_element+0x50>)
  400b32:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  400b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400b38:	6028      	str	r0, [r5, #0]
  400b3a:	6069      	str	r1, [r5, #4]
  400b3c:	60aa      	str	r2, [r5, #8]
  400b3e:	60eb      	str	r3, [r5, #12]
		return STATUS_OK;
  400b40:	2000      	movs	r0, #0
  400b42:	e7f3      	b.n	400b2c <mcan_get_rx_buffer_element+0x24>
	return ERR_INVALID_ARG;
  400b44:	f06f 0007 	mvn.w	r0, #7
  400b48:	e7f0      	b.n	400b2c <mcan_get_rx_buffer_element+0x24>
  400b4a:	bf00      	nop
  400b4c:	40030000 	.word	0x40030000
  400b50:	40034000 	.word	0x40034000
  400b54:	20400ef0 	.word	0x20400ef0
  400b58:	20400a30 	.word	0x20400a30

00400b5c <mcan_get_rx_fifo_0_element>:
 * \return status code.
 */
enum status_code mcan_get_rx_fifo_0_element(
		struct mcan_module *const module_inst,
		struct mcan_rx_element_fifo_0 *rx_element, uint32_t index)
{
  400b5c:	b430      	push	{r4, r5}
  400b5e:	460d      	mov	r5, r1
	if (module_inst->hw == MCAN0) {
  400b60:	6803      	ldr	r3, [r0, #0]
  400b62:	490f      	ldr	r1, [pc, #60]	; (400ba0 <mcan_get_rx_fifo_0_element+0x44>)
  400b64:	428b      	cmp	r3, r1
  400b66:	d00d      	beq.n	400b84 <mcan_get_rx_fifo_0_element+0x28>
		memcpy(rx_element, &mcan0_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == MCAN1) {
  400b68:	490e      	ldr	r1, [pc, #56]	; (400ba4 <mcan_get_rx_fifo_0_element+0x48>)
  400b6a:	428b      	cmp	r3, r1
  400b6c:	d114      	bne.n	400b98 <mcan_get_rx_fifo_0_element+0x3c>
		memcpy(rx_element, &mcan1_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
  400b6e:	4c0e      	ldr	r4, [pc, #56]	; (400ba8 <mcan_get_rx_fifo_0_element+0x4c>)
  400b70:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  400b74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400b76:	6028      	str	r0, [r5, #0]
  400b78:	6069      	str	r1, [r5, #4]
  400b7a:	60aa      	str	r2, [r5, #8]
  400b7c:	60eb      	str	r3, [r5, #12]
		return STATUS_OK;
  400b7e:	2000      	movs	r0, #0
	}
	return ERR_INVALID_ARG;
}
  400b80:	bc30      	pop	{r4, r5}
  400b82:	4770      	bx	lr
		memcpy(rx_element, &mcan0_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
  400b84:	4c09      	ldr	r4, [pc, #36]	; (400bac <mcan_get_rx_fifo_0_element+0x50>)
  400b86:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  400b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400b8c:	6028      	str	r0, [r5, #0]
  400b8e:	6069      	str	r1, [r5, #4]
  400b90:	60aa      	str	r2, [r5, #8]
  400b92:	60eb      	str	r3, [r5, #12]
		return STATUS_OK;
  400b94:	2000      	movs	r0, #0
  400b96:	e7f3      	b.n	400b80 <mcan_get_rx_fifo_0_element+0x24>
	return ERR_INVALID_ARG;
  400b98:	f06f 0007 	mvn.w	r0, #7
  400b9c:	e7f0      	b.n	400b80 <mcan_get_rx_fifo_0_element+0x24>
  400b9e:	bf00      	nop
  400ba0:	40030000 	.word	0x40030000
  400ba4:	40034000 	.word	0x40034000
  400ba8:	20401070 	.word	0x20401070
  400bac:	20400bb0 	.word	0x20400bb0

00400bb0 <mcan_get_rx_fifo_1_element>:
 * \return status code.
 */
enum status_code mcan_get_rx_fifo_1_element(
		struct mcan_module *const module_inst,
		struct mcan_rx_element_fifo_1 *rx_element, uint32_t index)
{
  400bb0:	b430      	push	{r4, r5}
  400bb2:	460d      	mov	r5, r1
	if (module_inst->hw == MCAN0) {
  400bb4:	6803      	ldr	r3, [r0, #0]
  400bb6:	490f      	ldr	r1, [pc, #60]	; (400bf4 <mcan_get_rx_fifo_1_element+0x44>)
  400bb8:	428b      	cmp	r3, r1
  400bba:	d00d      	beq.n	400bd8 <mcan_get_rx_fifo_1_element+0x28>
		memcpy(rx_element, &mcan0_rx_fifo_1[index], sizeof(struct mcan_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == MCAN1) {
  400bbc:	490e      	ldr	r1, [pc, #56]	; (400bf8 <mcan_get_rx_fifo_1_element+0x48>)
  400bbe:	428b      	cmp	r3, r1
  400bc0:	d114      	bne.n	400bec <mcan_get_rx_fifo_1_element+0x3c>
		memcpy(rx_element, &mcan1_rx_fifo_1[index], sizeof(struct mcan_rx_element_buffer));
  400bc2:	4c0e      	ldr	r4, [pc, #56]	; (400bfc <mcan_get_rx_fifo_1_element+0x4c>)
  400bc4:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  400bc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400bca:	6028      	str	r0, [r5, #0]
  400bcc:	6069      	str	r1, [r5, #4]
  400bce:	60aa      	str	r2, [r5, #8]
  400bd0:	60eb      	str	r3, [r5, #12]
		return STATUS_OK;
  400bd2:	2000      	movs	r0, #0
	}
	return ERR_INVALID_ARG;
}
  400bd4:	bc30      	pop	{r4, r5}
  400bd6:	4770      	bx	lr
		memcpy(rx_element, &mcan0_rx_fifo_1[index], sizeof(struct mcan_rx_element_buffer));
  400bd8:	4c09      	ldr	r4, [pc, #36]	; (400c00 <mcan_get_rx_fifo_1_element+0x50>)
  400bda:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  400bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400be0:	6028      	str	r0, [r5, #0]
  400be2:	6069      	str	r1, [r5, #4]
  400be4:	60aa      	str	r2, [r5, #8]
  400be6:	60eb      	str	r3, [r5, #12]
		return STATUS_OK;
  400be8:	2000      	movs	r0, #0
  400bea:	e7f3      	b.n	400bd4 <mcan_get_rx_fifo_1_element+0x24>
	return ERR_INVALID_ARG;
  400bec:	f06f 0007 	mvn.w	r0, #7
  400bf0:	e7f0      	b.n	400bd4 <mcan_get_rx_fifo_1_element+0x24>
  400bf2:	bf00      	nop
  400bf4:	40030000 	.word	0x40030000
  400bf8:	40034000 	.word	0x40034000
  400bfc:	20401170 	.word	0x20401170
  400c00:	20400cb0 	.word	0x20400cb0

00400c04 <mcan_set_tx_buffer_element>:
 * \return status code.
 */
enum status_code mcan_set_tx_buffer_element(
		struct mcan_module *const module_inst,
		struct mcan_tx_element *tx_element, uint32_t index)
{
  400c04:	b410      	push	{r4}
	uint32_t i;
	if (module_inst->hw == MCAN0) {
  400c06:	6803      	ldr	r3, [r0, #0]
  400c08:	4819      	ldr	r0, [pc, #100]	; (400c70 <mcan_set_tx_buffer_element+0x6c>)
  400c0a:	4283      	cmp	r3, r0
  400c0c:	d018      	beq.n	400c40 <mcan_set_tx_buffer_element+0x3c>
		mcan0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
			mcan0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	} else if (module_inst->hw == MCAN1) {
  400c0e:	4819      	ldr	r0, [pc, #100]	; (400c74 <mcan_set_tx_buffer_element+0x70>)
  400c10:	4283      	cmp	r3, r0
  400c12:	d129      	bne.n	400c68 <mcan_set_tx_buffer_element+0x64>
		mcan1_tx_buffer[index].T0.reg = tx_element->T0.reg;
  400c14:	680c      	ldr	r4, [r1, #0]
  400c16:	4818      	ldr	r0, [pc, #96]	; (400c78 <mcan_set_tx_buffer_element+0x74>)
  400c18:	0112      	lsls	r2, r2, #4
  400c1a:	1883      	adds	r3, r0, r2
  400c1c:	5084      	str	r4, [r0, r2]
		mcan1_tx_buffer[index].T1.reg = tx_element->T1.reg;
  400c1e:	684c      	ldr	r4, [r1, #4]
  400c20:	605c      	str	r4, [r3, #4]
  400c22:	f101 0308 	add.w	r3, r1, #8
  400c26:	3207      	adds	r2, #7
  400c28:	4402      	add	r2, r0
  400c2a:	3110      	adds	r1, #16
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
			mcan1_tx_buffer[index].data[i] = tx_element->data[i];
  400c2c:	f813 0b01 	ldrb.w	r0, [r3], #1
  400c30:	f802 0f01 	strb.w	r0, [r2, #1]!
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  400c34:	428b      	cmp	r3, r1
  400c36:	d1f9      	bne.n	400c2c <mcan_set_tx_buffer_element+0x28>
		}
		return STATUS_OK;
  400c38:	2000      	movs	r0, #0
	}
	return ERR_INVALID_ARG;
}
  400c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
  400c3e:	4770      	bx	lr
		mcan0_tx_buffer[index].T0.reg = tx_element->T0.reg;
  400c40:	680c      	ldr	r4, [r1, #0]
  400c42:	480e      	ldr	r0, [pc, #56]	; (400c7c <mcan_set_tx_buffer_element+0x78>)
  400c44:	0112      	lsls	r2, r2, #4
  400c46:	1883      	adds	r3, r0, r2
  400c48:	5084      	str	r4, [r0, r2]
		mcan0_tx_buffer[index].T1.reg = tx_element->T1.reg;
  400c4a:	684c      	ldr	r4, [r1, #4]
  400c4c:	605c      	str	r4, [r3, #4]
  400c4e:	f101 0308 	add.w	r3, r1, #8
  400c52:	3207      	adds	r2, #7
  400c54:	4402      	add	r2, r0
  400c56:	3110      	adds	r1, #16
			mcan0_tx_buffer[index].data[i] = tx_element->data[i];
  400c58:	f813 0b01 	ldrb.w	r0, [r3], #1
  400c5c:	f802 0f01 	strb.w	r0, [r2, #1]!
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  400c60:	428b      	cmp	r3, r1
  400c62:	d1f9      	bne.n	400c58 <mcan_set_tx_buffer_element+0x54>
		return STATUS_OK;
  400c64:	2000      	movs	r0, #0
  400c66:	e7e8      	b.n	400c3a <mcan_set_tx_buffer_element+0x36>
	return ERR_INVALID_ARG;
  400c68:	f06f 0007 	mvn.w	r0, #7
  400c6c:	e7e5      	b.n	400c3a <mcan_set_tx_buffer_element+0x36>
  400c6e:	bf00      	nop
  400c70:	40030000 	.word	0x40030000
  400c74:	40034000 	.word	0x40034000
  400c78:	204012f0 	.word	0x204012f0
  400c7c:	20400e30 	.word	0x20400e30

00400c80 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400c80:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400c82:	4770      	bx	lr

00400c84 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400c84:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400c86:	4770      	bx	lr

00400c88 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c8c:	4604      	mov	r4, r0
  400c8e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400c90:	4b0e      	ldr	r3, [pc, #56]	; (400ccc <pio_handler_process+0x44>)
  400c92:	4798      	blx	r3
  400c94:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400c96:	4620      	mov	r0, r4
  400c98:	4b0d      	ldr	r3, [pc, #52]	; (400cd0 <pio_handler_process+0x48>)
  400c9a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400c9c:	4005      	ands	r5, r0
  400c9e:	d013      	beq.n	400cc8 <pio_handler_process+0x40>
  400ca0:	4c0c      	ldr	r4, [pc, #48]	; (400cd4 <pio_handler_process+0x4c>)
  400ca2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400ca6:	e003      	b.n	400cb0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400ca8:	42b4      	cmp	r4, r6
  400caa:	d00d      	beq.n	400cc8 <pio_handler_process+0x40>
  400cac:	3410      	adds	r4, #16
		while (status != 0) {
  400cae:	b15d      	cbz	r5, 400cc8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400cb0:	6820      	ldr	r0, [r4, #0]
  400cb2:	4540      	cmp	r0, r8
  400cb4:	d1f8      	bne.n	400ca8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400cb6:	6861      	ldr	r1, [r4, #4]
  400cb8:	4229      	tst	r1, r5
  400cba:	d0f5      	beq.n	400ca8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400cbc:	68e3      	ldr	r3, [r4, #12]
  400cbe:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400cc0:	6863      	ldr	r3, [r4, #4]
  400cc2:	ea25 0503 	bic.w	r5, r5, r3
  400cc6:	e7ef      	b.n	400ca8 <pio_handler_process+0x20>
  400cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ccc:	00400c81 	.word	0x00400c81
  400cd0:	00400c85 	.word	0x00400c85
  400cd4:	204013b0 	.word	0x204013b0

00400cd8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400cd8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400cda:	210a      	movs	r1, #10
  400cdc:	4801      	ldr	r0, [pc, #4]	; (400ce4 <PIOA_Handler+0xc>)
  400cde:	4b02      	ldr	r3, [pc, #8]	; (400ce8 <PIOA_Handler+0x10>)
  400ce0:	4798      	blx	r3
  400ce2:	bd08      	pop	{r3, pc}
  400ce4:	400e0e00 	.word	0x400e0e00
  400ce8:	00400c89 	.word	0x00400c89

00400cec <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400cec:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400cee:	210b      	movs	r1, #11
  400cf0:	4801      	ldr	r0, [pc, #4]	; (400cf8 <PIOB_Handler+0xc>)
  400cf2:	4b02      	ldr	r3, [pc, #8]	; (400cfc <PIOB_Handler+0x10>)
  400cf4:	4798      	blx	r3
  400cf6:	bd08      	pop	{r3, pc}
  400cf8:	400e1000 	.word	0x400e1000
  400cfc:	00400c89 	.word	0x00400c89

00400d00 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400d00:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400d02:	210c      	movs	r1, #12
  400d04:	4801      	ldr	r0, [pc, #4]	; (400d0c <PIOC_Handler+0xc>)
  400d06:	4b02      	ldr	r3, [pc, #8]	; (400d10 <PIOC_Handler+0x10>)
  400d08:	4798      	blx	r3
  400d0a:	bd08      	pop	{r3, pc}
  400d0c:	400e1200 	.word	0x400e1200
  400d10:	00400c89 	.word	0x00400c89

00400d14 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400d14:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400d16:	2110      	movs	r1, #16
  400d18:	4801      	ldr	r0, [pc, #4]	; (400d20 <PIOD_Handler+0xc>)
  400d1a:	4b02      	ldr	r3, [pc, #8]	; (400d24 <PIOD_Handler+0x10>)
  400d1c:	4798      	blx	r3
  400d1e:	bd08      	pop	{r3, pc}
  400d20:	400e1400 	.word	0x400e1400
  400d24:	00400c89 	.word	0x00400c89

00400d28 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400d28:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400d2a:	2111      	movs	r1, #17
  400d2c:	4801      	ldr	r0, [pc, #4]	; (400d34 <PIOE_Handler+0xc>)
  400d2e:	4b02      	ldr	r3, [pc, #8]	; (400d38 <PIOE_Handler+0x10>)
  400d30:	4798      	blx	r3
  400d32:	bd08      	pop	{r3, pc}
  400d34:	400e1600 	.word	0x400e1600
  400d38:	00400c89 	.word	0x00400c89

00400d3c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400d3c:	2803      	cmp	r0, #3
  400d3e:	d011      	beq.n	400d64 <pmc_mck_set_division+0x28>
  400d40:	2804      	cmp	r0, #4
  400d42:	d012      	beq.n	400d6a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400d44:	2802      	cmp	r0, #2
  400d46:	bf0c      	ite	eq
  400d48:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400d4c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400d4e:	4a08      	ldr	r2, [pc, #32]	; (400d70 <pmc_mck_set_division+0x34>)
  400d50:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400d56:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400d58:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400d5a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d5c:	f013 0f08 	tst.w	r3, #8
  400d60:	d0fb      	beq.n	400d5a <pmc_mck_set_division+0x1e>
}
  400d62:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400d64:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400d68:	e7f1      	b.n	400d4e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400d6a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400d6e:	e7ee      	b.n	400d4e <pmc_mck_set_division+0x12>
  400d70:	400e0600 	.word	0x400e0600

00400d74 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400d74:	4a17      	ldr	r2, [pc, #92]	; (400dd4 <pmc_switch_mck_to_pllack+0x60>)
  400d76:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400d7c:	4318      	orrs	r0, r3
  400d7e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d80:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d82:	f013 0f08 	tst.w	r3, #8
  400d86:	d10a      	bne.n	400d9e <pmc_switch_mck_to_pllack+0x2a>
  400d88:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400d8c:	4911      	ldr	r1, [pc, #68]	; (400dd4 <pmc_switch_mck_to_pllack+0x60>)
  400d8e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400d90:	f012 0f08 	tst.w	r2, #8
  400d94:	d103      	bne.n	400d9e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400d96:	3b01      	subs	r3, #1
  400d98:	d1f9      	bne.n	400d8e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400d9a:	2001      	movs	r0, #1
  400d9c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400d9e:	4a0d      	ldr	r2, [pc, #52]	; (400dd4 <pmc_switch_mck_to_pllack+0x60>)
  400da0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400da2:	f023 0303 	bic.w	r3, r3, #3
  400da6:	f043 0302 	orr.w	r3, r3, #2
  400daa:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400dac:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400dae:	f013 0f08 	tst.w	r3, #8
  400db2:	d10a      	bne.n	400dca <pmc_switch_mck_to_pllack+0x56>
  400db4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400db8:	4906      	ldr	r1, [pc, #24]	; (400dd4 <pmc_switch_mck_to_pllack+0x60>)
  400dba:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400dbc:	f012 0f08 	tst.w	r2, #8
  400dc0:	d105      	bne.n	400dce <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400dc2:	3b01      	subs	r3, #1
  400dc4:	d1f9      	bne.n	400dba <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400dc6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400dc8:	4770      	bx	lr
	return 0;
  400dca:	2000      	movs	r0, #0
  400dcc:	4770      	bx	lr
  400dce:	2000      	movs	r0, #0
  400dd0:	4770      	bx	lr
  400dd2:	bf00      	nop
  400dd4:	400e0600 	.word	0x400e0600

00400dd8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400dd8:	b9a0      	cbnz	r0, 400e04 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400dda:	480e      	ldr	r0, [pc, #56]	; (400e14 <pmc_switch_mainck_to_xtal+0x3c>)
  400ddc:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400dde:	0209      	lsls	r1, r1, #8
  400de0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400de2:	4a0d      	ldr	r2, [pc, #52]	; (400e18 <pmc_switch_mainck_to_xtal+0x40>)
  400de4:	401a      	ands	r2, r3
  400de6:	4b0d      	ldr	r3, [pc, #52]	; (400e1c <pmc_switch_mainck_to_xtal+0x44>)
  400de8:	4313      	orrs	r3, r2
  400dea:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400dec:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400dee:	4602      	mov	r2, r0
  400df0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400df2:	f013 0f01 	tst.w	r3, #1
  400df6:	d0fb      	beq.n	400df0 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400df8:	4a06      	ldr	r2, [pc, #24]	; (400e14 <pmc_switch_mainck_to_xtal+0x3c>)
  400dfa:	6a11      	ldr	r1, [r2, #32]
  400dfc:	4b08      	ldr	r3, [pc, #32]	; (400e20 <pmc_switch_mainck_to_xtal+0x48>)
  400dfe:	430b      	orrs	r3, r1
  400e00:	6213      	str	r3, [r2, #32]
  400e02:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e04:	4903      	ldr	r1, [pc, #12]	; (400e14 <pmc_switch_mainck_to_xtal+0x3c>)
  400e06:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400e08:	4a06      	ldr	r2, [pc, #24]	; (400e24 <pmc_switch_mainck_to_xtal+0x4c>)
  400e0a:	401a      	ands	r2, r3
  400e0c:	4b06      	ldr	r3, [pc, #24]	; (400e28 <pmc_switch_mainck_to_xtal+0x50>)
  400e0e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e10:	620b      	str	r3, [r1, #32]
  400e12:	4770      	bx	lr
  400e14:	400e0600 	.word	0x400e0600
  400e18:	ffc8fffc 	.word	0xffc8fffc
  400e1c:	00370001 	.word	0x00370001
  400e20:	01370000 	.word	0x01370000
  400e24:	fec8fffc 	.word	0xfec8fffc
  400e28:	01370002 	.word	0x01370002

00400e2c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400e2c:	4b02      	ldr	r3, [pc, #8]	; (400e38 <pmc_osc_is_ready_mainck+0xc>)
  400e2e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e30:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400e34:	4770      	bx	lr
  400e36:	bf00      	nop
  400e38:	400e0600 	.word	0x400e0600

00400e3c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400e3c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400e40:	4b01      	ldr	r3, [pc, #4]	; (400e48 <pmc_disable_pllack+0xc>)
  400e42:	629a      	str	r2, [r3, #40]	; 0x28
  400e44:	4770      	bx	lr
  400e46:	bf00      	nop
  400e48:	400e0600 	.word	0x400e0600

00400e4c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400e4c:	4b02      	ldr	r3, [pc, #8]	; (400e58 <pmc_is_locked_pllack+0xc>)
  400e4e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e50:	f000 0002 	and.w	r0, r0, #2
  400e54:	4770      	bx	lr
  400e56:	bf00      	nop
  400e58:	400e0600 	.word	0x400e0600

00400e5c <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  400e5c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400e60:	4b05      	ldr	r3, [pc, #20]	; (400e78 <pmc_enable_periph_clk+0x1c>)
  400e62:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  400e66:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400e6a:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  400e6e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400e72:	2000      	movs	r0, #0
  400e74:	4770      	bx	lr
  400e76:	bf00      	nop
  400e78:	400e0600 	.word	0x400e0600

00400e7c <pmc_switch_pck_to_pllack>:
 */
uint32_t pmc_switch_pck_to_pllack(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLA_CLK | ul_pres;
  400e7c:	f041 0102 	orr.w	r1, r1, #2
  400e80:	4b0c      	ldr	r3, [pc, #48]	; (400eb4 <pmc_switch_pck_to_pllack+0x38>)
  400e82:	f100 0210 	add.w	r2, r0, #16
  400e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  400e8a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  400e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
  400e90:	fa03 f000 	lsl.w	r0, r3, r0
	for (ul_timeout = PMC_TIMEOUT;
  400e94:	4202      	tst	r2, r0
  400e96:	d109      	bne.n	400eac <pmc_switch_pck_to_pllack+0x30>
  400e98:	f44f 6300 	mov.w	r3, #2048	; 0x800
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  400e9c:	4905      	ldr	r1, [pc, #20]	; (400eb4 <pmc_switch_pck_to_pllack+0x38>)
  400e9e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	for (ul_timeout = PMC_TIMEOUT;
  400ea0:	4202      	tst	r2, r0
  400ea2:	d105      	bne.n	400eb0 <pmc_switch_pck_to_pllack+0x34>
		if (ul_timeout == 0) {
  400ea4:	3b01      	subs	r3, #1
  400ea6:	d1fa      	bne.n	400e9e <pmc_switch_pck_to_pllack+0x22>
			return 1;
  400ea8:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400eaa:	4770      	bx	lr
	return 0;
  400eac:	2000      	movs	r0, #0
  400eae:	4770      	bx	lr
  400eb0:	2000      	movs	r0, #0
  400eb2:	4770      	bx	lr
  400eb4:	400e0600 	.word	0x400e0600

00400eb8 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  400eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
  400ebc:	fa03 f000 	lsl.w	r0, r3, r0
  400ec0:	4b01      	ldr	r3, [pc, #4]	; (400ec8 <pmc_enable_pck+0x10>)
  400ec2:	6018      	str	r0, [r3, #0]
  400ec4:	4770      	bx	lr
  400ec6:	bf00      	nop
  400ec8:	400e0600 	.word	0x400e0600

00400ecc <pmc_disable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  400ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
  400ed0:	fa03 f000 	lsl.w	r0, r3, r0
  400ed4:	4b01      	ldr	r3, [pc, #4]	; (400edc <pmc_disable_pck+0x10>)
  400ed6:	6058      	str	r0, [r3, #4]
  400ed8:	4770      	bx	lr
  400eda:	bf00      	nop
  400edc:	400e0600 	.word	0x400e0600

00400ee0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400ee0:	6943      	ldr	r3, [r0, #20]
  400ee2:	f013 0f02 	tst.w	r3, #2
  400ee6:	d002      	beq.n	400eee <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400ee8:	61c1      	str	r1, [r0, #28]
	return 0;
  400eea:	2000      	movs	r0, #0
  400eec:	4770      	bx	lr
		return 1;
  400eee:	2001      	movs	r0, #1
}
  400ef0:	4770      	bx	lr

00400ef2 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400ef2:	6943      	ldr	r3, [r0, #20]
  400ef4:	f013 0f01 	tst.w	r3, #1
  400ef8:	d003      	beq.n	400f02 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400efa:	6983      	ldr	r3, [r0, #24]
  400efc:	700b      	strb	r3, [r1, #0]
	return 0;
  400efe:	2000      	movs	r0, #0
  400f00:	4770      	bx	lr
		return 1;
  400f02:	2001      	movs	r0, #1
}
  400f04:	4770      	bx	lr

00400f06 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400f06:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400f08:	010b      	lsls	r3, r1, #4
  400f0a:	4293      	cmp	r3, r2
  400f0c:	d914      	bls.n	400f38 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400f0e:	00c9      	lsls	r1, r1, #3
  400f10:	084b      	lsrs	r3, r1, #1
  400f12:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400f16:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400f1a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400f1c:	1e5c      	subs	r4, r3, #1
  400f1e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400f22:	428c      	cmp	r4, r1
  400f24:	d901      	bls.n	400f2a <usart_set_async_baudrate+0x24>
		return 1;
  400f26:	2001      	movs	r0, #1
  400f28:	e017      	b.n	400f5a <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400f2a:	6841      	ldr	r1, [r0, #4]
  400f2c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400f30:	6041      	str	r1, [r0, #4]
  400f32:	e00c      	b.n	400f4e <usart_set_async_baudrate+0x48>
		return 1;
  400f34:	2001      	movs	r0, #1
  400f36:	e010      	b.n	400f5a <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400f38:	0859      	lsrs	r1, r3, #1
  400f3a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400f3e:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400f42:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400f44:	1e5c      	subs	r4, r3, #1
  400f46:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400f4a:	428c      	cmp	r4, r1
  400f4c:	d8f2      	bhi.n	400f34 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400f4e:	0412      	lsls	r2, r2, #16
  400f50:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400f54:	431a      	orrs	r2, r3
  400f56:	6202      	str	r2, [r0, #32]

	return 0;
  400f58:	2000      	movs	r0, #0
}
  400f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
  400f5e:	4770      	bx	lr

00400f60 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400f60:	4b08      	ldr	r3, [pc, #32]	; (400f84 <usart_reset+0x24>)
  400f62:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400f66:	2300      	movs	r3, #0
  400f68:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400f6a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400f6c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400f6e:	2388      	movs	r3, #136	; 0x88
  400f70:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400f72:	2324      	movs	r3, #36	; 0x24
  400f74:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400f76:	f44f 7380 	mov.w	r3, #256	; 0x100
  400f7a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400f7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400f80:	6003      	str	r3, [r0, #0]
  400f82:	4770      	bx	lr
  400f84:	55534100 	.word	0x55534100

00400f88 <usart_init_rs232>:
{
  400f88:	b570      	push	{r4, r5, r6, lr}
  400f8a:	4605      	mov	r5, r0
  400f8c:	460c      	mov	r4, r1
  400f8e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400f90:	4b0f      	ldr	r3, [pc, #60]	; (400fd0 <usart_init_rs232+0x48>)
  400f92:	4798      	blx	r3
	ul_reg_val = 0;
  400f94:	2200      	movs	r2, #0
  400f96:	4b0f      	ldr	r3, [pc, #60]	; (400fd4 <usart_init_rs232+0x4c>)
  400f98:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400f9a:	b1a4      	cbz	r4, 400fc6 <usart_init_rs232+0x3e>
  400f9c:	4632      	mov	r2, r6
  400f9e:	6821      	ldr	r1, [r4, #0]
  400fa0:	4628      	mov	r0, r5
  400fa2:	4b0d      	ldr	r3, [pc, #52]	; (400fd8 <usart_init_rs232+0x50>)
  400fa4:	4798      	blx	r3
  400fa6:	4602      	mov	r2, r0
  400fa8:	b978      	cbnz	r0, 400fca <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400faa:	6863      	ldr	r3, [r4, #4]
  400fac:	68a1      	ldr	r1, [r4, #8]
  400fae:	430b      	orrs	r3, r1
  400fb0:	6921      	ldr	r1, [r4, #16]
  400fb2:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400fb4:	68e1      	ldr	r1, [r4, #12]
  400fb6:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400fb8:	4906      	ldr	r1, [pc, #24]	; (400fd4 <usart_init_rs232+0x4c>)
  400fba:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400fbc:	6869      	ldr	r1, [r5, #4]
  400fbe:	430b      	orrs	r3, r1
  400fc0:	606b      	str	r3, [r5, #4]
}
  400fc2:	4610      	mov	r0, r2
  400fc4:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400fc6:	2201      	movs	r2, #1
  400fc8:	e7fb      	b.n	400fc2 <usart_init_rs232+0x3a>
  400fca:	2201      	movs	r2, #1
  400fcc:	e7f9      	b.n	400fc2 <usart_init_rs232+0x3a>
  400fce:	bf00      	nop
  400fd0:	00400f61 	.word	0x00400f61
  400fd4:	20401420 	.word	0x20401420
  400fd8:	00400f07 	.word	0x00400f07

00400fdc <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400fdc:	2340      	movs	r3, #64	; 0x40
  400fde:	6003      	str	r3, [r0, #0]
  400fe0:	4770      	bx	lr

00400fe2 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400fe2:	2310      	movs	r3, #16
  400fe4:	6003      	str	r3, [r0, #0]
  400fe6:	4770      	bx	lr

00400fe8 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400fe8:	6943      	ldr	r3, [r0, #20]
  400fea:	f013 0f02 	tst.w	r3, #2
  400fee:	d004      	beq.n	400ffa <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400ff0:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400ff4:	61c1      	str	r1, [r0, #28]
	return 0;
  400ff6:	2000      	movs	r0, #0
  400ff8:	4770      	bx	lr
		return 1;
  400ffa:	2001      	movs	r0, #1
}
  400ffc:	4770      	bx	lr

00400ffe <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400ffe:	6943      	ldr	r3, [r0, #20]
  401000:	f013 0f01 	tst.w	r3, #1
  401004:	d005      	beq.n	401012 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401006:	6983      	ldr	r3, [r0, #24]
  401008:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40100c:	600b      	str	r3, [r1, #0]
	return 0;
  40100e:	2000      	movs	r0, #0
  401010:	4770      	bx	lr
		return 1;
  401012:	2001      	movs	r0, #1
}
  401014:	4770      	bx	lr

00401016 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401016:	e7fe      	b.n	401016 <Dummy_Handler>

00401018 <Reset_Handler>:
{
  401018:	b500      	push	{lr}
  40101a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  40101c:	4b25      	ldr	r3, [pc, #148]	; (4010b4 <Reset_Handler+0x9c>)
  40101e:	4a26      	ldr	r2, [pc, #152]	; (4010b8 <Reset_Handler+0xa0>)
  401020:	429a      	cmp	r2, r3
  401022:	d010      	beq.n	401046 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401024:	4b25      	ldr	r3, [pc, #148]	; (4010bc <Reset_Handler+0xa4>)
  401026:	4a23      	ldr	r2, [pc, #140]	; (4010b4 <Reset_Handler+0x9c>)
  401028:	429a      	cmp	r2, r3
  40102a:	d20c      	bcs.n	401046 <Reset_Handler+0x2e>
  40102c:	3b01      	subs	r3, #1
  40102e:	1a9b      	subs	r3, r3, r2
  401030:	f023 0303 	bic.w	r3, r3, #3
  401034:	3304      	adds	r3, #4
  401036:	4413      	add	r3, r2
  401038:	491f      	ldr	r1, [pc, #124]	; (4010b8 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  40103a:	f851 0b04 	ldr.w	r0, [r1], #4
  40103e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401042:	429a      	cmp	r2, r3
  401044:	d1f9      	bne.n	40103a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401046:	4b1e      	ldr	r3, [pc, #120]	; (4010c0 <Reset_Handler+0xa8>)
  401048:	4a1e      	ldr	r2, [pc, #120]	; (4010c4 <Reset_Handler+0xac>)
  40104a:	429a      	cmp	r2, r3
  40104c:	d20a      	bcs.n	401064 <Reset_Handler+0x4c>
  40104e:	3b01      	subs	r3, #1
  401050:	1a9b      	subs	r3, r3, r2
  401052:	f023 0303 	bic.w	r3, r3, #3
  401056:	3304      	adds	r3, #4
  401058:	4413      	add	r3, r2
                *pDest++ = 0;
  40105a:	2100      	movs	r1, #0
  40105c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401060:	4293      	cmp	r3, r2
  401062:	d1fb      	bne.n	40105c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401064:	4a18      	ldr	r2, [pc, #96]	; (4010c8 <Reset_Handler+0xb0>)
  401066:	4b19      	ldr	r3, [pc, #100]	; (4010cc <Reset_Handler+0xb4>)
  401068:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40106c:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40106e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401072:	fab3 f383 	clz	r3, r3
  401076:	095b      	lsrs	r3, r3, #5
  401078:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40107a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40107c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401080:	2200      	movs	r2, #0
  401082:	4b13      	ldr	r3, [pc, #76]	; (4010d0 <Reset_Handler+0xb8>)
  401084:	701a      	strb	r2, [r3, #0]
	return flags;
  401086:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401088:	4a12      	ldr	r2, [pc, #72]	; (4010d4 <Reset_Handler+0xbc>)
  40108a:	6813      	ldr	r3, [r2, #0]
  40108c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401090:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  401092:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401096:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40109a:	b129      	cbz	r1, 4010a8 <Reset_Handler+0x90>
		cpu_irq_enable();
  40109c:	2201      	movs	r2, #1
  40109e:	4b0c      	ldr	r3, [pc, #48]	; (4010d0 <Reset_Handler+0xb8>)
  4010a0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4010a2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4010a6:	b662      	cpsie	i
        __libc_init_array();
  4010a8:	4b0b      	ldr	r3, [pc, #44]	; (4010d8 <Reset_Handler+0xc0>)
  4010aa:	4798      	blx	r3
        main();
  4010ac:	4b0b      	ldr	r3, [pc, #44]	; (4010dc <Reset_Handler+0xc4>)
  4010ae:	4798      	blx	r3
  4010b0:	e7fe      	b.n	4010b0 <Reset_Handler+0x98>
  4010b2:	bf00      	nop
  4010b4:	20400000 	.word	0x20400000
  4010b8:	0040515c 	.word	0x0040515c
  4010bc:	204009c0 	.word	0x204009c0
  4010c0:	204014d4 	.word	0x204014d4
  4010c4:	204009c0 	.word	0x204009c0
  4010c8:	e000ed00 	.word	0xe000ed00
  4010cc:	00400000 	.word	0x00400000
  4010d0:	20400004 	.word	0x20400004
  4010d4:	e000ed88 	.word	0xe000ed88
  4010d8:	00401a59 	.word	0x00401a59
  4010dc:	00401929 	.word	0x00401929

004010e0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4010e0:	4b3b      	ldr	r3, [pc, #236]	; (4011d0 <SystemCoreClockUpdate+0xf0>)
  4010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010e4:	f003 0303 	and.w	r3, r3, #3
  4010e8:	2b01      	cmp	r3, #1
  4010ea:	d01d      	beq.n	401128 <SystemCoreClockUpdate+0x48>
  4010ec:	b183      	cbz	r3, 401110 <SystemCoreClockUpdate+0x30>
  4010ee:	2b02      	cmp	r3, #2
  4010f0:	d036      	beq.n	401160 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4010f2:	4b37      	ldr	r3, [pc, #220]	; (4011d0 <SystemCoreClockUpdate+0xf0>)
  4010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4010fa:	2b70      	cmp	r3, #112	; 0x70
  4010fc:	d05f      	beq.n	4011be <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4010fe:	4b34      	ldr	r3, [pc, #208]	; (4011d0 <SystemCoreClockUpdate+0xf0>)
  401100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401102:	4934      	ldr	r1, [pc, #208]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
  401104:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401108:	680b      	ldr	r3, [r1, #0]
  40110a:	40d3      	lsrs	r3, r2
  40110c:	600b      	str	r3, [r1, #0]
  40110e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401110:	4b31      	ldr	r3, [pc, #196]	; (4011d8 <SystemCoreClockUpdate+0xf8>)
  401112:	695b      	ldr	r3, [r3, #20]
  401114:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401118:	bf14      	ite	ne
  40111a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40111e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401122:	4b2c      	ldr	r3, [pc, #176]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
  401124:	601a      	str	r2, [r3, #0]
  401126:	e7e4      	b.n	4010f2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401128:	4b29      	ldr	r3, [pc, #164]	; (4011d0 <SystemCoreClockUpdate+0xf0>)
  40112a:	6a1b      	ldr	r3, [r3, #32]
  40112c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401130:	d003      	beq.n	40113a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401132:	4a2a      	ldr	r2, [pc, #168]	; (4011dc <SystemCoreClockUpdate+0xfc>)
  401134:	4b27      	ldr	r3, [pc, #156]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
  401136:	601a      	str	r2, [r3, #0]
  401138:	e7db      	b.n	4010f2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40113a:	4a29      	ldr	r2, [pc, #164]	; (4011e0 <SystemCoreClockUpdate+0x100>)
  40113c:	4b25      	ldr	r3, [pc, #148]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
  40113e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401140:	4b23      	ldr	r3, [pc, #140]	; (4011d0 <SystemCoreClockUpdate+0xf0>)
  401142:	6a1b      	ldr	r3, [r3, #32]
  401144:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401148:	2b10      	cmp	r3, #16
  40114a:	d005      	beq.n	401158 <SystemCoreClockUpdate+0x78>
  40114c:	2b20      	cmp	r3, #32
  40114e:	d1d0      	bne.n	4010f2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401150:	4a22      	ldr	r2, [pc, #136]	; (4011dc <SystemCoreClockUpdate+0xfc>)
  401152:	4b20      	ldr	r3, [pc, #128]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
  401154:	601a      	str	r2, [r3, #0]
          break;
  401156:	e7cc      	b.n	4010f2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401158:	4a22      	ldr	r2, [pc, #136]	; (4011e4 <SystemCoreClockUpdate+0x104>)
  40115a:	4b1e      	ldr	r3, [pc, #120]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
  40115c:	601a      	str	r2, [r3, #0]
          break;
  40115e:	e7c8      	b.n	4010f2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401160:	4b1b      	ldr	r3, [pc, #108]	; (4011d0 <SystemCoreClockUpdate+0xf0>)
  401162:	6a1b      	ldr	r3, [r3, #32]
  401164:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401168:	d016      	beq.n	401198 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40116a:	4a1c      	ldr	r2, [pc, #112]	; (4011dc <SystemCoreClockUpdate+0xfc>)
  40116c:	4b19      	ldr	r3, [pc, #100]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
  40116e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401170:	4b17      	ldr	r3, [pc, #92]	; (4011d0 <SystemCoreClockUpdate+0xf0>)
  401172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401174:	f003 0303 	and.w	r3, r3, #3
  401178:	2b02      	cmp	r3, #2
  40117a:	d1ba      	bne.n	4010f2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40117c:	4a14      	ldr	r2, [pc, #80]	; (4011d0 <SystemCoreClockUpdate+0xf0>)
  40117e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401180:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401182:	4814      	ldr	r0, [pc, #80]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401184:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401188:	6803      	ldr	r3, [r0, #0]
  40118a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40118e:	b2d2      	uxtb	r2, r2
  401190:	fbb3 f3f2 	udiv	r3, r3, r2
  401194:	6003      	str	r3, [r0, #0]
  401196:	e7ac      	b.n	4010f2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401198:	4a11      	ldr	r2, [pc, #68]	; (4011e0 <SystemCoreClockUpdate+0x100>)
  40119a:	4b0e      	ldr	r3, [pc, #56]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
  40119c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40119e:	4b0c      	ldr	r3, [pc, #48]	; (4011d0 <SystemCoreClockUpdate+0xf0>)
  4011a0:	6a1b      	ldr	r3, [r3, #32]
  4011a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4011a6:	2b10      	cmp	r3, #16
  4011a8:	d005      	beq.n	4011b6 <SystemCoreClockUpdate+0xd6>
  4011aa:	2b20      	cmp	r3, #32
  4011ac:	d1e0      	bne.n	401170 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4011ae:	4a0b      	ldr	r2, [pc, #44]	; (4011dc <SystemCoreClockUpdate+0xfc>)
  4011b0:	4b08      	ldr	r3, [pc, #32]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
  4011b2:	601a      	str	r2, [r3, #0]
          break;
  4011b4:	e7dc      	b.n	401170 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4011b6:	4a0b      	ldr	r2, [pc, #44]	; (4011e4 <SystemCoreClockUpdate+0x104>)
  4011b8:	4b06      	ldr	r3, [pc, #24]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
  4011ba:	601a      	str	r2, [r3, #0]
          break;
  4011bc:	e7d8      	b.n	401170 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4011be:	4a05      	ldr	r2, [pc, #20]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
  4011c0:	6813      	ldr	r3, [r2, #0]
  4011c2:	4909      	ldr	r1, [pc, #36]	; (4011e8 <SystemCoreClockUpdate+0x108>)
  4011c4:	fba1 1303 	umull	r1, r3, r1, r3
  4011c8:	085b      	lsrs	r3, r3, #1
  4011ca:	6013      	str	r3, [r2, #0]
  4011cc:	4770      	bx	lr
  4011ce:	bf00      	nop
  4011d0:	400e0600 	.word	0x400e0600
  4011d4:	20400008 	.word	0x20400008
  4011d8:	400e1810 	.word	0x400e1810
  4011dc:	00b71b00 	.word	0x00b71b00
  4011e0:	003d0900 	.word	0x003d0900
  4011e4:	007a1200 	.word	0x007a1200
  4011e8:	aaaaaaab 	.word	0xaaaaaaab

004011ec <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4011ec:	4b16      	ldr	r3, [pc, #88]	; (401248 <system_init_flash+0x5c>)
  4011ee:	4298      	cmp	r0, r3
  4011f0:	d913      	bls.n	40121a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4011f2:	4b16      	ldr	r3, [pc, #88]	; (40124c <system_init_flash+0x60>)
  4011f4:	4298      	cmp	r0, r3
  4011f6:	d915      	bls.n	401224 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4011f8:	4b15      	ldr	r3, [pc, #84]	; (401250 <system_init_flash+0x64>)
  4011fa:	4298      	cmp	r0, r3
  4011fc:	d916      	bls.n	40122c <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4011fe:	4b15      	ldr	r3, [pc, #84]	; (401254 <system_init_flash+0x68>)
  401200:	4298      	cmp	r0, r3
  401202:	d917      	bls.n	401234 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401204:	4b14      	ldr	r3, [pc, #80]	; (401258 <system_init_flash+0x6c>)
  401206:	4298      	cmp	r0, r3
  401208:	d918      	bls.n	40123c <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40120a:	4b14      	ldr	r3, [pc, #80]	; (40125c <system_init_flash+0x70>)
  40120c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40120e:	bf94      	ite	ls
  401210:	4a13      	ldrls	r2, [pc, #76]	; (401260 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401212:	4a14      	ldrhi	r2, [pc, #80]	; (401264 <system_init_flash+0x78>)
  401214:	4b14      	ldr	r3, [pc, #80]	; (401268 <system_init_flash+0x7c>)
  401216:	601a      	str	r2, [r3, #0]
  401218:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40121a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40121e:	4b12      	ldr	r3, [pc, #72]	; (401268 <system_init_flash+0x7c>)
  401220:	601a      	str	r2, [r3, #0]
  401222:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401224:	4a11      	ldr	r2, [pc, #68]	; (40126c <system_init_flash+0x80>)
  401226:	4b10      	ldr	r3, [pc, #64]	; (401268 <system_init_flash+0x7c>)
  401228:	601a      	str	r2, [r3, #0]
  40122a:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40122c:	4a10      	ldr	r2, [pc, #64]	; (401270 <system_init_flash+0x84>)
  40122e:	4b0e      	ldr	r3, [pc, #56]	; (401268 <system_init_flash+0x7c>)
  401230:	601a      	str	r2, [r3, #0]
  401232:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401234:	4a0f      	ldr	r2, [pc, #60]	; (401274 <system_init_flash+0x88>)
  401236:	4b0c      	ldr	r3, [pc, #48]	; (401268 <system_init_flash+0x7c>)
  401238:	601a      	str	r2, [r3, #0]
  40123a:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40123c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401240:	4b09      	ldr	r3, [pc, #36]	; (401268 <system_init_flash+0x7c>)
  401242:	601a      	str	r2, [r3, #0]
  401244:	4770      	bx	lr
  401246:	bf00      	nop
  401248:	015ef3bf 	.word	0x015ef3bf
  40124c:	02bde77f 	.word	0x02bde77f
  401250:	041cdb3f 	.word	0x041cdb3f
  401254:	057bceff 	.word	0x057bceff
  401258:	06dac2bf 	.word	0x06dac2bf
  40125c:	0839b67f 	.word	0x0839b67f
  401260:	04000500 	.word	0x04000500
  401264:	04000600 	.word	0x04000600
  401268:	400e0c00 	.word	0x400e0c00
  40126c:	04000100 	.word	0x04000100
  401270:	04000200 	.word	0x04000200
  401274:	04000300 	.word	0x04000300

00401278 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401278:	4b0a      	ldr	r3, [pc, #40]	; (4012a4 <_sbrk+0x2c>)
  40127a:	681b      	ldr	r3, [r3, #0]
  40127c:	b153      	cbz	r3, 401294 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40127e:	4b09      	ldr	r3, [pc, #36]	; (4012a4 <_sbrk+0x2c>)
  401280:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401282:	181a      	adds	r2, r3, r0
  401284:	4908      	ldr	r1, [pc, #32]	; (4012a8 <_sbrk+0x30>)
  401286:	4291      	cmp	r1, r2
  401288:	db08      	blt.n	40129c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40128a:	4610      	mov	r0, r2
  40128c:	4a05      	ldr	r2, [pc, #20]	; (4012a4 <_sbrk+0x2c>)
  40128e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401290:	4618      	mov	r0, r3
  401292:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401294:	4a05      	ldr	r2, [pc, #20]	; (4012ac <_sbrk+0x34>)
  401296:	4b03      	ldr	r3, [pc, #12]	; (4012a4 <_sbrk+0x2c>)
  401298:	601a      	str	r2, [r3, #0]
  40129a:	e7f0      	b.n	40127e <_sbrk+0x6>
		return (caddr_t) -1;	
  40129c:	f04f 30ff 	mov.w	r0, #4294967295
}
  4012a0:	4770      	bx	lr
  4012a2:	bf00      	nop
  4012a4:	20401424 	.word	0x20401424
  4012a8:	2045fffc 	.word	0x2045fffc
  4012ac:	204036d8 	.word	0x204036d8

004012b0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4012b0:	f04f 30ff 	mov.w	r0, #4294967295
  4012b4:	4770      	bx	lr

004012b6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4012b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4012ba:	604b      	str	r3, [r1, #4]

	return 0;
}
  4012bc:	2000      	movs	r0, #0
  4012be:	4770      	bx	lr

004012c0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4012c0:	2001      	movs	r0, #1
  4012c2:	4770      	bx	lr

004012c4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4012c4:	2000      	movs	r0, #0
  4012c6:	4770      	bx	lr

004012c8 <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
  4012c8:	be00      	bkpt	0x0000
  4012ca:	e7fe      	b.n	4012ca <_exit+0x2>

004012cc <_kill>:
	for (;;);
}

extern void _kill(int pid, int sig)
{
  4012cc:	4770      	bx	lr

004012ce <_getpid>:
}

extern int _getpid(void)
{
	return -1;
}
  4012ce:	f04f 30ff 	mov.w	r0, #4294967295
  4012d2:	4770      	bx	lr

004012d4 <iCanHazTx>:
// 	printf("SCM: iCanHazTx: %p, 0x%x, %d\n", context, msgID, data);
// 	// candriver_error_poll();
// }

void iCanHazTx(ICANTxCtx_T context, uint32_t msgID, uint8_t * data, uint8_t length)
{
  4012d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4012d8:	b082      	sub	sp, #8
  4012da:	4607      	mov	r7, r0
  4012dc:	460c      	mov	r4, r1
  4012de:	4615      	mov	r5, r2
  4012e0:	4698      	mov	r8, r3
    uint32_t currTick = bb_port_get_current_ticks();
  4012e2:	4b09      	ldr	r3, [pc, #36]	; (401308 <iCanHazTx+0x34>)
  4012e4:	4798      	blx	r3
  4012e6:	4606      	mov	r6, r0
		TBD
	*/


        // startPtr += snprintf(dataStr + startPtr, maxBytes, "%02x ", data[i]);
		(void)candriver_send(msgID, data, length);
  4012e8:	4642      	mov	r2, r8
  4012ea:	4629      	mov	r1, r5
  4012ec:	4620      	mov	r0, r4
  4012ee:	4b07      	ldr	r3, [pc, #28]	; (40130c <iCanHazTx+0x38>)
  4012f0:	4798      	blx	r3

    printf("SCM: iCanHazTx: %d: %p, 0x%x: %s\n", currTick, context, msgID, data);
  4012f2:	9500      	str	r5, [sp, #0]
  4012f4:	4623      	mov	r3, r4
  4012f6:	463a      	mov	r2, r7
  4012f8:	4631      	mov	r1, r6
  4012fa:	4805      	ldr	r0, [pc, #20]	; (401310 <iCanHazTx+0x3c>)
  4012fc:	4c05      	ldr	r4, [pc, #20]	; (401314 <iCanHazTx+0x40>)
  4012fe:	47a0      	blx	r4
}
  401300:	b002      	add	sp, #8
  401302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401306:	bf00      	nop
  401308:	004003fd 	.word	0x004003fd
  40130c:	0040057d 	.word	0x0040057d
  401310:	00404d88 	.word	0x00404d88
  401314:	00401aa9 	.word	0x00401aa9

00401318 <doSCMtest2>:
#include "bb_tx_proc.h"

void bb_port_inc_ticks();

void doSCMtest2(void)
{
  401318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40131c:	b087      	sub	sp, #28

	// bb_set_RCM_ModuleId(42);
	// bb_set_RCM_Sensor1Voltage(3.5);
	// bb_set_RCM_Sensor1Temperature(4095.5);

	bb_set_SCM_motor1MaxSpeed(4095);
  40131e:	481a      	ldr	r0, [pc, #104]	; (401388 <doSCMtest2+0x70>)
  401320:	4b1a      	ldr	r3, [pc, #104]	; (40138c <doSCMtest2+0x74>)
  401322:	4798      	blx	r3
	bb_set_SCM_motor1MinSpeed(5072);
  401324:	481a      	ldr	r0, [pc, #104]	; (401390 <doSCMtest2+0x78>)
  401326:	4b1b      	ldr	r3, [pc, #108]	; (401394 <doSCMtest2+0x7c>)
  401328:	4798      	blx	r3
	bb_set_SCM_Motor1Control(42);
  40132a:	202a      	movs	r0, #42	; 0x2a
  40132c:	4b1a      	ldr	r3, [pc, #104]	; (401398 <doSCMtest2+0x80>)
  40132e:	4798      	blx	r3

	uint32_t currTicks = 0; //bb_port_get_current_tick();
	uint32_t prevTicks = currTicks;
	bb_tx_proc_init(&bbtxProc, 10000, icanHazTxers, sizeof(icanHazTxers)/sizeof(icanHazTxers[0]), currTicks);
  401330:	2500      	movs	r5, #0
  401332:	9500      	str	r5, [sp, #0]
  401334:	2301      	movs	r3, #1
  401336:	4a19      	ldr	r2, [pc, #100]	; (40139c <doSCMtest2+0x84>)
  401338:	f242 7110 	movw	r1, #10000	; 0x2710
  40133c:	a803      	add	r0, sp, #12
  40133e:	4c18      	ldr	r4, [pc, #96]	; (4013a0 <doSCMtest2+0x88>)
  401340:	47a0      	blx	r4
  401342:	2464      	movs	r4, #100	; 0x64
	uint32_t prevTicks = currTicks;
  401344:	46a9      	mov	r9, r5

	for (int i = 0; i < 100; i++)
	{
		currTicks = bb_port_get_current_ticks();
  401346:	f8df 8078 	ldr.w	r8, [pc, #120]	; 4013c0 <doSCMtest2+0xa8>
		uint32_t sleepTicks = bb_tx_proc_process_tx(&bbtxProc, currTicks, prevTicks);
  40134a:	4f16      	ldr	r7, [pc, #88]	; (4013a4 <doSCMtest2+0x8c>)
		if (sleepTicks > 200)
		{
			sleepTicks = 200;
		}
		prevTicks = currTicks;
		bb_port_inc_ticks(sleepTicks);
  40134c:	4e16      	ldr	r6, [pc, #88]	; (4013a8 <doSCMtest2+0x90>)
		currTicks = bb_port_get_current_ticks();
  40134e:	47c0      	blx	r8
  401350:	4605      	mov	r5, r0
		uint32_t sleepTicks = bb_tx_proc_process_tx(&bbtxProc, currTicks, prevTicks);
  401352:	464a      	mov	r2, r9
  401354:	4601      	mov	r1, r0
  401356:	a803      	add	r0, sp, #12
  401358:	47b8      	blx	r7
		bb_port_inc_ticks(sleepTicks);
  40135a:	28c8      	cmp	r0, #200	; 0xc8
  40135c:	bf28      	it	cs
  40135e:	20c8      	movcs	r0, #200	; 0xc8
  401360:	47b0      	blx	r6
		 g_tx_tick_count_ms++;
  401362:	4a12      	ldr	r2, [pc, #72]	; (4013ac <doSCMtest2+0x94>)
  401364:	6813      	ldr	r3, [r2, #0]
  401366:	3301      	adds	r3, #1
  401368:	6013      	str	r3, [r2, #0]
		prevTicks = currTicks;
  40136a:	46a9      	mov	r9, r5
	for (int i = 0; i < 100; i++)
  40136c:	3c01      	subs	r4, #1
  40136e:	d1ee      	bne.n	40134e <doSCMtest2+0x36>
	}

	BlackboardElement_T * bbElement = bb_get_element(CAN_ELEM_RCM_System);
  401370:	2003      	movs	r0, #3
  401372:	4b0f      	ldr	r3, [pc, #60]	; (4013b0 <doSCMtest2+0x98>)
  401374:	4798      	blx	r3
	bb_elem_set_data_from_can(bbElement, CAN_ELEM_RCM_System, 0xDECAFC0F, 0xFEEBEBAD);
  401376:	4b0f      	ldr	r3, [pc, #60]	; (4013b4 <doSCMtest2+0x9c>)
  401378:	4a0f      	ldr	r2, [pc, #60]	; (4013b8 <doSCMtest2+0xa0>)
  40137a:	2103      	movs	r1, #3
  40137c:	4c0f      	ldr	r4, [pc, #60]	; (4013bc <doSCMtest2+0xa4>)
  40137e:	47a0      	blx	r4
	// bb_elem_get_data_for_can(bbElement, &tx_data[0], &tx_data[1]);
  401380:	b007      	add	sp, #28
  401382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401386:	bf00      	nop
  401388:	457ff000 	.word	0x457ff000
  40138c:	004004a5 	.word	0x004004a5
  401390:	459e8000 	.word	0x459e8000
  401394:	004004e9 	.word	0x004004e9
  401398:	0040052d 	.word	0x0040052d
  40139c:	2040000c 	.word	0x2040000c
  4013a0:	004002a1 	.word	0x004002a1
  4013a4:	00400355 	.word	0x00400355
  4013a8:	004003ed 	.word	0x004003ed
  4013ac:	20401430 	.word	0x20401430
  4013b0:	00400499 	.word	0x00400499
  4013b4:	feebebad 	.word	0xfeebebad
  4013b8:	decafc0f 	.word	0xdecafc0f
  4013bc:	00400209 	.word	0x00400209
  4013c0:	004003fd 	.word	0x004003fd

004013c4 <configure_mcan>:
/**
 * \brief MCAN module initialization.
 *
 */
static void configure_mcan(void)
{
  4013c4:	b510      	push	{r4, lr}
  4013c6:	b08a      	sub	sp, #40	; 0x28
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->run_in_standby = false;
  4013c8:	2300      	movs	r3, #0
  4013ca:	f88d 3004 	strb.w	r3, [sp, #4]
	config->watchdog_configuration = 0x00;
  4013ce:	f88d 3005 	strb.w	r3, [sp, #5]
	config->transmit_pause = true;
  4013d2:	2201      	movs	r2, #1
  4013d4:	f88d 2006 	strb.w	r2, [sp, #6]
	config->edge_filtering = true;
  4013d8:	f88d 2007 	strb.w	r2, [sp, #7]
	config->protocol_exception_handling = true;
  4013dc:	f88d 2008 	strb.w	r2, [sp, #8]
	config->automatic_retransmission = true;
  4013e0:	f88d 2009 	strb.w	r2, [sp, #9]
	config->clock_stop_request = false;
  4013e4:	f88d 300a 	strb.w	r3, [sp, #10]
	config->clock_stop_acknowledge = false;
  4013e8:	f88d 300b 	strb.w	r3, [sp, #11]
	config->timestamp_prescaler = 0;
  4013ec:	f88d 300c 	strb.w	r3, [sp, #12]
	config->timeout_period = 0xFFFF;
  4013f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4013f4:	f8ad 100e 	strh.w	r1, [sp, #14]
	config->timeout_mode = MCAN_TIMEOUT_CONTINUES;
  4013f8:	f88d 3010 	strb.w	r3, [sp, #16]
	config->timeout_enable = false;
  4013fc:	f88d 3011 	strb.w	r3, [sp, #17]
	config->tdc_enable = false;
  401400:	f88d 3012 	strb.w	r3, [sp, #18]
	config->delay_compensation_offset = 0;
  401404:	f88d 3013 	strb.w	r3, [sp, #19]
#if (SAMV71B || SAME70B || SAMV70B)
	config->delay_compensation_filter_window_length = 0;
  401408:	f88d 3014 	strb.w	r3, [sp, #20]
#endif
	config->nonmatching_frames_action_standard = MCAN_NONMATCHING_FRAMES_REJECT;
  40140c:	2102      	movs	r1, #2
  40140e:	f88d 1015 	strb.w	r1, [sp, #21]
	config->nonmatching_frames_action_extended = MCAN_NONMATCHING_FRAMES_REJECT;
  401412:	f88d 1016 	strb.w	r1, [sp, #22]
	config->remote_frames_standard_reject = true;
  401416:	f88d 2017 	strb.w	r2, [sp, #23]
	config->remote_frames_extended_reject = true;
  40141a:	f88d 2018 	strb.w	r2, [sp, #24]
	config->extended_id_mask = 0x1FFFFFFF;
  40141e:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
  401422:	9107      	str	r1, [sp, #28]
	config->rx_fifo_0_overwrite = true;
  401424:	f88d 2020 	strb.w	r2, [sp, #32]
	config->rx_fifo_0_watermark = 0;
  401428:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	config->rx_fifo_1_overwrite = true;
  40142c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
	config->rx_fifo_1_watermark = 0;
  401430:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	config->tx_queue_mode = false;
  401434:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	config->tx_event_fifo_watermark = 0;
  401438:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	}

	/* Initialize the module. */
	struct mcan_config config_mcan;
	mcan_get_config_defaults(&config_mcan);
	mcan_init(&mcan_instance, MCAN_MODULE, &config_mcan);
  40143c:	4c0b      	ldr	r4, [pc, #44]	; (40146c <configure_mcan+0xa8>)
  40143e:	aa01      	add	r2, sp, #4
  401440:	490b      	ldr	r1, [pc, #44]	; (401470 <configure_mcan+0xac>)
  401442:	4620      	mov	r0, r4
  401444:	4b0b      	ldr	r3, [pc, #44]	; (401474 <configure_mcan+0xb0>)
  401446:	4798      	blx	r3


	mcan_start(&mcan_instance);
  401448:	4620      	mov	r0, r4
  40144a:	4b0b      	ldr	r3, [pc, #44]	; (401478 <configure_mcan+0xb4>)
  40144c:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40144e:	4b0b      	ldr	r3, [pc, #44]	; (40147c <configure_mcan+0xb8>)
  401450:	2220      	movs	r2, #32
  401452:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  401456:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40145a:	605a      	str	r2, [r3, #4]
 * \param[in] source  Interrupt source type
 */
static inline void mcan_enable_interrupt(struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
	module_inst->hw->MCAN_IE |= source;
  40145c:	6822      	ldr	r2, [r4, #0]
  40145e:	6d53      	ldr	r3, [r2, #84]	; 0x54
  401460:	f043 43c4 	orr.w	r3, r3, #1644167168	; 0x62000000
  401464:	6553      	str	r3, [r2, #84]	; 0x54
	/* Enable interrupts for this MCAN module */
	irq_register_handler(MCAN1_INT0_IRQn, 1);
	mcan_enable_interrupt(&mcan_instance, MCAN_FORMAT_ERROR | MCAN_ACKNOWLEDGE_ERROR | MCAN_BUS_OFF);


}
  401466:	b00a      	add	sp, #40	; 0x28
  401468:	bd10      	pop	{r4, pc}
  40146a:	bf00      	nop
  40146c:	20401434 	.word	0x20401434
  401470:	40034000 	.word	0x40034000
  401474:	00400869 	.word	0x00400869
  401478:	00400add 	.word	0x00400add
  40147c:	e000e100 	.word	0xe000e100

00401480 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401480:	b5f0      	push	{r4, r5, r6, r7, lr}
  401482:	b083      	sub	sp, #12
  401484:	4605      	mov	r5, r0
  401486:	460c      	mov	r4, r1
	uint32_t val = 0;
  401488:	2300      	movs	r3, #0
  40148a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40148c:	4b2a      	ldr	r3, [pc, #168]	; (401538 <usart_serial_getchar+0xb8>)
  40148e:	4298      	cmp	r0, r3
  401490:	d013      	beq.n	4014ba <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401492:	4b2a      	ldr	r3, [pc, #168]	; (40153c <usart_serial_getchar+0xbc>)
  401494:	4298      	cmp	r0, r3
  401496:	d018      	beq.n	4014ca <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401498:	4b29      	ldr	r3, [pc, #164]	; (401540 <usart_serial_getchar+0xc0>)
  40149a:	4298      	cmp	r0, r3
  40149c:	d01d      	beq.n	4014da <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40149e:	4b29      	ldr	r3, [pc, #164]	; (401544 <usart_serial_getchar+0xc4>)
  4014a0:	429d      	cmp	r5, r3
  4014a2:	d022      	beq.n	4014ea <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4014a4:	4b28      	ldr	r3, [pc, #160]	; (401548 <usart_serial_getchar+0xc8>)
  4014a6:	429d      	cmp	r5, r3
  4014a8:	d027      	beq.n	4014fa <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4014aa:	4b28      	ldr	r3, [pc, #160]	; (40154c <usart_serial_getchar+0xcc>)
  4014ac:	429d      	cmp	r5, r3
  4014ae:	d02e      	beq.n	40150e <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4014b0:	4b27      	ldr	r3, [pc, #156]	; (401550 <usart_serial_getchar+0xd0>)
  4014b2:	429d      	cmp	r5, r3
  4014b4:	d035      	beq.n	401522 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4014b6:	b003      	add	sp, #12
  4014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4014ba:	461f      	mov	r7, r3
  4014bc:	4e25      	ldr	r6, [pc, #148]	; (401554 <usart_serial_getchar+0xd4>)
  4014be:	4621      	mov	r1, r4
  4014c0:	4638      	mov	r0, r7
  4014c2:	47b0      	blx	r6
  4014c4:	2800      	cmp	r0, #0
  4014c6:	d1fa      	bne.n	4014be <usart_serial_getchar+0x3e>
  4014c8:	e7e9      	b.n	40149e <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4014ca:	461f      	mov	r7, r3
  4014cc:	4e21      	ldr	r6, [pc, #132]	; (401554 <usart_serial_getchar+0xd4>)
  4014ce:	4621      	mov	r1, r4
  4014d0:	4638      	mov	r0, r7
  4014d2:	47b0      	blx	r6
  4014d4:	2800      	cmp	r0, #0
  4014d6:	d1fa      	bne.n	4014ce <usart_serial_getchar+0x4e>
  4014d8:	e7e4      	b.n	4014a4 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4014da:	461f      	mov	r7, r3
  4014dc:	4e1d      	ldr	r6, [pc, #116]	; (401554 <usart_serial_getchar+0xd4>)
  4014de:	4621      	mov	r1, r4
  4014e0:	4638      	mov	r0, r7
  4014e2:	47b0      	blx	r6
  4014e4:	2800      	cmp	r0, #0
  4014e6:	d1fa      	bne.n	4014de <usart_serial_getchar+0x5e>
  4014e8:	e7df      	b.n	4014aa <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4014ea:	461f      	mov	r7, r3
  4014ec:	4e19      	ldr	r6, [pc, #100]	; (401554 <usart_serial_getchar+0xd4>)
  4014ee:	4621      	mov	r1, r4
  4014f0:	4638      	mov	r0, r7
  4014f2:	47b0      	blx	r6
  4014f4:	2800      	cmp	r0, #0
  4014f6:	d1fa      	bne.n	4014ee <usart_serial_getchar+0x6e>
  4014f8:	e7da      	b.n	4014b0 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4014fa:	461e      	mov	r6, r3
  4014fc:	4d16      	ldr	r5, [pc, #88]	; (401558 <usart_serial_getchar+0xd8>)
  4014fe:	a901      	add	r1, sp, #4
  401500:	4630      	mov	r0, r6
  401502:	47a8      	blx	r5
  401504:	2800      	cmp	r0, #0
  401506:	d1fa      	bne.n	4014fe <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  401508:	9b01      	ldr	r3, [sp, #4]
  40150a:	7023      	strb	r3, [r4, #0]
  40150c:	e7d3      	b.n	4014b6 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40150e:	461e      	mov	r6, r3
  401510:	4d11      	ldr	r5, [pc, #68]	; (401558 <usart_serial_getchar+0xd8>)
  401512:	a901      	add	r1, sp, #4
  401514:	4630      	mov	r0, r6
  401516:	47a8      	blx	r5
  401518:	2800      	cmp	r0, #0
  40151a:	d1fa      	bne.n	401512 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  40151c:	9b01      	ldr	r3, [sp, #4]
  40151e:	7023      	strb	r3, [r4, #0]
  401520:	e7c9      	b.n	4014b6 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  401522:	461e      	mov	r6, r3
  401524:	4d0c      	ldr	r5, [pc, #48]	; (401558 <usart_serial_getchar+0xd8>)
  401526:	a901      	add	r1, sp, #4
  401528:	4630      	mov	r0, r6
  40152a:	47a8      	blx	r5
  40152c:	2800      	cmp	r0, #0
  40152e:	d1fa      	bne.n	401526 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  401530:	9b01      	ldr	r3, [sp, #4]
  401532:	7023      	strb	r3, [r4, #0]
}
  401534:	e7bf      	b.n	4014b6 <usart_serial_getchar+0x36>
  401536:	bf00      	nop
  401538:	400e0800 	.word	0x400e0800
  40153c:	400e0a00 	.word	0x400e0a00
  401540:	400e1a00 	.word	0x400e1a00
  401544:	400e1c00 	.word	0x400e1c00
  401548:	40024000 	.word	0x40024000
  40154c:	40028000 	.word	0x40028000
  401550:	4002c000 	.word	0x4002c000
  401554:	00400ef3 	.word	0x00400ef3
  401558:	00400fff 	.word	0x00400fff

0040155c <usart_serial_putchar>:
{
  40155c:	b570      	push	{r4, r5, r6, lr}
  40155e:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  401560:	4b2a      	ldr	r3, [pc, #168]	; (40160c <usart_serial_putchar+0xb0>)
  401562:	4298      	cmp	r0, r3
  401564:	d013      	beq.n	40158e <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  401566:	4b2a      	ldr	r3, [pc, #168]	; (401610 <usart_serial_putchar+0xb4>)
  401568:	4298      	cmp	r0, r3
  40156a:	d019      	beq.n	4015a0 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  40156c:	4b29      	ldr	r3, [pc, #164]	; (401614 <usart_serial_putchar+0xb8>)
  40156e:	4298      	cmp	r0, r3
  401570:	d01f      	beq.n	4015b2 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  401572:	4b29      	ldr	r3, [pc, #164]	; (401618 <usart_serial_putchar+0xbc>)
  401574:	4298      	cmp	r0, r3
  401576:	d025      	beq.n	4015c4 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  401578:	4b28      	ldr	r3, [pc, #160]	; (40161c <usart_serial_putchar+0xc0>)
  40157a:	4298      	cmp	r0, r3
  40157c:	d02b      	beq.n	4015d6 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  40157e:	4b28      	ldr	r3, [pc, #160]	; (401620 <usart_serial_putchar+0xc4>)
  401580:	4298      	cmp	r0, r3
  401582:	d031      	beq.n	4015e8 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  401584:	4b27      	ldr	r3, [pc, #156]	; (401624 <usart_serial_putchar+0xc8>)
  401586:	4298      	cmp	r0, r3
  401588:	d037      	beq.n	4015fa <usart_serial_putchar+0x9e>
	return 0;
  40158a:	2000      	movs	r0, #0
}
  40158c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40158e:	461e      	mov	r6, r3
  401590:	4d25      	ldr	r5, [pc, #148]	; (401628 <usart_serial_putchar+0xcc>)
  401592:	4621      	mov	r1, r4
  401594:	4630      	mov	r0, r6
  401596:	47a8      	blx	r5
  401598:	2800      	cmp	r0, #0
  40159a:	d1fa      	bne.n	401592 <usart_serial_putchar+0x36>
		return 1;
  40159c:	2001      	movs	r0, #1
  40159e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4015a0:	461e      	mov	r6, r3
  4015a2:	4d21      	ldr	r5, [pc, #132]	; (401628 <usart_serial_putchar+0xcc>)
  4015a4:	4621      	mov	r1, r4
  4015a6:	4630      	mov	r0, r6
  4015a8:	47a8      	blx	r5
  4015aa:	2800      	cmp	r0, #0
  4015ac:	d1fa      	bne.n	4015a4 <usart_serial_putchar+0x48>
		return 1;
  4015ae:	2001      	movs	r0, #1
  4015b0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4015b2:	461e      	mov	r6, r3
  4015b4:	4d1c      	ldr	r5, [pc, #112]	; (401628 <usart_serial_putchar+0xcc>)
  4015b6:	4621      	mov	r1, r4
  4015b8:	4630      	mov	r0, r6
  4015ba:	47a8      	blx	r5
  4015bc:	2800      	cmp	r0, #0
  4015be:	d1fa      	bne.n	4015b6 <usart_serial_putchar+0x5a>
		return 1;
  4015c0:	2001      	movs	r0, #1
  4015c2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4015c4:	461e      	mov	r6, r3
  4015c6:	4d18      	ldr	r5, [pc, #96]	; (401628 <usart_serial_putchar+0xcc>)
  4015c8:	4621      	mov	r1, r4
  4015ca:	4630      	mov	r0, r6
  4015cc:	47a8      	blx	r5
  4015ce:	2800      	cmp	r0, #0
  4015d0:	d1fa      	bne.n	4015c8 <usart_serial_putchar+0x6c>
		return 1;
  4015d2:	2001      	movs	r0, #1
  4015d4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4015d6:	461e      	mov	r6, r3
  4015d8:	4d14      	ldr	r5, [pc, #80]	; (40162c <usart_serial_putchar+0xd0>)
  4015da:	4621      	mov	r1, r4
  4015dc:	4630      	mov	r0, r6
  4015de:	47a8      	blx	r5
  4015e0:	2800      	cmp	r0, #0
  4015e2:	d1fa      	bne.n	4015da <usart_serial_putchar+0x7e>
		return 1;
  4015e4:	2001      	movs	r0, #1
  4015e6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4015e8:	461e      	mov	r6, r3
  4015ea:	4d10      	ldr	r5, [pc, #64]	; (40162c <usart_serial_putchar+0xd0>)
  4015ec:	4621      	mov	r1, r4
  4015ee:	4630      	mov	r0, r6
  4015f0:	47a8      	blx	r5
  4015f2:	2800      	cmp	r0, #0
  4015f4:	d1fa      	bne.n	4015ec <usart_serial_putchar+0x90>
		return 1;
  4015f6:	2001      	movs	r0, #1
  4015f8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4015fa:	461e      	mov	r6, r3
  4015fc:	4d0b      	ldr	r5, [pc, #44]	; (40162c <usart_serial_putchar+0xd0>)
  4015fe:	4621      	mov	r1, r4
  401600:	4630      	mov	r0, r6
  401602:	47a8      	blx	r5
  401604:	2800      	cmp	r0, #0
  401606:	d1fa      	bne.n	4015fe <usart_serial_putchar+0xa2>
		return 1;
  401608:	2001      	movs	r0, #1
  40160a:	bd70      	pop	{r4, r5, r6, pc}
  40160c:	400e0800 	.word	0x400e0800
  401610:	400e0a00 	.word	0x400e0a00
  401614:	400e1a00 	.word	0x400e1a00
  401618:	400e1c00 	.word	0x400e1c00
  40161c:	40024000 	.word	0x40024000
  401620:	40028000 	.word	0x40028000
  401624:	4002c000 	.word	0x4002c000
  401628:	00400ee1 	.word	0x00400ee1
  40162c:	00400fe9 	.word	0x00400fe9

00401630 <mcan_send_standard_message>:
 *\param *data  content to be sent
 *\param data_length data length code
 */
void mcan_send_standard_message(uint32_t id_value, uint8_t *data,
		uint32_t data_length)
{
  401630:	b510      	push	{r4, lr}
  401632:	b084      	sub	sp, #16
	tx_element->T0.reg = 0;
  401634:	2300      	movs	r3, #0
  401636:	9300      	str	r3, [sp, #0]
	tx_element->T1.reg = MCAN_TX_ELEMENT_T1_EFC |
  401638:	f44f 0308 	mov.w	r3, #8912896	; 0x880000
  40163c:	9301      	str	r3, [sp, #4]
	uint32_t i;
	struct mcan_tx_element tx_element;

	mcan_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= MCAN_TX_ELEMENT_T0_STANDARD_ID(id_value);
  40163e:	9c00      	ldr	r4, [sp, #0]
  401640:	4b11      	ldr	r3, [pc, #68]	; (401688 <mcan_send_standard_message+0x58>)
  401642:	ea03 4080 	and.w	r0, r3, r0, lsl #18
  401646:	4320      	orrs	r0, r4
  401648:	9000      	str	r0, [sp, #0]
	tx_element.T1.bit.DLC = data_length;
  40164a:	9b01      	ldr	r3, [sp, #4]
  40164c:	f362 4313 	bfi	r3, r2, #16, #4
  401650:	9301      	str	r3, [sp, #4]
	for (i = 0; i < data_length; i++) {
  401652:	b142      	cbz	r2, 401666 <mcan_send_standard_message+0x36>
  401654:	460b      	mov	r3, r1
  401656:	a802      	add	r0, sp, #8
  401658:	4411      	add	r1, r2
		tx_element.data[i] = *data;
  40165a:	f813 4b01 	ldrb.w	r4, [r3], #1
  40165e:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < data_length; i++) {
  401662:	428b      	cmp	r3, r1
  401664:	d1f9      	bne.n	40165a <mcan_send_standard_message+0x2a>
		data++;
	}

	mcan_set_tx_buffer_element(&mcan_instance, &tx_element,
  401666:	4c09      	ldr	r4, [pc, #36]	; (40168c <mcan_send_standard_message+0x5c>)
  401668:	2200      	movs	r2, #0
  40166a:	4669      	mov	r1, sp
  40166c:	4620      	mov	r0, r4
  40166e:	4b08      	ldr	r3, [pc, #32]	; (401690 <mcan_send_standard_message+0x60>)
  401670:	4798      	blx	r3
	if (module_inst->hw->MCAN_CCCR & MCAN_CCCR_CCE) {
  401672:	6823      	ldr	r3, [r4, #0]
  401674:	699a      	ldr	r2, [r3, #24]
  401676:	f012 0f02 	tst.w	r2, #2
  40167a:	d102      	bne.n	401682 <mcan_send_standard_message+0x52>
	module_inst->hw->MCAN_TXBAR = trig_mask;
  40167c:	2201      	movs	r2, #1
  40167e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
			MCAN_TX_BUFFER_INDEX);
	mcan_tx_transfer_request(&mcan_instance, 1 << MCAN_TX_BUFFER_INDEX);
}
  401682:	b004      	add	sp, #16
  401684:	bd10      	pop	{r4, pc}
  401686:	bf00      	nop
  401688:	1ffc0000 	.word	0x1ffc0000
  40168c:	20401434 	.word	0x20401434
  401690:	00400c05 	.word	0x00400c05

00401694 <MCAN1_INT0_Handler>:
/**
 * \brief Interrupt handler for MCAN,
 *   inlcuding RX,TX,ERROR and so on processes.
 */
void MCAN1_INT0_Handler(void)
{
  401694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401698:	b084      	sub	sp, #16
 * \param[in] module_inst  Pointer to the MCAN software instance struct
 */
static inline uint32_t mcan_read_interrupt_status(
		struct mcan_module *const module_inst)
{
	return module_inst->hw->MCAN_IR;
  40169a:	4b8e      	ldr	r3, [pc, #568]	; (4018d4 <MCAN1_INT0_Handler+0x240>)
  40169c:	681b      	ldr	r3, [r3, #0]
  40169e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
	volatile uint32_t status, i, rx_buffer_index;
	status = mcan_read_interrupt_status(&mcan_instance);
  4016a0:	9203      	str	r2, [sp, #12]

	if (status & MCAN_RX_BUFFER_NEW_MESSAGE) {
  4016a2:	9a03      	ldr	r2, [sp, #12]
  4016a4:	f412 2f00 	tst.w	r2, #524288	; 0x80000
  4016a8:	d067      	beq.n	40177a <MCAN1_INT0_Handler+0xe6>
 */
static inline void mcan_clear_interrupt_status(
		struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
	module_inst->hw->MCAN_IR = source;
  4016aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4016ae:	651a      	str	r2, [r3, #80]	; 0x50
		mcan_clear_interrupt_status(&mcan_instance, MCAN_RX_BUFFER_NEW_MESSAGE);
		for (i = 0; i < CONF_MCAN0_RX_BUFFER_NUM; i++) {
  4016b0:	2300      	movs	r3, #0
  4016b2:	9302      	str	r3, [sp, #8]
  4016b4:	9b02      	ldr	r3, [sp, #8]
  4016b6:	2b0f      	cmp	r3, #15
  4016b8:	d85f      	bhi.n	40177a <MCAN1_INT0_Handler+0xe6>
		if (module_inst->hw->MCAN_NDAT1 & (1 << index)) {
  4016ba:	4f86      	ldr	r7, [pc, #536]	; (4018d4 <MCAN1_INT0_Handler+0x240>)
			if (mcan_rx_get_buffer_status(&mcan_instance, i)) {
				rx_buffer_index = i;
				mcan_rx_clear_buffer_status(&mcan_instance, i);
				mcan_get_rx_buffer_element(&mcan_instance, &rx_element_buffer,
  4016bc:	4c86      	ldr	r4, [pc, #536]	; (4018d8 <MCAN1_INT0_Handler+0x244>)
  4016be:	f8df 8264 	ldr.w	r8, [pc, #612]	; 401924 <MCAN1_INT0_Handler+0x290>
  4016c2:	e03f      	b.n	401744 <MCAN1_INT0_Handler+0xb0>
		if (module_inst->hw->MCAN_NDAT2 & (1 << index)) {
  4016c4:	683a      	ldr	r2, [r7, #0]
  4016c6:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
		index -= 32;
  4016ca:	3b20      	subs	r3, #32
		if (module_inst->hw->MCAN_NDAT2 & (1 << index)) {
  4016cc:	2201      	movs	r2, #1
  4016ce:	fa02 f303 	lsl.w	r3, r2, r3
  4016d2:	420b      	tst	r3, r1
  4016d4:	bf14      	ite	ne
  4016d6:	4613      	movne	r3, r2
  4016d8:	2300      	moveq	r3, #0
  4016da:	e040      	b.n	40175e <MCAN1_INT0_Handler+0xca>
		module_inst->hw->MCAN_NDAT2 = (1 << index);
  4016dc:	6839      	ldr	r1, [r7, #0]
		index -= 32;
  4016de:	3b20      	subs	r3, #32
		module_inst->hw->MCAN_NDAT2 = (1 << index);
  4016e0:	2201      	movs	r2, #1
  4016e2:	fa02 f303 	lsl.w	r3, r2, r3
  4016e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  4016ea:	9a01      	ldr	r2, [sp, #4]
  4016ec:	4621      	mov	r1, r4
  4016ee:	4638      	mov	r0, r7
  4016f0:	47c0      	blx	r8
				rx_buffer_index);
				if (rx_element_buffer.R0.bit.XTD) {
  4016f2:	6823      	ldr	r3, [r4, #0]
  4016f4:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
					printf("\n\r Extended message received in Rx buffer. The received data is: \r\n");
  4016f8:	bf14      	ite	ne
  4016fa:	4878      	ldrne	r0, [pc, #480]	; (4018dc <MCAN1_INT0_Handler+0x248>)
				} else {
					printf("\n\r Standard message received in Rx buffer. The received data is: \r\n");
  4016fc:	4878      	ldreq	r0, [pc, #480]	; (4018e0 <MCAN1_INT0_Handler+0x24c>)
  4016fe:	4b79      	ldr	r3, [pc, #484]	; (4018e4 <MCAN1_INT0_Handler+0x250>)
  401700:	4798      	blx	r3
				}
				for (i = 0; i < rx_element_buffer.R1.bit.DLC; i++) {
  401702:	2300      	movs	r3, #0
  401704:	9302      	str	r3, [sp, #8]
  401706:	6863      	ldr	r3, [r4, #4]
  401708:	f3c3 4303 	ubfx	r3, r3, #16, #4
  40170c:	9a02      	ldr	r2, [sp, #8]
  40170e:	4293      	cmp	r3, r2
  401710:	d90f      	bls.n	401732 <MCAN1_INT0_Handler+0x9e>
					printf("  %d",rx_element_buffer.data[i]);
  401712:	4e75      	ldr	r6, [pc, #468]	; (4018e8 <MCAN1_INT0_Handler+0x254>)
  401714:	4d73      	ldr	r5, [pc, #460]	; (4018e4 <MCAN1_INT0_Handler+0x250>)
  401716:	9b02      	ldr	r3, [sp, #8]
  401718:	4423      	add	r3, r4
  40171a:	7a19      	ldrb	r1, [r3, #8]
  40171c:	4630      	mov	r0, r6
  40171e:	47a8      	blx	r5
				for (i = 0; i < rx_element_buffer.R1.bit.DLC; i++) {
  401720:	9b02      	ldr	r3, [sp, #8]
  401722:	3301      	adds	r3, #1
  401724:	9302      	str	r3, [sp, #8]
  401726:	6863      	ldr	r3, [r4, #4]
  401728:	f3c3 4303 	ubfx	r3, r3, #16, #4
  40172c:	9a02      	ldr	r2, [sp, #8]
  40172e:	4293      	cmp	r3, r2
  401730:	d8f1      	bhi.n	401716 <MCAN1_INT0_Handler+0x82>
				}
				printf("\r\n\r\n");
  401732:	486e      	ldr	r0, [pc, #440]	; (4018ec <MCAN1_INT0_Handler+0x258>)
  401734:	4b6b      	ldr	r3, [pc, #428]	; (4018e4 <MCAN1_INT0_Handler+0x250>)
  401736:	4798      	blx	r3
		for (i = 0; i < CONF_MCAN0_RX_BUFFER_NUM; i++) {
  401738:	9b02      	ldr	r3, [sp, #8]
  40173a:	3301      	adds	r3, #1
  40173c:	9302      	str	r3, [sp, #8]
  40173e:	9b02      	ldr	r3, [sp, #8]
  401740:	2b0f      	cmp	r3, #15
  401742:	d81a      	bhi.n	40177a <MCAN1_INT0_Handler+0xe6>
			if (mcan_rx_get_buffer_status(&mcan_instance, i)) {
  401744:	9b02      	ldr	r3, [sp, #8]
	if (index < 32) {
  401746:	2b1f      	cmp	r3, #31
  401748:	d8bc      	bhi.n	4016c4 <MCAN1_INT0_Handler+0x30>
		if (module_inst->hw->MCAN_NDAT1 & (1 << index)) {
  40174a:	683a      	ldr	r2, [r7, #0]
  40174c:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
  401750:	2201      	movs	r2, #1
  401752:	fa02 f303 	lsl.w	r3, r2, r3
  401756:	420b      	tst	r3, r1
  401758:	bf14      	ite	ne
  40175a:	4613      	movne	r3, r2
  40175c:	2300      	moveq	r3, #0
  40175e:	2b00      	cmp	r3, #0
  401760:	d0ea      	beq.n	401738 <MCAN1_INT0_Handler+0xa4>
				rx_buffer_index = i;
  401762:	9b02      	ldr	r3, [sp, #8]
  401764:	9301      	str	r3, [sp, #4]
				mcan_rx_clear_buffer_status(&mcan_instance, i);
  401766:	9b02      	ldr	r3, [sp, #8]
	if (index < 32) {
  401768:	2b1f      	cmp	r3, #31
  40176a:	d8b7      	bhi.n	4016dc <MCAN1_INT0_Handler+0x48>
		module_inst->hw->MCAN_NDAT1 = (1 << index);
  40176c:	6839      	ldr	r1, [r7, #0]
  40176e:	2201      	movs	r2, #1
  401770:	fa02 f303 	lsl.w	r3, r2, r3
  401774:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  401778:	e7b7      	b.n	4016ea <MCAN1_INT0_Handler+0x56>
			}
		}
	}

	if (status & MCAN_RX_FIFO_0_NEW_MESSAGE) {
  40177a:	9b03      	ldr	r3, [sp, #12]
  40177c:	f013 0f01 	tst.w	r3, #1
  401780:	d115      	bne.n	4017ae <MCAN1_INT0_Handler+0x11a>
			printf("  %d",rx_element_fifo_0.data[i]);
		}
		printf("\r\n\r\n");
	}

	if (status & MCAN_RX_FIFO_1_NEW_MESSAGE) {
  401782:	9b03      	ldr	r3, [sp, #12]
  401784:	f013 0f10 	tst.w	r3, #16
  401788:	d14b      	bne.n	401822 <MCAN1_INT0_Handler+0x18e>
			printf("  %d",rx_element_fifo_1.data[i]);
		}
		printf("\r\n\r\n");
	}

	if (status & MCAN_BUS_OFF) {
  40178a:	9b03      	ldr	r3, [sp, #12]
  40178c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  401790:	f040 8081 	bne.w	401896 <MCAN1_INT0_Handler+0x202>
		mcan_stop(&mcan_instance);
		printf(": MCAN bus off error, re-initialization. \r\n\r\n");
		configure_mcan();
	}

	if (status & MCAN_ACKNOWLEDGE_ERROR) {
  401794:	9b03      	ldr	r3, [sp, #12]
  401796:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  40179a:	f040 8089 	bne.w	4018b0 <MCAN1_INT0_Handler+0x21c>
		mcan_clear_interrupt_status(&mcan_instance, MCAN_ACKNOWLEDGE_ERROR);
		printf("Protocol ACK error, please double check the clock in two boards. \r\n\r\n");
	}

	if (status & MCAN_FORMAT_ERROR) {
  40179e:	9b03      	ldr	r3, [sp, #12]
  4017a0:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  4017a4:	f040 808d 	bne.w	4018c2 <MCAN1_INT0_Handler+0x22e>
		mcan_clear_interrupt_status(&mcan_instance, MCAN_FORMAT_ERROR);
		printf("Protocol format error, please double check the clock in two boards. \r\n\r\n");
	}
}
  4017a8:	b004      	add	sp, #16
  4017aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	module_inst->hw->MCAN_IR = source;
  4017ae:	4d49      	ldr	r5, [pc, #292]	; (4018d4 <MCAN1_INT0_Handler+0x240>)
  4017b0:	682b      	ldr	r3, [r5, #0]
  4017b2:	2201      	movs	r2, #1
  4017b4:	651a      	str	r2, [r3, #80]	; 0x50
		mcan_get_rx_fifo_0_element(&mcan_instance, &rx_element_fifo_0,
  4017b6:	4c4e      	ldr	r4, [pc, #312]	; (4018f0 <MCAN1_INT0_Handler+0x25c>)
  4017b8:	6822      	ldr	r2, [r4, #0]
  4017ba:	494e      	ldr	r1, [pc, #312]	; (4018f4 <MCAN1_INT0_Handler+0x260>)
  4017bc:	4628      	mov	r0, r5
  4017be:	4b4e      	ldr	r3, [pc, #312]	; (4018f8 <MCAN1_INT0_Handler+0x264>)
  4017c0:	4798      	blx	r3
		mcan_rx_fifo_acknowledge(&mcan_instance, 0,
  4017c2:	6823      	ldr	r3, [r4, #0]
		module_inst->hw->MCAN_RXF0A = MCAN_RXF0A_F0AI(index);
  4017c4:	682a      	ldr	r2, [r5, #0]
  4017c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  4017ca:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
		standard_receive_index++;
  4017ce:	6823      	ldr	r3, [r4, #0]
  4017d0:	3301      	adds	r3, #1
  4017d2:	6023      	str	r3, [r4, #0]
		if (standard_receive_index == CONF_MCAN0_RX_FIFO_0_NUM) {
  4017d4:	6823      	ldr	r3, [r4, #0]
  4017d6:	2b10      	cmp	r3, #16
  4017d8:	d020      	beq.n	40181c <MCAN1_INT0_Handler+0x188>
		printf("\n\r Standard message received in FIFO 0. The received data is: \r\n");
  4017da:	4848      	ldr	r0, [pc, #288]	; (4018fc <MCAN1_INT0_Handler+0x268>)
  4017dc:	4b41      	ldr	r3, [pc, #260]	; (4018e4 <MCAN1_INT0_Handler+0x250>)
  4017de:	4798      	blx	r3
		for (i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
  4017e0:	2300      	movs	r3, #0
  4017e2:	9302      	str	r3, [sp, #8]
  4017e4:	4b43      	ldr	r3, [pc, #268]	; (4018f4 <MCAN1_INT0_Handler+0x260>)
  4017e6:	685b      	ldr	r3, [r3, #4]
  4017e8:	f3c3 4303 	ubfx	r3, r3, #16, #4
  4017ec:	9a02      	ldr	r2, [sp, #8]
  4017ee:	4293      	cmp	r3, r2
  4017f0:	d910      	bls.n	401814 <MCAN1_INT0_Handler+0x180>
			printf("  %d",rx_element_fifo_0.data[i]);
  4017f2:	4c40      	ldr	r4, [pc, #256]	; (4018f4 <MCAN1_INT0_Handler+0x260>)
  4017f4:	4e3c      	ldr	r6, [pc, #240]	; (4018e8 <MCAN1_INT0_Handler+0x254>)
  4017f6:	4d3b      	ldr	r5, [pc, #236]	; (4018e4 <MCAN1_INT0_Handler+0x250>)
  4017f8:	9b02      	ldr	r3, [sp, #8]
  4017fa:	4423      	add	r3, r4
  4017fc:	7a19      	ldrb	r1, [r3, #8]
  4017fe:	4630      	mov	r0, r6
  401800:	47a8      	blx	r5
		for (i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
  401802:	9b02      	ldr	r3, [sp, #8]
  401804:	3301      	adds	r3, #1
  401806:	9302      	str	r3, [sp, #8]
  401808:	6863      	ldr	r3, [r4, #4]
  40180a:	f3c3 4303 	ubfx	r3, r3, #16, #4
  40180e:	9a02      	ldr	r2, [sp, #8]
  401810:	4293      	cmp	r3, r2
  401812:	d8f1      	bhi.n	4017f8 <MCAN1_INT0_Handler+0x164>
		printf("\r\n\r\n");
  401814:	4835      	ldr	r0, [pc, #212]	; (4018ec <MCAN1_INT0_Handler+0x258>)
  401816:	4b33      	ldr	r3, [pc, #204]	; (4018e4 <MCAN1_INT0_Handler+0x250>)
  401818:	4798      	blx	r3
  40181a:	e7b2      	b.n	401782 <MCAN1_INT0_Handler+0xee>
			standard_receive_index = 0;
  40181c:	2200      	movs	r2, #0
  40181e:	6022      	str	r2, [r4, #0]
  401820:	e7db      	b.n	4017da <MCAN1_INT0_Handler+0x146>
	module_inst->hw->MCAN_IR = source;
  401822:	4d2c      	ldr	r5, [pc, #176]	; (4018d4 <MCAN1_INT0_Handler+0x240>)
  401824:	682b      	ldr	r3, [r5, #0]
  401826:	2210      	movs	r2, #16
  401828:	651a      	str	r2, [r3, #80]	; 0x50
		mcan_get_rx_fifo_1_element(&mcan_instance, &rx_element_fifo_1,
  40182a:	4c35      	ldr	r4, [pc, #212]	; (401900 <MCAN1_INT0_Handler+0x26c>)
  40182c:	6822      	ldr	r2, [r4, #0]
  40182e:	4935      	ldr	r1, [pc, #212]	; (401904 <MCAN1_INT0_Handler+0x270>)
  401830:	4628      	mov	r0, r5
  401832:	4b35      	ldr	r3, [pc, #212]	; (401908 <MCAN1_INT0_Handler+0x274>)
  401834:	4798      	blx	r3
		mcan_rx_fifo_acknowledge(&mcan_instance, 0,
  401836:	6823      	ldr	r3, [r4, #0]
		module_inst->hw->MCAN_RXF0A = MCAN_RXF0A_F0AI(index);
  401838:	682a      	ldr	r2, [r5, #0]
  40183a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40183e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
		extended_receive_index++;
  401842:	6823      	ldr	r3, [r4, #0]
  401844:	3301      	adds	r3, #1
  401846:	6023      	str	r3, [r4, #0]
		if (extended_receive_index == CONF_MCAN0_RX_FIFO_1_NUM) {
  401848:	6823      	ldr	r3, [r4, #0]
  40184a:	2b10      	cmp	r3, #16
  40184c:	d020      	beq.n	401890 <MCAN1_INT0_Handler+0x1fc>
		printf("\n\r Extended message received in FIFO 1. The received data is: \r\n");
  40184e:	482f      	ldr	r0, [pc, #188]	; (40190c <MCAN1_INT0_Handler+0x278>)
  401850:	4b24      	ldr	r3, [pc, #144]	; (4018e4 <MCAN1_INT0_Handler+0x250>)
  401852:	4798      	blx	r3
		for (i = 0; i < rx_element_fifo_1.R1.bit.DLC; i++) {
  401854:	2300      	movs	r3, #0
  401856:	9302      	str	r3, [sp, #8]
  401858:	4b2a      	ldr	r3, [pc, #168]	; (401904 <MCAN1_INT0_Handler+0x270>)
  40185a:	685b      	ldr	r3, [r3, #4]
  40185c:	f3c3 4303 	ubfx	r3, r3, #16, #4
  401860:	9a02      	ldr	r2, [sp, #8]
  401862:	4293      	cmp	r3, r2
  401864:	d910      	bls.n	401888 <MCAN1_INT0_Handler+0x1f4>
			printf("  %d",rx_element_fifo_1.data[i]);
  401866:	4c27      	ldr	r4, [pc, #156]	; (401904 <MCAN1_INT0_Handler+0x270>)
  401868:	4e1f      	ldr	r6, [pc, #124]	; (4018e8 <MCAN1_INT0_Handler+0x254>)
  40186a:	4d1e      	ldr	r5, [pc, #120]	; (4018e4 <MCAN1_INT0_Handler+0x250>)
  40186c:	9b02      	ldr	r3, [sp, #8]
  40186e:	4423      	add	r3, r4
  401870:	7a19      	ldrb	r1, [r3, #8]
  401872:	4630      	mov	r0, r6
  401874:	47a8      	blx	r5
		for (i = 0; i < rx_element_fifo_1.R1.bit.DLC; i++) {
  401876:	9b02      	ldr	r3, [sp, #8]
  401878:	3301      	adds	r3, #1
  40187a:	9302      	str	r3, [sp, #8]
  40187c:	6863      	ldr	r3, [r4, #4]
  40187e:	f3c3 4303 	ubfx	r3, r3, #16, #4
  401882:	9a02      	ldr	r2, [sp, #8]
  401884:	4293      	cmp	r3, r2
  401886:	d8f1      	bhi.n	40186c <MCAN1_INT0_Handler+0x1d8>
		printf("\r\n\r\n");
  401888:	4818      	ldr	r0, [pc, #96]	; (4018ec <MCAN1_INT0_Handler+0x258>)
  40188a:	4b16      	ldr	r3, [pc, #88]	; (4018e4 <MCAN1_INT0_Handler+0x250>)
  40188c:	4798      	blx	r3
  40188e:	e77c      	b.n	40178a <MCAN1_INT0_Handler+0xf6>
			extended_receive_index = 0;
  401890:	2200      	movs	r2, #0
  401892:	6022      	str	r2, [r4, #0]
  401894:	e7db      	b.n	40184e <MCAN1_INT0_Handler+0x1ba>
	module_inst->hw->MCAN_IR = source;
  401896:	480f      	ldr	r0, [pc, #60]	; (4018d4 <MCAN1_INT0_Handler+0x240>)
  401898:	6803      	ldr	r3, [r0, #0]
  40189a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40189e:	651a      	str	r2, [r3, #80]	; 0x50
		mcan_stop(&mcan_instance);
  4018a0:	4b1b      	ldr	r3, [pc, #108]	; (401910 <MCAN1_INT0_Handler+0x27c>)
  4018a2:	4798      	blx	r3
		printf(": MCAN bus off error, re-initialization. \r\n\r\n");
  4018a4:	481b      	ldr	r0, [pc, #108]	; (401914 <MCAN1_INT0_Handler+0x280>)
  4018a6:	4b0f      	ldr	r3, [pc, #60]	; (4018e4 <MCAN1_INT0_Handler+0x250>)
  4018a8:	4798      	blx	r3
		configure_mcan();
  4018aa:	4b1b      	ldr	r3, [pc, #108]	; (401918 <MCAN1_INT0_Handler+0x284>)
  4018ac:	4798      	blx	r3
  4018ae:	e771      	b.n	401794 <MCAN1_INT0_Handler+0x100>
  4018b0:	4b08      	ldr	r3, [pc, #32]	; (4018d4 <MCAN1_INT0_Handler+0x240>)
  4018b2:	681b      	ldr	r3, [r3, #0]
  4018b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4018b8:	651a      	str	r2, [r3, #80]	; 0x50
		printf("Protocol ACK error, please double check the clock in two boards. \r\n\r\n");
  4018ba:	4818      	ldr	r0, [pc, #96]	; (40191c <MCAN1_INT0_Handler+0x288>)
  4018bc:	4b09      	ldr	r3, [pc, #36]	; (4018e4 <MCAN1_INT0_Handler+0x250>)
  4018be:	4798      	blx	r3
  4018c0:	e76d      	b.n	40179e <MCAN1_INT0_Handler+0x10a>
  4018c2:	4b04      	ldr	r3, [pc, #16]	; (4018d4 <MCAN1_INT0_Handler+0x240>)
  4018c4:	681b      	ldr	r3, [r3, #0]
  4018c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4018ca:	651a      	str	r2, [r3, #80]	; 0x50
		printf("Protocol format error, please double check the clock in two boards. \r\n\r\n");
  4018cc:	4814      	ldr	r0, [pc, #80]	; (401920 <MCAN1_INT0_Handler+0x28c>)
  4018ce:	4b05      	ldr	r3, [pc, #20]	; (4018e4 <MCAN1_INT0_Handler+0x250>)
  4018d0:	4798      	blx	r3
}
  4018d2:	e769      	b.n	4017a8 <MCAN1_INT0_Handler+0x114>
  4018d4:	20401434 	.word	0x20401434
  4018d8:	20401438 	.word	0x20401438
  4018dc:	00404dac 	.word	0x00404dac
  4018e0:	00404df0 	.word	0x00404df0
  4018e4:	00401aa9 	.word	0x00401aa9
  4018e8:	00404e34 	.word	0x00404e34
  4018ec:	00404f80 	.word	0x00404f80
  4018f0:	20401468 	.word	0x20401468
  4018f4:	20401448 	.word	0x20401448
  4018f8:	00400b5d 	.word	0x00400b5d
  4018fc:	00404e3c 	.word	0x00404e3c
  401900:	20401428 	.word	0x20401428
  401904:	20401458 	.word	0x20401458
  401908:	00400bb1 	.word	0x00400bb1
  40190c:	00404e80 	.word	0x00404e80
  401910:	00400af3 	.word	0x00400af3
  401914:	00404ec4 	.word	0x00404ec4
  401918:	004013c5 	.word	0x004013c5
  40191c:	00404ef4 	.word	0x00404ef4
  401920:	00404f3c 	.word	0x00404f3c
  401924:	00400b09 	.word	0x00400b09

00401928 <main>:


 #include "bb_exp.h"

 int main(void)
 {
  401928:	b570      	push	{r4, r5, r6, lr}
  40192a:	b086      	sub	sp, #24
 	uint8_t key;

 	sysclk_init();
  40192c:	4b1e      	ldr	r3, [pc, #120]	; (4019a8 <main+0x80>)
  40192e:	4798      	blx	r3
 	board_init();
  401930:	4b1e      	ldr	r3, [pc, #120]	; (4019ac <main+0x84>)
  401932:	4798      	blx	r3
	
	g_tickCount = 0;
  401934:	2400      	movs	r4, #0
  401936:	4b1e      	ldr	r3, [pc, #120]	; (4019b0 <main+0x88>)
  401938:	601c      	str	r4, [r3, #0]
	g_tx_tick_count_ms = 0;
  40193a:	4b1e      	ldr	r3, [pc, #120]	; (4019b4 <main+0x8c>)
  40193c:	601c      	str	r4, [r3, #0]
  40193e:	200e      	movs	r0, #14
  401940:	4e1d      	ldr	r6, [pc, #116]	; (4019b8 <main+0x90>)
  401942:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  401944:	4d1d      	ldr	r5, [pc, #116]	; (4019bc <main+0x94>)
  401946:	4b1e      	ldr	r3, [pc, #120]	; (4019c0 <main+0x98>)
  401948:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40194a:	4a1e      	ldr	r2, [pc, #120]	; (4019c4 <main+0x9c>)
  40194c:	4b1e      	ldr	r3, [pc, #120]	; (4019c8 <main+0xa0>)
  40194e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401950:	4a1e      	ldr	r2, [pc, #120]	; (4019cc <main+0xa4>)
  401952:	4b1f      	ldr	r3, [pc, #124]	; (4019d0 <main+0xa8>)
  401954:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  401956:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40195a:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  40195c:	23c0      	movs	r3, #192	; 0xc0
  40195e:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  401960:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401964:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  401966:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401968:	9404      	str	r4, [sp, #16]
  40196a:	200e      	movs	r0, #14
  40196c:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  40196e:	4a19      	ldr	r2, [pc, #100]	; (4019d4 <main+0xac>)
  401970:	4669      	mov	r1, sp
  401972:	4628      	mov	r0, r5
  401974:	4b18      	ldr	r3, [pc, #96]	; (4019d8 <main+0xb0>)
  401976:	4798      	blx	r3
		usart_enable_tx(p_usart);
  401978:	4628      	mov	r0, r5
  40197a:	4b18      	ldr	r3, [pc, #96]	; (4019dc <main+0xb4>)
  40197c:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40197e:	4628      	mov	r0, r5
  401980:	4b17      	ldr	r3, [pc, #92]	; (4019e0 <main+0xb8>)
  401982:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401984:	4e17      	ldr	r6, [pc, #92]	; (4019e4 <main+0xbc>)
  401986:	6833      	ldr	r3, [r6, #0]
  401988:	4621      	mov	r1, r4
  40198a:	6898      	ldr	r0, [r3, #8]
  40198c:	4d16      	ldr	r5, [pc, #88]	; (4019e8 <main+0xc0>)
  40198e:	47a8      	blx	r5
	setbuf(stdin, NULL);
  401990:	6833      	ldr	r3, [r6, #0]
  401992:	4621      	mov	r1, r4
  401994:	6858      	ldr	r0, [r3, #4]
  401996:	47a8      	blx	r5

 	configure_console();
 	configure_mcan();
  401998:	4b14      	ldr	r3, [pc, #80]	; (4019ec <main+0xc4>)
  40199a:	4798      	blx	r3
 	// CANRxTask();
     // CANTxTask(g_tx_tick_count_ms);
     // g_tx_tick_count_ms++;
     // CanMessageControl_Task();

 	doSCMtest2();
  40199c:	4b14      	ldr	r3, [pc, #80]	; (4019f0 <main+0xc8>)
  40199e:	4798      	blx	r3
 	// doSCMtest2();
 }
  4019a0:	4620      	mov	r0, r4
  4019a2:	b006      	add	sp, #24
  4019a4:	bd70      	pop	{r4, r5, r6, pc}
  4019a6:	bf00      	nop
  4019a8:	00400589 	.word	0x00400589
  4019ac:	00400685 	.word	0x00400685
  4019b0:	2040142c 	.word	0x2040142c
  4019b4:	20401430 	.word	0x20401430
  4019b8:	00400e5d 	.word	0x00400e5d
  4019bc:	40028000 	.word	0x40028000
  4019c0:	204014a8 	.word	0x204014a8
  4019c4:	0040155d 	.word	0x0040155d
  4019c8:	204014a4 	.word	0x204014a4
  4019cc:	00401481 	.word	0x00401481
  4019d0:	204014a0 	.word	0x204014a0
  4019d4:	08f0d180 	.word	0x08f0d180
  4019d8:	00400f89 	.word	0x00400f89
  4019dc:	00400fdd 	.word	0x00400fdd
  4019e0:	00400fe3 	.word	0x00400fe3
  4019e4:	20400014 	.word	0x20400014
  4019e8:	00401ca1 	.word	0x00401ca1
  4019ec:	004013c5 	.word	0x004013c5
  4019f0:	00401319 	.word	0x00401319

004019f4 <__assert_func>:
  4019f4:	b500      	push	{lr}
  4019f6:	4c0a      	ldr	r4, [pc, #40]	; (401a20 <__assert_func+0x2c>)
  4019f8:	6826      	ldr	r6, [r4, #0]
  4019fa:	4605      	mov	r5, r0
  4019fc:	b085      	sub	sp, #20
  4019fe:	461c      	mov	r4, r3
  401a00:	68f0      	ldr	r0, [r6, #12]
  401a02:	b152      	cbz	r2, 401a1a <__assert_func+0x26>
  401a04:	4b07      	ldr	r3, [pc, #28]	; (401a24 <__assert_func+0x30>)
  401a06:	9202      	str	r2, [sp, #8]
  401a08:	e88d 000a 	stmia.w	sp, {r1, r3}
  401a0c:	4622      	mov	r2, r4
  401a0e:	462b      	mov	r3, r5
  401a10:	4905      	ldr	r1, [pc, #20]	; (401a28 <__assert_func+0x34>)
  401a12:	f000 f80d 	bl	401a30 <fiprintf>
  401a16:	f001 f94b 	bl	402cb0 <abort>
  401a1a:	4b04      	ldr	r3, [pc, #16]	; (401a2c <__assert_func+0x38>)
  401a1c:	461a      	mov	r2, r3
  401a1e:	e7f2      	b.n	401a06 <__assert_func+0x12>
  401a20:	20400014 	.word	0x20400014
  401a24:	00404f88 	.word	0x00404f88
  401a28:	00404f98 	.word	0x00404f98
  401a2c:	00404f84 	.word	0x00404f84

00401a30 <fiprintf>:
  401a30:	b40e      	push	{r1, r2, r3}
  401a32:	b510      	push	{r4, lr}
  401a34:	b083      	sub	sp, #12
  401a36:	ab05      	add	r3, sp, #20
  401a38:	4c06      	ldr	r4, [pc, #24]	; (401a54 <fiprintf+0x24>)
  401a3a:	f853 2b04 	ldr.w	r2, [r3], #4
  401a3e:	9301      	str	r3, [sp, #4]
  401a40:	4601      	mov	r1, r0
  401a42:	6820      	ldr	r0, [r4, #0]
  401a44:	f000 fa3c 	bl	401ec0 <_vfiprintf_r>
  401a48:	b003      	add	sp, #12
  401a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401a4e:	b003      	add	sp, #12
  401a50:	4770      	bx	lr
  401a52:	bf00      	nop
  401a54:	20400014 	.word	0x20400014

00401a58 <__libc_init_array>:
  401a58:	b570      	push	{r4, r5, r6, lr}
  401a5a:	4e0f      	ldr	r6, [pc, #60]	; (401a98 <__libc_init_array+0x40>)
  401a5c:	4d0f      	ldr	r5, [pc, #60]	; (401a9c <__libc_init_array+0x44>)
  401a5e:	1b76      	subs	r6, r6, r5
  401a60:	10b6      	asrs	r6, r6, #2
  401a62:	bf18      	it	ne
  401a64:	2400      	movne	r4, #0
  401a66:	d005      	beq.n	401a74 <__libc_init_array+0x1c>
  401a68:	3401      	adds	r4, #1
  401a6a:	f855 3b04 	ldr.w	r3, [r5], #4
  401a6e:	4798      	blx	r3
  401a70:	42a6      	cmp	r6, r4
  401a72:	d1f9      	bne.n	401a68 <__libc_init_array+0x10>
  401a74:	4e0a      	ldr	r6, [pc, #40]	; (401aa0 <__libc_init_array+0x48>)
  401a76:	4d0b      	ldr	r5, [pc, #44]	; (401aa4 <__libc_init_array+0x4c>)
  401a78:	1b76      	subs	r6, r6, r5
  401a7a:	f003 fb59 	bl	405130 <_init>
  401a7e:	10b6      	asrs	r6, r6, #2
  401a80:	bf18      	it	ne
  401a82:	2400      	movne	r4, #0
  401a84:	d006      	beq.n	401a94 <__libc_init_array+0x3c>
  401a86:	3401      	adds	r4, #1
  401a88:	f855 3b04 	ldr.w	r3, [r5], #4
  401a8c:	4798      	blx	r3
  401a8e:	42a6      	cmp	r6, r4
  401a90:	d1f9      	bne.n	401a86 <__libc_init_array+0x2e>
  401a92:	bd70      	pop	{r4, r5, r6, pc}
  401a94:	bd70      	pop	{r4, r5, r6, pc}
  401a96:	bf00      	nop
  401a98:	0040513c 	.word	0x0040513c
  401a9c:	0040513c 	.word	0x0040513c
  401aa0:	00405144 	.word	0x00405144
  401aa4:	0040513c 	.word	0x0040513c

00401aa8 <iprintf>:
  401aa8:	b40f      	push	{r0, r1, r2, r3}
  401aaa:	b500      	push	{lr}
  401aac:	4907      	ldr	r1, [pc, #28]	; (401acc <iprintf+0x24>)
  401aae:	b083      	sub	sp, #12
  401ab0:	ab04      	add	r3, sp, #16
  401ab2:	6808      	ldr	r0, [r1, #0]
  401ab4:	f853 2b04 	ldr.w	r2, [r3], #4
  401ab8:	6881      	ldr	r1, [r0, #8]
  401aba:	9301      	str	r3, [sp, #4]
  401abc:	f000 fa00 	bl	401ec0 <_vfiprintf_r>
  401ac0:	b003      	add	sp, #12
  401ac2:	f85d eb04 	ldr.w	lr, [sp], #4
  401ac6:	b004      	add	sp, #16
  401ac8:	4770      	bx	lr
  401aca:	bf00      	nop
  401acc:	20400014 	.word	0x20400014

00401ad0 <memcpy>:
  401ad0:	4684      	mov	ip, r0
  401ad2:	ea41 0300 	orr.w	r3, r1, r0
  401ad6:	f013 0303 	ands.w	r3, r3, #3
  401ada:	d16d      	bne.n	401bb8 <memcpy+0xe8>
  401adc:	3a40      	subs	r2, #64	; 0x40
  401ade:	d341      	bcc.n	401b64 <memcpy+0x94>
  401ae0:	f851 3b04 	ldr.w	r3, [r1], #4
  401ae4:	f840 3b04 	str.w	r3, [r0], #4
  401ae8:	f851 3b04 	ldr.w	r3, [r1], #4
  401aec:	f840 3b04 	str.w	r3, [r0], #4
  401af0:	f851 3b04 	ldr.w	r3, [r1], #4
  401af4:	f840 3b04 	str.w	r3, [r0], #4
  401af8:	f851 3b04 	ldr.w	r3, [r1], #4
  401afc:	f840 3b04 	str.w	r3, [r0], #4
  401b00:	f851 3b04 	ldr.w	r3, [r1], #4
  401b04:	f840 3b04 	str.w	r3, [r0], #4
  401b08:	f851 3b04 	ldr.w	r3, [r1], #4
  401b0c:	f840 3b04 	str.w	r3, [r0], #4
  401b10:	f851 3b04 	ldr.w	r3, [r1], #4
  401b14:	f840 3b04 	str.w	r3, [r0], #4
  401b18:	f851 3b04 	ldr.w	r3, [r1], #4
  401b1c:	f840 3b04 	str.w	r3, [r0], #4
  401b20:	f851 3b04 	ldr.w	r3, [r1], #4
  401b24:	f840 3b04 	str.w	r3, [r0], #4
  401b28:	f851 3b04 	ldr.w	r3, [r1], #4
  401b2c:	f840 3b04 	str.w	r3, [r0], #4
  401b30:	f851 3b04 	ldr.w	r3, [r1], #4
  401b34:	f840 3b04 	str.w	r3, [r0], #4
  401b38:	f851 3b04 	ldr.w	r3, [r1], #4
  401b3c:	f840 3b04 	str.w	r3, [r0], #4
  401b40:	f851 3b04 	ldr.w	r3, [r1], #4
  401b44:	f840 3b04 	str.w	r3, [r0], #4
  401b48:	f851 3b04 	ldr.w	r3, [r1], #4
  401b4c:	f840 3b04 	str.w	r3, [r0], #4
  401b50:	f851 3b04 	ldr.w	r3, [r1], #4
  401b54:	f840 3b04 	str.w	r3, [r0], #4
  401b58:	f851 3b04 	ldr.w	r3, [r1], #4
  401b5c:	f840 3b04 	str.w	r3, [r0], #4
  401b60:	3a40      	subs	r2, #64	; 0x40
  401b62:	d2bd      	bcs.n	401ae0 <memcpy+0x10>
  401b64:	3230      	adds	r2, #48	; 0x30
  401b66:	d311      	bcc.n	401b8c <memcpy+0xbc>
  401b68:	f851 3b04 	ldr.w	r3, [r1], #4
  401b6c:	f840 3b04 	str.w	r3, [r0], #4
  401b70:	f851 3b04 	ldr.w	r3, [r1], #4
  401b74:	f840 3b04 	str.w	r3, [r0], #4
  401b78:	f851 3b04 	ldr.w	r3, [r1], #4
  401b7c:	f840 3b04 	str.w	r3, [r0], #4
  401b80:	f851 3b04 	ldr.w	r3, [r1], #4
  401b84:	f840 3b04 	str.w	r3, [r0], #4
  401b88:	3a10      	subs	r2, #16
  401b8a:	d2ed      	bcs.n	401b68 <memcpy+0x98>
  401b8c:	320c      	adds	r2, #12
  401b8e:	d305      	bcc.n	401b9c <memcpy+0xcc>
  401b90:	f851 3b04 	ldr.w	r3, [r1], #4
  401b94:	f840 3b04 	str.w	r3, [r0], #4
  401b98:	3a04      	subs	r2, #4
  401b9a:	d2f9      	bcs.n	401b90 <memcpy+0xc0>
  401b9c:	3204      	adds	r2, #4
  401b9e:	d008      	beq.n	401bb2 <memcpy+0xe2>
  401ba0:	07d2      	lsls	r2, r2, #31
  401ba2:	bf1c      	itt	ne
  401ba4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  401ba8:	f800 3b01 	strbne.w	r3, [r0], #1
  401bac:	d301      	bcc.n	401bb2 <memcpy+0xe2>
  401bae:	880b      	ldrh	r3, [r1, #0]
  401bb0:	8003      	strh	r3, [r0, #0]
  401bb2:	4660      	mov	r0, ip
  401bb4:	4770      	bx	lr
  401bb6:	bf00      	nop
  401bb8:	2a08      	cmp	r2, #8
  401bba:	d313      	bcc.n	401be4 <memcpy+0x114>
  401bbc:	078b      	lsls	r3, r1, #30
  401bbe:	d08d      	beq.n	401adc <memcpy+0xc>
  401bc0:	f010 0303 	ands.w	r3, r0, #3
  401bc4:	d08a      	beq.n	401adc <memcpy+0xc>
  401bc6:	f1c3 0304 	rsb	r3, r3, #4
  401bca:	1ad2      	subs	r2, r2, r3
  401bcc:	07db      	lsls	r3, r3, #31
  401bce:	bf1c      	itt	ne
  401bd0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  401bd4:	f800 3b01 	strbne.w	r3, [r0], #1
  401bd8:	d380      	bcc.n	401adc <memcpy+0xc>
  401bda:	f831 3b02 	ldrh.w	r3, [r1], #2
  401bde:	f820 3b02 	strh.w	r3, [r0], #2
  401be2:	e77b      	b.n	401adc <memcpy+0xc>
  401be4:	3a04      	subs	r2, #4
  401be6:	d3d9      	bcc.n	401b9c <memcpy+0xcc>
  401be8:	3a01      	subs	r2, #1
  401bea:	f811 3b01 	ldrb.w	r3, [r1], #1
  401bee:	f800 3b01 	strb.w	r3, [r0], #1
  401bf2:	d2f9      	bcs.n	401be8 <memcpy+0x118>
  401bf4:	780b      	ldrb	r3, [r1, #0]
  401bf6:	7003      	strb	r3, [r0, #0]
  401bf8:	784b      	ldrb	r3, [r1, #1]
  401bfa:	7043      	strb	r3, [r0, #1]
  401bfc:	788b      	ldrb	r3, [r1, #2]
  401bfe:	7083      	strb	r3, [r0, #2]
  401c00:	4660      	mov	r0, ip
  401c02:	4770      	bx	lr

00401c04 <memset>:
  401c04:	b470      	push	{r4, r5, r6}
  401c06:	0786      	lsls	r6, r0, #30
  401c08:	d046      	beq.n	401c98 <memset+0x94>
  401c0a:	1e54      	subs	r4, r2, #1
  401c0c:	2a00      	cmp	r2, #0
  401c0e:	d041      	beq.n	401c94 <memset+0x90>
  401c10:	b2ca      	uxtb	r2, r1
  401c12:	4603      	mov	r3, r0
  401c14:	e002      	b.n	401c1c <memset+0x18>
  401c16:	f114 34ff 	adds.w	r4, r4, #4294967295
  401c1a:	d33b      	bcc.n	401c94 <memset+0x90>
  401c1c:	f803 2b01 	strb.w	r2, [r3], #1
  401c20:	079d      	lsls	r5, r3, #30
  401c22:	d1f8      	bne.n	401c16 <memset+0x12>
  401c24:	2c03      	cmp	r4, #3
  401c26:	d92e      	bls.n	401c86 <memset+0x82>
  401c28:	b2cd      	uxtb	r5, r1
  401c2a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401c2e:	2c0f      	cmp	r4, #15
  401c30:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401c34:	d919      	bls.n	401c6a <memset+0x66>
  401c36:	f103 0210 	add.w	r2, r3, #16
  401c3a:	4626      	mov	r6, r4
  401c3c:	3e10      	subs	r6, #16
  401c3e:	2e0f      	cmp	r6, #15
  401c40:	f842 5c10 	str.w	r5, [r2, #-16]
  401c44:	f842 5c0c 	str.w	r5, [r2, #-12]
  401c48:	f842 5c08 	str.w	r5, [r2, #-8]
  401c4c:	f842 5c04 	str.w	r5, [r2, #-4]
  401c50:	f102 0210 	add.w	r2, r2, #16
  401c54:	d8f2      	bhi.n	401c3c <memset+0x38>
  401c56:	f1a4 0210 	sub.w	r2, r4, #16
  401c5a:	f022 020f 	bic.w	r2, r2, #15
  401c5e:	f004 040f 	and.w	r4, r4, #15
  401c62:	3210      	adds	r2, #16
  401c64:	2c03      	cmp	r4, #3
  401c66:	4413      	add	r3, r2
  401c68:	d90d      	bls.n	401c86 <memset+0x82>
  401c6a:	461e      	mov	r6, r3
  401c6c:	4622      	mov	r2, r4
  401c6e:	3a04      	subs	r2, #4
  401c70:	2a03      	cmp	r2, #3
  401c72:	f846 5b04 	str.w	r5, [r6], #4
  401c76:	d8fa      	bhi.n	401c6e <memset+0x6a>
  401c78:	1f22      	subs	r2, r4, #4
  401c7a:	f022 0203 	bic.w	r2, r2, #3
  401c7e:	3204      	adds	r2, #4
  401c80:	4413      	add	r3, r2
  401c82:	f004 0403 	and.w	r4, r4, #3
  401c86:	b12c      	cbz	r4, 401c94 <memset+0x90>
  401c88:	b2c9      	uxtb	r1, r1
  401c8a:	441c      	add	r4, r3
  401c8c:	f803 1b01 	strb.w	r1, [r3], #1
  401c90:	429c      	cmp	r4, r3
  401c92:	d1fb      	bne.n	401c8c <memset+0x88>
  401c94:	bc70      	pop	{r4, r5, r6}
  401c96:	4770      	bx	lr
  401c98:	4614      	mov	r4, r2
  401c9a:	4603      	mov	r3, r0
  401c9c:	e7c2      	b.n	401c24 <memset+0x20>
  401c9e:	bf00      	nop

00401ca0 <setbuf>:
  401ca0:	2900      	cmp	r1, #0
  401ca2:	bf0c      	ite	eq
  401ca4:	2202      	moveq	r2, #2
  401ca6:	2200      	movne	r2, #0
  401ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401cac:	f000 b800 	b.w	401cb0 <setvbuf>

00401cb0 <setvbuf>:
  401cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401cb4:	4c61      	ldr	r4, [pc, #388]	; (401e3c <setvbuf+0x18c>)
  401cb6:	6825      	ldr	r5, [r4, #0]
  401cb8:	b083      	sub	sp, #12
  401cba:	4604      	mov	r4, r0
  401cbc:	460f      	mov	r7, r1
  401cbe:	4690      	mov	r8, r2
  401cc0:	461e      	mov	r6, r3
  401cc2:	b115      	cbz	r5, 401cca <setvbuf+0x1a>
  401cc4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401cc6:	2b00      	cmp	r3, #0
  401cc8:	d064      	beq.n	401d94 <setvbuf+0xe4>
  401cca:	f1b8 0f02 	cmp.w	r8, #2
  401cce:	d006      	beq.n	401cde <setvbuf+0x2e>
  401cd0:	f1b8 0f01 	cmp.w	r8, #1
  401cd4:	f200 809f 	bhi.w	401e16 <setvbuf+0x166>
  401cd8:	2e00      	cmp	r6, #0
  401cda:	f2c0 809c 	blt.w	401e16 <setvbuf+0x166>
  401cde:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401ce0:	07d8      	lsls	r0, r3, #31
  401ce2:	d534      	bpl.n	401d4e <setvbuf+0x9e>
  401ce4:	4621      	mov	r1, r4
  401ce6:	4628      	mov	r0, r5
  401ce8:	f001 f890 	bl	402e0c <_fflush_r>
  401cec:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401cee:	b141      	cbz	r1, 401d02 <setvbuf+0x52>
  401cf0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401cf4:	4299      	cmp	r1, r3
  401cf6:	d002      	beq.n	401cfe <setvbuf+0x4e>
  401cf8:	4628      	mov	r0, r5
  401cfa:	f001 fa05 	bl	403108 <_free_r>
  401cfe:	2300      	movs	r3, #0
  401d00:	6323      	str	r3, [r4, #48]	; 0x30
  401d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401d06:	2200      	movs	r2, #0
  401d08:	61a2      	str	r2, [r4, #24]
  401d0a:	6062      	str	r2, [r4, #4]
  401d0c:	061a      	lsls	r2, r3, #24
  401d0e:	d43a      	bmi.n	401d86 <setvbuf+0xd6>
  401d10:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401d14:	f023 0303 	bic.w	r3, r3, #3
  401d18:	f1b8 0f02 	cmp.w	r8, #2
  401d1c:	81a3      	strh	r3, [r4, #12]
  401d1e:	d01d      	beq.n	401d5c <setvbuf+0xac>
  401d20:	ab01      	add	r3, sp, #4
  401d22:	466a      	mov	r2, sp
  401d24:	4621      	mov	r1, r4
  401d26:	4628      	mov	r0, r5
  401d28:	f001 fc8c 	bl	403644 <__swhatbuf_r>
  401d2c:	89a3      	ldrh	r3, [r4, #12]
  401d2e:	4318      	orrs	r0, r3
  401d30:	81a0      	strh	r0, [r4, #12]
  401d32:	2e00      	cmp	r6, #0
  401d34:	d132      	bne.n	401d9c <setvbuf+0xec>
  401d36:	9e00      	ldr	r6, [sp, #0]
  401d38:	4630      	mov	r0, r6
  401d3a:	f001 fcfb 	bl	403734 <malloc>
  401d3e:	4607      	mov	r7, r0
  401d40:	2800      	cmp	r0, #0
  401d42:	d06b      	beq.n	401e1c <setvbuf+0x16c>
  401d44:	89a3      	ldrh	r3, [r4, #12]
  401d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401d4a:	81a3      	strh	r3, [r4, #12]
  401d4c:	e028      	b.n	401da0 <setvbuf+0xf0>
  401d4e:	89a3      	ldrh	r3, [r4, #12]
  401d50:	0599      	lsls	r1, r3, #22
  401d52:	d4c7      	bmi.n	401ce4 <setvbuf+0x34>
  401d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401d56:	f001 fc71 	bl	40363c <__retarget_lock_acquire_recursive>
  401d5a:	e7c3      	b.n	401ce4 <setvbuf+0x34>
  401d5c:	2500      	movs	r5, #0
  401d5e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401d60:	2600      	movs	r6, #0
  401d62:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401d66:	f043 0302 	orr.w	r3, r3, #2
  401d6a:	2001      	movs	r0, #1
  401d6c:	60a6      	str	r6, [r4, #8]
  401d6e:	07ce      	lsls	r6, r1, #31
  401d70:	81a3      	strh	r3, [r4, #12]
  401d72:	6022      	str	r2, [r4, #0]
  401d74:	6122      	str	r2, [r4, #16]
  401d76:	6160      	str	r0, [r4, #20]
  401d78:	d401      	bmi.n	401d7e <setvbuf+0xce>
  401d7a:	0598      	lsls	r0, r3, #22
  401d7c:	d53e      	bpl.n	401dfc <setvbuf+0x14c>
  401d7e:	4628      	mov	r0, r5
  401d80:	b003      	add	sp, #12
  401d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401d86:	6921      	ldr	r1, [r4, #16]
  401d88:	4628      	mov	r0, r5
  401d8a:	f001 f9bd 	bl	403108 <_free_r>
  401d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401d92:	e7bd      	b.n	401d10 <setvbuf+0x60>
  401d94:	4628      	mov	r0, r5
  401d96:	f001 f891 	bl	402ebc <__sinit>
  401d9a:	e796      	b.n	401cca <setvbuf+0x1a>
  401d9c:	2f00      	cmp	r7, #0
  401d9e:	d0cb      	beq.n	401d38 <setvbuf+0x88>
  401da0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401da2:	2b00      	cmp	r3, #0
  401da4:	d033      	beq.n	401e0e <setvbuf+0x15e>
  401da6:	9b00      	ldr	r3, [sp, #0]
  401da8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401dac:	6027      	str	r7, [r4, #0]
  401dae:	429e      	cmp	r6, r3
  401db0:	bf1c      	itt	ne
  401db2:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  401db6:	81a2      	strhne	r2, [r4, #12]
  401db8:	f1b8 0f01 	cmp.w	r8, #1
  401dbc:	bf04      	itt	eq
  401dbe:	f042 0201 	orreq.w	r2, r2, #1
  401dc2:	81a2      	strheq	r2, [r4, #12]
  401dc4:	b292      	uxth	r2, r2
  401dc6:	f012 0308 	ands.w	r3, r2, #8
  401dca:	6127      	str	r7, [r4, #16]
  401dcc:	6166      	str	r6, [r4, #20]
  401dce:	d00e      	beq.n	401dee <setvbuf+0x13e>
  401dd0:	07d1      	lsls	r1, r2, #31
  401dd2:	d51a      	bpl.n	401e0a <setvbuf+0x15a>
  401dd4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401dd6:	4276      	negs	r6, r6
  401dd8:	2300      	movs	r3, #0
  401dda:	f015 0501 	ands.w	r5, r5, #1
  401dde:	61a6      	str	r6, [r4, #24]
  401de0:	60a3      	str	r3, [r4, #8]
  401de2:	d009      	beq.n	401df8 <setvbuf+0x148>
  401de4:	2500      	movs	r5, #0
  401de6:	4628      	mov	r0, r5
  401de8:	b003      	add	sp, #12
  401dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401dee:	60a3      	str	r3, [r4, #8]
  401df0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401df2:	f015 0501 	ands.w	r5, r5, #1
  401df6:	d1f5      	bne.n	401de4 <setvbuf+0x134>
  401df8:	0593      	lsls	r3, r2, #22
  401dfa:	d4c0      	bmi.n	401d7e <setvbuf+0xce>
  401dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401dfe:	f001 fc1f 	bl	403640 <__retarget_lock_release_recursive>
  401e02:	4628      	mov	r0, r5
  401e04:	b003      	add	sp, #12
  401e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401e0a:	60a6      	str	r6, [r4, #8]
  401e0c:	e7f0      	b.n	401df0 <setvbuf+0x140>
  401e0e:	4628      	mov	r0, r5
  401e10:	f001 f854 	bl	402ebc <__sinit>
  401e14:	e7c7      	b.n	401da6 <setvbuf+0xf6>
  401e16:	f04f 35ff 	mov.w	r5, #4294967295
  401e1a:	e7b0      	b.n	401d7e <setvbuf+0xce>
  401e1c:	f8dd 9000 	ldr.w	r9, [sp]
  401e20:	45b1      	cmp	r9, r6
  401e22:	d004      	beq.n	401e2e <setvbuf+0x17e>
  401e24:	4648      	mov	r0, r9
  401e26:	f001 fc85 	bl	403734 <malloc>
  401e2a:	4607      	mov	r7, r0
  401e2c:	b920      	cbnz	r0, 401e38 <setvbuf+0x188>
  401e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401e32:	f04f 35ff 	mov.w	r5, #4294967295
  401e36:	e792      	b.n	401d5e <setvbuf+0xae>
  401e38:	464e      	mov	r6, r9
  401e3a:	e783      	b.n	401d44 <setvbuf+0x94>
  401e3c:	20400014 	.word	0x20400014

00401e40 <__sprint_r.part.0>:
  401e40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401e44:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401e46:	049c      	lsls	r4, r3, #18
  401e48:	4693      	mov	fp, r2
  401e4a:	d52f      	bpl.n	401eac <__sprint_r.part.0+0x6c>
  401e4c:	6893      	ldr	r3, [r2, #8]
  401e4e:	6812      	ldr	r2, [r2, #0]
  401e50:	b353      	cbz	r3, 401ea8 <__sprint_r.part.0+0x68>
  401e52:	460e      	mov	r6, r1
  401e54:	4607      	mov	r7, r0
  401e56:	f102 0908 	add.w	r9, r2, #8
  401e5a:	e919 0420 	ldmdb	r9, {r5, sl}
  401e5e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  401e62:	d017      	beq.n	401e94 <__sprint_r.part.0+0x54>
  401e64:	3d04      	subs	r5, #4
  401e66:	2400      	movs	r4, #0
  401e68:	e001      	b.n	401e6e <__sprint_r.part.0+0x2e>
  401e6a:	45a0      	cmp	r8, r4
  401e6c:	d010      	beq.n	401e90 <__sprint_r.part.0+0x50>
  401e6e:	4632      	mov	r2, r6
  401e70:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401e74:	4638      	mov	r0, r7
  401e76:	f001 f8c3 	bl	403000 <_fputwc_r>
  401e7a:	1c43      	adds	r3, r0, #1
  401e7c:	f104 0401 	add.w	r4, r4, #1
  401e80:	d1f3      	bne.n	401e6a <__sprint_r.part.0+0x2a>
  401e82:	2300      	movs	r3, #0
  401e84:	f8cb 3008 	str.w	r3, [fp, #8]
  401e88:	f8cb 3004 	str.w	r3, [fp, #4]
  401e8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e90:	f8db 3008 	ldr.w	r3, [fp, #8]
  401e94:	f02a 0a03 	bic.w	sl, sl, #3
  401e98:	eba3 030a 	sub.w	r3, r3, sl
  401e9c:	f8cb 3008 	str.w	r3, [fp, #8]
  401ea0:	f109 0908 	add.w	r9, r9, #8
  401ea4:	2b00      	cmp	r3, #0
  401ea6:	d1d8      	bne.n	401e5a <__sprint_r.part.0+0x1a>
  401ea8:	2000      	movs	r0, #0
  401eaa:	e7ea      	b.n	401e82 <__sprint_r.part.0+0x42>
  401eac:	f001 fa12 	bl	4032d4 <__sfvwrite_r>
  401eb0:	2300      	movs	r3, #0
  401eb2:	f8cb 3008 	str.w	r3, [fp, #8]
  401eb6:	f8cb 3004 	str.w	r3, [fp, #4]
  401eba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401ebe:	bf00      	nop

00401ec0 <_vfiprintf_r>:
  401ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ec4:	b0ad      	sub	sp, #180	; 0xb4
  401ec6:	461d      	mov	r5, r3
  401ec8:	468b      	mov	fp, r1
  401eca:	4690      	mov	r8, r2
  401ecc:	9307      	str	r3, [sp, #28]
  401ece:	9006      	str	r0, [sp, #24]
  401ed0:	b118      	cbz	r0, 401eda <_vfiprintf_r+0x1a>
  401ed2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401ed4:	2b00      	cmp	r3, #0
  401ed6:	f000 80f3 	beq.w	4020c0 <_vfiprintf_r+0x200>
  401eda:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401ede:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401ee2:	07df      	lsls	r7, r3, #31
  401ee4:	b281      	uxth	r1, r0
  401ee6:	d402      	bmi.n	401eee <_vfiprintf_r+0x2e>
  401ee8:	058e      	lsls	r6, r1, #22
  401eea:	f140 80fc 	bpl.w	4020e6 <_vfiprintf_r+0x226>
  401eee:	048c      	lsls	r4, r1, #18
  401ef0:	d40a      	bmi.n	401f08 <_vfiprintf_r+0x48>
  401ef2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401ef6:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  401efa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401efe:	f8ab 100c 	strh.w	r1, [fp, #12]
  401f02:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  401f06:	b289      	uxth	r1, r1
  401f08:	0708      	lsls	r0, r1, #28
  401f0a:	f140 80b3 	bpl.w	402074 <_vfiprintf_r+0x1b4>
  401f0e:	f8db 3010 	ldr.w	r3, [fp, #16]
  401f12:	2b00      	cmp	r3, #0
  401f14:	f000 80ae 	beq.w	402074 <_vfiprintf_r+0x1b4>
  401f18:	f001 031a 	and.w	r3, r1, #26
  401f1c:	2b0a      	cmp	r3, #10
  401f1e:	f000 80b5 	beq.w	40208c <_vfiprintf_r+0x1cc>
  401f22:	2300      	movs	r3, #0
  401f24:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  401f28:	930b      	str	r3, [sp, #44]	; 0x2c
  401f2a:	9311      	str	r3, [sp, #68]	; 0x44
  401f2c:	9310      	str	r3, [sp, #64]	; 0x40
  401f2e:	9303      	str	r3, [sp, #12]
  401f30:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401f34:	46ca      	mov	sl, r9
  401f36:	f8cd b010 	str.w	fp, [sp, #16]
  401f3a:	f898 3000 	ldrb.w	r3, [r8]
  401f3e:	4644      	mov	r4, r8
  401f40:	b1fb      	cbz	r3, 401f82 <_vfiprintf_r+0xc2>
  401f42:	2b25      	cmp	r3, #37	; 0x25
  401f44:	d102      	bne.n	401f4c <_vfiprintf_r+0x8c>
  401f46:	e01c      	b.n	401f82 <_vfiprintf_r+0xc2>
  401f48:	2b25      	cmp	r3, #37	; 0x25
  401f4a:	d003      	beq.n	401f54 <_vfiprintf_r+0x94>
  401f4c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  401f50:	2b00      	cmp	r3, #0
  401f52:	d1f9      	bne.n	401f48 <_vfiprintf_r+0x88>
  401f54:	eba4 0508 	sub.w	r5, r4, r8
  401f58:	b19d      	cbz	r5, 401f82 <_vfiprintf_r+0xc2>
  401f5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401f5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f5e:	f8ca 8000 	str.w	r8, [sl]
  401f62:	3301      	adds	r3, #1
  401f64:	442a      	add	r2, r5
  401f66:	2b07      	cmp	r3, #7
  401f68:	f8ca 5004 	str.w	r5, [sl, #4]
  401f6c:	9211      	str	r2, [sp, #68]	; 0x44
  401f6e:	9310      	str	r3, [sp, #64]	; 0x40
  401f70:	dd7a      	ble.n	402068 <_vfiprintf_r+0x1a8>
  401f72:	2a00      	cmp	r2, #0
  401f74:	f040 84b0 	bne.w	4028d8 <_vfiprintf_r+0xa18>
  401f78:	9b03      	ldr	r3, [sp, #12]
  401f7a:	9210      	str	r2, [sp, #64]	; 0x40
  401f7c:	442b      	add	r3, r5
  401f7e:	46ca      	mov	sl, r9
  401f80:	9303      	str	r3, [sp, #12]
  401f82:	7823      	ldrb	r3, [r4, #0]
  401f84:	2b00      	cmp	r3, #0
  401f86:	f000 83e0 	beq.w	40274a <_vfiprintf_r+0x88a>
  401f8a:	2000      	movs	r0, #0
  401f8c:	f04f 0300 	mov.w	r3, #0
  401f90:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  401f94:	f104 0801 	add.w	r8, r4, #1
  401f98:	7862      	ldrb	r2, [r4, #1]
  401f9a:	4605      	mov	r5, r0
  401f9c:	4606      	mov	r6, r0
  401f9e:	4603      	mov	r3, r0
  401fa0:	f04f 34ff 	mov.w	r4, #4294967295
  401fa4:	f108 0801 	add.w	r8, r8, #1
  401fa8:	f1a2 0120 	sub.w	r1, r2, #32
  401fac:	2958      	cmp	r1, #88	; 0x58
  401fae:	f200 82de 	bhi.w	40256e <_vfiprintf_r+0x6ae>
  401fb2:	e8df f011 	tbh	[pc, r1, lsl #1]
  401fb6:	0221      	.short	0x0221
  401fb8:	02dc02dc 	.word	0x02dc02dc
  401fbc:	02dc0229 	.word	0x02dc0229
  401fc0:	02dc02dc 	.word	0x02dc02dc
  401fc4:	02dc02dc 	.word	0x02dc02dc
  401fc8:	028902dc 	.word	0x028902dc
  401fcc:	02dc0295 	.word	0x02dc0295
  401fd0:	02bd00a2 	.word	0x02bd00a2
  401fd4:	019f02dc 	.word	0x019f02dc
  401fd8:	01a401a4 	.word	0x01a401a4
  401fdc:	01a401a4 	.word	0x01a401a4
  401fe0:	01a401a4 	.word	0x01a401a4
  401fe4:	01a401a4 	.word	0x01a401a4
  401fe8:	02dc01a4 	.word	0x02dc01a4
  401fec:	02dc02dc 	.word	0x02dc02dc
  401ff0:	02dc02dc 	.word	0x02dc02dc
  401ff4:	02dc02dc 	.word	0x02dc02dc
  401ff8:	02dc02dc 	.word	0x02dc02dc
  401ffc:	01b202dc 	.word	0x01b202dc
  402000:	02dc02dc 	.word	0x02dc02dc
  402004:	02dc02dc 	.word	0x02dc02dc
  402008:	02dc02dc 	.word	0x02dc02dc
  40200c:	02dc02dc 	.word	0x02dc02dc
  402010:	02dc02dc 	.word	0x02dc02dc
  402014:	02dc0197 	.word	0x02dc0197
  402018:	02dc02dc 	.word	0x02dc02dc
  40201c:	02dc02dc 	.word	0x02dc02dc
  402020:	02dc019b 	.word	0x02dc019b
  402024:	025302dc 	.word	0x025302dc
  402028:	02dc02dc 	.word	0x02dc02dc
  40202c:	02dc02dc 	.word	0x02dc02dc
  402030:	02dc02dc 	.word	0x02dc02dc
  402034:	02dc02dc 	.word	0x02dc02dc
  402038:	02dc02dc 	.word	0x02dc02dc
  40203c:	021b025a 	.word	0x021b025a
  402040:	02dc02dc 	.word	0x02dc02dc
  402044:	026e02dc 	.word	0x026e02dc
  402048:	02dc021b 	.word	0x02dc021b
  40204c:	027302dc 	.word	0x027302dc
  402050:	01f502dc 	.word	0x01f502dc
  402054:	02090182 	.word	0x02090182
  402058:	02dc02d7 	.word	0x02dc02d7
  40205c:	02dc029a 	.word	0x02dc029a
  402060:	02dc00a7 	.word	0x02dc00a7
  402064:	022e02dc 	.word	0x022e02dc
  402068:	f10a 0a08 	add.w	sl, sl, #8
  40206c:	9b03      	ldr	r3, [sp, #12]
  40206e:	442b      	add	r3, r5
  402070:	9303      	str	r3, [sp, #12]
  402072:	e786      	b.n	401f82 <_vfiprintf_r+0xc2>
  402074:	4659      	mov	r1, fp
  402076:	9806      	ldr	r0, [sp, #24]
  402078:	f000 fdac 	bl	402bd4 <__swsetup_r>
  40207c:	bb18      	cbnz	r0, 4020c6 <_vfiprintf_r+0x206>
  40207e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  402082:	f001 031a 	and.w	r3, r1, #26
  402086:	2b0a      	cmp	r3, #10
  402088:	f47f af4b 	bne.w	401f22 <_vfiprintf_r+0x62>
  40208c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  402090:	2b00      	cmp	r3, #0
  402092:	f6ff af46 	blt.w	401f22 <_vfiprintf_r+0x62>
  402096:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40209a:	07db      	lsls	r3, r3, #31
  40209c:	d405      	bmi.n	4020aa <_vfiprintf_r+0x1ea>
  40209e:	058f      	lsls	r7, r1, #22
  4020a0:	d403      	bmi.n	4020aa <_vfiprintf_r+0x1ea>
  4020a2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4020a6:	f001 facb 	bl	403640 <__retarget_lock_release_recursive>
  4020aa:	462b      	mov	r3, r5
  4020ac:	4642      	mov	r2, r8
  4020ae:	4659      	mov	r1, fp
  4020b0:	9806      	ldr	r0, [sp, #24]
  4020b2:	f000 fd4d 	bl	402b50 <__sbprintf>
  4020b6:	9003      	str	r0, [sp, #12]
  4020b8:	9803      	ldr	r0, [sp, #12]
  4020ba:	b02d      	add	sp, #180	; 0xb4
  4020bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4020c0:	f000 fefc 	bl	402ebc <__sinit>
  4020c4:	e709      	b.n	401eda <_vfiprintf_r+0x1a>
  4020c6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4020ca:	07d9      	lsls	r1, r3, #31
  4020cc:	d404      	bmi.n	4020d8 <_vfiprintf_r+0x218>
  4020ce:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4020d2:	059a      	lsls	r2, r3, #22
  4020d4:	f140 84aa 	bpl.w	402a2c <_vfiprintf_r+0xb6c>
  4020d8:	f04f 33ff 	mov.w	r3, #4294967295
  4020dc:	9303      	str	r3, [sp, #12]
  4020de:	9803      	ldr	r0, [sp, #12]
  4020e0:	b02d      	add	sp, #180	; 0xb4
  4020e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4020e6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4020ea:	f001 faa7 	bl	40363c <__retarget_lock_acquire_recursive>
  4020ee:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4020f2:	b281      	uxth	r1, r0
  4020f4:	e6fb      	b.n	401eee <_vfiprintf_r+0x2e>
  4020f6:	4276      	negs	r6, r6
  4020f8:	9207      	str	r2, [sp, #28]
  4020fa:	f043 0304 	orr.w	r3, r3, #4
  4020fe:	f898 2000 	ldrb.w	r2, [r8]
  402102:	e74f      	b.n	401fa4 <_vfiprintf_r+0xe4>
  402104:	9608      	str	r6, [sp, #32]
  402106:	069e      	lsls	r6, r3, #26
  402108:	f100 8450 	bmi.w	4029ac <_vfiprintf_r+0xaec>
  40210c:	9907      	ldr	r1, [sp, #28]
  40210e:	06dd      	lsls	r5, r3, #27
  402110:	460a      	mov	r2, r1
  402112:	f100 83ef 	bmi.w	4028f4 <_vfiprintf_r+0xa34>
  402116:	0658      	lsls	r0, r3, #25
  402118:	f140 83ec 	bpl.w	4028f4 <_vfiprintf_r+0xa34>
  40211c:	880e      	ldrh	r6, [r1, #0]
  40211e:	3104      	adds	r1, #4
  402120:	2700      	movs	r7, #0
  402122:	2201      	movs	r2, #1
  402124:	9107      	str	r1, [sp, #28]
  402126:	f04f 0100 	mov.w	r1, #0
  40212a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40212e:	2500      	movs	r5, #0
  402130:	1c61      	adds	r1, r4, #1
  402132:	f000 8116 	beq.w	402362 <_vfiprintf_r+0x4a2>
  402136:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40213a:	9102      	str	r1, [sp, #8]
  40213c:	ea56 0107 	orrs.w	r1, r6, r7
  402140:	f040 8114 	bne.w	40236c <_vfiprintf_r+0x4ac>
  402144:	2c00      	cmp	r4, #0
  402146:	f040 835c 	bne.w	402802 <_vfiprintf_r+0x942>
  40214a:	2a00      	cmp	r2, #0
  40214c:	f040 83b7 	bne.w	4028be <_vfiprintf_r+0x9fe>
  402150:	f013 0301 	ands.w	r3, r3, #1
  402154:	9305      	str	r3, [sp, #20]
  402156:	f000 8457 	beq.w	402a08 <_vfiprintf_r+0xb48>
  40215a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40215e:	2330      	movs	r3, #48	; 0x30
  402160:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  402164:	9b05      	ldr	r3, [sp, #20]
  402166:	42a3      	cmp	r3, r4
  402168:	bfb8      	it	lt
  40216a:	4623      	movlt	r3, r4
  40216c:	9301      	str	r3, [sp, #4]
  40216e:	b10d      	cbz	r5, 402174 <_vfiprintf_r+0x2b4>
  402170:	3301      	adds	r3, #1
  402172:	9301      	str	r3, [sp, #4]
  402174:	9b02      	ldr	r3, [sp, #8]
  402176:	f013 0302 	ands.w	r3, r3, #2
  40217a:	9309      	str	r3, [sp, #36]	; 0x24
  40217c:	d002      	beq.n	402184 <_vfiprintf_r+0x2c4>
  40217e:	9b01      	ldr	r3, [sp, #4]
  402180:	3302      	adds	r3, #2
  402182:	9301      	str	r3, [sp, #4]
  402184:	9b02      	ldr	r3, [sp, #8]
  402186:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40218a:	930a      	str	r3, [sp, #40]	; 0x28
  40218c:	f040 8217 	bne.w	4025be <_vfiprintf_r+0x6fe>
  402190:	9b08      	ldr	r3, [sp, #32]
  402192:	9a01      	ldr	r2, [sp, #4]
  402194:	1a9d      	subs	r5, r3, r2
  402196:	2d00      	cmp	r5, #0
  402198:	f340 8211 	ble.w	4025be <_vfiprintf_r+0x6fe>
  40219c:	2d10      	cmp	r5, #16
  40219e:	f340 8490 	ble.w	402ac2 <_vfiprintf_r+0xc02>
  4021a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4021a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4021a6:	4ec4      	ldr	r6, [pc, #784]	; (4024b8 <_vfiprintf_r+0x5f8>)
  4021a8:	46d6      	mov	lr, sl
  4021aa:	2710      	movs	r7, #16
  4021ac:	46a2      	mov	sl, r4
  4021ae:	4619      	mov	r1, r3
  4021b0:	9c06      	ldr	r4, [sp, #24]
  4021b2:	e007      	b.n	4021c4 <_vfiprintf_r+0x304>
  4021b4:	f101 0c02 	add.w	ip, r1, #2
  4021b8:	f10e 0e08 	add.w	lr, lr, #8
  4021bc:	4601      	mov	r1, r0
  4021be:	3d10      	subs	r5, #16
  4021c0:	2d10      	cmp	r5, #16
  4021c2:	dd11      	ble.n	4021e8 <_vfiprintf_r+0x328>
  4021c4:	1c48      	adds	r0, r1, #1
  4021c6:	3210      	adds	r2, #16
  4021c8:	2807      	cmp	r0, #7
  4021ca:	9211      	str	r2, [sp, #68]	; 0x44
  4021cc:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4021d0:	9010      	str	r0, [sp, #64]	; 0x40
  4021d2:	ddef      	ble.n	4021b4 <_vfiprintf_r+0x2f4>
  4021d4:	2a00      	cmp	r2, #0
  4021d6:	f040 81e4 	bne.w	4025a2 <_vfiprintf_r+0x6e2>
  4021da:	3d10      	subs	r5, #16
  4021dc:	2d10      	cmp	r5, #16
  4021de:	4611      	mov	r1, r2
  4021e0:	f04f 0c01 	mov.w	ip, #1
  4021e4:	46ce      	mov	lr, r9
  4021e6:	dced      	bgt.n	4021c4 <_vfiprintf_r+0x304>
  4021e8:	4654      	mov	r4, sl
  4021ea:	4661      	mov	r1, ip
  4021ec:	46f2      	mov	sl, lr
  4021ee:	442a      	add	r2, r5
  4021f0:	2907      	cmp	r1, #7
  4021f2:	9211      	str	r2, [sp, #68]	; 0x44
  4021f4:	f8ca 6000 	str.w	r6, [sl]
  4021f8:	f8ca 5004 	str.w	r5, [sl, #4]
  4021fc:	9110      	str	r1, [sp, #64]	; 0x40
  4021fe:	f300 82ec 	bgt.w	4027da <_vfiprintf_r+0x91a>
  402202:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402206:	f10a 0a08 	add.w	sl, sl, #8
  40220a:	1c48      	adds	r0, r1, #1
  40220c:	2d00      	cmp	r5, #0
  40220e:	f040 81de 	bne.w	4025ce <_vfiprintf_r+0x70e>
  402212:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402214:	2b00      	cmp	r3, #0
  402216:	f000 81f8 	beq.w	40260a <_vfiprintf_r+0x74a>
  40221a:	3202      	adds	r2, #2
  40221c:	a90e      	add	r1, sp, #56	; 0x38
  40221e:	2302      	movs	r3, #2
  402220:	2807      	cmp	r0, #7
  402222:	9211      	str	r2, [sp, #68]	; 0x44
  402224:	9010      	str	r0, [sp, #64]	; 0x40
  402226:	e88a 000a 	stmia.w	sl, {r1, r3}
  40222a:	f340 81ea 	ble.w	402602 <_vfiprintf_r+0x742>
  40222e:	2a00      	cmp	r2, #0
  402230:	f040 838c 	bne.w	40294c <_vfiprintf_r+0xa8c>
  402234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402236:	2b80      	cmp	r3, #128	; 0x80
  402238:	f04f 0001 	mov.w	r0, #1
  40223c:	4611      	mov	r1, r2
  40223e:	46ca      	mov	sl, r9
  402240:	f040 81e7 	bne.w	402612 <_vfiprintf_r+0x752>
  402244:	9b08      	ldr	r3, [sp, #32]
  402246:	9d01      	ldr	r5, [sp, #4]
  402248:	1b5e      	subs	r6, r3, r5
  40224a:	2e00      	cmp	r6, #0
  40224c:	f340 81e1 	ble.w	402612 <_vfiprintf_r+0x752>
  402250:	2e10      	cmp	r6, #16
  402252:	4d9a      	ldr	r5, [pc, #616]	; (4024bc <_vfiprintf_r+0x5fc>)
  402254:	f340 8450 	ble.w	402af8 <_vfiprintf_r+0xc38>
  402258:	46d4      	mov	ip, sl
  40225a:	2710      	movs	r7, #16
  40225c:	46a2      	mov	sl, r4
  40225e:	9c06      	ldr	r4, [sp, #24]
  402260:	e007      	b.n	402272 <_vfiprintf_r+0x3b2>
  402262:	f101 0e02 	add.w	lr, r1, #2
  402266:	f10c 0c08 	add.w	ip, ip, #8
  40226a:	4601      	mov	r1, r0
  40226c:	3e10      	subs	r6, #16
  40226e:	2e10      	cmp	r6, #16
  402270:	dd11      	ble.n	402296 <_vfiprintf_r+0x3d6>
  402272:	1c48      	adds	r0, r1, #1
  402274:	3210      	adds	r2, #16
  402276:	2807      	cmp	r0, #7
  402278:	9211      	str	r2, [sp, #68]	; 0x44
  40227a:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40227e:	9010      	str	r0, [sp, #64]	; 0x40
  402280:	ddef      	ble.n	402262 <_vfiprintf_r+0x3a2>
  402282:	2a00      	cmp	r2, #0
  402284:	f040 829d 	bne.w	4027c2 <_vfiprintf_r+0x902>
  402288:	3e10      	subs	r6, #16
  40228a:	2e10      	cmp	r6, #16
  40228c:	f04f 0e01 	mov.w	lr, #1
  402290:	4611      	mov	r1, r2
  402292:	46cc      	mov	ip, r9
  402294:	dced      	bgt.n	402272 <_vfiprintf_r+0x3b2>
  402296:	4654      	mov	r4, sl
  402298:	46e2      	mov	sl, ip
  40229a:	4432      	add	r2, r6
  40229c:	f1be 0f07 	cmp.w	lr, #7
  4022a0:	9211      	str	r2, [sp, #68]	; 0x44
  4022a2:	e88a 0060 	stmia.w	sl, {r5, r6}
  4022a6:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4022aa:	f300 8369 	bgt.w	402980 <_vfiprintf_r+0xac0>
  4022ae:	f10a 0a08 	add.w	sl, sl, #8
  4022b2:	f10e 0001 	add.w	r0, lr, #1
  4022b6:	4671      	mov	r1, lr
  4022b8:	e1ab      	b.n	402612 <_vfiprintf_r+0x752>
  4022ba:	9608      	str	r6, [sp, #32]
  4022bc:	f013 0220 	ands.w	r2, r3, #32
  4022c0:	f040 838c 	bne.w	4029dc <_vfiprintf_r+0xb1c>
  4022c4:	f013 0110 	ands.w	r1, r3, #16
  4022c8:	f040 831a 	bne.w	402900 <_vfiprintf_r+0xa40>
  4022cc:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4022d0:	f000 8316 	beq.w	402900 <_vfiprintf_r+0xa40>
  4022d4:	9807      	ldr	r0, [sp, #28]
  4022d6:	460a      	mov	r2, r1
  4022d8:	4601      	mov	r1, r0
  4022da:	3104      	adds	r1, #4
  4022dc:	8806      	ldrh	r6, [r0, #0]
  4022de:	9107      	str	r1, [sp, #28]
  4022e0:	2700      	movs	r7, #0
  4022e2:	e720      	b.n	402126 <_vfiprintf_r+0x266>
  4022e4:	9608      	str	r6, [sp, #32]
  4022e6:	f043 0310 	orr.w	r3, r3, #16
  4022ea:	e7e7      	b.n	4022bc <_vfiprintf_r+0x3fc>
  4022ec:	9608      	str	r6, [sp, #32]
  4022ee:	f043 0310 	orr.w	r3, r3, #16
  4022f2:	e708      	b.n	402106 <_vfiprintf_r+0x246>
  4022f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4022f8:	f898 2000 	ldrb.w	r2, [r8]
  4022fc:	e652      	b.n	401fa4 <_vfiprintf_r+0xe4>
  4022fe:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402302:	2600      	movs	r6, #0
  402304:	f818 2b01 	ldrb.w	r2, [r8], #1
  402308:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40230c:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  402310:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402314:	2909      	cmp	r1, #9
  402316:	d9f5      	bls.n	402304 <_vfiprintf_r+0x444>
  402318:	e646      	b.n	401fa8 <_vfiprintf_r+0xe8>
  40231a:	9608      	str	r6, [sp, #32]
  40231c:	2800      	cmp	r0, #0
  40231e:	f040 8408 	bne.w	402b32 <_vfiprintf_r+0xc72>
  402322:	f043 0310 	orr.w	r3, r3, #16
  402326:	069e      	lsls	r6, r3, #26
  402328:	f100 834c 	bmi.w	4029c4 <_vfiprintf_r+0xb04>
  40232c:	06dd      	lsls	r5, r3, #27
  40232e:	f100 82f3 	bmi.w	402918 <_vfiprintf_r+0xa58>
  402332:	0658      	lsls	r0, r3, #25
  402334:	f140 82f0 	bpl.w	402918 <_vfiprintf_r+0xa58>
  402338:	9d07      	ldr	r5, [sp, #28]
  40233a:	f9b5 6000 	ldrsh.w	r6, [r5]
  40233e:	462a      	mov	r2, r5
  402340:	17f7      	asrs	r7, r6, #31
  402342:	3204      	adds	r2, #4
  402344:	4630      	mov	r0, r6
  402346:	4639      	mov	r1, r7
  402348:	9207      	str	r2, [sp, #28]
  40234a:	2800      	cmp	r0, #0
  40234c:	f171 0200 	sbcs.w	r2, r1, #0
  402350:	f2c0 835d 	blt.w	402a0e <_vfiprintf_r+0xb4e>
  402354:	1c61      	adds	r1, r4, #1
  402356:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40235a:	f04f 0201 	mov.w	r2, #1
  40235e:	f47f aeea 	bne.w	402136 <_vfiprintf_r+0x276>
  402362:	ea56 0107 	orrs.w	r1, r6, r7
  402366:	f000 824d 	beq.w	402804 <_vfiprintf_r+0x944>
  40236a:	9302      	str	r3, [sp, #8]
  40236c:	2a01      	cmp	r2, #1
  40236e:	f000 828c 	beq.w	40288a <_vfiprintf_r+0x9ca>
  402372:	2a02      	cmp	r2, #2
  402374:	f040 825c 	bne.w	402830 <_vfiprintf_r+0x970>
  402378:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40237a:	46cb      	mov	fp, r9
  40237c:	0933      	lsrs	r3, r6, #4
  40237e:	f006 010f 	and.w	r1, r6, #15
  402382:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  402386:	093a      	lsrs	r2, r7, #4
  402388:	461e      	mov	r6, r3
  40238a:	4617      	mov	r7, r2
  40238c:	5c43      	ldrb	r3, [r0, r1]
  40238e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  402392:	ea56 0307 	orrs.w	r3, r6, r7
  402396:	d1f1      	bne.n	40237c <_vfiprintf_r+0x4bc>
  402398:	eba9 030b 	sub.w	r3, r9, fp
  40239c:	9305      	str	r3, [sp, #20]
  40239e:	e6e1      	b.n	402164 <_vfiprintf_r+0x2a4>
  4023a0:	2800      	cmp	r0, #0
  4023a2:	f040 83c0 	bne.w	402b26 <_vfiprintf_r+0xc66>
  4023a6:	0699      	lsls	r1, r3, #26
  4023a8:	f100 8367 	bmi.w	402a7a <_vfiprintf_r+0xbba>
  4023ac:	06da      	lsls	r2, r3, #27
  4023ae:	f100 80f1 	bmi.w	402594 <_vfiprintf_r+0x6d4>
  4023b2:	065b      	lsls	r3, r3, #25
  4023b4:	f140 80ee 	bpl.w	402594 <_vfiprintf_r+0x6d4>
  4023b8:	9a07      	ldr	r2, [sp, #28]
  4023ba:	6813      	ldr	r3, [r2, #0]
  4023bc:	3204      	adds	r2, #4
  4023be:	9207      	str	r2, [sp, #28]
  4023c0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4023c4:	801a      	strh	r2, [r3, #0]
  4023c6:	e5b8      	b.n	401f3a <_vfiprintf_r+0x7a>
  4023c8:	9807      	ldr	r0, [sp, #28]
  4023ca:	4a3d      	ldr	r2, [pc, #244]	; (4024c0 <_vfiprintf_r+0x600>)
  4023cc:	9608      	str	r6, [sp, #32]
  4023ce:	920b      	str	r2, [sp, #44]	; 0x2c
  4023d0:	6806      	ldr	r6, [r0, #0]
  4023d2:	2278      	movs	r2, #120	; 0x78
  4023d4:	2130      	movs	r1, #48	; 0x30
  4023d6:	3004      	adds	r0, #4
  4023d8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4023dc:	f043 0302 	orr.w	r3, r3, #2
  4023e0:	9007      	str	r0, [sp, #28]
  4023e2:	2700      	movs	r7, #0
  4023e4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4023e8:	2202      	movs	r2, #2
  4023ea:	e69c      	b.n	402126 <_vfiprintf_r+0x266>
  4023ec:	9608      	str	r6, [sp, #32]
  4023ee:	2800      	cmp	r0, #0
  4023f0:	d099      	beq.n	402326 <_vfiprintf_r+0x466>
  4023f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4023f6:	e796      	b.n	402326 <_vfiprintf_r+0x466>
  4023f8:	f898 2000 	ldrb.w	r2, [r8]
  4023fc:	2d00      	cmp	r5, #0
  4023fe:	f47f add1 	bne.w	401fa4 <_vfiprintf_r+0xe4>
  402402:	2001      	movs	r0, #1
  402404:	2520      	movs	r5, #32
  402406:	e5cd      	b.n	401fa4 <_vfiprintf_r+0xe4>
  402408:	f043 0301 	orr.w	r3, r3, #1
  40240c:	f898 2000 	ldrb.w	r2, [r8]
  402410:	e5c8      	b.n	401fa4 <_vfiprintf_r+0xe4>
  402412:	9608      	str	r6, [sp, #32]
  402414:	2800      	cmp	r0, #0
  402416:	f040 8393 	bne.w	402b40 <_vfiprintf_r+0xc80>
  40241a:	4929      	ldr	r1, [pc, #164]	; (4024c0 <_vfiprintf_r+0x600>)
  40241c:	910b      	str	r1, [sp, #44]	; 0x2c
  40241e:	069f      	lsls	r7, r3, #26
  402420:	f100 82e8 	bmi.w	4029f4 <_vfiprintf_r+0xb34>
  402424:	9807      	ldr	r0, [sp, #28]
  402426:	06de      	lsls	r6, r3, #27
  402428:	4601      	mov	r1, r0
  40242a:	f100 8270 	bmi.w	40290e <_vfiprintf_r+0xa4e>
  40242e:	065d      	lsls	r5, r3, #25
  402430:	f140 826d 	bpl.w	40290e <_vfiprintf_r+0xa4e>
  402434:	3104      	adds	r1, #4
  402436:	8806      	ldrh	r6, [r0, #0]
  402438:	9107      	str	r1, [sp, #28]
  40243a:	2700      	movs	r7, #0
  40243c:	07d8      	lsls	r0, r3, #31
  40243e:	f140 8222 	bpl.w	402886 <_vfiprintf_r+0x9c6>
  402442:	ea56 0107 	orrs.w	r1, r6, r7
  402446:	f000 821e 	beq.w	402886 <_vfiprintf_r+0x9c6>
  40244a:	2130      	movs	r1, #48	; 0x30
  40244c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  402450:	f043 0302 	orr.w	r3, r3, #2
  402454:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402458:	2202      	movs	r2, #2
  40245a:	e664      	b.n	402126 <_vfiprintf_r+0x266>
  40245c:	9608      	str	r6, [sp, #32]
  40245e:	2800      	cmp	r0, #0
  402460:	f040 836b 	bne.w	402b3a <_vfiprintf_r+0xc7a>
  402464:	4917      	ldr	r1, [pc, #92]	; (4024c4 <_vfiprintf_r+0x604>)
  402466:	910b      	str	r1, [sp, #44]	; 0x2c
  402468:	e7d9      	b.n	40241e <_vfiprintf_r+0x55e>
  40246a:	9907      	ldr	r1, [sp, #28]
  40246c:	9608      	str	r6, [sp, #32]
  40246e:	680a      	ldr	r2, [r1, #0]
  402470:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  402474:	f04f 0000 	mov.w	r0, #0
  402478:	460a      	mov	r2, r1
  40247a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40247e:	3204      	adds	r2, #4
  402480:	2001      	movs	r0, #1
  402482:	9001      	str	r0, [sp, #4]
  402484:	9207      	str	r2, [sp, #28]
  402486:	9005      	str	r0, [sp, #20]
  402488:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40248c:	9302      	str	r3, [sp, #8]
  40248e:	2400      	movs	r4, #0
  402490:	e670      	b.n	402174 <_vfiprintf_r+0x2b4>
  402492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402496:	f898 2000 	ldrb.w	r2, [r8]
  40249a:	e583      	b.n	401fa4 <_vfiprintf_r+0xe4>
  40249c:	f898 2000 	ldrb.w	r2, [r8]
  4024a0:	2a6c      	cmp	r2, #108	; 0x6c
  4024a2:	bf03      	ittte	eq
  4024a4:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4024a8:	f043 0320 	orreq.w	r3, r3, #32
  4024ac:	f108 0801 	addeq.w	r8, r8, #1
  4024b0:	f043 0310 	orrne.w	r3, r3, #16
  4024b4:	e576      	b.n	401fa4 <_vfiprintf_r+0xe4>
  4024b6:	bf00      	nop
  4024b8:	00404ffc 	.word	0x00404ffc
  4024bc:	0040500c 	.word	0x0040500c
  4024c0:	00404fe0 	.word	0x00404fe0
  4024c4:	00404fcc 	.word	0x00404fcc
  4024c8:	9907      	ldr	r1, [sp, #28]
  4024ca:	680e      	ldr	r6, [r1, #0]
  4024cc:	460a      	mov	r2, r1
  4024ce:	2e00      	cmp	r6, #0
  4024d0:	f102 0204 	add.w	r2, r2, #4
  4024d4:	f6ff ae0f 	blt.w	4020f6 <_vfiprintf_r+0x236>
  4024d8:	9207      	str	r2, [sp, #28]
  4024da:	f898 2000 	ldrb.w	r2, [r8]
  4024de:	e561      	b.n	401fa4 <_vfiprintf_r+0xe4>
  4024e0:	f898 2000 	ldrb.w	r2, [r8]
  4024e4:	2001      	movs	r0, #1
  4024e6:	252b      	movs	r5, #43	; 0x2b
  4024e8:	e55c      	b.n	401fa4 <_vfiprintf_r+0xe4>
  4024ea:	9907      	ldr	r1, [sp, #28]
  4024ec:	9608      	str	r6, [sp, #32]
  4024ee:	f8d1 b000 	ldr.w	fp, [r1]
  4024f2:	f04f 0200 	mov.w	r2, #0
  4024f6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4024fa:	1d0e      	adds	r6, r1, #4
  4024fc:	f1bb 0f00 	cmp.w	fp, #0
  402500:	f000 82e5 	beq.w	402ace <_vfiprintf_r+0xc0e>
  402504:	1c67      	adds	r7, r4, #1
  402506:	f000 82c4 	beq.w	402a92 <_vfiprintf_r+0xbd2>
  40250a:	4622      	mov	r2, r4
  40250c:	2100      	movs	r1, #0
  40250e:	4658      	mov	r0, fp
  402510:	9301      	str	r3, [sp, #4]
  402512:	f001 fbdd 	bl	403cd0 <memchr>
  402516:	9b01      	ldr	r3, [sp, #4]
  402518:	2800      	cmp	r0, #0
  40251a:	f000 82e5 	beq.w	402ae8 <_vfiprintf_r+0xc28>
  40251e:	eba0 020b 	sub.w	r2, r0, fp
  402522:	9205      	str	r2, [sp, #20]
  402524:	9607      	str	r6, [sp, #28]
  402526:	9302      	str	r3, [sp, #8]
  402528:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40252c:	2400      	movs	r4, #0
  40252e:	e619      	b.n	402164 <_vfiprintf_r+0x2a4>
  402530:	f898 2000 	ldrb.w	r2, [r8]
  402534:	2a2a      	cmp	r2, #42	; 0x2a
  402536:	f108 0701 	add.w	r7, r8, #1
  40253a:	f000 82e9 	beq.w	402b10 <_vfiprintf_r+0xc50>
  40253e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402542:	2909      	cmp	r1, #9
  402544:	46b8      	mov	r8, r7
  402546:	f04f 0400 	mov.w	r4, #0
  40254a:	f63f ad2d 	bhi.w	401fa8 <_vfiprintf_r+0xe8>
  40254e:	f818 2b01 	ldrb.w	r2, [r8], #1
  402552:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402556:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40255a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40255e:	2909      	cmp	r1, #9
  402560:	d9f5      	bls.n	40254e <_vfiprintf_r+0x68e>
  402562:	e521      	b.n	401fa8 <_vfiprintf_r+0xe8>
  402564:	f043 0320 	orr.w	r3, r3, #32
  402568:	f898 2000 	ldrb.w	r2, [r8]
  40256c:	e51a      	b.n	401fa4 <_vfiprintf_r+0xe4>
  40256e:	9608      	str	r6, [sp, #32]
  402570:	2800      	cmp	r0, #0
  402572:	f040 82db 	bne.w	402b2c <_vfiprintf_r+0xc6c>
  402576:	2a00      	cmp	r2, #0
  402578:	f000 80e7 	beq.w	40274a <_vfiprintf_r+0x88a>
  40257c:	2101      	movs	r1, #1
  40257e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  402582:	f04f 0200 	mov.w	r2, #0
  402586:	9101      	str	r1, [sp, #4]
  402588:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40258c:	9105      	str	r1, [sp, #20]
  40258e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  402592:	e77b      	b.n	40248c <_vfiprintf_r+0x5cc>
  402594:	9a07      	ldr	r2, [sp, #28]
  402596:	6813      	ldr	r3, [r2, #0]
  402598:	3204      	adds	r2, #4
  40259a:	9207      	str	r2, [sp, #28]
  40259c:	9a03      	ldr	r2, [sp, #12]
  40259e:	601a      	str	r2, [r3, #0]
  4025a0:	e4cb      	b.n	401f3a <_vfiprintf_r+0x7a>
  4025a2:	aa0f      	add	r2, sp, #60	; 0x3c
  4025a4:	9904      	ldr	r1, [sp, #16]
  4025a6:	4620      	mov	r0, r4
  4025a8:	f7ff fc4a 	bl	401e40 <__sprint_r.part.0>
  4025ac:	2800      	cmp	r0, #0
  4025ae:	f040 8139 	bne.w	402824 <_vfiprintf_r+0x964>
  4025b2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4025b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4025b6:	f101 0c01 	add.w	ip, r1, #1
  4025ba:	46ce      	mov	lr, r9
  4025bc:	e5ff      	b.n	4021be <_vfiprintf_r+0x2fe>
  4025be:	9910      	ldr	r1, [sp, #64]	; 0x40
  4025c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4025c2:	1c48      	adds	r0, r1, #1
  4025c4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4025c8:	2d00      	cmp	r5, #0
  4025ca:	f43f ae22 	beq.w	402212 <_vfiprintf_r+0x352>
  4025ce:	3201      	adds	r2, #1
  4025d0:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4025d4:	2101      	movs	r1, #1
  4025d6:	2807      	cmp	r0, #7
  4025d8:	9211      	str	r2, [sp, #68]	; 0x44
  4025da:	9010      	str	r0, [sp, #64]	; 0x40
  4025dc:	f8ca 5000 	str.w	r5, [sl]
  4025e0:	f8ca 1004 	str.w	r1, [sl, #4]
  4025e4:	f340 8108 	ble.w	4027f8 <_vfiprintf_r+0x938>
  4025e8:	2a00      	cmp	r2, #0
  4025ea:	f040 81bc 	bne.w	402966 <_vfiprintf_r+0xaa6>
  4025ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4025f0:	2b00      	cmp	r3, #0
  4025f2:	f43f ae1f 	beq.w	402234 <_vfiprintf_r+0x374>
  4025f6:	ab0e      	add	r3, sp, #56	; 0x38
  4025f8:	2202      	movs	r2, #2
  4025fa:	4608      	mov	r0, r1
  4025fc:	931c      	str	r3, [sp, #112]	; 0x70
  4025fe:	921d      	str	r2, [sp, #116]	; 0x74
  402600:	46ca      	mov	sl, r9
  402602:	4601      	mov	r1, r0
  402604:	f10a 0a08 	add.w	sl, sl, #8
  402608:	3001      	adds	r0, #1
  40260a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40260c:	2b80      	cmp	r3, #128	; 0x80
  40260e:	f43f ae19 	beq.w	402244 <_vfiprintf_r+0x384>
  402612:	9b05      	ldr	r3, [sp, #20]
  402614:	1ae4      	subs	r4, r4, r3
  402616:	2c00      	cmp	r4, #0
  402618:	dd2e      	ble.n	402678 <_vfiprintf_r+0x7b8>
  40261a:	2c10      	cmp	r4, #16
  40261c:	4db3      	ldr	r5, [pc, #716]	; (4028ec <_vfiprintf_r+0xa2c>)
  40261e:	dd1e      	ble.n	40265e <_vfiprintf_r+0x79e>
  402620:	46d6      	mov	lr, sl
  402622:	2610      	movs	r6, #16
  402624:	9f06      	ldr	r7, [sp, #24]
  402626:	f8dd a010 	ldr.w	sl, [sp, #16]
  40262a:	e006      	b.n	40263a <_vfiprintf_r+0x77a>
  40262c:	1c88      	adds	r0, r1, #2
  40262e:	f10e 0e08 	add.w	lr, lr, #8
  402632:	4619      	mov	r1, r3
  402634:	3c10      	subs	r4, #16
  402636:	2c10      	cmp	r4, #16
  402638:	dd10      	ble.n	40265c <_vfiprintf_r+0x79c>
  40263a:	1c4b      	adds	r3, r1, #1
  40263c:	3210      	adds	r2, #16
  40263e:	2b07      	cmp	r3, #7
  402640:	9211      	str	r2, [sp, #68]	; 0x44
  402642:	e88e 0060 	stmia.w	lr, {r5, r6}
  402646:	9310      	str	r3, [sp, #64]	; 0x40
  402648:	ddf0      	ble.n	40262c <_vfiprintf_r+0x76c>
  40264a:	2a00      	cmp	r2, #0
  40264c:	d165      	bne.n	40271a <_vfiprintf_r+0x85a>
  40264e:	3c10      	subs	r4, #16
  402650:	2c10      	cmp	r4, #16
  402652:	f04f 0001 	mov.w	r0, #1
  402656:	4611      	mov	r1, r2
  402658:	46ce      	mov	lr, r9
  40265a:	dcee      	bgt.n	40263a <_vfiprintf_r+0x77a>
  40265c:	46f2      	mov	sl, lr
  40265e:	4422      	add	r2, r4
  402660:	2807      	cmp	r0, #7
  402662:	9211      	str	r2, [sp, #68]	; 0x44
  402664:	f8ca 5000 	str.w	r5, [sl]
  402668:	f8ca 4004 	str.w	r4, [sl, #4]
  40266c:	9010      	str	r0, [sp, #64]	; 0x40
  40266e:	f300 8085 	bgt.w	40277c <_vfiprintf_r+0x8bc>
  402672:	f10a 0a08 	add.w	sl, sl, #8
  402676:	3001      	adds	r0, #1
  402678:	9905      	ldr	r1, [sp, #20]
  40267a:	f8ca b000 	str.w	fp, [sl]
  40267e:	440a      	add	r2, r1
  402680:	2807      	cmp	r0, #7
  402682:	9211      	str	r2, [sp, #68]	; 0x44
  402684:	f8ca 1004 	str.w	r1, [sl, #4]
  402688:	9010      	str	r0, [sp, #64]	; 0x40
  40268a:	f340 8082 	ble.w	402792 <_vfiprintf_r+0x8d2>
  40268e:	2a00      	cmp	r2, #0
  402690:	f040 8118 	bne.w	4028c4 <_vfiprintf_r+0xa04>
  402694:	9b02      	ldr	r3, [sp, #8]
  402696:	9210      	str	r2, [sp, #64]	; 0x40
  402698:	0758      	lsls	r0, r3, #29
  40269a:	d535      	bpl.n	402708 <_vfiprintf_r+0x848>
  40269c:	9b08      	ldr	r3, [sp, #32]
  40269e:	9901      	ldr	r1, [sp, #4]
  4026a0:	1a5c      	subs	r4, r3, r1
  4026a2:	2c00      	cmp	r4, #0
  4026a4:	f340 80e7 	ble.w	402876 <_vfiprintf_r+0x9b6>
  4026a8:	46ca      	mov	sl, r9
  4026aa:	2c10      	cmp	r4, #16
  4026ac:	f340 8218 	ble.w	402ae0 <_vfiprintf_r+0xc20>
  4026b0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4026b2:	4e8f      	ldr	r6, [pc, #572]	; (4028f0 <_vfiprintf_r+0xa30>)
  4026b4:	9f06      	ldr	r7, [sp, #24]
  4026b6:	f8dd b010 	ldr.w	fp, [sp, #16]
  4026ba:	2510      	movs	r5, #16
  4026bc:	e006      	b.n	4026cc <_vfiprintf_r+0x80c>
  4026be:	1c88      	adds	r0, r1, #2
  4026c0:	f10a 0a08 	add.w	sl, sl, #8
  4026c4:	4619      	mov	r1, r3
  4026c6:	3c10      	subs	r4, #16
  4026c8:	2c10      	cmp	r4, #16
  4026ca:	dd11      	ble.n	4026f0 <_vfiprintf_r+0x830>
  4026cc:	1c4b      	adds	r3, r1, #1
  4026ce:	3210      	adds	r2, #16
  4026d0:	2b07      	cmp	r3, #7
  4026d2:	9211      	str	r2, [sp, #68]	; 0x44
  4026d4:	f8ca 6000 	str.w	r6, [sl]
  4026d8:	f8ca 5004 	str.w	r5, [sl, #4]
  4026dc:	9310      	str	r3, [sp, #64]	; 0x40
  4026de:	ddee      	ble.n	4026be <_vfiprintf_r+0x7fe>
  4026e0:	bb42      	cbnz	r2, 402734 <_vfiprintf_r+0x874>
  4026e2:	3c10      	subs	r4, #16
  4026e4:	2c10      	cmp	r4, #16
  4026e6:	f04f 0001 	mov.w	r0, #1
  4026ea:	4611      	mov	r1, r2
  4026ec:	46ca      	mov	sl, r9
  4026ee:	dced      	bgt.n	4026cc <_vfiprintf_r+0x80c>
  4026f0:	4422      	add	r2, r4
  4026f2:	2807      	cmp	r0, #7
  4026f4:	9211      	str	r2, [sp, #68]	; 0x44
  4026f6:	f8ca 6000 	str.w	r6, [sl]
  4026fa:	f8ca 4004 	str.w	r4, [sl, #4]
  4026fe:	9010      	str	r0, [sp, #64]	; 0x40
  402700:	dd51      	ble.n	4027a6 <_vfiprintf_r+0x8e6>
  402702:	2a00      	cmp	r2, #0
  402704:	f040 819b 	bne.w	402a3e <_vfiprintf_r+0xb7e>
  402708:	9b03      	ldr	r3, [sp, #12]
  40270a:	9a08      	ldr	r2, [sp, #32]
  40270c:	9901      	ldr	r1, [sp, #4]
  40270e:	428a      	cmp	r2, r1
  402710:	bfac      	ite	ge
  402712:	189b      	addge	r3, r3, r2
  402714:	185b      	addlt	r3, r3, r1
  402716:	9303      	str	r3, [sp, #12]
  402718:	e04e      	b.n	4027b8 <_vfiprintf_r+0x8f8>
  40271a:	aa0f      	add	r2, sp, #60	; 0x3c
  40271c:	4651      	mov	r1, sl
  40271e:	4638      	mov	r0, r7
  402720:	f7ff fb8e 	bl	401e40 <__sprint_r.part.0>
  402724:	2800      	cmp	r0, #0
  402726:	f040 813f 	bne.w	4029a8 <_vfiprintf_r+0xae8>
  40272a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40272c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40272e:	1c48      	adds	r0, r1, #1
  402730:	46ce      	mov	lr, r9
  402732:	e77f      	b.n	402634 <_vfiprintf_r+0x774>
  402734:	aa0f      	add	r2, sp, #60	; 0x3c
  402736:	4659      	mov	r1, fp
  402738:	4638      	mov	r0, r7
  40273a:	f7ff fb81 	bl	401e40 <__sprint_r.part.0>
  40273e:	b960      	cbnz	r0, 40275a <_vfiprintf_r+0x89a>
  402740:	9910      	ldr	r1, [sp, #64]	; 0x40
  402742:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402744:	1c48      	adds	r0, r1, #1
  402746:	46ca      	mov	sl, r9
  402748:	e7bd      	b.n	4026c6 <_vfiprintf_r+0x806>
  40274a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40274c:	f8dd b010 	ldr.w	fp, [sp, #16]
  402750:	2b00      	cmp	r3, #0
  402752:	f040 81d4 	bne.w	402afe <_vfiprintf_r+0xc3e>
  402756:	2300      	movs	r3, #0
  402758:	9310      	str	r3, [sp, #64]	; 0x40
  40275a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40275e:	f013 0f01 	tst.w	r3, #1
  402762:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402766:	d102      	bne.n	40276e <_vfiprintf_r+0x8ae>
  402768:	059a      	lsls	r2, r3, #22
  40276a:	f140 80de 	bpl.w	40292a <_vfiprintf_r+0xa6a>
  40276e:	065b      	lsls	r3, r3, #25
  402770:	f53f acb2 	bmi.w	4020d8 <_vfiprintf_r+0x218>
  402774:	9803      	ldr	r0, [sp, #12]
  402776:	b02d      	add	sp, #180	; 0xb4
  402778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40277c:	2a00      	cmp	r2, #0
  40277e:	f040 8106 	bne.w	40298e <_vfiprintf_r+0xace>
  402782:	9a05      	ldr	r2, [sp, #20]
  402784:	921d      	str	r2, [sp, #116]	; 0x74
  402786:	2301      	movs	r3, #1
  402788:	9211      	str	r2, [sp, #68]	; 0x44
  40278a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40278e:	9310      	str	r3, [sp, #64]	; 0x40
  402790:	46ca      	mov	sl, r9
  402792:	f10a 0a08 	add.w	sl, sl, #8
  402796:	9b02      	ldr	r3, [sp, #8]
  402798:	0759      	lsls	r1, r3, #29
  40279a:	d504      	bpl.n	4027a6 <_vfiprintf_r+0x8e6>
  40279c:	9b08      	ldr	r3, [sp, #32]
  40279e:	9901      	ldr	r1, [sp, #4]
  4027a0:	1a5c      	subs	r4, r3, r1
  4027a2:	2c00      	cmp	r4, #0
  4027a4:	dc81      	bgt.n	4026aa <_vfiprintf_r+0x7ea>
  4027a6:	9b03      	ldr	r3, [sp, #12]
  4027a8:	9908      	ldr	r1, [sp, #32]
  4027aa:	9801      	ldr	r0, [sp, #4]
  4027ac:	4281      	cmp	r1, r0
  4027ae:	bfac      	ite	ge
  4027b0:	185b      	addge	r3, r3, r1
  4027b2:	181b      	addlt	r3, r3, r0
  4027b4:	9303      	str	r3, [sp, #12]
  4027b6:	bb72      	cbnz	r2, 402816 <_vfiprintf_r+0x956>
  4027b8:	2300      	movs	r3, #0
  4027ba:	9310      	str	r3, [sp, #64]	; 0x40
  4027bc:	46ca      	mov	sl, r9
  4027be:	f7ff bbbc 	b.w	401f3a <_vfiprintf_r+0x7a>
  4027c2:	aa0f      	add	r2, sp, #60	; 0x3c
  4027c4:	9904      	ldr	r1, [sp, #16]
  4027c6:	4620      	mov	r0, r4
  4027c8:	f7ff fb3a 	bl	401e40 <__sprint_r.part.0>
  4027cc:	bb50      	cbnz	r0, 402824 <_vfiprintf_r+0x964>
  4027ce:	9910      	ldr	r1, [sp, #64]	; 0x40
  4027d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4027d2:	f101 0e01 	add.w	lr, r1, #1
  4027d6:	46cc      	mov	ip, r9
  4027d8:	e548      	b.n	40226c <_vfiprintf_r+0x3ac>
  4027da:	2a00      	cmp	r2, #0
  4027dc:	f040 8140 	bne.w	402a60 <_vfiprintf_r+0xba0>
  4027e0:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4027e4:	2900      	cmp	r1, #0
  4027e6:	f000 811b 	beq.w	402a20 <_vfiprintf_r+0xb60>
  4027ea:	2201      	movs	r2, #1
  4027ec:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4027f0:	4610      	mov	r0, r2
  4027f2:	921d      	str	r2, [sp, #116]	; 0x74
  4027f4:	911c      	str	r1, [sp, #112]	; 0x70
  4027f6:	46ca      	mov	sl, r9
  4027f8:	4601      	mov	r1, r0
  4027fa:	f10a 0a08 	add.w	sl, sl, #8
  4027fe:	3001      	adds	r0, #1
  402800:	e507      	b.n	402212 <_vfiprintf_r+0x352>
  402802:	9b02      	ldr	r3, [sp, #8]
  402804:	2a01      	cmp	r2, #1
  402806:	f000 8098 	beq.w	40293a <_vfiprintf_r+0xa7a>
  40280a:	2a02      	cmp	r2, #2
  40280c:	d10d      	bne.n	40282a <_vfiprintf_r+0x96a>
  40280e:	9302      	str	r3, [sp, #8]
  402810:	2600      	movs	r6, #0
  402812:	2700      	movs	r7, #0
  402814:	e5b0      	b.n	402378 <_vfiprintf_r+0x4b8>
  402816:	aa0f      	add	r2, sp, #60	; 0x3c
  402818:	9904      	ldr	r1, [sp, #16]
  40281a:	9806      	ldr	r0, [sp, #24]
  40281c:	f7ff fb10 	bl	401e40 <__sprint_r.part.0>
  402820:	2800      	cmp	r0, #0
  402822:	d0c9      	beq.n	4027b8 <_vfiprintf_r+0x8f8>
  402824:	f8dd b010 	ldr.w	fp, [sp, #16]
  402828:	e797      	b.n	40275a <_vfiprintf_r+0x89a>
  40282a:	9302      	str	r3, [sp, #8]
  40282c:	2600      	movs	r6, #0
  40282e:	2700      	movs	r7, #0
  402830:	4649      	mov	r1, r9
  402832:	e000      	b.n	402836 <_vfiprintf_r+0x976>
  402834:	4659      	mov	r1, fp
  402836:	08f2      	lsrs	r2, r6, #3
  402838:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40283c:	08f8      	lsrs	r0, r7, #3
  40283e:	f006 0307 	and.w	r3, r6, #7
  402842:	4607      	mov	r7, r0
  402844:	4616      	mov	r6, r2
  402846:	3330      	adds	r3, #48	; 0x30
  402848:	ea56 0207 	orrs.w	r2, r6, r7
  40284c:	f801 3c01 	strb.w	r3, [r1, #-1]
  402850:	f101 3bff 	add.w	fp, r1, #4294967295
  402854:	d1ee      	bne.n	402834 <_vfiprintf_r+0x974>
  402856:	9a02      	ldr	r2, [sp, #8]
  402858:	07d6      	lsls	r6, r2, #31
  40285a:	f57f ad9d 	bpl.w	402398 <_vfiprintf_r+0x4d8>
  40285e:	2b30      	cmp	r3, #48	; 0x30
  402860:	f43f ad9a 	beq.w	402398 <_vfiprintf_r+0x4d8>
  402864:	3902      	subs	r1, #2
  402866:	2330      	movs	r3, #48	; 0x30
  402868:	f80b 3c01 	strb.w	r3, [fp, #-1]
  40286c:	eba9 0301 	sub.w	r3, r9, r1
  402870:	9305      	str	r3, [sp, #20]
  402872:	468b      	mov	fp, r1
  402874:	e476      	b.n	402164 <_vfiprintf_r+0x2a4>
  402876:	9b03      	ldr	r3, [sp, #12]
  402878:	9a08      	ldr	r2, [sp, #32]
  40287a:	428a      	cmp	r2, r1
  40287c:	bfac      	ite	ge
  40287e:	189b      	addge	r3, r3, r2
  402880:	185b      	addlt	r3, r3, r1
  402882:	9303      	str	r3, [sp, #12]
  402884:	e798      	b.n	4027b8 <_vfiprintf_r+0x8f8>
  402886:	2202      	movs	r2, #2
  402888:	e44d      	b.n	402126 <_vfiprintf_r+0x266>
  40288a:	2f00      	cmp	r7, #0
  40288c:	bf08      	it	eq
  40288e:	2e0a      	cmpeq	r6, #10
  402890:	d352      	bcc.n	402938 <_vfiprintf_r+0xa78>
  402892:	46cb      	mov	fp, r9
  402894:	4630      	mov	r0, r6
  402896:	4639      	mov	r1, r7
  402898:	220a      	movs	r2, #10
  40289a:	2300      	movs	r3, #0
  40289c:	f001 ff6c 	bl	404778 <__aeabi_uldivmod>
  4028a0:	3230      	adds	r2, #48	; 0x30
  4028a2:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4028a6:	4630      	mov	r0, r6
  4028a8:	4639      	mov	r1, r7
  4028aa:	2300      	movs	r3, #0
  4028ac:	220a      	movs	r2, #10
  4028ae:	f001 ff63 	bl	404778 <__aeabi_uldivmod>
  4028b2:	4606      	mov	r6, r0
  4028b4:	460f      	mov	r7, r1
  4028b6:	ea56 0307 	orrs.w	r3, r6, r7
  4028ba:	d1eb      	bne.n	402894 <_vfiprintf_r+0x9d4>
  4028bc:	e56c      	b.n	402398 <_vfiprintf_r+0x4d8>
  4028be:	9405      	str	r4, [sp, #20]
  4028c0:	46cb      	mov	fp, r9
  4028c2:	e44f      	b.n	402164 <_vfiprintf_r+0x2a4>
  4028c4:	aa0f      	add	r2, sp, #60	; 0x3c
  4028c6:	9904      	ldr	r1, [sp, #16]
  4028c8:	9806      	ldr	r0, [sp, #24]
  4028ca:	f7ff fab9 	bl	401e40 <__sprint_r.part.0>
  4028ce:	2800      	cmp	r0, #0
  4028d0:	d1a8      	bne.n	402824 <_vfiprintf_r+0x964>
  4028d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4028d4:	46ca      	mov	sl, r9
  4028d6:	e75e      	b.n	402796 <_vfiprintf_r+0x8d6>
  4028d8:	aa0f      	add	r2, sp, #60	; 0x3c
  4028da:	9904      	ldr	r1, [sp, #16]
  4028dc:	9806      	ldr	r0, [sp, #24]
  4028de:	f7ff faaf 	bl	401e40 <__sprint_r.part.0>
  4028e2:	2800      	cmp	r0, #0
  4028e4:	d19e      	bne.n	402824 <_vfiprintf_r+0x964>
  4028e6:	46ca      	mov	sl, r9
  4028e8:	f7ff bbc0 	b.w	40206c <_vfiprintf_r+0x1ac>
  4028ec:	0040500c 	.word	0x0040500c
  4028f0:	00404ffc 	.word	0x00404ffc
  4028f4:	3104      	adds	r1, #4
  4028f6:	6816      	ldr	r6, [r2, #0]
  4028f8:	9107      	str	r1, [sp, #28]
  4028fa:	2201      	movs	r2, #1
  4028fc:	2700      	movs	r7, #0
  4028fe:	e412      	b.n	402126 <_vfiprintf_r+0x266>
  402900:	9807      	ldr	r0, [sp, #28]
  402902:	4601      	mov	r1, r0
  402904:	3104      	adds	r1, #4
  402906:	6806      	ldr	r6, [r0, #0]
  402908:	9107      	str	r1, [sp, #28]
  40290a:	2700      	movs	r7, #0
  40290c:	e40b      	b.n	402126 <_vfiprintf_r+0x266>
  40290e:	680e      	ldr	r6, [r1, #0]
  402910:	3104      	adds	r1, #4
  402912:	9107      	str	r1, [sp, #28]
  402914:	2700      	movs	r7, #0
  402916:	e591      	b.n	40243c <_vfiprintf_r+0x57c>
  402918:	9907      	ldr	r1, [sp, #28]
  40291a:	680e      	ldr	r6, [r1, #0]
  40291c:	460a      	mov	r2, r1
  40291e:	17f7      	asrs	r7, r6, #31
  402920:	3204      	adds	r2, #4
  402922:	9207      	str	r2, [sp, #28]
  402924:	4630      	mov	r0, r6
  402926:	4639      	mov	r1, r7
  402928:	e50f      	b.n	40234a <_vfiprintf_r+0x48a>
  40292a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40292e:	f000 fe87 	bl	403640 <__retarget_lock_release_recursive>
  402932:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402936:	e71a      	b.n	40276e <_vfiprintf_r+0x8ae>
  402938:	9b02      	ldr	r3, [sp, #8]
  40293a:	9302      	str	r3, [sp, #8]
  40293c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  402940:	3630      	adds	r6, #48	; 0x30
  402942:	2301      	movs	r3, #1
  402944:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  402948:	9305      	str	r3, [sp, #20]
  40294a:	e40b      	b.n	402164 <_vfiprintf_r+0x2a4>
  40294c:	aa0f      	add	r2, sp, #60	; 0x3c
  40294e:	9904      	ldr	r1, [sp, #16]
  402950:	9806      	ldr	r0, [sp, #24]
  402952:	f7ff fa75 	bl	401e40 <__sprint_r.part.0>
  402956:	2800      	cmp	r0, #0
  402958:	f47f af64 	bne.w	402824 <_vfiprintf_r+0x964>
  40295c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40295e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402960:	1c48      	adds	r0, r1, #1
  402962:	46ca      	mov	sl, r9
  402964:	e651      	b.n	40260a <_vfiprintf_r+0x74a>
  402966:	aa0f      	add	r2, sp, #60	; 0x3c
  402968:	9904      	ldr	r1, [sp, #16]
  40296a:	9806      	ldr	r0, [sp, #24]
  40296c:	f7ff fa68 	bl	401e40 <__sprint_r.part.0>
  402970:	2800      	cmp	r0, #0
  402972:	f47f af57 	bne.w	402824 <_vfiprintf_r+0x964>
  402976:	9910      	ldr	r1, [sp, #64]	; 0x40
  402978:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40297a:	1c48      	adds	r0, r1, #1
  40297c:	46ca      	mov	sl, r9
  40297e:	e448      	b.n	402212 <_vfiprintf_r+0x352>
  402980:	2a00      	cmp	r2, #0
  402982:	f040 8091 	bne.w	402aa8 <_vfiprintf_r+0xbe8>
  402986:	2001      	movs	r0, #1
  402988:	4611      	mov	r1, r2
  40298a:	46ca      	mov	sl, r9
  40298c:	e641      	b.n	402612 <_vfiprintf_r+0x752>
  40298e:	aa0f      	add	r2, sp, #60	; 0x3c
  402990:	9904      	ldr	r1, [sp, #16]
  402992:	9806      	ldr	r0, [sp, #24]
  402994:	f7ff fa54 	bl	401e40 <__sprint_r.part.0>
  402998:	2800      	cmp	r0, #0
  40299a:	f47f af43 	bne.w	402824 <_vfiprintf_r+0x964>
  40299e:	9810      	ldr	r0, [sp, #64]	; 0x40
  4029a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4029a2:	3001      	adds	r0, #1
  4029a4:	46ca      	mov	sl, r9
  4029a6:	e667      	b.n	402678 <_vfiprintf_r+0x7b8>
  4029a8:	46d3      	mov	fp, sl
  4029aa:	e6d6      	b.n	40275a <_vfiprintf_r+0x89a>
  4029ac:	9e07      	ldr	r6, [sp, #28]
  4029ae:	3607      	adds	r6, #7
  4029b0:	f026 0207 	bic.w	r2, r6, #7
  4029b4:	f102 0108 	add.w	r1, r2, #8
  4029b8:	e9d2 6700 	ldrd	r6, r7, [r2]
  4029bc:	9107      	str	r1, [sp, #28]
  4029be:	2201      	movs	r2, #1
  4029c0:	f7ff bbb1 	b.w	402126 <_vfiprintf_r+0x266>
  4029c4:	9e07      	ldr	r6, [sp, #28]
  4029c6:	3607      	adds	r6, #7
  4029c8:	f026 0607 	bic.w	r6, r6, #7
  4029cc:	e9d6 0100 	ldrd	r0, r1, [r6]
  4029d0:	f106 0208 	add.w	r2, r6, #8
  4029d4:	9207      	str	r2, [sp, #28]
  4029d6:	4606      	mov	r6, r0
  4029d8:	460f      	mov	r7, r1
  4029da:	e4b6      	b.n	40234a <_vfiprintf_r+0x48a>
  4029dc:	9e07      	ldr	r6, [sp, #28]
  4029de:	3607      	adds	r6, #7
  4029e0:	f026 0207 	bic.w	r2, r6, #7
  4029e4:	f102 0108 	add.w	r1, r2, #8
  4029e8:	e9d2 6700 	ldrd	r6, r7, [r2]
  4029ec:	9107      	str	r1, [sp, #28]
  4029ee:	2200      	movs	r2, #0
  4029f0:	f7ff bb99 	b.w	402126 <_vfiprintf_r+0x266>
  4029f4:	9e07      	ldr	r6, [sp, #28]
  4029f6:	3607      	adds	r6, #7
  4029f8:	f026 0107 	bic.w	r1, r6, #7
  4029fc:	f101 0008 	add.w	r0, r1, #8
  402a00:	9007      	str	r0, [sp, #28]
  402a02:	e9d1 6700 	ldrd	r6, r7, [r1]
  402a06:	e519      	b.n	40243c <_vfiprintf_r+0x57c>
  402a08:	46cb      	mov	fp, r9
  402a0a:	f7ff bbab 	b.w	402164 <_vfiprintf_r+0x2a4>
  402a0e:	252d      	movs	r5, #45	; 0x2d
  402a10:	4276      	negs	r6, r6
  402a12:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  402a16:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402a1a:	2201      	movs	r2, #1
  402a1c:	f7ff bb88 	b.w	402130 <_vfiprintf_r+0x270>
  402a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402a22:	b9b3      	cbnz	r3, 402a52 <_vfiprintf_r+0xb92>
  402a24:	4611      	mov	r1, r2
  402a26:	2001      	movs	r0, #1
  402a28:	46ca      	mov	sl, r9
  402a2a:	e5f2      	b.n	402612 <_vfiprintf_r+0x752>
  402a2c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402a30:	f000 fe06 	bl	403640 <__retarget_lock_release_recursive>
  402a34:	f04f 33ff 	mov.w	r3, #4294967295
  402a38:	9303      	str	r3, [sp, #12]
  402a3a:	f7ff bb50 	b.w	4020de <_vfiprintf_r+0x21e>
  402a3e:	aa0f      	add	r2, sp, #60	; 0x3c
  402a40:	9904      	ldr	r1, [sp, #16]
  402a42:	9806      	ldr	r0, [sp, #24]
  402a44:	f7ff f9fc 	bl	401e40 <__sprint_r.part.0>
  402a48:	2800      	cmp	r0, #0
  402a4a:	f47f aeeb 	bne.w	402824 <_vfiprintf_r+0x964>
  402a4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402a50:	e6a9      	b.n	4027a6 <_vfiprintf_r+0x8e6>
  402a52:	ab0e      	add	r3, sp, #56	; 0x38
  402a54:	2202      	movs	r2, #2
  402a56:	931c      	str	r3, [sp, #112]	; 0x70
  402a58:	921d      	str	r2, [sp, #116]	; 0x74
  402a5a:	2001      	movs	r0, #1
  402a5c:	46ca      	mov	sl, r9
  402a5e:	e5d0      	b.n	402602 <_vfiprintf_r+0x742>
  402a60:	aa0f      	add	r2, sp, #60	; 0x3c
  402a62:	9904      	ldr	r1, [sp, #16]
  402a64:	9806      	ldr	r0, [sp, #24]
  402a66:	f7ff f9eb 	bl	401e40 <__sprint_r.part.0>
  402a6a:	2800      	cmp	r0, #0
  402a6c:	f47f aeda 	bne.w	402824 <_vfiprintf_r+0x964>
  402a70:	9910      	ldr	r1, [sp, #64]	; 0x40
  402a72:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402a74:	1c48      	adds	r0, r1, #1
  402a76:	46ca      	mov	sl, r9
  402a78:	e5a4      	b.n	4025c4 <_vfiprintf_r+0x704>
  402a7a:	9a07      	ldr	r2, [sp, #28]
  402a7c:	9903      	ldr	r1, [sp, #12]
  402a7e:	6813      	ldr	r3, [r2, #0]
  402a80:	17cd      	asrs	r5, r1, #31
  402a82:	4608      	mov	r0, r1
  402a84:	3204      	adds	r2, #4
  402a86:	4629      	mov	r1, r5
  402a88:	9207      	str	r2, [sp, #28]
  402a8a:	e9c3 0100 	strd	r0, r1, [r3]
  402a8e:	f7ff ba54 	b.w	401f3a <_vfiprintf_r+0x7a>
  402a92:	4658      	mov	r0, fp
  402a94:	9607      	str	r6, [sp, #28]
  402a96:	9302      	str	r3, [sp, #8]
  402a98:	f001 fc32 	bl	404300 <strlen>
  402a9c:	2400      	movs	r4, #0
  402a9e:	9005      	str	r0, [sp, #20]
  402aa0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402aa4:	f7ff bb5e 	b.w	402164 <_vfiprintf_r+0x2a4>
  402aa8:	aa0f      	add	r2, sp, #60	; 0x3c
  402aaa:	9904      	ldr	r1, [sp, #16]
  402aac:	9806      	ldr	r0, [sp, #24]
  402aae:	f7ff f9c7 	bl	401e40 <__sprint_r.part.0>
  402ab2:	2800      	cmp	r0, #0
  402ab4:	f47f aeb6 	bne.w	402824 <_vfiprintf_r+0x964>
  402ab8:	9910      	ldr	r1, [sp, #64]	; 0x40
  402aba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402abc:	1c48      	adds	r0, r1, #1
  402abe:	46ca      	mov	sl, r9
  402ac0:	e5a7      	b.n	402612 <_vfiprintf_r+0x752>
  402ac2:	9910      	ldr	r1, [sp, #64]	; 0x40
  402ac4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402ac6:	4e20      	ldr	r6, [pc, #128]	; (402b48 <_vfiprintf_r+0xc88>)
  402ac8:	3101      	adds	r1, #1
  402aca:	f7ff bb90 	b.w	4021ee <_vfiprintf_r+0x32e>
  402ace:	2c06      	cmp	r4, #6
  402ad0:	bf28      	it	cs
  402ad2:	2406      	movcs	r4, #6
  402ad4:	9405      	str	r4, [sp, #20]
  402ad6:	9607      	str	r6, [sp, #28]
  402ad8:	9401      	str	r4, [sp, #4]
  402ada:	f8df b070 	ldr.w	fp, [pc, #112]	; 402b4c <_vfiprintf_r+0xc8c>
  402ade:	e4d5      	b.n	40248c <_vfiprintf_r+0x5cc>
  402ae0:	9810      	ldr	r0, [sp, #64]	; 0x40
  402ae2:	4e19      	ldr	r6, [pc, #100]	; (402b48 <_vfiprintf_r+0xc88>)
  402ae4:	3001      	adds	r0, #1
  402ae6:	e603      	b.n	4026f0 <_vfiprintf_r+0x830>
  402ae8:	9405      	str	r4, [sp, #20]
  402aea:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402aee:	9607      	str	r6, [sp, #28]
  402af0:	9302      	str	r3, [sp, #8]
  402af2:	4604      	mov	r4, r0
  402af4:	f7ff bb36 	b.w	402164 <_vfiprintf_r+0x2a4>
  402af8:	4686      	mov	lr, r0
  402afa:	f7ff bbce 	b.w	40229a <_vfiprintf_r+0x3da>
  402afe:	9806      	ldr	r0, [sp, #24]
  402b00:	aa0f      	add	r2, sp, #60	; 0x3c
  402b02:	4659      	mov	r1, fp
  402b04:	f7ff f99c 	bl	401e40 <__sprint_r.part.0>
  402b08:	2800      	cmp	r0, #0
  402b0a:	f43f ae24 	beq.w	402756 <_vfiprintf_r+0x896>
  402b0e:	e624      	b.n	40275a <_vfiprintf_r+0x89a>
  402b10:	9907      	ldr	r1, [sp, #28]
  402b12:	f898 2001 	ldrb.w	r2, [r8, #1]
  402b16:	680c      	ldr	r4, [r1, #0]
  402b18:	3104      	adds	r1, #4
  402b1a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  402b1e:	46b8      	mov	r8, r7
  402b20:	9107      	str	r1, [sp, #28]
  402b22:	f7ff ba3f 	b.w	401fa4 <_vfiprintf_r+0xe4>
  402b26:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402b2a:	e43c      	b.n	4023a6 <_vfiprintf_r+0x4e6>
  402b2c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402b30:	e521      	b.n	402576 <_vfiprintf_r+0x6b6>
  402b32:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402b36:	f7ff bbf4 	b.w	402322 <_vfiprintf_r+0x462>
  402b3a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402b3e:	e491      	b.n	402464 <_vfiprintf_r+0x5a4>
  402b40:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402b44:	e469      	b.n	40241a <_vfiprintf_r+0x55a>
  402b46:	bf00      	nop
  402b48:	00404ffc 	.word	0x00404ffc
  402b4c:	00404ff4 	.word	0x00404ff4

00402b50 <__sbprintf>:
  402b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402b54:	460c      	mov	r4, r1
  402b56:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  402b5a:	8989      	ldrh	r1, [r1, #12]
  402b5c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402b5e:	89e5      	ldrh	r5, [r4, #14]
  402b60:	9619      	str	r6, [sp, #100]	; 0x64
  402b62:	f021 0102 	bic.w	r1, r1, #2
  402b66:	4606      	mov	r6, r0
  402b68:	69e0      	ldr	r0, [r4, #28]
  402b6a:	f8ad 100c 	strh.w	r1, [sp, #12]
  402b6e:	4617      	mov	r7, r2
  402b70:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402b74:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402b76:	f8ad 500e 	strh.w	r5, [sp, #14]
  402b7a:	4698      	mov	r8, r3
  402b7c:	ad1a      	add	r5, sp, #104	; 0x68
  402b7e:	2300      	movs	r3, #0
  402b80:	9007      	str	r0, [sp, #28]
  402b82:	a816      	add	r0, sp, #88	; 0x58
  402b84:	9209      	str	r2, [sp, #36]	; 0x24
  402b86:	9306      	str	r3, [sp, #24]
  402b88:	9500      	str	r5, [sp, #0]
  402b8a:	9504      	str	r5, [sp, #16]
  402b8c:	9102      	str	r1, [sp, #8]
  402b8e:	9105      	str	r1, [sp, #20]
  402b90:	f000 fd50 	bl	403634 <__retarget_lock_init_recursive>
  402b94:	4643      	mov	r3, r8
  402b96:	463a      	mov	r2, r7
  402b98:	4669      	mov	r1, sp
  402b9a:	4630      	mov	r0, r6
  402b9c:	f7ff f990 	bl	401ec0 <_vfiprintf_r>
  402ba0:	1e05      	subs	r5, r0, #0
  402ba2:	db07      	blt.n	402bb4 <__sbprintf+0x64>
  402ba4:	4630      	mov	r0, r6
  402ba6:	4669      	mov	r1, sp
  402ba8:	f000 f930 	bl	402e0c <_fflush_r>
  402bac:	2800      	cmp	r0, #0
  402bae:	bf18      	it	ne
  402bb0:	f04f 35ff 	movne.w	r5, #4294967295
  402bb4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402bb8:	065b      	lsls	r3, r3, #25
  402bba:	d503      	bpl.n	402bc4 <__sbprintf+0x74>
  402bbc:	89a3      	ldrh	r3, [r4, #12]
  402bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402bc2:	81a3      	strh	r3, [r4, #12]
  402bc4:	9816      	ldr	r0, [sp, #88]	; 0x58
  402bc6:	f000 fd37 	bl	403638 <__retarget_lock_close_recursive>
  402bca:	4628      	mov	r0, r5
  402bcc:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  402bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00402bd4 <__swsetup_r>:
  402bd4:	b538      	push	{r3, r4, r5, lr}
  402bd6:	4b30      	ldr	r3, [pc, #192]	; (402c98 <__swsetup_r+0xc4>)
  402bd8:	681b      	ldr	r3, [r3, #0]
  402bda:	4605      	mov	r5, r0
  402bdc:	460c      	mov	r4, r1
  402bde:	b113      	cbz	r3, 402be6 <__swsetup_r+0x12>
  402be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402be2:	2a00      	cmp	r2, #0
  402be4:	d038      	beq.n	402c58 <__swsetup_r+0x84>
  402be6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402bea:	b293      	uxth	r3, r2
  402bec:	0718      	lsls	r0, r3, #28
  402bee:	d50c      	bpl.n	402c0a <__swsetup_r+0x36>
  402bf0:	6920      	ldr	r0, [r4, #16]
  402bf2:	b1a8      	cbz	r0, 402c20 <__swsetup_r+0x4c>
  402bf4:	f013 0201 	ands.w	r2, r3, #1
  402bf8:	d01e      	beq.n	402c38 <__swsetup_r+0x64>
  402bfa:	6963      	ldr	r3, [r4, #20]
  402bfc:	2200      	movs	r2, #0
  402bfe:	425b      	negs	r3, r3
  402c00:	61a3      	str	r3, [r4, #24]
  402c02:	60a2      	str	r2, [r4, #8]
  402c04:	b1f0      	cbz	r0, 402c44 <__swsetup_r+0x70>
  402c06:	2000      	movs	r0, #0
  402c08:	bd38      	pop	{r3, r4, r5, pc}
  402c0a:	06d9      	lsls	r1, r3, #27
  402c0c:	d53c      	bpl.n	402c88 <__swsetup_r+0xb4>
  402c0e:	0758      	lsls	r0, r3, #29
  402c10:	d426      	bmi.n	402c60 <__swsetup_r+0x8c>
  402c12:	6920      	ldr	r0, [r4, #16]
  402c14:	f042 0308 	orr.w	r3, r2, #8
  402c18:	81a3      	strh	r3, [r4, #12]
  402c1a:	b29b      	uxth	r3, r3
  402c1c:	2800      	cmp	r0, #0
  402c1e:	d1e9      	bne.n	402bf4 <__swsetup_r+0x20>
  402c20:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402c24:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402c28:	d0e4      	beq.n	402bf4 <__swsetup_r+0x20>
  402c2a:	4628      	mov	r0, r5
  402c2c:	4621      	mov	r1, r4
  402c2e:	f000 fd37 	bl	4036a0 <__smakebuf_r>
  402c32:	89a3      	ldrh	r3, [r4, #12]
  402c34:	6920      	ldr	r0, [r4, #16]
  402c36:	e7dd      	b.n	402bf4 <__swsetup_r+0x20>
  402c38:	0799      	lsls	r1, r3, #30
  402c3a:	bf58      	it	pl
  402c3c:	6962      	ldrpl	r2, [r4, #20]
  402c3e:	60a2      	str	r2, [r4, #8]
  402c40:	2800      	cmp	r0, #0
  402c42:	d1e0      	bne.n	402c06 <__swsetup_r+0x32>
  402c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402c48:	061a      	lsls	r2, r3, #24
  402c4a:	d5dd      	bpl.n	402c08 <__swsetup_r+0x34>
  402c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402c50:	81a3      	strh	r3, [r4, #12]
  402c52:	f04f 30ff 	mov.w	r0, #4294967295
  402c56:	bd38      	pop	{r3, r4, r5, pc}
  402c58:	4618      	mov	r0, r3
  402c5a:	f000 f92f 	bl	402ebc <__sinit>
  402c5e:	e7c2      	b.n	402be6 <__swsetup_r+0x12>
  402c60:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402c62:	b151      	cbz	r1, 402c7a <__swsetup_r+0xa6>
  402c64:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402c68:	4299      	cmp	r1, r3
  402c6a:	d004      	beq.n	402c76 <__swsetup_r+0xa2>
  402c6c:	4628      	mov	r0, r5
  402c6e:	f000 fa4b 	bl	403108 <_free_r>
  402c72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402c76:	2300      	movs	r3, #0
  402c78:	6323      	str	r3, [r4, #48]	; 0x30
  402c7a:	2300      	movs	r3, #0
  402c7c:	6920      	ldr	r0, [r4, #16]
  402c7e:	6063      	str	r3, [r4, #4]
  402c80:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402c84:	6020      	str	r0, [r4, #0]
  402c86:	e7c5      	b.n	402c14 <__swsetup_r+0x40>
  402c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402c8c:	2309      	movs	r3, #9
  402c8e:	602b      	str	r3, [r5, #0]
  402c90:	f04f 30ff 	mov.w	r0, #4294967295
  402c94:	81a2      	strh	r2, [r4, #12]
  402c96:	bd38      	pop	{r3, r4, r5, pc}
  402c98:	20400014 	.word	0x20400014

00402c9c <register_fini>:
  402c9c:	4b02      	ldr	r3, [pc, #8]	; (402ca8 <register_fini+0xc>)
  402c9e:	b113      	cbz	r3, 402ca6 <register_fini+0xa>
  402ca0:	4802      	ldr	r0, [pc, #8]	; (402cac <register_fini+0x10>)
  402ca2:	f000 b80d 	b.w	402cc0 <atexit>
  402ca6:	4770      	bx	lr
  402ca8:	00000000 	.word	0x00000000
  402cac:	00402f2d 	.word	0x00402f2d

00402cb0 <abort>:
  402cb0:	b508      	push	{r3, lr}
  402cb2:	2006      	movs	r0, #6
  402cb4:	f001 fab4 	bl	404220 <raise>
  402cb8:	2001      	movs	r0, #1
  402cba:	f7fe fb05 	bl	4012c8 <_exit>
  402cbe:	bf00      	nop

00402cc0 <atexit>:
  402cc0:	2300      	movs	r3, #0
  402cc2:	4601      	mov	r1, r0
  402cc4:	461a      	mov	r2, r3
  402cc6:	4618      	mov	r0, r3
  402cc8:	f001 bc2e 	b.w	404528 <__register_exitproc>

00402ccc <__sflush_r>:
  402ccc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  402cd0:	b29a      	uxth	r2, r3
  402cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402cd6:	460d      	mov	r5, r1
  402cd8:	0711      	lsls	r1, r2, #28
  402cda:	4680      	mov	r8, r0
  402cdc:	d43a      	bmi.n	402d54 <__sflush_r+0x88>
  402cde:	686a      	ldr	r2, [r5, #4]
  402ce0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402ce4:	2a00      	cmp	r2, #0
  402ce6:	81ab      	strh	r3, [r5, #12]
  402ce8:	dd6f      	ble.n	402dca <__sflush_r+0xfe>
  402cea:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402cec:	2c00      	cmp	r4, #0
  402cee:	d049      	beq.n	402d84 <__sflush_r+0xb8>
  402cf0:	2200      	movs	r2, #0
  402cf2:	b29b      	uxth	r3, r3
  402cf4:	f8d8 6000 	ldr.w	r6, [r8]
  402cf8:	f8c8 2000 	str.w	r2, [r8]
  402cfc:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  402d00:	d067      	beq.n	402dd2 <__sflush_r+0x106>
  402d02:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402d04:	075f      	lsls	r7, r3, #29
  402d06:	d505      	bpl.n	402d14 <__sflush_r+0x48>
  402d08:	6869      	ldr	r1, [r5, #4]
  402d0a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402d0c:	1a52      	subs	r2, r2, r1
  402d0e:	b10b      	cbz	r3, 402d14 <__sflush_r+0x48>
  402d10:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402d12:	1ad2      	subs	r2, r2, r3
  402d14:	2300      	movs	r3, #0
  402d16:	69e9      	ldr	r1, [r5, #28]
  402d18:	4640      	mov	r0, r8
  402d1a:	47a0      	blx	r4
  402d1c:	1c44      	adds	r4, r0, #1
  402d1e:	d03c      	beq.n	402d9a <__sflush_r+0xce>
  402d20:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402d24:	692a      	ldr	r2, [r5, #16]
  402d26:	602a      	str	r2, [r5, #0]
  402d28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402d2c:	2200      	movs	r2, #0
  402d2e:	81ab      	strh	r3, [r5, #12]
  402d30:	04db      	lsls	r3, r3, #19
  402d32:	606a      	str	r2, [r5, #4]
  402d34:	d447      	bmi.n	402dc6 <__sflush_r+0xfa>
  402d36:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402d38:	f8c8 6000 	str.w	r6, [r8]
  402d3c:	b311      	cbz	r1, 402d84 <__sflush_r+0xb8>
  402d3e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  402d42:	4299      	cmp	r1, r3
  402d44:	d002      	beq.n	402d4c <__sflush_r+0x80>
  402d46:	4640      	mov	r0, r8
  402d48:	f000 f9de 	bl	403108 <_free_r>
  402d4c:	2000      	movs	r0, #0
  402d4e:	6328      	str	r0, [r5, #48]	; 0x30
  402d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402d54:	692e      	ldr	r6, [r5, #16]
  402d56:	b1ae      	cbz	r6, 402d84 <__sflush_r+0xb8>
  402d58:	682c      	ldr	r4, [r5, #0]
  402d5a:	602e      	str	r6, [r5, #0]
  402d5c:	0791      	lsls	r1, r2, #30
  402d5e:	bf0c      	ite	eq
  402d60:	696b      	ldreq	r3, [r5, #20]
  402d62:	2300      	movne	r3, #0
  402d64:	1ba4      	subs	r4, r4, r6
  402d66:	60ab      	str	r3, [r5, #8]
  402d68:	e00a      	b.n	402d80 <__sflush_r+0xb4>
  402d6a:	4623      	mov	r3, r4
  402d6c:	4632      	mov	r2, r6
  402d6e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402d70:	69e9      	ldr	r1, [r5, #28]
  402d72:	4640      	mov	r0, r8
  402d74:	47b8      	blx	r7
  402d76:	2800      	cmp	r0, #0
  402d78:	eba4 0400 	sub.w	r4, r4, r0
  402d7c:	4406      	add	r6, r0
  402d7e:	dd04      	ble.n	402d8a <__sflush_r+0xbe>
  402d80:	2c00      	cmp	r4, #0
  402d82:	dcf2      	bgt.n	402d6a <__sflush_r+0x9e>
  402d84:	2000      	movs	r0, #0
  402d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402d8a:	89ab      	ldrh	r3, [r5, #12]
  402d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402d90:	81ab      	strh	r3, [r5, #12]
  402d92:	f04f 30ff 	mov.w	r0, #4294967295
  402d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402d9a:	f8d8 4000 	ldr.w	r4, [r8]
  402d9e:	2c1d      	cmp	r4, #29
  402da0:	d8f3      	bhi.n	402d8a <__sflush_r+0xbe>
  402da2:	4b19      	ldr	r3, [pc, #100]	; (402e08 <__sflush_r+0x13c>)
  402da4:	40e3      	lsrs	r3, r4
  402da6:	43db      	mvns	r3, r3
  402da8:	f013 0301 	ands.w	r3, r3, #1
  402dac:	d1ed      	bne.n	402d8a <__sflush_r+0xbe>
  402dae:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  402db2:	606b      	str	r3, [r5, #4]
  402db4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402db8:	6929      	ldr	r1, [r5, #16]
  402dba:	81ab      	strh	r3, [r5, #12]
  402dbc:	04da      	lsls	r2, r3, #19
  402dbe:	6029      	str	r1, [r5, #0]
  402dc0:	d5b9      	bpl.n	402d36 <__sflush_r+0x6a>
  402dc2:	2c00      	cmp	r4, #0
  402dc4:	d1b7      	bne.n	402d36 <__sflush_r+0x6a>
  402dc6:	6528      	str	r0, [r5, #80]	; 0x50
  402dc8:	e7b5      	b.n	402d36 <__sflush_r+0x6a>
  402dca:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402dcc:	2a00      	cmp	r2, #0
  402dce:	dc8c      	bgt.n	402cea <__sflush_r+0x1e>
  402dd0:	e7d8      	b.n	402d84 <__sflush_r+0xb8>
  402dd2:	2301      	movs	r3, #1
  402dd4:	69e9      	ldr	r1, [r5, #28]
  402dd6:	4640      	mov	r0, r8
  402dd8:	47a0      	blx	r4
  402dda:	1c43      	adds	r3, r0, #1
  402ddc:	4602      	mov	r2, r0
  402dde:	d002      	beq.n	402de6 <__sflush_r+0x11a>
  402de0:	89ab      	ldrh	r3, [r5, #12]
  402de2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402de4:	e78e      	b.n	402d04 <__sflush_r+0x38>
  402de6:	f8d8 3000 	ldr.w	r3, [r8]
  402dea:	2b00      	cmp	r3, #0
  402dec:	d0f8      	beq.n	402de0 <__sflush_r+0x114>
  402dee:	2b1d      	cmp	r3, #29
  402df0:	d001      	beq.n	402df6 <__sflush_r+0x12a>
  402df2:	2b16      	cmp	r3, #22
  402df4:	d102      	bne.n	402dfc <__sflush_r+0x130>
  402df6:	f8c8 6000 	str.w	r6, [r8]
  402dfa:	e7c3      	b.n	402d84 <__sflush_r+0xb8>
  402dfc:	89ab      	ldrh	r3, [r5, #12]
  402dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402e02:	81ab      	strh	r3, [r5, #12]
  402e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402e08:	20400001 	.word	0x20400001

00402e0c <_fflush_r>:
  402e0c:	b538      	push	{r3, r4, r5, lr}
  402e0e:	460d      	mov	r5, r1
  402e10:	4604      	mov	r4, r0
  402e12:	b108      	cbz	r0, 402e18 <_fflush_r+0xc>
  402e14:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402e16:	b1bb      	cbz	r3, 402e48 <_fflush_r+0x3c>
  402e18:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402e1c:	b188      	cbz	r0, 402e42 <_fflush_r+0x36>
  402e1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402e20:	07db      	lsls	r3, r3, #31
  402e22:	d401      	bmi.n	402e28 <_fflush_r+0x1c>
  402e24:	0581      	lsls	r1, r0, #22
  402e26:	d517      	bpl.n	402e58 <_fflush_r+0x4c>
  402e28:	4620      	mov	r0, r4
  402e2a:	4629      	mov	r1, r5
  402e2c:	f7ff ff4e 	bl	402ccc <__sflush_r>
  402e30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402e32:	07da      	lsls	r2, r3, #31
  402e34:	4604      	mov	r4, r0
  402e36:	d402      	bmi.n	402e3e <_fflush_r+0x32>
  402e38:	89ab      	ldrh	r3, [r5, #12]
  402e3a:	059b      	lsls	r3, r3, #22
  402e3c:	d507      	bpl.n	402e4e <_fflush_r+0x42>
  402e3e:	4620      	mov	r0, r4
  402e40:	bd38      	pop	{r3, r4, r5, pc}
  402e42:	4604      	mov	r4, r0
  402e44:	4620      	mov	r0, r4
  402e46:	bd38      	pop	{r3, r4, r5, pc}
  402e48:	f000 f838 	bl	402ebc <__sinit>
  402e4c:	e7e4      	b.n	402e18 <_fflush_r+0xc>
  402e4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402e50:	f000 fbf6 	bl	403640 <__retarget_lock_release_recursive>
  402e54:	4620      	mov	r0, r4
  402e56:	bd38      	pop	{r3, r4, r5, pc}
  402e58:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402e5a:	f000 fbef 	bl	40363c <__retarget_lock_acquire_recursive>
  402e5e:	e7e3      	b.n	402e28 <_fflush_r+0x1c>

00402e60 <_cleanup_r>:
  402e60:	4901      	ldr	r1, [pc, #4]	; (402e68 <_cleanup_r+0x8>)
  402e62:	f000 bbaf 	b.w	4035c4 <_fwalk_reent>
  402e66:	bf00      	nop
  402e68:	00404611 	.word	0x00404611

00402e6c <std.isra.0>:
  402e6c:	b510      	push	{r4, lr}
  402e6e:	2300      	movs	r3, #0
  402e70:	4604      	mov	r4, r0
  402e72:	8181      	strh	r1, [r0, #12]
  402e74:	81c2      	strh	r2, [r0, #14]
  402e76:	6003      	str	r3, [r0, #0]
  402e78:	6043      	str	r3, [r0, #4]
  402e7a:	6083      	str	r3, [r0, #8]
  402e7c:	6643      	str	r3, [r0, #100]	; 0x64
  402e7e:	6103      	str	r3, [r0, #16]
  402e80:	6143      	str	r3, [r0, #20]
  402e82:	6183      	str	r3, [r0, #24]
  402e84:	4619      	mov	r1, r3
  402e86:	2208      	movs	r2, #8
  402e88:	305c      	adds	r0, #92	; 0x5c
  402e8a:	f7fe febb 	bl	401c04 <memset>
  402e8e:	4807      	ldr	r0, [pc, #28]	; (402eac <std.isra.0+0x40>)
  402e90:	4907      	ldr	r1, [pc, #28]	; (402eb0 <std.isra.0+0x44>)
  402e92:	4a08      	ldr	r2, [pc, #32]	; (402eb4 <std.isra.0+0x48>)
  402e94:	4b08      	ldr	r3, [pc, #32]	; (402eb8 <std.isra.0+0x4c>)
  402e96:	6220      	str	r0, [r4, #32]
  402e98:	61e4      	str	r4, [r4, #28]
  402e9a:	6261      	str	r1, [r4, #36]	; 0x24
  402e9c:	62a2      	str	r2, [r4, #40]	; 0x28
  402e9e:	62e3      	str	r3, [r4, #44]	; 0x2c
  402ea0:	f104 0058 	add.w	r0, r4, #88	; 0x58
  402ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402ea8:	f000 bbc4 	b.w	403634 <__retarget_lock_init_recursive>
  402eac:	0040425d 	.word	0x0040425d
  402eb0:	00404281 	.word	0x00404281
  402eb4:	004042bd 	.word	0x004042bd
  402eb8:	004042dd 	.word	0x004042dd

00402ebc <__sinit>:
  402ebc:	b510      	push	{r4, lr}
  402ebe:	4604      	mov	r4, r0
  402ec0:	4812      	ldr	r0, [pc, #72]	; (402f0c <__sinit+0x50>)
  402ec2:	f000 fbbb 	bl	40363c <__retarget_lock_acquire_recursive>
  402ec6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402ec8:	b9d2      	cbnz	r2, 402f00 <__sinit+0x44>
  402eca:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  402ece:	4810      	ldr	r0, [pc, #64]	; (402f10 <__sinit+0x54>)
  402ed0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  402ed4:	2103      	movs	r1, #3
  402ed6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  402eda:	63e0      	str	r0, [r4, #60]	; 0x3c
  402edc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  402ee0:	6860      	ldr	r0, [r4, #4]
  402ee2:	2104      	movs	r1, #4
  402ee4:	f7ff ffc2 	bl	402e6c <std.isra.0>
  402ee8:	2201      	movs	r2, #1
  402eea:	2109      	movs	r1, #9
  402eec:	68a0      	ldr	r0, [r4, #8]
  402eee:	f7ff ffbd 	bl	402e6c <std.isra.0>
  402ef2:	2202      	movs	r2, #2
  402ef4:	2112      	movs	r1, #18
  402ef6:	68e0      	ldr	r0, [r4, #12]
  402ef8:	f7ff ffb8 	bl	402e6c <std.isra.0>
  402efc:	2301      	movs	r3, #1
  402efe:	63a3      	str	r3, [r4, #56]	; 0x38
  402f00:	4802      	ldr	r0, [pc, #8]	; (402f0c <__sinit+0x50>)
  402f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402f06:	f000 bb9b 	b.w	403640 <__retarget_lock_release_recursive>
  402f0a:	bf00      	nop
  402f0c:	204014b8 	.word	0x204014b8
  402f10:	00402e61 	.word	0x00402e61

00402f14 <__sfp_lock_acquire>:
  402f14:	4801      	ldr	r0, [pc, #4]	; (402f1c <__sfp_lock_acquire+0x8>)
  402f16:	f000 bb91 	b.w	40363c <__retarget_lock_acquire_recursive>
  402f1a:	bf00      	nop
  402f1c:	204014cc 	.word	0x204014cc

00402f20 <__sfp_lock_release>:
  402f20:	4801      	ldr	r0, [pc, #4]	; (402f28 <__sfp_lock_release+0x8>)
  402f22:	f000 bb8d 	b.w	403640 <__retarget_lock_release_recursive>
  402f26:	bf00      	nop
  402f28:	204014cc 	.word	0x204014cc

00402f2c <__libc_fini_array>:
  402f2c:	b538      	push	{r3, r4, r5, lr}
  402f2e:	4c0a      	ldr	r4, [pc, #40]	; (402f58 <__libc_fini_array+0x2c>)
  402f30:	4d0a      	ldr	r5, [pc, #40]	; (402f5c <__libc_fini_array+0x30>)
  402f32:	1b64      	subs	r4, r4, r5
  402f34:	10a4      	asrs	r4, r4, #2
  402f36:	d00a      	beq.n	402f4e <__libc_fini_array+0x22>
  402f38:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402f3c:	3b01      	subs	r3, #1
  402f3e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402f42:	3c01      	subs	r4, #1
  402f44:	f855 3904 	ldr.w	r3, [r5], #-4
  402f48:	4798      	blx	r3
  402f4a:	2c00      	cmp	r4, #0
  402f4c:	d1f9      	bne.n	402f42 <__libc_fini_array+0x16>
  402f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402f52:	f002 b8f7 	b.w	405144 <_fini>
  402f56:	bf00      	nop
  402f58:	00405154 	.word	0x00405154
  402f5c:	00405150 	.word	0x00405150

00402f60 <__fputwc>:
  402f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402f64:	b082      	sub	sp, #8
  402f66:	4680      	mov	r8, r0
  402f68:	4689      	mov	r9, r1
  402f6a:	4614      	mov	r4, r2
  402f6c:	f000 fb54 	bl	403618 <__locale_mb_cur_max>
  402f70:	2801      	cmp	r0, #1
  402f72:	d036      	beq.n	402fe2 <__fputwc+0x82>
  402f74:	464a      	mov	r2, r9
  402f76:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402f7a:	a901      	add	r1, sp, #4
  402f7c:	4640      	mov	r0, r8
  402f7e:	f001 fa85 	bl	40448c <_wcrtomb_r>
  402f82:	1c42      	adds	r2, r0, #1
  402f84:	4606      	mov	r6, r0
  402f86:	d025      	beq.n	402fd4 <__fputwc+0x74>
  402f88:	b3a8      	cbz	r0, 402ff6 <__fputwc+0x96>
  402f8a:	f89d e004 	ldrb.w	lr, [sp, #4]
  402f8e:	2500      	movs	r5, #0
  402f90:	f10d 0a04 	add.w	sl, sp, #4
  402f94:	e009      	b.n	402faa <__fputwc+0x4a>
  402f96:	6823      	ldr	r3, [r4, #0]
  402f98:	1c5a      	adds	r2, r3, #1
  402f9a:	6022      	str	r2, [r4, #0]
  402f9c:	f883 e000 	strb.w	lr, [r3]
  402fa0:	3501      	adds	r5, #1
  402fa2:	42b5      	cmp	r5, r6
  402fa4:	d227      	bcs.n	402ff6 <__fputwc+0x96>
  402fa6:	f815 e00a 	ldrb.w	lr, [r5, sl]
  402faa:	68a3      	ldr	r3, [r4, #8]
  402fac:	3b01      	subs	r3, #1
  402fae:	2b00      	cmp	r3, #0
  402fb0:	60a3      	str	r3, [r4, #8]
  402fb2:	daf0      	bge.n	402f96 <__fputwc+0x36>
  402fb4:	69a7      	ldr	r7, [r4, #24]
  402fb6:	42bb      	cmp	r3, r7
  402fb8:	4671      	mov	r1, lr
  402fba:	4622      	mov	r2, r4
  402fbc:	4640      	mov	r0, r8
  402fbe:	db02      	blt.n	402fc6 <__fputwc+0x66>
  402fc0:	f1be 0f0a 	cmp.w	lr, #10
  402fc4:	d1e7      	bne.n	402f96 <__fputwc+0x36>
  402fc6:	f001 fa09 	bl	4043dc <__swbuf_r>
  402fca:	1c43      	adds	r3, r0, #1
  402fcc:	d1e8      	bne.n	402fa0 <__fputwc+0x40>
  402fce:	b002      	add	sp, #8
  402fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402fd4:	89a3      	ldrh	r3, [r4, #12]
  402fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402fda:	81a3      	strh	r3, [r4, #12]
  402fdc:	b002      	add	sp, #8
  402fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402fe2:	f109 33ff 	add.w	r3, r9, #4294967295
  402fe6:	2bfe      	cmp	r3, #254	; 0xfe
  402fe8:	d8c4      	bhi.n	402f74 <__fputwc+0x14>
  402fea:	fa5f fe89 	uxtb.w	lr, r9
  402fee:	4606      	mov	r6, r0
  402ff0:	f88d e004 	strb.w	lr, [sp, #4]
  402ff4:	e7cb      	b.n	402f8e <__fputwc+0x2e>
  402ff6:	4648      	mov	r0, r9
  402ff8:	b002      	add	sp, #8
  402ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402ffe:	bf00      	nop

00403000 <_fputwc_r>:
  403000:	b530      	push	{r4, r5, lr}
  403002:	6e53      	ldr	r3, [r2, #100]	; 0x64
  403004:	f013 0f01 	tst.w	r3, #1
  403008:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40300c:	4614      	mov	r4, r2
  40300e:	b083      	sub	sp, #12
  403010:	4605      	mov	r5, r0
  403012:	b29a      	uxth	r2, r3
  403014:	d101      	bne.n	40301a <_fputwc_r+0x1a>
  403016:	0590      	lsls	r0, r2, #22
  403018:	d51c      	bpl.n	403054 <_fputwc_r+0x54>
  40301a:	0490      	lsls	r0, r2, #18
  40301c:	d406      	bmi.n	40302c <_fputwc_r+0x2c>
  40301e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  403020:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403024:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403028:	81a3      	strh	r3, [r4, #12]
  40302a:	6662      	str	r2, [r4, #100]	; 0x64
  40302c:	4628      	mov	r0, r5
  40302e:	4622      	mov	r2, r4
  403030:	f7ff ff96 	bl	402f60 <__fputwc>
  403034:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403036:	07da      	lsls	r2, r3, #31
  403038:	4605      	mov	r5, r0
  40303a:	d402      	bmi.n	403042 <_fputwc_r+0x42>
  40303c:	89a3      	ldrh	r3, [r4, #12]
  40303e:	059b      	lsls	r3, r3, #22
  403040:	d502      	bpl.n	403048 <_fputwc_r+0x48>
  403042:	4628      	mov	r0, r5
  403044:	b003      	add	sp, #12
  403046:	bd30      	pop	{r4, r5, pc}
  403048:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40304a:	f000 faf9 	bl	403640 <__retarget_lock_release_recursive>
  40304e:	4628      	mov	r0, r5
  403050:	b003      	add	sp, #12
  403052:	bd30      	pop	{r4, r5, pc}
  403054:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403056:	9101      	str	r1, [sp, #4]
  403058:	f000 faf0 	bl	40363c <__retarget_lock_acquire_recursive>
  40305c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403060:	9901      	ldr	r1, [sp, #4]
  403062:	b29a      	uxth	r2, r3
  403064:	e7d9      	b.n	40301a <_fputwc_r+0x1a>
  403066:	bf00      	nop

00403068 <_malloc_trim_r>:
  403068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40306a:	4f24      	ldr	r7, [pc, #144]	; (4030fc <_malloc_trim_r+0x94>)
  40306c:	460c      	mov	r4, r1
  40306e:	4606      	mov	r6, r0
  403070:	f000 fee2 	bl	403e38 <__malloc_lock>
  403074:	68bb      	ldr	r3, [r7, #8]
  403076:	685d      	ldr	r5, [r3, #4]
  403078:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40307c:	310f      	adds	r1, #15
  40307e:	f025 0503 	bic.w	r5, r5, #3
  403082:	4429      	add	r1, r5
  403084:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  403088:	f021 010f 	bic.w	r1, r1, #15
  40308c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  403090:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  403094:	db07      	blt.n	4030a6 <_malloc_trim_r+0x3e>
  403096:	2100      	movs	r1, #0
  403098:	4630      	mov	r0, r6
  40309a:	f001 f87f 	bl	40419c <_sbrk_r>
  40309e:	68bb      	ldr	r3, [r7, #8]
  4030a0:	442b      	add	r3, r5
  4030a2:	4298      	cmp	r0, r3
  4030a4:	d004      	beq.n	4030b0 <_malloc_trim_r+0x48>
  4030a6:	4630      	mov	r0, r6
  4030a8:	f000 fecc 	bl	403e44 <__malloc_unlock>
  4030ac:	2000      	movs	r0, #0
  4030ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4030b0:	4261      	negs	r1, r4
  4030b2:	4630      	mov	r0, r6
  4030b4:	f001 f872 	bl	40419c <_sbrk_r>
  4030b8:	3001      	adds	r0, #1
  4030ba:	d00d      	beq.n	4030d8 <_malloc_trim_r+0x70>
  4030bc:	4b10      	ldr	r3, [pc, #64]	; (403100 <_malloc_trim_r+0x98>)
  4030be:	68ba      	ldr	r2, [r7, #8]
  4030c0:	6819      	ldr	r1, [r3, #0]
  4030c2:	1b2d      	subs	r5, r5, r4
  4030c4:	f045 0501 	orr.w	r5, r5, #1
  4030c8:	4630      	mov	r0, r6
  4030ca:	1b09      	subs	r1, r1, r4
  4030cc:	6055      	str	r5, [r2, #4]
  4030ce:	6019      	str	r1, [r3, #0]
  4030d0:	f000 feb8 	bl	403e44 <__malloc_unlock>
  4030d4:	2001      	movs	r0, #1
  4030d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4030d8:	2100      	movs	r1, #0
  4030da:	4630      	mov	r0, r6
  4030dc:	f001 f85e 	bl	40419c <_sbrk_r>
  4030e0:	68ba      	ldr	r2, [r7, #8]
  4030e2:	1a83      	subs	r3, r0, r2
  4030e4:	2b0f      	cmp	r3, #15
  4030e6:	ddde      	ble.n	4030a6 <_malloc_trim_r+0x3e>
  4030e8:	4c06      	ldr	r4, [pc, #24]	; (403104 <_malloc_trim_r+0x9c>)
  4030ea:	4905      	ldr	r1, [pc, #20]	; (403100 <_malloc_trim_r+0x98>)
  4030ec:	6824      	ldr	r4, [r4, #0]
  4030ee:	f043 0301 	orr.w	r3, r3, #1
  4030f2:	1b00      	subs	r0, r0, r4
  4030f4:	6053      	str	r3, [r2, #4]
  4030f6:	6008      	str	r0, [r1, #0]
  4030f8:	e7d5      	b.n	4030a6 <_malloc_trim_r+0x3e>
  4030fa:	bf00      	nop
  4030fc:	204005b0 	.word	0x204005b0
  403100:	2040146c 	.word	0x2040146c
  403104:	204009b8 	.word	0x204009b8

00403108 <_free_r>:
  403108:	2900      	cmp	r1, #0
  40310a:	d044      	beq.n	403196 <_free_r+0x8e>
  40310c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403110:	460d      	mov	r5, r1
  403112:	4680      	mov	r8, r0
  403114:	f000 fe90 	bl	403e38 <__malloc_lock>
  403118:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40311c:	4969      	ldr	r1, [pc, #420]	; (4032c4 <_free_r+0x1bc>)
  40311e:	f027 0301 	bic.w	r3, r7, #1
  403122:	f1a5 0408 	sub.w	r4, r5, #8
  403126:	18e2      	adds	r2, r4, r3
  403128:	688e      	ldr	r6, [r1, #8]
  40312a:	6850      	ldr	r0, [r2, #4]
  40312c:	42b2      	cmp	r2, r6
  40312e:	f020 0003 	bic.w	r0, r0, #3
  403132:	d05e      	beq.n	4031f2 <_free_r+0xea>
  403134:	07fe      	lsls	r6, r7, #31
  403136:	6050      	str	r0, [r2, #4]
  403138:	d40b      	bmi.n	403152 <_free_r+0x4a>
  40313a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40313e:	1be4      	subs	r4, r4, r7
  403140:	f101 0e08 	add.w	lr, r1, #8
  403144:	68a5      	ldr	r5, [r4, #8]
  403146:	4575      	cmp	r5, lr
  403148:	443b      	add	r3, r7
  40314a:	d06d      	beq.n	403228 <_free_r+0x120>
  40314c:	68e7      	ldr	r7, [r4, #12]
  40314e:	60ef      	str	r7, [r5, #12]
  403150:	60bd      	str	r5, [r7, #8]
  403152:	1815      	adds	r5, r2, r0
  403154:	686d      	ldr	r5, [r5, #4]
  403156:	07ed      	lsls	r5, r5, #31
  403158:	d53e      	bpl.n	4031d8 <_free_r+0xd0>
  40315a:	f043 0201 	orr.w	r2, r3, #1
  40315e:	6062      	str	r2, [r4, #4]
  403160:	50e3      	str	r3, [r4, r3]
  403162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403166:	d217      	bcs.n	403198 <_free_r+0x90>
  403168:	08db      	lsrs	r3, r3, #3
  40316a:	1c58      	adds	r0, r3, #1
  40316c:	109a      	asrs	r2, r3, #2
  40316e:	684d      	ldr	r5, [r1, #4]
  403170:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  403174:	60a7      	str	r7, [r4, #8]
  403176:	2301      	movs	r3, #1
  403178:	4093      	lsls	r3, r2
  40317a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40317e:	432b      	orrs	r3, r5
  403180:	3a08      	subs	r2, #8
  403182:	60e2      	str	r2, [r4, #12]
  403184:	604b      	str	r3, [r1, #4]
  403186:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40318a:	60fc      	str	r4, [r7, #12]
  40318c:	4640      	mov	r0, r8
  40318e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403192:	f000 be57 	b.w	403e44 <__malloc_unlock>
  403196:	4770      	bx	lr
  403198:	0a5a      	lsrs	r2, r3, #9
  40319a:	2a04      	cmp	r2, #4
  40319c:	d852      	bhi.n	403244 <_free_r+0x13c>
  40319e:	099a      	lsrs	r2, r3, #6
  4031a0:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4031a4:	00ff      	lsls	r7, r7, #3
  4031a6:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4031aa:	19c8      	adds	r0, r1, r7
  4031ac:	59ca      	ldr	r2, [r1, r7]
  4031ae:	3808      	subs	r0, #8
  4031b0:	4290      	cmp	r0, r2
  4031b2:	d04f      	beq.n	403254 <_free_r+0x14c>
  4031b4:	6851      	ldr	r1, [r2, #4]
  4031b6:	f021 0103 	bic.w	r1, r1, #3
  4031ba:	428b      	cmp	r3, r1
  4031bc:	d232      	bcs.n	403224 <_free_r+0x11c>
  4031be:	6892      	ldr	r2, [r2, #8]
  4031c0:	4290      	cmp	r0, r2
  4031c2:	d1f7      	bne.n	4031b4 <_free_r+0xac>
  4031c4:	68c3      	ldr	r3, [r0, #12]
  4031c6:	60a0      	str	r0, [r4, #8]
  4031c8:	60e3      	str	r3, [r4, #12]
  4031ca:	609c      	str	r4, [r3, #8]
  4031cc:	60c4      	str	r4, [r0, #12]
  4031ce:	4640      	mov	r0, r8
  4031d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4031d4:	f000 be36 	b.w	403e44 <__malloc_unlock>
  4031d8:	6895      	ldr	r5, [r2, #8]
  4031da:	4f3b      	ldr	r7, [pc, #236]	; (4032c8 <_free_r+0x1c0>)
  4031dc:	42bd      	cmp	r5, r7
  4031de:	4403      	add	r3, r0
  4031e0:	d040      	beq.n	403264 <_free_r+0x15c>
  4031e2:	68d0      	ldr	r0, [r2, #12]
  4031e4:	60e8      	str	r0, [r5, #12]
  4031e6:	f043 0201 	orr.w	r2, r3, #1
  4031ea:	6085      	str	r5, [r0, #8]
  4031ec:	6062      	str	r2, [r4, #4]
  4031ee:	50e3      	str	r3, [r4, r3]
  4031f0:	e7b7      	b.n	403162 <_free_r+0x5a>
  4031f2:	07ff      	lsls	r7, r7, #31
  4031f4:	4403      	add	r3, r0
  4031f6:	d407      	bmi.n	403208 <_free_r+0x100>
  4031f8:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4031fc:	1aa4      	subs	r4, r4, r2
  4031fe:	4413      	add	r3, r2
  403200:	68a0      	ldr	r0, [r4, #8]
  403202:	68e2      	ldr	r2, [r4, #12]
  403204:	60c2      	str	r2, [r0, #12]
  403206:	6090      	str	r0, [r2, #8]
  403208:	4a30      	ldr	r2, [pc, #192]	; (4032cc <_free_r+0x1c4>)
  40320a:	6812      	ldr	r2, [r2, #0]
  40320c:	f043 0001 	orr.w	r0, r3, #1
  403210:	4293      	cmp	r3, r2
  403212:	6060      	str	r0, [r4, #4]
  403214:	608c      	str	r4, [r1, #8]
  403216:	d3b9      	bcc.n	40318c <_free_r+0x84>
  403218:	4b2d      	ldr	r3, [pc, #180]	; (4032d0 <_free_r+0x1c8>)
  40321a:	4640      	mov	r0, r8
  40321c:	6819      	ldr	r1, [r3, #0]
  40321e:	f7ff ff23 	bl	403068 <_malloc_trim_r>
  403222:	e7b3      	b.n	40318c <_free_r+0x84>
  403224:	4610      	mov	r0, r2
  403226:	e7cd      	b.n	4031c4 <_free_r+0xbc>
  403228:	1811      	adds	r1, r2, r0
  40322a:	6849      	ldr	r1, [r1, #4]
  40322c:	07c9      	lsls	r1, r1, #31
  40322e:	d444      	bmi.n	4032ba <_free_r+0x1b2>
  403230:	6891      	ldr	r1, [r2, #8]
  403232:	68d2      	ldr	r2, [r2, #12]
  403234:	60ca      	str	r2, [r1, #12]
  403236:	4403      	add	r3, r0
  403238:	f043 0001 	orr.w	r0, r3, #1
  40323c:	6091      	str	r1, [r2, #8]
  40323e:	6060      	str	r0, [r4, #4]
  403240:	50e3      	str	r3, [r4, r3]
  403242:	e7a3      	b.n	40318c <_free_r+0x84>
  403244:	2a14      	cmp	r2, #20
  403246:	d816      	bhi.n	403276 <_free_r+0x16e>
  403248:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40324c:	00ff      	lsls	r7, r7, #3
  40324e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  403252:	e7aa      	b.n	4031aa <_free_r+0xa2>
  403254:	10aa      	asrs	r2, r5, #2
  403256:	2301      	movs	r3, #1
  403258:	684d      	ldr	r5, [r1, #4]
  40325a:	4093      	lsls	r3, r2
  40325c:	432b      	orrs	r3, r5
  40325e:	604b      	str	r3, [r1, #4]
  403260:	4603      	mov	r3, r0
  403262:	e7b0      	b.n	4031c6 <_free_r+0xbe>
  403264:	f043 0201 	orr.w	r2, r3, #1
  403268:	614c      	str	r4, [r1, #20]
  40326a:	610c      	str	r4, [r1, #16]
  40326c:	60e5      	str	r5, [r4, #12]
  40326e:	60a5      	str	r5, [r4, #8]
  403270:	6062      	str	r2, [r4, #4]
  403272:	50e3      	str	r3, [r4, r3]
  403274:	e78a      	b.n	40318c <_free_r+0x84>
  403276:	2a54      	cmp	r2, #84	; 0x54
  403278:	d806      	bhi.n	403288 <_free_r+0x180>
  40327a:	0b1a      	lsrs	r2, r3, #12
  40327c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  403280:	00ff      	lsls	r7, r7, #3
  403282:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  403286:	e790      	b.n	4031aa <_free_r+0xa2>
  403288:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40328c:	d806      	bhi.n	40329c <_free_r+0x194>
  40328e:	0bda      	lsrs	r2, r3, #15
  403290:	f102 0778 	add.w	r7, r2, #120	; 0x78
  403294:	00ff      	lsls	r7, r7, #3
  403296:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40329a:	e786      	b.n	4031aa <_free_r+0xa2>
  40329c:	f240 5054 	movw	r0, #1364	; 0x554
  4032a0:	4282      	cmp	r2, r0
  4032a2:	d806      	bhi.n	4032b2 <_free_r+0x1aa>
  4032a4:	0c9a      	lsrs	r2, r3, #18
  4032a6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4032aa:	00ff      	lsls	r7, r7, #3
  4032ac:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4032b0:	e77b      	b.n	4031aa <_free_r+0xa2>
  4032b2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4032b6:	257e      	movs	r5, #126	; 0x7e
  4032b8:	e777      	b.n	4031aa <_free_r+0xa2>
  4032ba:	f043 0101 	orr.w	r1, r3, #1
  4032be:	6061      	str	r1, [r4, #4]
  4032c0:	6013      	str	r3, [r2, #0]
  4032c2:	e763      	b.n	40318c <_free_r+0x84>
  4032c4:	204005b0 	.word	0x204005b0
  4032c8:	204005b8 	.word	0x204005b8
  4032cc:	204009bc 	.word	0x204009bc
  4032d0:	2040149c 	.word	0x2040149c

004032d4 <__sfvwrite_r>:
  4032d4:	6893      	ldr	r3, [r2, #8]
  4032d6:	2b00      	cmp	r3, #0
  4032d8:	d073      	beq.n	4033c2 <__sfvwrite_r+0xee>
  4032da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4032de:	898b      	ldrh	r3, [r1, #12]
  4032e0:	b083      	sub	sp, #12
  4032e2:	460c      	mov	r4, r1
  4032e4:	0719      	lsls	r1, r3, #28
  4032e6:	9000      	str	r0, [sp, #0]
  4032e8:	4616      	mov	r6, r2
  4032ea:	d526      	bpl.n	40333a <__sfvwrite_r+0x66>
  4032ec:	6922      	ldr	r2, [r4, #16]
  4032ee:	b322      	cbz	r2, 40333a <__sfvwrite_r+0x66>
  4032f0:	f013 0002 	ands.w	r0, r3, #2
  4032f4:	6835      	ldr	r5, [r6, #0]
  4032f6:	d02c      	beq.n	403352 <__sfvwrite_r+0x7e>
  4032f8:	f04f 0900 	mov.w	r9, #0
  4032fc:	4fb0      	ldr	r7, [pc, #704]	; (4035c0 <__sfvwrite_r+0x2ec>)
  4032fe:	46c8      	mov	r8, r9
  403300:	46b2      	mov	sl, r6
  403302:	45b8      	cmp	r8, r7
  403304:	4643      	mov	r3, r8
  403306:	464a      	mov	r2, r9
  403308:	bf28      	it	cs
  40330a:	463b      	movcs	r3, r7
  40330c:	9800      	ldr	r0, [sp, #0]
  40330e:	f1b8 0f00 	cmp.w	r8, #0
  403312:	d050      	beq.n	4033b6 <__sfvwrite_r+0xe2>
  403314:	69e1      	ldr	r1, [r4, #28]
  403316:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403318:	47b0      	blx	r6
  40331a:	2800      	cmp	r0, #0
  40331c:	dd58      	ble.n	4033d0 <__sfvwrite_r+0xfc>
  40331e:	f8da 3008 	ldr.w	r3, [sl, #8]
  403322:	1a1b      	subs	r3, r3, r0
  403324:	4481      	add	r9, r0
  403326:	eba8 0800 	sub.w	r8, r8, r0
  40332a:	f8ca 3008 	str.w	r3, [sl, #8]
  40332e:	2b00      	cmp	r3, #0
  403330:	d1e7      	bne.n	403302 <__sfvwrite_r+0x2e>
  403332:	2000      	movs	r0, #0
  403334:	b003      	add	sp, #12
  403336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40333a:	4621      	mov	r1, r4
  40333c:	9800      	ldr	r0, [sp, #0]
  40333e:	f7ff fc49 	bl	402bd4 <__swsetup_r>
  403342:	2800      	cmp	r0, #0
  403344:	f040 8133 	bne.w	4035ae <__sfvwrite_r+0x2da>
  403348:	89a3      	ldrh	r3, [r4, #12]
  40334a:	6835      	ldr	r5, [r6, #0]
  40334c:	f013 0002 	ands.w	r0, r3, #2
  403350:	d1d2      	bne.n	4032f8 <__sfvwrite_r+0x24>
  403352:	f013 0901 	ands.w	r9, r3, #1
  403356:	d145      	bne.n	4033e4 <__sfvwrite_r+0x110>
  403358:	464f      	mov	r7, r9
  40335a:	9601      	str	r6, [sp, #4]
  40335c:	b337      	cbz	r7, 4033ac <__sfvwrite_r+0xd8>
  40335e:	059a      	lsls	r2, r3, #22
  403360:	f8d4 8008 	ldr.w	r8, [r4, #8]
  403364:	f140 8083 	bpl.w	40346e <__sfvwrite_r+0x19a>
  403368:	4547      	cmp	r7, r8
  40336a:	46c3      	mov	fp, r8
  40336c:	f0c0 80ab 	bcc.w	4034c6 <__sfvwrite_r+0x1f2>
  403370:	f413 6f90 	tst.w	r3, #1152	; 0x480
  403374:	f040 80ac 	bne.w	4034d0 <__sfvwrite_r+0x1fc>
  403378:	6820      	ldr	r0, [r4, #0]
  40337a:	46ba      	mov	sl, r7
  40337c:	465a      	mov	r2, fp
  40337e:	4649      	mov	r1, r9
  403380:	f000 fcf6 	bl	403d70 <memmove>
  403384:	68a2      	ldr	r2, [r4, #8]
  403386:	6823      	ldr	r3, [r4, #0]
  403388:	eba2 0208 	sub.w	r2, r2, r8
  40338c:	445b      	add	r3, fp
  40338e:	60a2      	str	r2, [r4, #8]
  403390:	6023      	str	r3, [r4, #0]
  403392:	9a01      	ldr	r2, [sp, #4]
  403394:	6893      	ldr	r3, [r2, #8]
  403396:	eba3 030a 	sub.w	r3, r3, sl
  40339a:	44d1      	add	r9, sl
  40339c:	eba7 070a 	sub.w	r7, r7, sl
  4033a0:	6093      	str	r3, [r2, #8]
  4033a2:	2b00      	cmp	r3, #0
  4033a4:	d0c5      	beq.n	403332 <__sfvwrite_r+0x5e>
  4033a6:	89a3      	ldrh	r3, [r4, #12]
  4033a8:	2f00      	cmp	r7, #0
  4033aa:	d1d8      	bne.n	40335e <__sfvwrite_r+0x8a>
  4033ac:	f8d5 9000 	ldr.w	r9, [r5]
  4033b0:	686f      	ldr	r7, [r5, #4]
  4033b2:	3508      	adds	r5, #8
  4033b4:	e7d2      	b.n	40335c <__sfvwrite_r+0x88>
  4033b6:	f8d5 9000 	ldr.w	r9, [r5]
  4033ba:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4033be:	3508      	adds	r5, #8
  4033c0:	e79f      	b.n	403302 <__sfvwrite_r+0x2e>
  4033c2:	2000      	movs	r0, #0
  4033c4:	4770      	bx	lr
  4033c6:	4621      	mov	r1, r4
  4033c8:	9800      	ldr	r0, [sp, #0]
  4033ca:	f7ff fd1f 	bl	402e0c <_fflush_r>
  4033ce:	b370      	cbz	r0, 40342e <__sfvwrite_r+0x15a>
  4033d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4033d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4033d8:	f04f 30ff 	mov.w	r0, #4294967295
  4033dc:	81a3      	strh	r3, [r4, #12]
  4033de:	b003      	add	sp, #12
  4033e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033e4:	4681      	mov	r9, r0
  4033e6:	4633      	mov	r3, r6
  4033e8:	464e      	mov	r6, r9
  4033ea:	46a8      	mov	r8, r5
  4033ec:	469a      	mov	sl, r3
  4033ee:	464d      	mov	r5, r9
  4033f0:	b34e      	cbz	r6, 403446 <__sfvwrite_r+0x172>
  4033f2:	b380      	cbz	r0, 403456 <__sfvwrite_r+0x182>
  4033f4:	6820      	ldr	r0, [r4, #0]
  4033f6:	6923      	ldr	r3, [r4, #16]
  4033f8:	6962      	ldr	r2, [r4, #20]
  4033fa:	45b1      	cmp	r9, r6
  4033fc:	46cb      	mov	fp, r9
  4033fe:	bf28      	it	cs
  403400:	46b3      	movcs	fp, r6
  403402:	4298      	cmp	r0, r3
  403404:	465f      	mov	r7, fp
  403406:	d904      	bls.n	403412 <__sfvwrite_r+0x13e>
  403408:	68a3      	ldr	r3, [r4, #8]
  40340a:	4413      	add	r3, r2
  40340c:	459b      	cmp	fp, r3
  40340e:	f300 80a6 	bgt.w	40355e <__sfvwrite_r+0x28a>
  403412:	4593      	cmp	fp, r2
  403414:	db4b      	blt.n	4034ae <__sfvwrite_r+0x1da>
  403416:	4613      	mov	r3, r2
  403418:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40341a:	69e1      	ldr	r1, [r4, #28]
  40341c:	9800      	ldr	r0, [sp, #0]
  40341e:	462a      	mov	r2, r5
  403420:	47b8      	blx	r7
  403422:	1e07      	subs	r7, r0, #0
  403424:	ddd4      	ble.n	4033d0 <__sfvwrite_r+0xfc>
  403426:	ebb9 0907 	subs.w	r9, r9, r7
  40342a:	d0cc      	beq.n	4033c6 <__sfvwrite_r+0xf2>
  40342c:	2001      	movs	r0, #1
  40342e:	f8da 3008 	ldr.w	r3, [sl, #8]
  403432:	1bdb      	subs	r3, r3, r7
  403434:	443d      	add	r5, r7
  403436:	1bf6      	subs	r6, r6, r7
  403438:	f8ca 3008 	str.w	r3, [sl, #8]
  40343c:	2b00      	cmp	r3, #0
  40343e:	f43f af78 	beq.w	403332 <__sfvwrite_r+0x5e>
  403442:	2e00      	cmp	r6, #0
  403444:	d1d5      	bne.n	4033f2 <__sfvwrite_r+0x11e>
  403446:	f108 0308 	add.w	r3, r8, #8
  40344a:	e913 0060 	ldmdb	r3, {r5, r6}
  40344e:	4698      	mov	r8, r3
  403450:	3308      	adds	r3, #8
  403452:	2e00      	cmp	r6, #0
  403454:	d0f9      	beq.n	40344a <__sfvwrite_r+0x176>
  403456:	4632      	mov	r2, r6
  403458:	210a      	movs	r1, #10
  40345a:	4628      	mov	r0, r5
  40345c:	f000 fc38 	bl	403cd0 <memchr>
  403460:	2800      	cmp	r0, #0
  403462:	f000 80a1 	beq.w	4035a8 <__sfvwrite_r+0x2d4>
  403466:	3001      	adds	r0, #1
  403468:	eba0 0905 	sub.w	r9, r0, r5
  40346c:	e7c2      	b.n	4033f4 <__sfvwrite_r+0x120>
  40346e:	6820      	ldr	r0, [r4, #0]
  403470:	6923      	ldr	r3, [r4, #16]
  403472:	4298      	cmp	r0, r3
  403474:	d802      	bhi.n	40347c <__sfvwrite_r+0x1a8>
  403476:	6963      	ldr	r3, [r4, #20]
  403478:	429f      	cmp	r7, r3
  40347a:	d25d      	bcs.n	403538 <__sfvwrite_r+0x264>
  40347c:	45b8      	cmp	r8, r7
  40347e:	bf28      	it	cs
  403480:	46b8      	movcs	r8, r7
  403482:	4642      	mov	r2, r8
  403484:	4649      	mov	r1, r9
  403486:	f000 fc73 	bl	403d70 <memmove>
  40348a:	68a3      	ldr	r3, [r4, #8]
  40348c:	6822      	ldr	r2, [r4, #0]
  40348e:	eba3 0308 	sub.w	r3, r3, r8
  403492:	4442      	add	r2, r8
  403494:	60a3      	str	r3, [r4, #8]
  403496:	6022      	str	r2, [r4, #0]
  403498:	b10b      	cbz	r3, 40349e <__sfvwrite_r+0x1ca>
  40349a:	46c2      	mov	sl, r8
  40349c:	e779      	b.n	403392 <__sfvwrite_r+0xbe>
  40349e:	4621      	mov	r1, r4
  4034a0:	9800      	ldr	r0, [sp, #0]
  4034a2:	f7ff fcb3 	bl	402e0c <_fflush_r>
  4034a6:	2800      	cmp	r0, #0
  4034a8:	d192      	bne.n	4033d0 <__sfvwrite_r+0xfc>
  4034aa:	46c2      	mov	sl, r8
  4034ac:	e771      	b.n	403392 <__sfvwrite_r+0xbe>
  4034ae:	465a      	mov	r2, fp
  4034b0:	4629      	mov	r1, r5
  4034b2:	f000 fc5d 	bl	403d70 <memmove>
  4034b6:	68a2      	ldr	r2, [r4, #8]
  4034b8:	6823      	ldr	r3, [r4, #0]
  4034ba:	eba2 020b 	sub.w	r2, r2, fp
  4034be:	445b      	add	r3, fp
  4034c0:	60a2      	str	r2, [r4, #8]
  4034c2:	6023      	str	r3, [r4, #0]
  4034c4:	e7af      	b.n	403426 <__sfvwrite_r+0x152>
  4034c6:	6820      	ldr	r0, [r4, #0]
  4034c8:	46b8      	mov	r8, r7
  4034ca:	46ba      	mov	sl, r7
  4034cc:	46bb      	mov	fp, r7
  4034ce:	e755      	b.n	40337c <__sfvwrite_r+0xa8>
  4034d0:	6962      	ldr	r2, [r4, #20]
  4034d2:	6820      	ldr	r0, [r4, #0]
  4034d4:	6921      	ldr	r1, [r4, #16]
  4034d6:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4034da:	eba0 0a01 	sub.w	sl, r0, r1
  4034de:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4034e2:	f10a 0001 	add.w	r0, sl, #1
  4034e6:	ea4f 0868 	mov.w	r8, r8, asr #1
  4034ea:	4438      	add	r0, r7
  4034ec:	4540      	cmp	r0, r8
  4034ee:	4642      	mov	r2, r8
  4034f0:	bf84      	itt	hi
  4034f2:	4680      	movhi	r8, r0
  4034f4:	4642      	movhi	r2, r8
  4034f6:	055b      	lsls	r3, r3, #21
  4034f8:	d544      	bpl.n	403584 <__sfvwrite_r+0x2b0>
  4034fa:	4611      	mov	r1, r2
  4034fc:	9800      	ldr	r0, [sp, #0]
  4034fe:	f000 f921 	bl	403744 <_malloc_r>
  403502:	4683      	mov	fp, r0
  403504:	2800      	cmp	r0, #0
  403506:	d055      	beq.n	4035b4 <__sfvwrite_r+0x2e0>
  403508:	4652      	mov	r2, sl
  40350a:	6921      	ldr	r1, [r4, #16]
  40350c:	f7fe fae0 	bl	401ad0 <memcpy>
  403510:	89a3      	ldrh	r3, [r4, #12]
  403512:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  403516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40351a:	81a3      	strh	r3, [r4, #12]
  40351c:	eb0b 000a 	add.w	r0, fp, sl
  403520:	eba8 030a 	sub.w	r3, r8, sl
  403524:	f8c4 b010 	str.w	fp, [r4, #16]
  403528:	f8c4 8014 	str.w	r8, [r4, #20]
  40352c:	6020      	str	r0, [r4, #0]
  40352e:	60a3      	str	r3, [r4, #8]
  403530:	46b8      	mov	r8, r7
  403532:	46ba      	mov	sl, r7
  403534:	46bb      	mov	fp, r7
  403536:	e721      	b.n	40337c <__sfvwrite_r+0xa8>
  403538:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40353c:	42b9      	cmp	r1, r7
  40353e:	bf28      	it	cs
  403540:	4639      	movcs	r1, r7
  403542:	464a      	mov	r2, r9
  403544:	fb91 f1f3 	sdiv	r1, r1, r3
  403548:	9800      	ldr	r0, [sp, #0]
  40354a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40354c:	fb03 f301 	mul.w	r3, r3, r1
  403550:	69e1      	ldr	r1, [r4, #28]
  403552:	47b0      	blx	r6
  403554:	f1b0 0a00 	subs.w	sl, r0, #0
  403558:	f73f af1b 	bgt.w	403392 <__sfvwrite_r+0xbe>
  40355c:	e738      	b.n	4033d0 <__sfvwrite_r+0xfc>
  40355e:	461a      	mov	r2, r3
  403560:	4629      	mov	r1, r5
  403562:	9301      	str	r3, [sp, #4]
  403564:	f000 fc04 	bl	403d70 <memmove>
  403568:	6822      	ldr	r2, [r4, #0]
  40356a:	9b01      	ldr	r3, [sp, #4]
  40356c:	9800      	ldr	r0, [sp, #0]
  40356e:	441a      	add	r2, r3
  403570:	6022      	str	r2, [r4, #0]
  403572:	4621      	mov	r1, r4
  403574:	f7ff fc4a 	bl	402e0c <_fflush_r>
  403578:	9b01      	ldr	r3, [sp, #4]
  40357a:	2800      	cmp	r0, #0
  40357c:	f47f af28 	bne.w	4033d0 <__sfvwrite_r+0xfc>
  403580:	461f      	mov	r7, r3
  403582:	e750      	b.n	403426 <__sfvwrite_r+0x152>
  403584:	9800      	ldr	r0, [sp, #0]
  403586:	f000 fc63 	bl	403e50 <_realloc_r>
  40358a:	4683      	mov	fp, r0
  40358c:	2800      	cmp	r0, #0
  40358e:	d1c5      	bne.n	40351c <__sfvwrite_r+0x248>
  403590:	9d00      	ldr	r5, [sp, #0]
  403592:	6921      	ldr	r1, [r4, #16]
  403594:	4628      	mov	r0, r5
  403596:	f7ff fdb7 	bl	403108 <_free_r>
  40359a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40359e:	220c      	movs	r2, #12
  4035a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4035a4:	602a      	str	r2, [r5, #0]
  4035a6:	e715      	b.n	4033d4 <__sfvwrite_r+0x100>
  4035a8:	f106 0901 	add.w	r9, r6, #1
  4035ac:	e722      	b.n	4033f4 <__sfvwrite_r+0x120>
  4035ae:	f04f 30ff 	mov.w	r0, #4294967295
  4035b2:	e6bf      	b.n	403334 <__sfvwrite_r+0x60>
  4035b4:	9a00      	ldr	r2, [sp, #0]
  4035b6:	230c      	movs	r3, #12
  4035b8:	6013      	str	r3, [r2, #0]
  4035ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4035be:	e709      	b.n	4033d4 <__sfvwrite_r+0x100>
  4035c0:	7ffffc00 	.word	0x7ffffc00

004035c4 <_fwalk_reent>:
  4035c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4035c8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4035cc:	d01f      	beq.n	40360e <_fwalk_reent+0x4a>
  4035ce:	4688      	mov	r8, r1
  4035d0:	4606      	mov	r6, r0
  4035d2:	f04f 0900 	mov.w	r9, #0
  4035d6:	687d      	ldr	r5, [r7, #4]
  4035d8:	68bc      	ldr	r4, [r7, #8]
  4035da:	3d01      	subs	r5, #1
  4035dc:	d411      	bmi.n	403602 <_fwalk_reent+0x3e>
  4035de:	89a3      	ldrh	r3, [r4, #12]
  4035e0:	2b01      	cmp	r3, #1
  4035e2:	f105 35ff 	add.w	r5, r5, #4294967295
  4035e6:	d908      	bls.n	4035fa <_fwalk_reent+0x36>
  4035e8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4035ec:	3301      	adds	r3, #1
  4035ee:	4621      	mov	r1, r4
  4035f0:	4630      	mov	r0, r6
  4035f2:	d002      	beq.n	4035fa <_fwalk_reent+0x36>
  4035f4:	47c0      	blx	r8
  4035f6:	ea49 0900 	orr.w	r9, r9, r0
  4035fa:	1c6b      	adds	r3, r5, #1
  4035fc:	f104 0468 	add.w	r4, r4, #104	; 0x68
  403600:	d1ed      	bne.n	4035de <_fwalk_reent+0x1a>
  403602:	683f      	ldr	r7, [r7, #0]
  403604:	2f00      	cmp	r7, #0
  403606:	d1e6      	bne.n	4035d6 <_fwalk_reent+0x12>
  403608:	4648      	mov	r0, r9
  40360a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40360e:	46b9      	mov	r9, r7
  403610:	4648      	mov	r0, r9
  403612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403616:	bf00      	nop

00403618 <__locale_mb_cur_max>:
  403618:	4b04      	ldr	r3, [pc, #16]	; (40362c <__locale_mb_cur_max+0x14>)
  40361a:	4a05      	ldr	r2, [pc, #20]	; (403630 <__locale_mb_cur_max+0x18>)
  40361c:	681b      	ldr	r3, [r3, #0]
  40361e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  403620:	2b00      	cmp	r3, #0
  403622:	bf08      	it	eq
  403624:	4613      	moveq	r3, r2
  403626:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40362a:	4770      	bx	lr
  40362c:	20400014 	.word	0x20400014
  403630:	20400444 	.word	0x20400444

00403634 <__retarget_lock_init_recursive>:
  403634:	4770      	bx	lr
  403636:	bf00      	nop

00403638 <__retarget_lock_close_recursive>:
  403638:	4770      	bx	lr
  40363a:	bf00      	nop

0040363c <__retarget_lock_acquire_recursive>:
  40363c:	4770      	bx	lr
  40363e:	bf00      	nop

00403640 <__retarget_lock_release_recursive>:
  403640:	4770      	bx	lr
  403642:	bf00      	nop

00403644 <__swhatbuf_r>:
  403644:	b570      	push	{r4, r5, r6, lr}
  403646:	460c      	mov	r4, r1
  403648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40364c:	2900      	cmp	r1, #0
  40364e:	b090      	sub	sp, #64	; 0x40
  403650:	4615      	mov	r5, r2
  403652:	461e      	mov	r6, r3
  403654:	db14      	blt.n	403680 <__swhatbuf_r+0x3c>
  403656:	aa01      	add	r2, sp, #4
  403658:	f001 f83c 	bl	4046d4 <_fstat_r>
  40365c:	2800      	cmp	r0, #0
  40365e:	db0f      	blt.n	403680 <__swhatbuf_r+0x3c>
  403660:	9a02      	ldr	r2, [sp, #8]
  403662:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403666:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40366a:	fab2 f282 	clz	r2, r2
  40366e:	0952      	lsrs	r2, r2, #5
  403670:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403674:	f44f 6000 	mov.w	r0, #2048	; 0x800
  403678:	6032      	str	r2, [r6, #0]
  40367a:	602b      	str	r3, [r5, #0]
  40367c:	b010      	add	sp, #64	; 0x40
  40367e:	bd70      	pop	{r4, r5, r6, pc}
  403680:	89a2      	ldrh	r2, [r4, #12]
  403682:	2300      	movs	r3, #0
  403684:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  403688:	6033      	str	r3, [r6, #0]
  40368a:	d004      	beq.n	403696 <__swhatbuf_r+0x52>
  40368c:	2240      	movs	r2, #64	; 0x40
  40368e:	4618      	mov	r0, r3
  403690:	602a      	str	r2, [r5, #0]
  403692:	b010      	add	sp, #64	; 0x40
  403694:	bd70      	pop	{r4, r5, r6, pc}
  403696:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40369a:	602b      	str	r3, [r5, #0]
  40369c:	b010      	add	sp, #64	; 0x40
  40369e:	bd70      	pop	{r4, r5, r6, pc}

004036a0 <__smakebuf_r>:
  4036a0:	898a      	ldrh	r2, [r1, #12]
  4036a2:	0792      	lsls	r2, r2, #30
  4036a4:	460b      	mov	r3, r1
  4036a6:	d506      	bpl.n	4036b6 <__smakebuf_r+0x16>
  4036a8:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4036ac:	2101      	movs	r1, #1
  4036ae:	601a      	str	r2, [r3, #0]
  4036b0:	611a      	str	r2, [r3, #16]
  4036b2:	6159      	str	r1, [r3, #20]
  4036b4:	4770      	bx	lr
  4036b6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4036b8:	b083      	sub	sp, #12
  4036ba:	ab01      	add	r3, sp, #4
  4036bc:	466a      	mov	r2, sp
  4036be:	460c      	mov	r4, r1
  4036c0:	4606      	mov	r6, r0
  4036c2:	f7ff ffbf 	bl	403644 <__swhatbuf_r>
  4036c6:	9900      	ldr	r1, [sp, #0]
  4036c8:	4605      	mov	r5, r0
  4036ca:	4630      	mov	r0, r6
  4036cc:	f000 f83a 	bl	403744 <_malloc_r>
  4036d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4036d4:	b1d8      	cbz	r0, 40370e <__smakebuf_r+0x6e>
  4036d6:	9a01      	ldr	r2, [sp, #4]
  4036d8:	4f15      	ldr	r7, [pc, #84]	; (403730 <__smakebuf_r+0x90>)
  4036da:	9900      	ldr	r1, [sp, #0]
  4036dc:	63f7      	str	r7, [r6, #60]	; 0x3c
  4036de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4036e2:	81a3      	strh	r3, [r4, #12]
  4036e4:	6020      	str	r0, [r4, #0]
  4036e6:	6120      	str	r0, [r4, #16]
  4036e8:	6161      	str	r1, [r4, #20]
  4036ea:	b91a      	cbnz	r2, 4036f4 <__smakebuf_r+0x54>
  4036ec:	432b      	orrs	r3, r5
  4036ee:	81a3      	strh	r3, [r4, #12]
  4036f0:	b003      	add	sp, #12
  4036f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4036f4:	4630      	mov	r0, r6
  4036f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4036fa:	f000 ffff 	bl	4046fc <_isatty_r>
  4036fe:	b1a0      	cbz	r0, 40372a <__smakebuf_r+0x8a>
  403700:	89a3      	ldrh	r3, [r4, #12]
  403702:	f023 0303 	bic.w	r3, r3, #3
  403706:	f043 0301 	orr.w	r3, r3, #1
  40370a:	b21b      	sxth	r3, r3
  40370c:	e7ee      	b.n	4036ec <__smakebuf_r+0x4c>
  40370e:	059a      	lsls	r2, r3, #22
  403710:	d4ee      	bmi.n	4036f0 <__smakebuf_r+0x50>
  403712:	f023 0303 	bic.w	r3, r3, #3
  403716:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40371a:	f043 0302 	orr.w	r3, r3, #2
  40371e:	2101      	movs	r1, #1
  403720:	81a3      	strh	r3, [r4, #12]
  403722:	6022      	str	r2, [r4, #0]
  403724:	6122      	str	r2, [r4, #16]
  403726:	6161      	str	r1, [r4, #20]
  403728:	e7e2      	b.n	4036f0 <__smakebuf_r+0x50>
  40372a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40372e:	e7dd      	b.n	4036ec <__smakebuf_r+0x4c>
  403730:	00402e61 	.word	0x00402e61

00403734 <malloc>:
  403734:	4b02      	ldr	r3, [pc, #8]	; (403740 <malloc+0xc>)
  403736:	4601      	mov	r1, r0
  403738:	6818      	ldr	r0, [r3, #0]
  40373a:	f000 b803 	b.w	403744 <_malloc_r>
  40373e:	bf00      	nop
  403740:	20400014 	.word	0x20400014

00403744 <_malloc_r>:
  403744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403748:	f101 060b 	add.w	r6, r1, #11
  40374c:	2e16      	cmp	r6, #22
  40374e:	b083      	sub	sp, #12
  403750:	4605      	mov	r5, r0
  403752:	f240 809e 	bls.w	403892 <_malloc_r+0x14e>
  403756:	f036 0607 	bics.w	r6, r6, #7
  40375a:	f100 80bd 	bmi.w	4038d8 <_malloc_r+0x194>
  40375e:	42b1      	cmp	r1, r6
  403760:	f200 80ba 	bhi.w	4038d8 <_malloc_r+0x194>
  403764:	f000 fb68 	bl	403e38 <__malloc_lock>
  403768:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40376c:	f0c0 8293 	bcc.w	403c96 <_malloc_r+0x552>
  403770:	0a73      	lsrs	r3, r6, #9
  403772:	f000 80b8 	beq.w	4038e6 <_malloc_r+0x1a2>
  403776:	2b04      	cmp	r3, #4
  403778:	f200 8179 	bhi.w	403a6e <_malloc_r+0x32a>
  40377c:	09b3      	lsrs	r3, r6, #6
  40377e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403782:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403786:	00c3      	lsls	r3, r0, #3
  403788:	4fbf      	ldr	r7, [pc, #764]	; (403a88 <_malloc_r+0x344>)
  40378a:	443b      	add	r3, r7
  40378c:	f1a3 0108 	sub.w	r1, r3, #8
  403790:	685c      	ldr	r4, [r3, #4]
  403792:	42a1      	cmp	r1, r4
  403794:	d106      	bne.n	4037a4 <_malloc_r+0x60>
  403796:	e00c      	b.n	4037b2 <_malloc_r+0x6e>
  403798:	2a00      	cmp	r2, #0
  40379a:	f280 80aa 	bge.w	4038f2 <_malloc_r+0x1ae>
  40379e:	68e4      	ldr	r4, [r4, #12]
  4037a0:	42a1      	cmp	r1, r4
  4037a2:	d006      	beq.n	4037b2 <_malloc_r+0x6e>
  4037a4:	6863      	ldr	r3, [r4, #4]
  4037a6:	f023 0303 	bic.w	r3, r3, #3
  4037aa:	1b9a      	subs	r2, r3, r6
  4037ac:	2a0f      	cmp	r2, #15
  4037ae:	ddf3      	ble.n	403798 <_malloc_r+0x54>
  4037b0:	4670      	mov	r0, lr
  4037b2:	693c      	ldr	r4, [r7, #16]
  4037b4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403a9c <_malloc_r+0x358>
  4037b8:	4574      	cmp	r4, lr
  4037ba:	f000 81ab 	beq.w	403b14 <_malloc_r+0x3d0>
  4037be:	6863      	ldr	r3, [r4, #4]
  4037c0:	f023 0303 	bic.w	r3, r3, #3
  4037c4:	1b9a      	subs	r2, r3, r6
  4037c6:	2a0f      	cmp	r2, #15
  4037c8:	f300 8190 	bgt.w	403aec <_malloc_r+0x3a8>
  4037cc:	2a00      	cmp	r2, #0
  4037ce:	f8c7 e014 	str.w	lr, [r7, #20]
  4037d2:	f8c7 e010 	str.w	lr, [r7, #16]
  4037d6:	f280 809d 	bge.w	403914 <_malloc_r+0x1d0>
  4037da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4037de:	f080 8161 	bcs.w	403aa4 <_malloc_r+0x360>
  4037e2:	08db      	lsrs	r3, r3, #3
  4037e4:	f103 0c01 	add.w	ip, r3, #1
  4037e8:	1099      	asrs	r1, r3, #2
  4037ea:	687a      	ldr	r2, [r7, #4]
  4037ec:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4037f0:	f8c4 8008 	str.w	r8, [r4, #8]
  4037f4:	2301      	movs	r3, #1
  4037f6:	408b      	lsls	r3, r1
  4037f8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4037fc:	4313      	orrs	r3, r2
  4037fe:	3908      	subs	r1, #8
  403800:	60e1      	str	r1, [r4, #12]
  403802:	607b      	str	r3, [r7, #4]
  403804:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403808:	f8c8 400c 	str.w	r4, [r8, #12]
  40380c:	1082      	asrs	r2, r0, #2
  40380e:	2401      	movs	r4, #1
  403810:	4094      	lsls	r4, r2
  403812:	429c      	cmp	r4, r3
  403814:	f200 808b 	bhi.w	40392e <_malloc_r+0x1ea>
  403818:	421c      	tst	r4, r3
  40381a:	d106      	bne.n	40382a <_malloc_r+0xe6>
  40381c:	f020 0003 	bic.w	r0, r0, #3
  403820:	0064      	lsls	r4, r4, #1
  403822:	421c      	tst	r4, r3
  403824:	f100 0004 	add.w	r0, r0, #4
  403828:	d0fa      	beq.n	403820 <_malloc_r+0xdc>
  40382a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40382e:	46cc      	mov	ip, r9
  403830:	4680      	mov	r8, r0
  403832:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403836:	459c      	cmp	ip, r3
  403838:	d107      	bne.n	40384a <_malloc_r+0x106>
  40383a:	e16d      	b.n	403b18 <_malloc_r+0x3d4>
  40383c:	2a00      	cmp	r2, #0
  40383e:	f280 817b 	bge.w	403b38 <_malloc_r+0x3f4>
  403842:	68db      	ldr	r3, [r3, #12]
  403844:	459c      	cmp	ip, r3
  403846:	f000 8167 	beq.w	403b18 <_malloc_r+0x3d4>
  40384a:	6859      	ldr	r1, [r3, #4]
  40384c:	f021 0103 	bic.w	r1, r1, #3
  403850:	1b8a      	subs	r2, r1, r6
  403852:	2a0f      	cmp	r2, #15
  403854:	ddf2      	ble.n	40383c <_malloc_r+0xf8>
  403856:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40385a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40385e:	9300      	str	r3, [sp, #0]
  403860:	199c      	adds	r4, r3, r6
  403862:	4628      	mov	r0, r5
  403864:	f046 0601 	orr.w	r6, r6, #1
  403868:	f042 0501 	orr.w	r5, r2, #1
  40386c:	605e      	str	r6, [r3, #4]
  40386e:	f8c8 c00c 	str.w	ip, [r8, #12]
  403872:	f8cc 8008 	str.w	r8, [ip, #8]
  403876:	617c      	str	r4, [r7, #20]
  403878:	613c      	str	r4, [r7, #16]
  40387a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40387e:	f8c4 e008 	str.w	lr, [r4, #8]
  403882:	6065      	str	r5, [r4, #4]
  403884:	505a      	str	r2, [r3, r1]
  403886:	f000 fadd 	bl	403e44 <__malloc_unlock>
  40388a:	9b00      	ldr	r3, [sp, #0]
  40388c:	f103 0408 	add.w	r4, r3, #8
  403890:	e01e      	b.n	4038d0 <_malloc_r+0x18c>
  403892:	2910      	cmp	r1, #16
  403894:	d820      	bhi.n	4038d8 <_malloc_r+0x194>
  403896:	f000 facf 	bl	403e38 <__malloc_lock>
  40389a:	2610      	movs	r6, #16
  40389c:	2318      	movs	r3, #24
  40389e:	2002      	movs	r0, #2
  4038a0:	4f79      	ldr	r7, [pc, #484]	; (403a88 <_malloc_r+0x344>)
  4038a2:	443b      	add	r3, r7
  4038a4:	f1a3 0208 	sub.w	r2, r3, #8
  4038a8:	685c      	ldr	r4, [r3, #4]
  4038aa:	4294      	cmp	r4, r2
  4038ac:	f000 813d 	beq.w	403b2a <_malloc_r+0x3e6>
  4038b0:	6863      	ldr	r3, [r4, #4]
  4038b2:	68e1      	ldr	r1, [r4, #12]
  4038b4:	68a6      	ldr	r6, [r4, #8]
  4038b6:	f023 0303 	bic.w	r3, r3, #3
  4038ba:	4423      	add	r3, r4
  4038bc:	4628      	mov	r0, r5
  4038be:	685a      	ldr	r2, [r3, #4]
  4038c0:	60f1      	str	r1, [r6, #12]
  4038c2:	f042 0201 	orr.w	r2, r2, #1
  4038c6:	608e      	str	r6, [r1, #8]
  4038c8:	605a      	str	r2, [r3, #4]
  4038ca:	f000 fabb 	bl	403e44 <__malloc_unlock>
  4038ce:	3408      	adds	r4, #8
  4038d0:	4620      	mov	r0, r4
  4038d2:	b003      	add	sp, #12
  4038d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4038d8:	2400      	movs	r4, #0
  4038da:	230c      	movs	r3, #12
  4038dc:	4620      	mov	r0, r4
  4038de:	602b      	str	r3, [r5, #0]
  4038e0:	b003      	add	sp, #12
  4038e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4038e6:	2040      	movs	r0, #64	; 0x40
  4038e8:	f44f 7300 	mov.w	r3, #512	; 0x200
  4038ec:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4038f0:	e74a      	b.n	403788 <_malloc_r+0x44>
  4038f2:	4423      	add	r3, r4
  4038f4:	68e1      	ldr	r1, [r4, #12]
  4038f6:	685a      	ldr	r2, [r3, #4]
  4038f8:	68a6      	ldr	r6, [r4, #8]
  4038fa:	f042 0201 	orr.w	r2, r2, #1
  4038fe:	60f1      	str	r1, [r6, #12]
  403900:	4628      	mov	r0, r5
  403902:	608e      	str	r6, [r1, #8]
  403904:	605a      	str	r2, [r3, #4]
  403906:	f000 fa9d 	bl	403e44 <__malloc_unlock>
  40390a:	3408      	adds	r4, #8
  40390c:	4620      	mov	r0, r4
  40390e:	b003      	add	sp, #12
  403910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403914:	4423      	add	r3, r4
  403916:	4628      	mov	r0, r5
  403918:	685a      	ldr	r2, [r3, #4]
  40391a:	f042 0201 	orr.w	r2, r2, #1
  40391e:	605a      	str	r2, [r3, #4]
  403920:	f000 fa90 	bl	403e44 <__malloc_unlock>
  403924:	3408      	adds	r4, #8
  403926:	4620      	mov	r0, r4
  403928:	b003      	add	sp, #12
  40392a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40392e:	68bc      	ldr	r4, [r7, #8]
  403930:	6863      	ldr	r3, [r4, #4]
  403932:	f023 0803 	bic.w	r8, r3, #3
  403936:	45b0      	cmp	r8, r6
  403938:	d304      	bcc.n	403944 <_malloc_r+0x200>
  40393a:	eba8 0306 	sub.w	r3, r8, r6
  40393e:	2b0f      	cmp	r3, #15
  403940:	f300 8085 	bgt.w	403a4e <_malloc_r+0x30a>
  403944:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403aa0 <_malloc_r+0x35c>
  403948:	4b50      	ldr	r3, [pc, #320]	; (403a8c <_malloc_r+0x348>)
  40394a:	f8d9 2000 	ldr.w	r2, [r9]
  40394e:	681b      	ldr	r3, [r3, #0]
  403950:	3201      	adds	r2, #1
  403952:	4433      	add	r3, r6
  403954:	eb04 0a08 	add.w	sl, r4, r8
  403958:	f000 8155 	beq.w	403c06 <_malloc_r+0x4c2>
  40395c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403960:	330f      	adds	r3, #15
  403962:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403966:	f02b 0b0f 	bic.w	fp, fp, #15
  40396a:	4659      	mov	r1, fp
  40396c:	4628      	mov	r0, r5
  40396e:	f000 fc15 	bl	40419c <_sbrk_r>
  403972:	1c41      	adds	r1, r0, #1
  403974:	4602      	mov	r2, r0
  403976:	f000 80fc 	beq.w	403b72 <_malloc_r+0x42e>
  40397a:	4582      	cmp	sl, r0
  40397c:	f200 80f7 	bhi.w	403b6e <_malloc_r+0x42a>
  403980:	4b43      	ldr	r3, [pc, #268]	; (403a90 <_malloc_r+0x34c>)
  403982:	6819      	ldr	r1, [r3, #0]
  403984:	4459      	add	r1, fp
  403986:	6019      	str	r1, [r3, #0]
  403988:	f000 814d 	beq.w	403c26 <_malloc_r+0x4e2>
  40398c:	f8d9 0000 	ldr.w	r0, [r9]
  403990:	3001      	adds	r0, #1
  403992:	bf1b      	ittet	ne
  403994:	eba2 0a0a 	subne.w	sl, r2, sl
  403998:	4451      	addne	r1, sl
  40399a:	f8c9 2000 	streq.w	r2, [r9]
  40399e:	6019      	strne	r1, [r3, #0]
  4039a0:	f012 0107 	ands.w	r1, r2, #7
  4039a4:	f000 8115 	beq.w	403bd2 <_malloc_r+0x48e>
  4039a8:	f1c1 0008 	rsb	r0, r1, #8
  4039ac:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4039b0:	4402      	add	r2, r0
  4039b2:	3108      	adds	r1, #8
  4039b4:	eb02 090b 	add.w	r9, r2, fp
  4039b8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4039bc:	eba1 0909 	sub.w	r9, r1, r9
  4039c0:	4649      	mov	r1, r9
  4039c2:	4628      	mov	r0, r5
  4039c4:	9301      	str	r3, [sp, #4]
  4039c6:	9200      	str	r2, [sp, #0]
  4039c8:	f000 fbe8 	bl	40419c <_sbrk_r>
  4039cc:	1c43      	adds	r3, r0, #1
  4039ce:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4039d2:	f000 8143 	beq.w	403c5c <_malloc_r+0x518>
  4039d6:	1a80      	subs	r0, r0, r2
  4039d8:	4448      	add	r0, r9
  4039da:	f040 0001 	orr.w	r0, r0, #1
  4039de:	6819      	ldr	r1, [r3, #0]
  4039e0:	60ba      	str	r2, [r7, #8]
  4039e2:	4449      	add	r1, r9
  4039e4:	42bc      	cmp	r4, r7
  4039e6:	6050      	str	r0, [r2, #4]
  4039e8:	6019      	str	r1, [r3, #0]
  4039ea:	d017      	beq.n	403a1c <_malloc_r+0x2d8>
  4039ec:	f1b8 0f0f 	cmp.w	r8, #15
  4039f0:	f240 80fb 	bls.w	403bea <_malloc_r+0x4a6>
  4039f4:	6860      	ldr	r0, [r4, #4]
  4039f6:	f1a8 020c 	sub.w	r2, r8, #12
  4039fa:	f022 0207 	bic.w	r2, r2, #7
  4039fe:	eb04 0e02 	add.w	lr, r4, r2
  403a02:	f000 0001 	and.w	r0, r0, #1
  403a06:	f04f 0c05 	mov.w	ip, #5
  403a0a:	4310      	orrs	r0, r2
  403a0c:	2a0f      	cmp	r2, #15
  403a0e:	6060      	str	r0, [r4, #4]
  403a10:	f8ce c004 	str.w	ip, [lr, #4]
  403a14:	f8ce c008 	str.w	ip, [lr, #8]
  403a18:	f200 8117 	bhi.w	403c4a <_malloc_r+0x506>
  403a1c:	4b1d      	ldr	r3, [pc, #116]	; (403a94 <_malloc_r+0x350>)
  403a1e:	68bc      	ldr	r4, [r7, #8]
  403a20:	681a      	ldr	r2, [r3, #0]
  403a22:	4291      	cmp	r1, r2
  403a24:	bf88      	it	hi
  403a26:	6019      	strhi	r1, [r3, #0]
  403a28:	4b1b      	ldr	r3, [pc, #108]	; (403a98 <_malloc_r+0x354>)
  403a2a:	681a      	ldr	r2, [r3, #0]
  403a2c:	4291      	cmp	r1, r2
  403a2e:	6862      	ldr	r2, [r4, #4]
  403a30:	bf88      	it	hi
  403a32:	6019      	strhi	r1, [r3, #0]
  403a34:	f022 0203 	bic.w	r2, r2, #3
  403a38:	4296      	cmp	r6, r2
  403a3a:	eba2 0306 	sub.w	r3, r2, r6
  403a3e:	d801      	bhi.n	403a44 <_malloc_r+0x300>
  403a40:	2b0f      	cmp	r3, #15
  403a42:	dc04      	bgt.n	403a4e <_malloc_r+0x30a>
  403a44:	4628      	mov	r0, r5
  403a46:	f000 f9fd 	bl	403e44 <__malloc_unlock>
  403a4a:	2400      	movs	r4, #0
  403a4c:	e740      	b.n	4038d0 <_malloc_r+0x18c>
  403a4e:	19a2      	adds	r2, r4, r6
  403a50:	f043 0301 	orr.w	r3, r3, #1
  403a54:	f046 0601 	orr.w	r6, r6, #1
  403a58:	6066      	str	r6, [r4, #4]
  403a5a:	4628      	mov	r0, r5
  403a5c:	60ba      	str	r2, [r7, #8]
  403a5e:	6053      	str	r3, [r2, #4]
  403a60:	f000 f9f0 	bl	403e44 <__malloc_unlock>
  403a64:	3408      	adds	r4, #8
  403a66:	4620      	mov	r0, r4
  403a68:	b003      	add	sp, #12
  403a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a6e:	2b14      	cmp	r3, #20
  403a70:	d971      	bls.n	403b56 <_malloc_r+0x412>
  403a72:	2b54      	cmp	r3, #84	; 0x54
  403a74:	f200 80a3 	bhi.w	403bbe <_malloc_r+0x47a>
  403a78:	0b33      	lsrs	r3, r6, #12
  403a7a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403a7e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403a82:	00c3      	lsls	r3, r0, #3
  403a84:	e680      	b.n	403788 <_malloc_r+0x44>
  403a86:	bf00      	nop
  403a88:	204005b0 	.word	0x204005b0
  403a8c:	2040149c 	.word	0x2040149c
  403a90:	2040146c 	.word	0x2040146c
  403a94:	20401494 	.word	0x20401494
  403a98:	20401498 	.word	0x20401498
  403a9c:	204005b8 	.word	0x204005b8
  403aa0:	204009b8 	.word	0x204009b8
  403aa4:	0a5a      	lsrs	r2, r3, #9
  403aa6:	2a04      	cmp	r2, #4
  403aa8:	d95b      	bls.n	403b62 <_malloc_r+0x41e>
  403aaa:	2a14      	cmp	r2, #20
  403aac:	f200 80ae 	bhi.w	403c0c <_malloc_r+0x4c8>
  403ab0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403ab4:	00c9      	lsls	r1, r1, #3
  403ab6:	325b      	adds	r2, #91	; 0x5b
  403ab8:	eb07 0c01 	add.w	ip, r7, r1
  403abc:	5879      	ldr	r1, [r7, r1]
  403abe:	f1ac 0c08 	sub.w	ip, ip, #8
  403ac2:	458c      	cmp	ip, r1
  403ac4:	f000 8088 	beq.w	403bd8 <_malloc_r+0x494>
  403ac8:	684a      	ldr	r2, [r1, #4]
  403aca:	f022 0203 	bic.w	r2, r2, #3
  403ace:	4293      	cmp	r3, r2
  403ad0:	d273      	bcs.n	403bba <_malloc_r+0x476>
  403ad2:	6889      	ldr	r1, [r1, #8]
  403ad4:	458c      	cmp	ip, r1
  403ad6:	d1f7      	bne.n	403ac8 <_malloc_r+0x384>
  403ad8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403adc:	687b      	ldr	r3, [r7, #4]
  403ade:	60e2      	str	r2, [r4, #12]
  403ae0:	f8c4 c008 	str.w	ip, [r4, #8]
  403ae4:	6094      	str	r4, [r2, #8]
  403ae6:	f8cc 400c 	str.w	r4, [ip, #12]
  403aea:	e68f      	b.n	40380c <_malloc_r+0xc8>
  403aec:	19a1      	adds	r1, r4, r6
  403aee:	f046 0c01 	orr.w	ip, r6, #1
  403af2:	f042 0601 	orr.w	r6, r2, #1
  403af6:	f8c4 c004 	str.w	ip, [r4, #4]
  403afa:	4628      	mov	r0, r5
  403afc:	6179      	str	r1, [r7, #20]
  403afe:	6139      	str	r1, [r7, #16]
  403b00:	f8c1 e00c 	str.w	lr, [r1, #12]
  403b04:	f8c1 e008 	str.w	lr, [r1, #8]
  403b08:	604e      	str	r6, [r1, #4]
  403b0a:	50e2      	str	r2, [r4, r3]
  403b0c:	f000 f99a 	bl	403e44 <__malloc_unlock>
  403b10:	3408      	adds	r4, #8
  403b12:	e6dd      	b.n	4038d0 <_malloc_r+0x18c>
  403b14:	687b      	ldr	r3, [r7, #4]
  403b16:	e679      	b.n	40380c <_malloc_r+0xc8>
  403b18:	f108 0801 	add.w	r8, r8, #1
  403b1c:	f018 0f03 	tst.w	r8, #3
  403b20:	f10c 0c08 	add.w	ip, ip, #8
  403b24:	f47f ae85 	bne.w	403832 <_malloc_r+0xee>
  403b28:	e02d      	b.n	403b86 <_malloc_r+0x442>
  403b2a:	68dc      	ldr	r4, [r3, #12]
  403b2c:	42a3      	cmp	r3, r4
  403b2e:	bf08      	it	eq
  403b30:	3002      	addeq	r0, #2
  403b32:	f43f ae3e 	beq.w	4037b2 <_malloc_r+0x6e>
  403b36:	e6bb      	b.n	4038b0 <_malloc_r+0x16c>
  403b38:	4419      	add	r1, r3
  403b3a:	461c      	mov	r4, r3
  403b3c:	684a      	ldr	r2, [r1, #4]
  403b3e:	68db      	ldr	r3, [r3, #12]
  403b40:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403b44:	f042 0201 	orr.w	r2, r2, #1
  403b48:	604a      	str	r2, [r1, #4]
  403b4a:	4628      	mov	r0, r5
  403b4c:	60f3      	str	r3, [r6, #12]
  403b4e:	609e      	str	r6, [r3, #8]
  403b50:	f000 f978 	bl	403e44 <__malloc_unlock>
  403b54:	e6bc      	b.n	4038d0 <_malloc_r+0x18c>
  403b56:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403b5a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403b5e:	00c3      	lsls	r3, r0, #3
  403b60:	e612      	b.n	403788 <_malloc_r+0x44>
  403b62:	099a      	lsrs	r2, r3, #6
  403b64:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403b68:	00c9      	lsls	r1, r1, #3
  403b6a:	3238      	adds	r2, #56	; 0x38
  403b6c:	e7a4      	b.n	403ab8 <_malloc_r+0x374>
  403b6e:	42bc      	cmp	r4, r7
  403b70:	d054      	beq.n	403c1c <_malloc_r+0x4d8>
  403b72:	68bc      	ldr	r4, [r7, #8]
  403b74:	6862      	ldr	r2, [r4, #4]
  403b76:	f022 0203 	bic.w	r2, r2, #3
  403b7a:	e75d      	b.n	403a38 <_malloc_r+0x2f4>
  403b7c:	f859 3908 	ldr.w	r3, [r9], #-8
  403b80:	4599      	cmp	r9, r3
  403b82:	f040 8086 	bne.w	403c92 <_malloc_r+0x54e>
  403b86:	f010 0f03 	tst.w	r0, #3
  403b8a:	f100 30ff 	add.w	r0, r0, #4294967295
  403b8e:	d1f5      	bne.n	403b7c <_malloc_r+0x438>
  403b90:	687b      	ldr	r3, [r7, #4]
  403b92:	ea23 0304 	bic.w	r3, r3, r4
  403b96:	607b      	str	r3, [r7, #4]
  403b98:	0064      	lsls	r4, r4, #1
  403b9a:	429c      	cmp	r4, r3
  403b9c:	f63f aec7 	bhi.w	40392e <_malloc_r+0x1ea>
  403ba0:	2c00      	cmp	r4, #0
  403ba2:	f43f aec4 	beq.w	40392e <_malloc_r+0x1ea>
  403ba6:	421c      	tst	r4, r3
  403ba8:	4640      	mov	r0, r8
  403baa:	f47f ae3e 	bne.w	40382a <_malloc_r+0xe6>
  403bae:	0064      	lsls	r4, r4, #1
  403bb0:	421c      	tst	r4, r3
  403bb2:	f100 0004 	add.w	r0, r0, #4
  403bb6:	d0fa      	beq.n	403bae <_malloc_r+0x46a>
  403bb8:	e637      	b.n	40382a <_malloc_r+0xe6>
  403bba:	468c      	mov	ip, r1
  403bbc:	e78c      	b.n	403ad8 <_malloc_r+0x394>
  403bbe:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403bc2:	d815      	bhi.n	403bf0 <_malloc_r+0x4ac>
  403bc4:	0bf3      	lsrs	r3, r6, #15
  403bc6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403bca:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403bce:	00c3      	lsls	r3, r0, #3
  403bd0:	e5da      	b.n	403788 <_malloc_r+0x44>
  403bd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403bd6:	e6ed      	b.n	4039b4 <_malloc_r+0x270>
  403bd8:	687b      	ldr	r3, [r7, #4]
  403bda:	1092      	asrs	r2, r2, #2
  403bdc:	2101      	movs	r1, #1
  403bde:	fa01 f202 	lsl.w	r2, r1, r2
  403be2:	4313      	orrs	r3, r2
  403be4:	607b      	str	r3, [r7, #4]
  403be6:	4662      	mov	r2, ip
  403be8:	e779      	b.n	403ade <_malloc_r+0x39a>
  403bea:	2301      	movs	r3, #1
  403bec:	6053      	str	r3, [r2, #4]
  403bee:	e729      	b.n	403a44 <_malloc_r+0x300>
  403bf0:	f240 5254 	movw	r2, #1364	; 0x554
  403bf4:	4293      	cmp	r3, r2
  403bf6:	d822      	bhi.n	403c3e <_malloc_r+0x4fa>
  403bf8:	0cb3      	lsrs	r3, r6, #18
  403bfa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403bfe:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403c02:	00c3      	lsls	r3, r0, #3
  403c04:	e5c0      	b.n	403788 <_malloc_r+0x44>
  403c06:	f103 0b10 	add.w	fp, r3, #16
  403c0a:	e6ae      	b.n	40396a <_malloc_r+0x226>
  403c0c:	2a54      	cmp	r2, #84	; 0x54
  403c0e:	d829      	bhi.n	403c64 <_malloc_r+0x520>
  403c10:	0b1a      	lsrs	r2, r3, #12
  403c12:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403c16:	00c9      	lsls	r1, r1, #3
  403c18:	326e      	adds	r2, #110	; 0x6e
  403c1a:	e74d      	b.n	403ab8 <_malloc_r+0x374>
  403c1c:	4b20      	ldr	r3, [pc, #128]	; (403ca0 <_malloc_r+0x55c>)
  403c1e:	6819      	ldr	r1, [r3, #0]
  403c20:	4459      	add	r1, fp
  403c22:	6019      	str	r1, [r3, #0]
  403c24:	e6b2      	b.n	40398c <_malloc_r+0x248>
  403c26:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403c2a:	2800      	cmp	r0, #0
  403c2c:	f47f aeae 	bne.w	40398c <_malloc_r+0x248>
  403c30:	eb08 030b 	add.w	r3, r8, fp
  403c34:	68ba      	ldr	r2, [r7, #8]
  403c36:	f043 0301 	orr.w	r3, r3, #1
  403c3a:	6053      	str	r3, [r2, #4]
  403c3c:	e6ee      	b.n	403a1c <_malloc_r+0x2d8>
  403c3e:	207f      	movs	r0, #127	; 0x7f
  403c40:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403c44:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403c48:	e59e      	b.n	403788 <_malloc_r+0x44>
  403c4a:	f104 0108 	add.w	r1, r4, #8
  403c4e:	4628      	mov	r0, r5
  403c50:	9300      	str	r3, [sp, #0]
  403c52:	f7ff fa59 	bl	403108 <_free_r>
  403c56:	9b00      	ldr	r3, [sp, #0]
  403c58:	6819      	ldr	r1, [r3, #0]
  403c5a:	e6df      	b.n	403a1c <_malloc_r+0x2d8>
  403c5c:	2001      	movs	r0, #1
  403c5e:	f04f 0900 	mov.w	r9, #0
  403c62:	e6bc      	b.n	4039de <_malloc_r+0x29a>
  403c64:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403c68:	d805      	bhi.n	403c76 <_malloc_r+0x532>
  403c6a:	0bda      	lsrs	r2, r3, #15
  403c6c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403c70:	00c9      	lsls	r1, r1, #3
  403c72:	3277      	adds	r2, #119	; 0x77
  403c74:	e720      	b.n	403ab8 <_malloc_r+0x374>
  403c76:	f240 5154 	movw	r1, #1364	; 0x554
  403c7a:	428a      	cmp	r2, r1
  403c7c:	d805      	bhi.n	403c8a <_malloc_r+0x546>
  403c7e:	0c9a      	lsrs	r2, r3, #18
  403c80:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403c84:	00c9      	lsls	r1, r1, #3
  403c86:	327c      	adds	r2, #124	; 0x7c
  403c88:	e716      	b.n	403ab8 <_malloc_r+0x374>
  403c8a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403c8e:	227e      	movs	r2, #126	; 0x7e
  403c90:	e712      	b.n	403ab8 <_malloc_r+0x374>
  403c92:	687b      	ldr	r3, [r7, #4]
  403c94:	e780      	b.n	403b98 <_malloc_r+0x454>
  403c96:	08f0      	lsrs	r0, r6, #3
  403c98:	f106 0308 	add.w	r3, r6, #8
  403c9c:	e600      	b.n	4038a0 <_malloc_r+0x15c>
  403c9e:	bf00      	nop
  403ca0:	2040146c 	.word	0x2040146c

00403ca4 <__ascii_mbtowc>:
  403ca4:	b082      	sub	sp, #8
  403ca6:	b149      	cbz	r1, 403cbc <__ascii_mbtowc+0x18>
  403ca8:	b15a      	cbz	r2, 403cc2 <__ascii_mbtowc+0x1e>
  403caa:	b16b      	cbz	r3, 403cc8 <__ascii_mbtowc+0x24>
  403cac:	7813      	ldrb	r3, [r2, #0]
  403cae:	600b      	str	r3, [r1, #0]
  403cb0:	7812      	ldrb	r2, [r2, #0]
  403cb2:	1c10      	adds	r0, r2, #0
  403cb4:	bf18      	it	ne
  403cb6:	2001      	movne	r0, #1
  403cb8:	b002      	add	sp, #8
  403cba:	4770      	bx	lr
  403cbc:	a901      	add	r1, sp, #4
  403cbe:	2a00      	cmp	r2, #0
  403cc0:	d1f3      	bne.n	403caa <__ascii_mbtowc+0x6>
  403cc2:	4610      	mov	r0, r2
  403cc4:	b002      	add	sp, #8
  403cc6:	4770      	bx	lr
  403cc8:	f06f 0001 	mvn.w	r0, #1
  403ccc:	e7f4      	b.n	403cb8 <__ascii_mbtowc+0x14>
  403cce:	bf00      	nop

00403cd0 <memchr>:
  403cd0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403cd4:	2a10      	cmp	r2, #16
  403cd6:	db2b      	blt.n	403d30 <memchr+0x60>
  403cd8:	f010 0f07 	tst.w	r0, #7
  403cdc:	d008      	beq.n	403cf0 <memchr+0x20>
  403cde:	f810 3b01 	ldrb.w	r3, [r0], #1
  403ce2:	3a01      	subs	r2, #1
  403ce4:	428b      	cmp	r3, r1
  403ce6:	d02d      	beq.n	403d44 <memchr+0x74>
  403ce8:	f010 0f07 	tst.w	r0, #7
  403cec:	b342      	cbz	r2, 403d40 <memchr+0x70>
  403cee:	d1f6      	bne.n	403cde <memchr+0xe>
  403cf0:	b4f0      	push	{r4, r5, r6, r7}
  403cf2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403cf6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  403cfa:	f022 0407 	bic.w	r4, r2, #7
  403cfe:	f07f 0700 	mvns.w	r7, #0
  403d02:	2300      	movs	r3, #0
  403d04:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403d08:	3c08      	subs	r4, #8
  403d0a:	ea85 0501 	eor.w	r5, r5, r1
  403d0e:	ea86 0601 	eor.w	r6, r6, r1
  403d12:	fa85 f547 	uadd8	r5, r5, r7
  403d16:	faa3 f587 	sel	r5, r3, r7
  403d1a:	fa86 f647 	uadd8	r6, r6, r7
  403d1e:	faa5 f687 	sel	r6, r5, r7
  403d22:	b98e      	cbnz	r6, 403d48 <memchr+0x78>
  403d24:	d1ee      	bne.n	403d04 <memchr+0x34>
  403d26:	bcf0      	pop	{r4, r5, r6, r7}
  403d28:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403d2c:	f002 0207 	and.w	r2, r2, #7
  403d30:	b132      	cbz	r2, 403d40 <memchr+0x70>
  403d32:	f810 3b01 	ldrb.w	r3, [r0], #1
  403d36:	3a01      	subs	r2, #1
  403d38:	ea83 0301 	eor.w	r3, r3, r1
  403d3c:	b113      	cbz	r3, 403d44 <memchr+0x74>
  403d3e:	d1f8      	bne.n	403d32 <memchr+0x62>
  403d40:	2000      	movs	r0, #0
  403d42:	4770      	bx	lr
  403d44:	3801      	subs	r0, #1
  403d46:	4770      	bx	lr
  403d48:	2d00      	cmp	r5, #0
  403d4a:	bf06      	itte	eq
  403d4c:	4635      	moveq	r5, r6
  403d4e:	3803      	subeq	r0, #3
  403d50:	3807      	subne	r0, #7
  403d52:	f015 0f01 	tst.w	r5, #1
  403d56:	d107      	bne.n	403d68 <memchr+0x98>
  403d58:	3001      	adds	r0, #1
  403d5a:	f415 7f80 	tst.w	r5, #256	; 0x100
  403d5e:	bf02      	ittt	eq
  403d60:	3001      	addeq	r0, #1
  403d62:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403d66:	3001      	addeq	r0, #1
  403d68:	bcf0      	pop	{r4, r5, r6, r7}
  403d6a:	3801      	subs	r0, #1
  403d6c:	4770      	bx	lr
  403d6e:	bf00      	nop

00403d70 <memmove>:
  403d70:	4288      	cmp	r0, r1
  403d72:	b5f0      	push	{r4, r5, r6, r7, lr}
  403d74:	d90d      	bls.n	403d92 <memmove+0x22>
  403d76:	188b      	adds	r3, r1, r2
  403d78:	4298      	cmp	r0, r3
  403d7a:	d20a      	bcs.n	403d92 <memmove+0x22>
  403d7c:	1884      	adds	r4, r0, r2
  403d7e:	2a00      	cmp	r2, #0
  403d80:	d051      	beq.n	403e26 <memmove+0xb6>
  403d82:	4622      	mov	r2, r4
  403d84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  403d88:	f802 4d01 	strb.w	r4, [r2, #-1]!
  403d8c:	4299      	cmp	r1, r3
  403d8e:	d1f9      	bne.n	403d84 <memmove+0x14>
  403d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403d92:	2a0f      	cmp	r2, #15
  403d94:	d948      	bls.n	403e28 <memmove+0xb8>
  403d96:	ea41 0300 	orr.w	r3, r1, r0
  403d9a:	079b      	lsls	r3, r3, #30
  403d9c:	d146      	bne.n	403e2c <memmove+0xbc>
  403d9e:	f100 0410 	add.w	r4, r0, #16
  403da2:	f101 0310 	add.w	r3, r1, #16
  403da6:	4615      	mov	r5, r2
  403da8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403dac:	f844 6c10 	str.w	r6, [r4, #-16]
  403db0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403db4:	f844 6c0c 	str.w	r6, [r4, #-12]
  403db8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403dbc:	f844 6c08 	str.w	r6, [r4, #-8]
  403dc0:	3d10      	subs	r5, #16
  403dc2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  403dc6:	f844 6c04 	str.w	r6, [r4, #-4]
  403dca:	2d0f      	cmp	r5, #15
  403dcc:	f103 0310 	add.w	r3, r3, #16
  403dd0:	f104 0410 	add.w	r4, r4, #16
  403dd4:	d8e8      	bhi.n	403da8 <memmove+0x38>
  403dd6:	f1a2 0310 	sub.w	r3, r2, #16
  403dda:	f023 030f 	bic.w	r3, r3, #15
  403dde:	f002 0e0f 	and.w	lr, r2, #15
  403de2:	3310      	adds	r3, #16
  403de4:	f1be 0f03 	cmp.w	lr, #3
  403de8:	4419      	add	r1, r3
  403dea:	4403      	add	r3, r0
  403dec:	d921      	bls.n	403e32 <memmove+0xc2>
  403dee:	1f1e      	subs	r6, r3, #4
  403df0:	460d      	mov	r5, r1
  403df2:	4674      	mov	r4, lr
  403df4:	3c04      	subs	r4, #4
  403df6:	f855 7b04 	ldr.w	r7, [r5], #4
  403dfa:	f846 7f04 	str.w	r7, [r6, #4]!
  403dfe:	2c03      	cmp	r4, #3
  403e00:	d8f8      	bhi.n	403df4 <memmove+0x84>
  403e02:	f1ae 0404 	sub.w	r4, lr, #4
  403e06:	f024 0403 	bic.w	r4, r4, #3
  403e0a:	3404      	adds	r4, #4
  403e0c:	4421      	add	r1, r4
  403e0e:	4423      	add	r3, r4
  403e10:	f002 0203 	and.w	r2, r2, #3
  403e14:	b162      	cbz	r2, 403e30 <memmove+0xc0>
  403e16:	3b01      	subs	r3, #1
  403e18:	440a      	add	r2, r1
  403e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
  403e1e:	f803 4f01 	strb.w	r4, [r3, #1]!
  403e22:	428a      	cmp	r2, r1
  403e24:	d1f9      	bne.n	403e1a <memmove+0xaa>
  403e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403e28:	4603      	mov	r3, r0
  403e2a:	e7f3      	b.n	403e14 <memmove+0xa4>
  403e2c:	4603      	mov	r3, r0
  403e2e:	e7f2      	b.n	403e16 <memmove+0xa6>
  403e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403e32:	4672      	mov	r2, lr
  403e34:	e7ee      	b.n	403e14 <memmove+0xa4>
  403e36:	bf00      	nop

00403e38 <__malloc_lock>:
  403e38:	4801      	ldr	r0, [pc, #4]	; (403e40 <__malloc_lock+0x8>)
  403e3a:	f7ff bbff 	b.w	40363c <__retarget_lock_acquire_recursive>
  403e3e:	bf00      	nop
  403e40:	204014bc 	.word	0x204014bc

00403e44 <__malloc_unlock>:
  403e44:	4801      	ldr	r0, [pc, #4]	; (403e4c <__malloc_unlock+0x8>)
  403e46:	f7ff bbfb 	b.w	403640 <__retarget_lock_release_recursive>
  403e4a:	bf00      	nop
  403e4c:	204014bc 	.word	0x204014bc

00403e50 <_realloc_r>:
  403e50:	2900      	cmp	r1, #0
  403e52:	f000 8095 	beq.w	403f80 <_realloc_r+0x130>
  403e56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403e5a:	460d      	mov	r5, r1
  403e5c:	4616      	mov	r6, r2
  403e5e:	b083      	sub	sp, #12
  403e60:	4680      	mov	r8, r0
  403e62:	f106 070b 	add.w	r7, r6, #11
  403e66:	f7ff ffe7 	bl	403e38 <__malloc_lock>
  403e6a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  403e6e:	2f16      	cmp	r7, #22
  403e70:	f02e 0403 	bic.w	r4, lr, #3
  403e74:	f1a5 0908 	sub.w	r9, r5, #8
  403e78:	d83c      	bhi.n	403ef4 <_realloc_r+0xa4>
  403e7a:	2210      	movs	r2, #16
  403e7c:	4617      	mov	r7, r2
  403e7e:	42be      	cmp	r6, r7
  403e80:	d83d      	bhi.n	403efe <_realloc_r+0xae>
  403e82:	4294      	cmp	r4, r2
  403e84:	da43      	bge.n	403f0e <_realloc_r+0xbe>
  403e86:	4bc4      	ldr	r3, [pc, #784]	; (404198 <_realloc_r+0x348>)
  403e88:	6899      	ldr	r1, [r3, #8]
  403e8a:	eb09 0004 	add.w	r0, r9, r4
  403e8e:	4288      	cmp	r0, r1
  403e90:	f000 80b4 	beq.w	403ffc <_realloc_r+0x1ac>
  403e94:	6843      	ldr	r3, [r0, #4]
  403e96:	f023 0101 	bic.w	r1, r3, #1
  403e9a:	4401      	add	r1, r0
  403e9c:	6849      	ldr	r1, [r1, #4]
  403e9e:	07c9      	lsls	r1, r1, #31
  403ea0:	d54c      	bpl.n	403f3c <_realloc_r+0xec>
  403ea2:	f01e 0f01 	tst.w	lr, #1
  403ea6:	f000 809b 	beq.w	403fe0 <_realloc_r+0x190>
  403eaa:	4631      	mov	r1, r6
  403eac:	4640      	mov	r0, r8
  403eae:	f7ff fc49 	bl	403744 <_malloc_r>
  403eb2:	4606      	mov	r6, r0
  403eb4:	2800      	cmp	r0, #0
  403eb6:	d03a      	beq.n	403f2e <_realloc_r+0xde>
  403eb8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403ebc:	f023 0301 	bic.w	r3, r3, #1
  403ec0:	444b      	add	r3, r9
  403ec2:	f1a0 0208 	sub.w	r2, r0, #8
  403ec6:	429a      	cmp	r2, r3
  403ec8:	f000 8121 	beq.w	40410e <_realloc_r+0x2be>
  403ecc:	1f22      	subs	r2, r4, #4
  403ece:	2a24      	cmp	r2, #36	; 0x24
  403ed0:	f200 8107 	bhi.w	4040e2 <_realloc_r+0x292>
  403ed4:	2a13      	cmp	r2, #19
  403ed6:	f200 80db 	bhi.w	404090 <_realloc_r+0x240>
  403eda:	4603      	mov	r3, r0
  403edc:	462a      	mov	r2, r5
  403ede:	6811      	ldr	r1, [r2, #0]
  403ee0:	6019      	str	r1, [r3, #0]
  403ee2:	6851      	ldr	r1, [r2, #4]
  403ee4:	6059      	str	r1, [r3, #4]
  403ee6:	6892      	ldr	r2, [r2, #8]
  403ee8:	609a      	str	r2, [r3, #8]
  403eea:	4629      	mov	r1, r5
  403eec:	4640      	mov	r0, r8
  403eee:	f7ff f90b 	bl	403108 <_free_r>
  403ef2:	e01c      	b.n	403f2e <_realloc_r+0xde>
  403ef4:	f027 0707 	bic.w	r7, r7, #7
  403ef8:	2f00      	cmp	r7, #0
  403efa:	463a      	mov	r2, r7
  403efc:	dabf      	bge.n	403e7e <_realloc_r+0x2e>
  403efe:	2600      	movs	r6, #0
  403f00:	230c      	movs	r3, #12
  403f02:	4630      	mov	r0, r6
  403f04:	f8c8 3000 	str.w	r3, [r8]
  403f08:	b003      	add	sp, #12
  403f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f0e:	462e      	mov	r6, r5
  403f10:	1be3      	subs	r3, r4, r7
  403f12:	2b0f      	cmp	r3, #15
  403f14:	d81e      	bhi.n	403f54 <_realloc_r+0x104>
  403f16:	f8d9 3004 	ldr.w	r3, [r9, #4]
  403f1a:	f003 0301 	and.w	r3, r3, #1
  403f1e:	4323      	orrs	r3, r4
  403f20:	444c      	add	r4, r9
  403f22:	f8c9 3004 	str.w	r3, [r9, #4]
  403f26:	6863      	ldr	r3, [r4, #4]
  403f28:	f043 0301 	orr.w	r3, r3, #1
  403f2c:	6063      	str	r3, [r4, #4]
  403f2e:	4640      	mov	r0, r8
  403f30:	f7ff ff88 	bl	403e44 <__malloc_unlock>
  403f34:	4630      	mov	r0, r6
  403f36:	b003      	add	sp, #12
  403f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f3c:	f023 0303 	bic.w	r3, r3, #3
  403f40:	18e1      	adds	r1, r4, r3
  403f42:	4291      	cmp	r1, r2
  403f44:	db1f      	blt.n	403f86 <_realloc_r+0x136>
  403f46:	68c3      	ldr	r3, [r0, #12]
  403f48:	6882      	ldr	r2, [r0, #8]
  403f4a:	462e      	mov	r6, r5
  403f4c:	60d3      	str	r3, [r2, #12]
  403f4e:	460c      	mov	r4, r1
  403f50:	609a      	str	r2, [r3, #8]
  403f52:	e7dd      	b.n	403f10 <_realloc_r+0xc0>
  403f54:	f8d9 2004 	ldr.w	r2, [r9, #4]
  403f58:	eb09 0107 	add.w	r1, r9, r7
  403f5c:	f002 0201 	and.w	r2, r2, #1
  403f60:	444c      	add	r4, r9
  403f62:	f043 0301 	orr.w	r3, r3, #1
  403f66:	4317      	orrs	r7, r2
  403f68:	f8c9 7004 	str.w	r7, [r9, #4]
  403f6c:	604b      	str	r3, [r1, #4]
  403f6e:	6863      	ldr	r3, [r4, #4]
  403f70:	f043 0301 	orr.w	r3, r3, #1
  403f74:	3108      	adds	r1, #8
  403f76:	6063      	str	r3, [r4, #4]
  403f78:	4640      	mov	r0, r8
  403f7a:	f7ff f8c5 	bl	403108 <_free_r>
  403f7e:	e7d6      	b.n	403f2e <_realloc_r+0xde>
  403f80:	4611      	mov	r1, r2
  403f82:	f7ff bbdf 	b.w	403744 <_malloc_r>
  403f86:	f01e 0f01 	tst.w	lr, #1
  403f8a:	d18e      	bne.n	403eaa <_realloc_r+0x5a>
  403f8c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403f90:	eba9 0a01 	sub.w	sl, r9, r1
  403f94:	f8da 1004 	ldr.w	r1, [sl, #4]
  403f98:	f021 0103 	bic.w	r1, r1, #3
  403f9c:	440b      	add	r3, r1
  403f9e:	4423      	add	r3, r4
  403fa0:	4293      	cmp	r3, r2
  403fa2:	db25      	blt.n	403ff0 <_realloc_r+0x1a0>
  403fa4:	68c2      	ldr	r2, [r0, #12]
  403fa6:	6881      	ldr	r1, [r0, #8]
  403fa8:	4656      	mov	r6, sl
  403faa:	60ca      	str	r2, [r1, #12]
  403fac:	6091      	str	r1, [r2, #8]
  403fae:	f8da 100c 	ldr.w	r1, [sl, #12]
  403fb2:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403fb6:	1f22      	subs	r2, r4, #4
  403fb8:	2a24      	cmp	r2, #36	; 0x24
  403fba:	60c1      	str	r1, [r0, #12]
  403fbc:	6088      	str	r0, [r1, #8]
  403fbe:	f200 8094 	bhi.w	4040ea <_realloc_r+0x29a>
  403fc2:	2a13      	cmp	r2, #19
  403fc4:	d96f      	bls.n	4040a6 <_realloc_r+0x256>
  403fc6:	6829      	ldr	r1, [r5, #0]
  403fc8:	f8ca 1008 	str.w	r1, [sl, #8]
  403fcc:	6869      	ldr	r1, [r5, #4]
  403fce:	f8ca 100c 	str.w	r1, [sl, #12]
  403fd2:	2a1b      	cmp	r2, #27
  403fd4:	f200 80a2 	bhi.w	40411c <_realloc_r+0x2cc>
  403fd8:	3508      	adds	r5, #8
  403fda:	f10a 0210 	add.w	r2, sl, #16
  403fde:	e063      	b.n	4040a8 <_realloc_r+0x258>
  403fe0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  403fe4:	eba9 0a03 	sub.w	sl, r9, r3
  403fe8:	f8da 1004 	ldr.w	r1, [sl, #4]
  403fec:	f021 0103 	bic.w	r1, r1, #3
  403ff0:	1863      	adds	r3, r4, r1
  403ff2:	4293      	cmp	r3, r2
  403ff4:	f6ff af59 	blt.w	403eaa <_realloc_r+0x5a>
  403ff8:	4656      	mov	r6, sl
  403ffa:	e7d8      	b.n	403fae <_realloc_r+0x15e>
  403ffc:	6841      	ldr	r1, [r0, #4]
  403ffe:	f021 0b03 	bic.w	fp, r1, #3
  404002:	44a3      	add	fp, r4
  404004:	f107 0010 	add.w	r0, r7, #16
  404008:	4583      	cmp	fp, r0
  40400a:	da56      	bge.n	4040ba <_realloc_r+0x26a>
  40400c:	f01e 0f01 	tst.w	lr, #1
  404010:	f47f af4b 	bne.w	403eaa <_realloc_r+0x5a>
  404014:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404018:	eba9 0a01 	sub.w	sl, r9, r1
  40401c:	f8da 1004 	ldr.w	r1, [sl, #4]
  404020:	f021 0103 	bic.w	r1, r1, #3
  404024:	448b      	add	fp, r1
  404026:	4558      	cmp	r0, fp
  404028:	dce2      	bgt.n	403ff0 <_realloc_r+0x1a0>
  40402a:	4656      	mov	r6, sl
  40402c:	f8da 100c 	ldr.w	r1, [sl, #12]
  404030:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404034:	1f22      	subs	r2, r4, #4
  404036:	2a24      	cmp	r2, #36	; 0x24
  404038:	60c1      	str	r1, [r0, #12]
  40403a:	6088      	str	r0, [r1, #8]
  40403c:	f200 808f 	bhi.w	40415e <_realloc_r+0x30e>
  404040:	2a13      	cmp	r2, #19
  404042:	f240 808a 	bls.w	40415a <_realloc_r+0x30a>
  404046:	6829      	ldr	r1, [r5, #0]
  404048:	f8ca 1008 	str.w	r1, [sl, #8]
  40404c:	6869      	ldr	r1, [r5, #4]
  40404e:	f8ca 100c 	str.w	r1, [sl, #12]
  404052:	2a1b      	cmp	r2, #27
  404054:	f200 808a 	bhi.w	40416c <_realloc_r+0x31c>
  404058:	3508      	adds	r5, #8
  40405a:	f10a 0210 	add.w	r2, sl, #16
  40405e:	6829      	ldr	r1, [r5, #0]
  404060:	6011      	str	r1, [r2, #0]
  404062:	6869      	ldr	r1, [r5, #4]
  404064:	6051      	str	r1, [r2, #4]
  404066:	68a9      	ldr	r1, [r5, #8]
  404068:	6091      	str	r1, [r2, #8]
  40406a:	eb0a 0107 	add.w	r1, sl, r7
  40406e:	ebab 0207 	sub.w	r2, fp, r7
  404072:	f042 0201 	orr.w	r2, r2, #1
  404076:	6099      	str	r1, [r3, #8]
  404078:	604a      	str	r2, [r1, #4]
  40407a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40407e:	f003 0301 	and.w	r3, r3, #1
  404082:	431f      	orrs	r7, r3
  404084:	4640      	mov	r0, r8
  404086:	f8ca 7004 	str.w	r7, [sl, #4]
  40408a:	f7ff fedb 	bl	403e44 <__malloc_unlock>
  40408e:	e751      	b.n	403f34 <_realloc_r+0xe4>
  404090:	682b      	ldr	r3, [r5, #0]
  404092:	6003      	str	r3, [r0, #0]
  404094:	686b      	ldr	r3, [r5, #4]
  404096:	6043      	str	r3, [r0, #4]
  404098:	2a1b      	cmp	r2, #27
  40409a:	d82d      	bhi.n	4040f8 <_realloc_r+0x2a8>
  40409c:	f100 0308 	add.w	r3, r0, #8
  4040a0:	f105 0208 	add.w	r2, r5, #8
  4040a4:	e71b      	b.n	403ede <_realloc_r+0x8e>
  4040a6:	4632      	mov	r2, r6
  4040a8:	6829      	ldr	r1, [r5, #0]
  4040aa:	6011      	str	r1, [r2, #0]
  4040ac:	6869      	ldr	r1, [r5, #4]
  4040ae:	6051      	str	r1, [r2, #4]
  4040b0:	68a9      	ldr	r1, [r5, #8]
  4040b2:	6091      	str	r1, [r2, #8]
  4040b4:	461c      	mov	r4, r3
  4040b6:	46d1      	mov	r9, sl
  4040b8:	e72a      	b.n	403f10 <_realloc_r+0xc0>
  4040ba:	eb09 0107 	add.w	r1, r9, r7
  4040be:	ebab 0b07 	sub.w	fp, fp, r7
  4040c2:	f04b 0201 	orr.w	r2, fp, #1
  4040c6:	6099      	str	r1, [r3, #8]
  4040c8:	604a      	str	r2, [r1, #4]
  4040ca:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4040ce:	f003 0301 	and.w	r3, r3, #1
  4040d2:	431f      	orrs	r7, r3
  4040d4:	4640      	mov	r0, r8
  4040d6:	f845 7c04 	str.w	r7, [r5, #-4]
  4040da:	f7ff feb3 	bl	403e44 <__malloc_unlock>
  4040de:	462e      	mov	r6, r5
  4040e0:	e728      	b.n	403f34 <_realloc_r+0xe4>
  4040e2:	4629      	mov	r1, r5
  4040e4:	f7ff fe44 	bl	403d70 <memmove>
  4040e8:	e6ff      	b.n	403eea <_realloc_r+0x9a>
  4040ea:	4629      	mov	r1, r5
  4040ec:	4630      	mov	r0, r6
  4040ee:	461c      	mov	r4, r3
  4040f0:	46d1      	mov	r9, sl
  4040f2:	f7ff fe3d 	bl	403d70 <memmove>
  4040f6:	e70b      	b.n	403f10 <_realloc_r+0xc0>
  4040f8:	68ab      	ldr	r3, [r5, #8]
  4040fa:	6083      	str	r3, [r0, #8]
  4040fc:	68eb      	ldr	r3, [r5, #12]
  4040fe:	60c3      	str	r3, [r0, #12]
  404100:	2a24      	cmp	r2, #36	; 0x24
  404102:	d017      	beq.n	404134 <_realloc_r+0x2e4>
  404104:	f100 0310 	add.w	r3, r0, #16
  404108:	f105 0210 	add.w	r2, r5, #16
  40410c:	e6e7      	b.n	403ede <_realloc_r+0x8e>
  40410e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404112:	f023 0303 	bic.w	r3, r3, #3
  404116:	441c      	add	r4, r3
  404118:	462e      	mov	r6, r5
  40411a:	e6f9      	b.n	403f10 <_realloc_r+0xc0>
  40411c:	68a9      	ldr	r1, [r5, #8]
  40411e:	f8ca 1010 	str.w	r1, [sl, #16]
  404122:	68e9      	ldr	r1, [r5, #12]
  404124:	f8ca 1014 	str.w	r1, [sl, #20]
  404128:	2a24      	cmp	r2, #36	; 0x24
  40412a:	d00c      	beq.n	404146 <_realloc_r+0x2f6>
  40412c:	3510      	adds	r5, #16
  40412e:	f10a 0218 	add.w	r2, sl, #24
  404132:	e7b9      	b.n	4040a8 <_realloc_r+0x258>
  404134:	692b      	ldr	r3, [r5, #16]
  404136:	6103      	str	r3, [r0, #16]
  404138:	696b      	ldr	r3, [r5, #20]
  40413a:	6143      	str	r3, [r0, #20]
  40413c:	f105 0218 	add.w	r2, r5, #24
  404140:	f100 0318 	add.w	r3, r0, #24
  404144:	e6cb      	b.n	403ede <_realloc_r+0x8e>
  404146:	692a      	ldr	r2, [r5, #16]
  404148:	f8ca 2018 	str.w	r2, [sl, #24]
  40414c:	696a      	ldr	r2, [r5, #20]
  40414e:	f8ca 201c 	str.w	r2, [sl, #28]
  404152:	3518      	adds	r5, #24
  404154:	f10a 0220 	add.w	r2, sl, #32
  404158:	e7a6      	b.n	4040a8 <_realloc_r+0x258>
  40415a:	4632      	mov	r2, r6
  40415c:	e77f      	b.n	40405e <_realloc_r+0x20e>
  40415e:	4629      	mov	r1, r5
  404160:	4630      	mov	r0, r6
  404162:	9301      	str	r3, [sp, #4]
  404164:	f7ff fe04 	bl	403d70 <memmove>
  404168:	9b01      	ldr	r3, [sp, #4]
  40416a:	e77e      	b.n	40406a <_realloc_r+0x21a>
  40416c:	68a9      	ldr	r1, [r5, #8]
  40416e:	f8ca 1010 	str.w	r1, [sl, #16]
  404172:	68e9      	ldr	r1, [r5, #12]
  404174:	f8ca 1014 	str.w	r1, [sl, #20]
  404178:	2a24      	cmp	r2, #36	; 0x24
  40417a:	d003      	beq.n	404184 <_realloc_r+0x334>
  40417c:	3510      	adds	r5, #16
  40417e:	f10a 0218 	add.w	r2, sl, #24
  404182:	e76c      	b.n	40405e <_realloc_r+0x20e>
  404184:	692a      	ldr	r2, [r5, #16]
  404186:	f8ca 2018 	str.w	r2, [sl, #24]
  40418a:	696a      	ldr	r2, [r5, #20]
  40418c:	f8ca 201c 	str.w	r2, [sl, #28]
  404190:	3518      	adds	r5, #24
  404192:	f10a 0220 	add.w	r2, sl, #32
  404196:	e762      	b.n	40405e <_realloc_r+0x20e>
  404198:	204005b0 	.word	0x204005b0

0040419c <_sbrk_r>:
  40419c:	b538      	push	{r3, r4, r5, lr}
  40419e:	4c07      	ldr	r4, [pc, #28]	; (4041bc <_sbrk_r+0x20>)
  4041a0:	2300      	movs	r3, #0
  4041a2:	4605      	mov	r5, r0
  4041a4:	4608      	mov	r0, r1
  4041a6:	6023      	str	r3, [r4, #0]
  4041a8:	f7fd f866 	bl	401278 <_sbrk>
  4041ac:	1c43      	adds	r3, r0, #1
  4041ae:	d000      	beq.n	4041b2 <_sbrk_r+0x16>
  4041b0:	bd38      	pop	{r3, r4, r5, pc}
  4041b2:	6823      	ldr	r3, [r4, #0]
  4041b4:	2b00      	cmp	r3, #0
  4041b6:	d0fb      	beq.n	4041b0 <_sbrk_r+0x14>
  4041b8:	602b      	str	r3, [r5, #0]
  4041ba:	bd38      	pop	{r3, r4, r5, pc}
  4041bc:	204014d0 	.word	0x204014d0

004041c0 <_raise_r>:
  4041c0:	291f      	cmp	r1, #31
  4041c2:	d828      	bhi.n	404216 <_raise_r+0x56>
  4041c4:	b520      	push	{r5, lr}
  4041c6:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
  4041ca:	b082      	sub	sp, #8
  4041cc:	4605      	mov	r5, r0
  4041ce:	b1aa      	cbz	r2, 4041fc <_raise_r+0x3c>
  4041d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  4041d4:	b193      	cbz	r3, 4041fc <_raise_r+0x3c>
  4041d6:	2b01      	cmp	r3, #1
  4041d8:	d00e      	beq.n	4041f8 <_raise_r+0x38>
  4041da:	1c58      	adds	r0, r3, #1
  4041dc:	d007      	beq.n	4041ee <_raise_r+0x2e>
  4041de:	2500      	movs	r5, #0
  4041e0:	4608      	mov	r0, r1
  4041e2:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  4041e6:	4798      	blx	r3
  4041e8:	4628      	mov	r0, r5
  4041ea:	b002      	add	sp, #8
  4041ec:	bd20      	pop	{r5, pc}
  4041ee:	2316      	movs	r3, #22
  4041f0:	2001      	movs	r0, #1
  4041f2:	602b      	str	r3, [r5, #0]
  4041f4:	b002      	add	sp, #8
  4041f6:	bd20      	pop	{r5, pc}
  4041f8:	2000      	movs	r0, #0
  4041fa:	e7f6      	b.n	4041ea <_raise_r+0x2a>
  4041fc:	4628      	mov	r0, r5
  4041fe:	9101      	str	r1, [sp, #4]
  404200:	f000 f82a 	bl	404258 <_getpid_r>
  404204:	9901      	ldr	r1, [sp, #4]
  404206:	460a      	mov	r2, r1
  404208:	4601      	mov	r1, r0
  40420a:	4628      	mov	r0, r5
  40420c:	b002      	add	sp, #8
  40420e:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
  404212:	f000 b80d 	b.w	404230 <_kill_r>
  404216:	2316      	movs	r3, #22
  404218:	6003      	str	r3, [r0, #0]
  40421a:	f04f 30ff 	mov.w	r0, #4294967295
  40421e:	4770      	bx	lr

00404220 <raise>:
  404220:	4b02      	ldr	r3, [pc, #8]	; (40422c <raise+0xc>)
  404222:	4601      	mov	r1, r0
  404224:	6818      	ldr	r0, [r3, #0]
  404226:	f7ff bfcb 	b.w	4041c0 <_raise_r>
  40422a:	bf00      	nop
  40422c:	20400014 	.word	0x20400014

00404230 <_kill_r>:
  404230:	b538      	push	{r3, r4, r5, lr}
  404232:	460b      	mov	r3, r1
  404234:	4c07      	ldr	r4, [pc, #28]	; (404254 <_kill_r+0x24>)
  404236:	4605      	mov	r5, r0
  404238:	4611      	mov	r1, r2
  40423a:	4618      	mov	r0, r3
  40423c:	2300      	movs	r3, #0
  40423e:	6023      	str	r3, [r4, #0]
  404240:	f7fd f844 	bl	4012cc <_kill>
  404244:	1c43      	adds	r3, r0, #1
  404246:	d000      	beq.n	40424a <_kill_r+0x1a>
  404248:	bd38      	pop	{r3, r4, r5, pc}
  40424a:	6823      	ldr	r3, [r4, #0]
  40424c:	2b00      	cmp	r3, #0
  40424e:	d0fb      	beq.n	404248 <_kill_r+0x18>
  404250:	602b      	str	r3, [r5, #0]
  404252:	bd38      	pop	{r3, r4, r5, pc}
  404254:	204014d0 	.word	0x204014d0

00404258 <_getpid_r>:
  404258:	f7fd b839 	b.w	4012ce <_getpid>

0040425c <__sread>:
  40425c:	b510      	push	{r4, lr}
  40425e:	460c      	mov	r4, r1
  404260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404264:	f000 fa72 	bl	40474c <_read_r>
  404268:	2800      	cmp	r0, #0
  40426a:	db03      	blt.n	404274 <__sread+0x18>
  40426c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40426e:	4403      	add	r3, r0
  404270:	6523      	str	r3, [r4, #80]	; 0x50
  404272:	bd10      	pop	{r4, pc}
  404274:	89a3      	ldrh	r3, [r4, #12]
  404276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40427a:	81a3      	strh	r3, [r4, #12]
  40427c:	bd10      	pop	{r4, pc}
  40427e:	bf00      	nop

00404280 <__swrite>:
  404280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404284:	4616      	mov	r6, r2
  404286:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40428a:	461f      	mov	r7, r3
  40428c:	05d3      	lsls	r3, r2, #23
  40428e:	460c      	mov	r4, r1
  404290:	4605      	mov	r5, r0
  404292:	d507      	bpl.n	4042a4 <__swrite+0x24>
  404294:	2200      	movs	r2, #0
  404296:	2302      	movs	r3, #2
  404298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40429c:	f000 fa40 	bl	404720 <_lseek_r>
  4042a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4042a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4042a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4042ac:	81a2      	strh	r2, [r4, #12]
  4042ae:	463b      	mov	r3, r7
  4042b0:	4632      	mov	r2, r6
  4042b2:	4628      	mov	r0, r5
  4042b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4042b8:	f000 b920 	b.w	4044fc <_write_r>

004042bc <__sseek>:
  4042bc:	b510      	push	{r4, lr}
  4042be:	460c      	mov	r4, r1
  4042c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4042c4:	f000 fa2c 	bl	404720 <_lseek_r>
  4042c8:	89a3      	ldrh	r3, [r4, #12]
  4042ca:	1c42      	adds	r2, r0, #1
  4042cc:	bf0e      	itee	eq
  4042ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4042d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4042d6:	6520      	strne	r0, [r4, #80]	; 0x50
  4042d8:	81a3      	strh	r3, [r4, #12]
  4042da:	bd10      	pop	{r4, pc}

004042dc <__sclose>:
  4042dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4042e0:	f000 b984 	b.w	4045ec <_close_r>
	...

00404300 <strlen>:
  404300:	f890 f000 	pld	[r0]
  404304:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404308:	f020 0107 	bic.w	r1, r0, #7
  40430c:	f06f 0c00 	mvn.w	ip, #0
  404310:	f010 0407 	ands.w	r4, r0, #7
  404314:	f891 f020 	pld	[r1, #32]
  404318:	f040 8049 	bne.w	4043ae <strlen+0xae>
  40431c:	f04f 0400 	mov.w	r4, #0
  404320:	f06f 0007 	mvn.w	r0, #7
  404324:	e9d1 2300 	ldrd	r2, r3, [r1]
  404328:	f891 f040 	pld	[r1, #64]	; 0x40
  40432c:	f100 0008 	add.w	r0, r0, #8
  404330:	fa82 f24c 	uadd8	r2, r2, ip
  404334:	faa4 f28c 	sel	r2, r4, ip
  404338:	fa83 f34c 	uadd8	r3, r3, ip
  40433c:	faa2 f38c 	sel	r3, r2, ip
  404340:	bb4b      	cbnz	r3, 404396 <strlen+0x96>
  404342:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404346:	fa82 f24c 	uadd8	r2, r2, ip
  40434a:	f100 0008 	add.w	r0, r0, #8
  40434e:	faa4 f28c 	sel	r2, r4, ip
  404352:	fa83 f34c 	uadd8	r3, r3, ip
  404356:	faa2 f38c 	sel	r3, r2, ip
  40435a:	b9e3      	cbnz	r3, 404396 <strlen+0x96>
  40435c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404360:	fa82 f24c 	uadd8	r2, r2, ip
  404364:	f100 0008 	add.w	r0, r0, #8
  404368:	faa4 f28c 	sel	r2, r4, ip
  40436c:	fa83 f34c 	uadd8	r3, r3, ip
  404370:	faa2 f38c 	sel	r3, r2, ip
  404374:	b97b      	cbnz	r3, 404396 <strlen+0x96>
  404376:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40437a:	f101 0120 	add.w	r1, r1, #32
  40437e:	fa82 f24c 	uadd8	r2, r2, ip
  404382:	f100 0008 	add.w	r0, r0, #8
  404386:	faa4 f28c 	sel	r2, r4, ip
  40438a:	fa83 f34c 	uadd8	r3, r3, ip
  40438e:	faa2 f38c 	sel	r3, r2, ip
  404392:	2b00      	cmp	r3, #0
  404394:	d0c6      	beq.n	404324 <strlen+0x24>
  404396:	2a00      	cmp	r2, #0
  404398:	bf04      	itt	eq
  40439a:	3004      	addeq	r0, #4
  40439c:	461a      	moveq	r2, r3
  40439e:	ba12      	rev	r2, r2
  4043a0:	fab2 f282 	clz	r2, r2
  4043a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4043a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4043ac:	4770      	bx	lr
  4043ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4043b2:	f004 0503 	and.w	r5, r4, #3
  4043b6:	f1c4 0000 	rsb	r0, r4, #0
  4043ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4043be:	f014 0f04 	tst.w	r4, #4
  4043c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4043c6:	fa0c f505 	lsl.w	r5, ip, r5
  4043ca:	ea62 0205 	orn	r2, r2, r5
  4043ce:	bf1c      	itt	ne
  4043d0:	ea63 0305 	ornne	r3, r3, r5
  4043d4:	4662      	movne	r2, ip
  4043d6:	f04f 0400 	mov.w	r4, #0
  4043da:	e7a9      	b.n	404330 <strlen+0x30>

004043dc <__swbuf_r>:
  4043dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4043de:	460d      	mov	r5, r1
  4043e0:	4614      	mov	r4, r2
  4043e2:	4606      	mov	r6, r0
  4043e4:	b110      	cbz	r0, 4043ec <__swbuf_r+0x10>
  4043e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4043e8:	2b00      	cmp	r3, #0
  4043ea:	d04b      	beq.n	404484 <__swbuf_r+0xa8>
  4043ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4043f0:	69a3      	ldr	r3, [r4, #24]
  4043f2:	60a3      	str	r3, [r4, #8]
  4043f4:	b291      	uxth	r1, r2
  4043f6:	0708      	lsls	r0, r1, #28
  4043f8:	d539      	bpl.n	40446e <__swbuf_r+0x92>
  4043fa:	6923      	ldr	r3, [r4, #16]
  4043fc:	2b00      	cmp	r3, #0
  4043fe:	d036      	beq.n	40446e <__swbuf_r+0x92>
  404400:	b2ed      	uxtb	r5, r5
  404402:	0489      	lsls	r1, r1, #18
  404404:	462f      	mov	r7, r5
  404406:	d515      	bpl.n	404434 <__swbuf_r+0x58>
  404408:	6822      	ldr	r2, [r4, #0]
  40440a:	6961      	ldr	r1, [r4, #20]
  40440c:	1ad3      	subs	r3, r2, r3
  40440e:	428b      	cmp	r3, r1
  404410:	da1c      	bge.n	40444c <__swbuf_r+0x70>
  404412:	3301      	adds	r3, #1
  404414:	68a1      	ldr	r1, [r4, #8]
  404416:	1c50      	adds	r0, r2, #1
  404418:	3901      	subs	r1, #1
  40441a:	60a1      	str	r1, [r4, #8]
  40441c:	6020      	str	r0, [r4, #0]
  40441e:	7015      	strb	r5, [r2, #0]
  404420:	6962      	ldr	r2, [r4, #20]
  404422:	429a      	cmp	r2, r3
  404424:	d01a      	beq.n	40445c <__swbuf_r+0x80>
  404426:	89a3      	ldrh	r3, [r4, #12]
  404428:	07db      	lsls	r3, r3, #31
  40442a:	d501      	bpl.n	404430 <__swbuf_r+0x54>
  40442c:	2d0a      	cmp	r5, #10
  40442e:	d015      	beq.n	40445c <__swbuf_r+0x80>
  404430:	4638      	mov	r0, r7
  404432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404434:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404436:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40443a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40443e:	81a2      	strh	r2, [r4, #12]
  404440:	6822      	ldr	r2, [r4, #0]
  404442:	6661      	str	r1, [r4, #100]	; 0x64
  404444:	6961      	ldr	r1, [r4, #20]
  404446:	1ad3      	subs	r3, r2, r3
  404448:	428b      	cmp	r3, r1
  40444a:	dbe2      	blt.n	404412 <__swbuf_r+0x36>
  40444c:	4621      	mov	r1, r4
  40444e:	4630      	mov	r0, r6
  404450:	f7fe fcdc 	bl	402e0c <_fflush_r>
  404454:	b940      	cbnz	r0, 404468 <__swbuf_r+0x8c>
  404456:	6822      	ldr	r2, [r4, #0]
  404458:	2301      	movs	r3, #1
  40445a:	e7db      	b.n	404414 <__swbuf_r+0x38>
  40445c:	4621      	mov	r1, r4
  40445e:	4630      	mov	r0, r6
  404460:	f7fe fcd4 	bl	402e0c <_fflush_r>
  404464:	2800      	cmp	r0, #0
  404466:	d0e3      	beq.n	404430 <__swbuf_r+0x54>
  404468:	f04f 37ff 	mov.w	r7, #4294967295
  40446c:	e7e0      	b.n	404430 <__swbuf_r+0x54>
  40446e:	4621      	mov	r1, r4
  404470:	4630      	mov	r0, r6
  404472:	f7fe fbaf 	bl	402bd4 <__swsetup_r>
  404476:	2800      	cmp	r0, #0
  404478:	d1f6      	bne.n	404468 <__swbuf_r+0x8c>
  40447a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40447e:	6923      	ldr	r3, [r4, #16]
  404480:	b291      	uxth	r1, r2
  404482:	e7bd      	b.n	404400 <__swbuf_r+0x24>
  404484:	f7fe fd1a 	bl	402ebc <__sinit>
  404488:	e7b0      	b.n	4043ec <__swbuf_r+0x10>
  40448a:	bf00      	nop

0040448c <_wcrtomb_r>:
  40448c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40448e:	4606      	mov	r6, r0
  404490:	b085      	sub	sp, #20
  404492:	461f      	mov	r7, r3
  404494:	b189      	cbz	r1, 4044ba <_wcrtomb_r+0x2e>
  404496:	4c10      	ldr	r4, [pc, #64]	; (4044d8 <_wcrtomb_r+0x4c>)
  404498:	4d10      	ldr	r5, [pc, #64]	; (4044dc <_wcrtomb_r+0x50>)
  40449a:	6824      	ldr	r4, [r4, #0]
  40449c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40449e:	2c00      	cmp	r4, #0
  4044a0:	bf08      	it	eq
  4044a2:	462c      	moveq	r4, r5
  4044a4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4044a8:	47a0      	blx	r4
  4044aa:	1c43      	adds	r3, r0, #1
  4044ac:	d103      	bne.n	4044b6 <_wcrtomb_r+0x2a>
  4044ae:	2200      	movs	r2, #0
  4044b0:	238a      	movs	r3, #138	; 0x8a
  4044b2:	603a      	str	r2, [r7, #0]
  4044b4:	6033      	str	r3, [r6, #0]
  4044b6:	b005      	add	sp, #20
  4044b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4044ba:	460c      	mov	r4, r1
  4044bc:	4906      	ldr	r1, [pc, #24]	; (4044d8 <_wcrtomb_r+0x4c>)
  4044be:	4a07      	ldr	r2, [pc, #28]	; (4044dc <_wcrtomb_r+0x50>)
  4044c0:	6809      	ldr	r1, [r1, #0]
  4044c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4044c4:	2900      	cmp	r1, #0
  4044c6:	bf08      	it	eq
  4044c8:	4611      	moveq	r1, r2
  4044ca:	4622      	mov	r2, r4
  4044cc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4044d0:	a901      	add	r1, sp, #4
  4044d2:	47a0      	blx	r4
  4044d4:	e7e9      	b.n	4044aa <_wcrtomb_r+0x1e>
  4044d6:	bf00      	nop
  4044d8:	20400014 	.word	0x20400014
  4044dc:	20400444 	.word	0x20400444

004044e0 <__ascii_wctomb>:
  4044e0:	b121      	cbz	r1, 4044ec <__ascii_wctomb+0xc>
  4044e2:	2aff      	cmp	r2, #255	; 0xff
  4044e4:	d804      	bhi.n	4044f0 <__ascii_wctomb+0x10>
  4044e6:	700a      	strb	r2, [r1, #0]
  4044e8:	2001      	movs	r0, #1
  4044ea:	4770      	bx	lr
  4044ec:	4608      	mov	r0, r1
  4044ee:	4770      	bx	lr
  4044f0:	238a      	movs	r3, #138	; 0x8a
  4044f2:	6003      	str	r3, [r0, #0]
  4044f4:	f04f 30ff 	mov.w	r0, #4294967295
  4044f8:	4770      	bx	lr
  4044fa:	bf00      	nop

004044fc <_write_r>:
  4044fc:	b570      	push	{r4, r5, r6, lr}
  4044fe:	460d      	mov	r5, r1
  404500:	4c08      	ldr	r4, [pc, #32]	; (404524 <_write_r+0x28>)
  404502:	4611      	mov	r1, r2
  404504:	4606      	mov	r6, r0
  404506:	461a      	mov	r2, r3
  404508:	4628      	mov	r0, r5
  40450a:	2300      	movs	r3, #0
  40450c:	6023      	str	r3, [r4, #0]
  40450e:	f7fc f891 	bl	400634 <_write>
  404512:	1c43      	adds	r3, r0, #1
  404514:	d000      	beq.n	404518 <_write_r+0x1c>
  404516:	bd70      	pop	{r4, r5, r6, pc}
  404518:	6823      	ldr	r3, [r4, #0]
  40451a:	2b00      	cmp	r3, #0
  40451c:	d0fb      	beq.n	404516 <_write_r+0x1a>
  40451e:	6033      	str	r3, [r6, #0]
  404520:	bd70      	pop	{r4, r5, r6, pc}
  404522:	bf00      	nop
  404524:	204014d0 	.word	0x204014d0

00404528 <__register_exitproc>:
  404528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40452c:	4d2c      	ldr	r5, [pc, #176]	; (4045e0 <__register_exitproc+0xb8>)
  40452e:	4606      	mov	r6, r0
  404530:	6828      	ldr	r0, [r5, #0]
  404532:	4698      	mov	r8, r3
  404534:	460f      	mov	r7, r1
  404536:	4691      	mov	r9, r2
  404538:	f7ff f880 	bl	40363c <__retarget_lock_acquire_recursive>
  40453c:	4b29      	ldr	r3, [pc, #164]	; (4045e4 <__register_exitproc+0xbc>)
  40453e:	681c      	ldr	r4, [r3, #0]
  404540:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  404544:	2b00      	cmp	r3, #0
  404546:	d03e      	beq.n	4045c6 <__register_exitproc+0x9e>
  404548:	685a      	ldr	r2, [r3, #4]
  40454a:	2a1f      	cmp	r2, #31
  40454c:	dc1c      	bgt.n	404588 <__register_exitproc+0x60>
  40454e:	f102 0e01 	add.w	lr, r2, #1
  404552:	b176      	cbz	r6, 404572 <__register_exitproc+0x4a>
  404554:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  404558:	2401      	movs	r4, #1
  40455a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40455e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  404562:	4094      	lsls	r4, r2
  404564:	4320      	orrs	r0, r4
  404566:	2e02      	cmp	r6, #2
  404568:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40456c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  404570:	d023      	beq.n	4045ba <__register_exitproc+0x92>
  404572:	3202      	adds	r2, #2
  404574:	f8c3 e004 	str.w	lr, [r3, #4]
  404578:	6828      	ldr	r0, [r5, #0]
  40457a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40457e:	f7ff f85f 	bl	403640 <__retarget_lock_release_recursive>
  404582:	2000      	movs	r0, #0
  404584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404588:	4b17      	ldr	r3, [pc, #92]	; (4045e8 <__register_exitproc+0xc0>)
  40458a:	b30b      	cbz	r3, 4045d0 <__register_exitproc+0xa8>
  40458c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  404590:	f7ff f8d0 	bl	403734 <malloc>
  404594:	4603      	mov	r3, r0
  404596:	b1d8      	cbz	r0, 4045d0 <__register_exitproc+0xa8>
  404598:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40459c:	6002      	str	r2, [r0, #0]
  40459e:	2100      	movs	r1, #0
  4045a0:	6041      	str	r1, [r0, #4]
  4045a2:	460a      	mov	r2, r1
  4045a4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4045a8:	f04f 0e01 	mov.w	lr, #1
  4045ac:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4045b0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4045b4:	2e00      	cmp	r6, #0
  4045b6:	d0dc      	beq.n	404572 <__register_exitproc+0x4a>
  4045b8:	e7cc      	b.n	404554 <__register_exitproc+0x2c>
  4045ba:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4045be:	430c      	orrs	r4, r1
  4045c0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4045c4:	e7d5      	b.n	404572 <__register_exitproc+0x4a>
  4045c6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4045ca:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4045ce:	e7bb      	b.n	404548 <__register_exitproc+0x20>
  4045d0:	6828      	ldr	r0, [r5, #0]
  4045d2:	f7ff f835 	bl	403640 <__retarget_lock_release_recursive>
  4045d6:	f04f 30ff 	mov.w	r0, #4294967295
  4045da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4045de:	bf00      	nop
  4045e0:	20400440 	.word	0x20400440
  4045e4:	00404fc8 	.word	0x00404fc8
  4045e8:	00403735 	.word	0x00403735

004045ec <_close_r>:
  4045ec:	b538      	push	{r3, r4, r5, lr}
  4045ee:	4c07      	ldr	r4, [pc, #28]	; (40460c <_close_r+0x20>)
  4045f0:	2300      	movs	r3, #0
  4045f2:	4605      	mov	r5, r0
  4045f4:	4608      	mov	r0, r1
  4045f6:	6023      	str	r3, [r4, #0]
  4045f8:	f7fc fe5a 	bl	4012b0 <_close>
  4045fc:	1c43      	adds	r3, r0, #1
  4045fe:	d000      	beq.n	404602 <_close_r+0x16>
  404600:	bd38      	pop	{r3, r4, r5, pc}
  404602:	6823      	ldr	r3, [r4, #0]
  404604:	2b00      	cmp	r3, #0
  404606:	d0fb      	beq.n	404600 <_close_r+0x14>
  404608:	602b      	str	r3, [r5, #0]
  40460a:	bd38      	pop	{r3, r4, r5, pc}
  40460c:	204014d0 	.word	0x204014d0

00404610 <_fclose_r>:
  404610:	b570      	push	{r4, r5, r6, lr}
  404612:	b159      	cbz	r1, 40462c <_fclose_r+0x1c>
  404614:	4605      	mov	r5, r0
  404616:	460c      	mov	r4, r1
  404618:	b110      	cbz	r0, 404620 <_fclose_r+0x10>
  40461a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40461c:	2b00      	cmp	r3, #0
  40461e:	d03c      	beq.n	40469a <_fclose_r+0x8a>
  404620:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404622:	07d8      	lsls	r0, r3, #31
  404624:	d505      	bpl.n	404632 <_fclose_r+0x22>
  404626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40462a:	b92b      	cbnz	r3, 404638 <_fclose_r+0x28>
  40462c:	2600      	movs	r6, #0
  40462e:	4630      	mov	r0, r6
  404630:	bd70      	pop	{r4, r5, r6, pc}
  404632:	89a3      	ldrh	r3, [r4, #12]
  404634:	0599      	lsls	r1, r3, #22
  404636:	d53c      	bpl.n	4046b2 <_fclose_r+0xa2>
  404638:	4621      	mov	r1, r4
  40463a:	4628      	mov	r0, r5
  40463c:	f7fe fb46 	bl	402ccc <__sflush_r>
  404640:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404642:	4606      	mov	r6, r0
  404644:	b133      	cbz	r3, 404654 <_fclose_r+0x44>
  404646:	69e1      	ldr	r1, [r4, #28]
  404648:	4628      	mov	r0, r5
  40464a:	4798      	blx	r3
  40464c:	2800      	cmp	r0, #0
  40464e:	bfb8      	it	lt
  404650:	f04f 36ff 	movlt.w	r6, #4294967295
  404654:	89a3      	ldrh	r3, [r4, #12]
  404656:	061a      	lsls	r2, r3, #24
  404658:	d422      	bmi.n	4046a0 <_fclose_r+0x90>
  40465a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40465c:	b141      	cbz	r1, 404670 <_fclose_r+0x60>
  40465e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404662:	4299      	cmp	r1, r3
  404664:	d002      	beq.n	40466c <_fclose_r+0x5c>
  404666:	4628      	mov	r0, r5
  404668:	f7fe fd4e 	bl	403108 <_free_r>
  40466c:	2300      	movs	r3, #0
  40466e:	6323      	str	r3, [r4, #48]	; 0x30
  404670:	6c61      	ldr	r1, [r4, #68]	; 0x44
  404672:	b121      	cbz	r1, 40467e <_fclose_r+0x6e>
  404674:	4628      	mov	r0, r5
  404676:	f7fe fd47 	bl	403108 <_free_r>
  40467a:	2300      	movs	r3, #0
  40467c:	6463      	str	r3, [r4, #68]	; 0x44
  40467e:	f7fe fc49 	bl	402f14 <__sfp_lock_acquire>
  404682:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404684:	2200      	movs	r2, #0
  404686:	07db      	lsls	r3, r3, #31
  404688:	81a2      	strh	r2, [r4, #12]
  40468a:	d50e      	bpl.n	4046aa <_fclose_r+0x9a>
  40468c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40468e:	f7fe ffd3 	bl	403638 <__retarget_lock_close_recursive>
  404692:	f7fe fc45 	bl	402f20 <__sfp_lock_release>
  404696:	4630      	mov	r0, r6
  404698:	bd70      	pop	{r4, r5, r6, pc}
  40469a:	f7fe fc0f 	bl	402ebc <__sinit>
  40469e:	e7bf      	b.n	404620 <_fclose_r+0x10>
  4046a0:	6921      	ldr	r1, [r4, #16]
  4046a2:	4628      	mov	r0, r5
  4046a4:	f7fe fd30 	bl	403108 <_free_r>
  4046a8:	e7d7      	b.n	40465a <_fclose_r+0x4a>
  4046aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4046ac:	f7fe ffc8 	bl	403640 <__retarget_lock_release_recursive>
  4046b0:	e7ec      	b.n	40468c <_fclose_r+0x7c>
  4046b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4046b4:	f7fe ffc2 	bl	40363c <__retarget_lock_acquire_recursive>
  4046b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4046bc:	2b00      	cmp	r3, #0
  4046be:	d1bb      	bne.n	404638 <_fclose_r+0x28>
  4046c0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4046c2:	f016 0601 	ands.w	r6, r6, #1
  4046c6:	d1b1      	bne.n	40462c <_fclose_r+0x1c>
  4046c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4046ca:	f7fe ffb9 	bl	403640 <__retarget_lock_release_recursive>
  4046ce:	4630      	mov	r0, r6
  4046d0:	bd70      	pop	{r4, r5, r6, pc}
  4046d2:	bf00      	nop

004046d4 <_fstat_r>:
  4046d4:	b538      	push	{r3, r4, r5, lr}
  4046d6:	460b      	mov	r3, r1
  4046d8:	4c07      	ldr	r4, [pc, #28]	; (4046f8 <_fstat_r+0x24>)
  4046da:	4605      	mov	r5, r0
  4046dc:	4611      	mov	r1, r2
  4046de:	4618      	mov	r0, r3
  4046e0:	2300      	movs	r3, #0
  4046e2:	6023      	str	r3, [r4, #0]
  4046e4:	f7fc fde7 	bl	4012b6 <_fstat>
  4046e8:	1c43      	adds	r3, r0, #1
  4046ea:	d000      	beq.n	4046ee <_fstat_r+0x1a>
  4046ec:	bd38      	pop	{r3, r4, r5, pc}
  4046ee:	6823      	ldr	r3, [r4, #0]
  4046f0:	2b00      	cmp	r3, #0
  4046f2:	d0fb      	beq.n	4046ec <_fstat_r+0x18>
  4046f4:	602b      	str	r3, [r5, #0]
  4046f6:	bd38      	pop	{r3, r4, r5, pc}
  4046f8:	204014d0 	.word	0x204014d0

004046fc <_isatty_r>:
  4046fc:	b538      	push	{r3, r4, r5, lr}
  4046fe:	4c07      	ldr	r4, [pc, #28]	; (40471c <_isatty_r+0x20>)
  404700:	2300      	movs	r3, #0
  404702:	4605      	mov	r5, r0
  404704:	4608      	mov	r0, r1
  404706:	6023      	str	r3, [r4, #0]
  404708:	f7fc fdda 	bl	4012c0 <_isatty>
  40470c:	1c43      	adds	r3, r0, #1
  40470e:	d000      	beq.n	404712 <_isatty_r+0x16>
  404710:	bd38      	pop	{r3, r4, r5, pc}
  404712:	6823      	ldr	r3, [r4, #0]
  404714:	2b00      	cmp	r3, #0
  404716:	d0fb      	beq.n	404710 <_isatty_r+0x14>
  404718:	602b      	str	r3, [r5, #0]
  40471a:	bd38      	pop	{r3, r4, r5, pc}
  40471c:	204014d0 	.word	0x204014d0

00404720 <_lseek_r>:
  404720:	b570      	push	{r4, r5, r6, lr}
  404722:	460d      	mov	r5, r1
  404724:	4c08      	ldr	r4, [pc, #32]	; (404748 <_lseek_r+0x28>)
  404726:	4611      	mov	r1, r2
  404728:	4606      	mov	r6, r0
  40472a:	461a      	mov	r2, r3
  40472c:	4628      	mov	r0, r5
  40472e:	2300      	movs	r3, #0
  404730:	6023      	str	r3, [r4, #0]
  404732:	f7fc fdc7 	bl	4012c4 <_lseek>
  404736:	1c43      	adds	r3, r0, #1
  404738:	d000      	beq.n	40473c <_lseek_r+0x1c>
  40473a:	bd70      	pop	{r4, r5, r6, pc}
  40473c:	6823      	ldr	r3, [r4, #0]
  40473e:	2b00      	cmp	r3, #0
  404740:	d0fb      	beq.n	40473a <_lseek_r+0x1a>
  404742:	6033      	str	r3, [r6, #0]
  404744:	bd70      	pop	{r4, r5, r6, pc}
  404746:	bf00      	nop
  404748:	204014d0 	.word	0x204014d0

0040474c <_read_r>:
  40474c:	b570      	push	{r4, r5, r6, lr}
  40474e:	460d      	mov	r5, r1
  404750:	4c08      	ldr	r4, [pc, #32]	; (404774 <_read_r+0x28>)
  404752:	4611      	mov	r1, r2
  404754:	4606      	mov	r6, r0
  404756:	461a      	mov	r2, r3
  404758:	4628      	mov	r0, r5
  40475a:	2300      	movs	r3, #0
  40475c:	6023      	str	r3, [r4, #0]
  40475e:	f7fb ff4b 	bl	4005f8 <_read>
  404762:	1c43      	adds	r3, r0, #1
  404764:	d000      	beq.n	404768 <_read_r+0x1c>
  404766:	bd70      	pop	{r4, r5, r6, pc}
  404768:	6823      	ldr	r3, [r4, #0]
  40476a:	2b00      	cmp	r3, #0
  40476c:	d0fb      	beq.n	404766 <_read_r+0x1a>
  40476e:	6033      	str	r3, [r6, #0]
  404770:	bd70      	pop	{r4, r5, r6, pc}
  404772:	bf00      	nop
  404774:	204014d0 	.word	0x204014d0

00404778 <__aeabi_uldivmod>:
  404778:	b953      	cbnz	r3, 404790 <__aeabi_uldivmod+0x18>
  40477a:	b94a      	cbnz	r2, 404790 <__aeabi_uldivmod+0x18>
  40477c:	2900      	cmp	r1, #0
  40477e:	bf08      	it	eq
  404780:	2800      	cmpeq	r0, #0
  404782:	bf1c      	itt	ne
  404784:	f04f 31ff 	movne.w	r1, #4294967295
  404788:	f04f 30ff 	movne.w	r0, #4294967295
  40478c:	f000 b97a 	b.w	404a84 <__aeabi_idiv0>
  404790:	f1ad 0c08 	sub.w	ip, sp, #8
  404794:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404798:	f000 f806 	bl	4047a8 <__udivmoddi4>
  40479c:	f8dd e004 	ldr.w	lr, [sp, #4]
  4047a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4047a4:	b004      	add	sp, #16
  4047a6:	4770      	bx	lr

004047a8 <__udivmoddi4>:
  4047a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4047ac:	468c      	mov	ip, r1
  4047ae:	460d      	mov	r5, r1
  4047b0:	4604      	mov	r4, r0
  4047b2:	9e08      	ldr	r6, [sp, #32]
  4047b4:	2b00      	cmp	r3, #0
  4047b6:	d151      	bne.n	40485c <__udivmoddi4+0xb4>
  4047b8:	428a      	cmp	r2, r1
  4047ba:	4617      	mov	r7, r2
  4047bc:	d96d      	bls.n	40489a <__udivmoddi4+0xf2>
  4047be:	fab2 fe82 	clz	lr, r2
  4047c2:	f1be 0f00 	cmp.w	lr, #0
  4047c6:	d00b      	beq.n	4047e0 <__udivmoddi4+0x38>
  4047c8:	f1ce 0c20 	rsb	ip, lr, #32
  4047cc:	fa01 f50e 	lsl.w	r5, r1, lr
  4047d0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4047d4:	fa02 f70e 	lsl.w	r7, r2, lr
  4047d8:	ea4c 0c05 	orr.w	ip, ip, r5
  4047dc:	fa00 f40e 	lsl.w	r4, r0, lr
  4047e0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4047e4:	0c25      	lsrs	r5, r4, #16
  4047e6:	fbbc f8fa 	udiv	r8, ip, sl
  4047ea:	fa1f f987 	uxth.w	r9, r7
  4047ee:	fb0a cc18 	mls	ip, sl, r8, ip
  4047f2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4047f6:	fb08 f309 	mul.w	r3, r8, r9
  4047fa:	42ab      	cmp	r3, r5
  4047fc:	d90a      	bls.n	404814 <__udivmoddi4+0x6c>
  4047fe:	19ed      	adds	r5, r5, r7
  404800:	f108 32ff 	add.w	r2, r8, #4294967295
  404804:	f080 8123 	bcs.w	404a4e <__udivmoddi4+0x2a6>
  404808:	42ab      	cmp	r3, r5
  40480a:	f240 8120 	bls.w	404a4e <__udivmoddi4+0x2a6>
  40480e:	f1a8 0802 	sub.w	r8, r8, #2
  404812:	443d      	add	r5, r7
  404814:	1aed      	subs	r5, r5, r3
  404816:	b2a4      	uxth	r4, r4
  404818:	fbb5 f0fa 	udiv	r0, r5, sl
  40481c:	fb0a 5510 	mls	r5, sl, r0, r5
  404820:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  404824:	fb00 f909 	mul.w	r9, r0, r9
  404828:	45a1      	cmp	r9, r4
  40482a:	d909      	bls.n	404840 <__udivmoddi4+0x98>
  40482c:	19e4      	adds	r4, r4, r7
  40482e:	f100 33ff 	add.w	r3, r0, #4294967295
  404832:	f080 810a 	bcs.w	404a4a <__udivmoddi4+0x2a2>
  404836:	45a1      	cmp	r9, r4
  404838:	f240 8107 	bls.w	404a4a <__udivmoddi4+0x2a2>
  40483c:	3802      	subs	r0, #2
  40483e:	443c      	add	r4, r7
  404840:	eba4 0409 	sub.w	r4, r4, r9
  404844:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  404848:	2100      	movs	r1, #0
  40484a:	2e00      	cmp	r6, #0
  40484c:	d061      	beq.n	404912 <__udivmoddi4+0x16a>
  40484e:	fa24 f40e 	lsr.w	r4, r4, lr
  404852:	2300      	movs	r3, #0
  404854:	6034      	str	r4, [r6, #0]
  404856:	6073      	str	r3, [r6, #4]
  404858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40485c:	428b      	cmp	r3, r1
  40485e:	d907      	bls.n	404870 <__udivmoddi4+0xc8>
  404860:	2e00      	cmp	r6, #0
  404862:	d054      	beq.n	40490e <__udivmoddi4+0x166>
  404864:	2100      	movs	r1, #0
  404866:	e886 0021 	stmia.w	r6, {r0, r5}
  40486a:	4608      	mov	r0, r1
  40486c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404870:	fab3 f183 	clz	r1, r3
  404874:	2900      	cmp	r1, #0
  404876:	f040 808e 	bne.w	404996 <__udivmoddi4+0x1ee>
  40487a:	42ab      	cmp	r3, r5
  40487c:	d302      	bcc.n	404884 <__udivmoddi4+0xdc>
  40487e:	4282      	cmp	r2, r0
  404880:	f200 80fa 	bhi.w	404a78 <__udivmoddi4+0x2d0>
  404884:	1a84      	subs	r4, r0, r2
  404886:	eb65 0503 	sbc.w	r5, r5, r3
  40488a:	2001      	movs	r0, #1
  40488c:	46ac      	mov	ip, r5
  40488e:	2e00      	cmp	r6, #0
  404890:	d03f      	beq.n	404912 <__udivmoddi4+0x16a>
  404892:	e886 1010 	stmia.w	r6, {r4, ip}
  404896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40489a:	b912      	cbnz	r2, 4048a2 <__udivmoddi4+0xfa>
  40489c:	2701      	movs	r7, #1
  40489e:	fbb7 f7f2 	udiv	r7, r7, r2
  4048a2:	fab7 fe87 	clz	lr, r7
  4048a6:	f1be 0f00 	cmp.w	lr, #0
  4048aa:	d134      	bne.n	404916 <__udivmoddi4+0x16e>
  4048ac:	1beb      	subs	r3, r5, r7
  4048ae:	0c3a      	lsrs	r2, r7, #16
  4048b0:	fa1f fc87 	uxth.w	ip, r7
  4048b4:	2101      	movs	r1, #1
  4048b6:	fbb3 f8f2 	udiv	r8, r3, r2
  4048ba:	0c25      	lsrs	r5, r4, #16
  4048bc:	fb02 3318 	mls	r3, r2, r8, r3
  4048c0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4048c4:	fb0c f308 	mul.w	r3, ip, r8
  4048c8:	42ab      	cmp	r3, r5
  4048ca:	d907      	bls.n	4048dc <__udivmoddi4+0x134>
  4048cc:	19ed      	adds	r5, r5, r7
  4048ce:	f108 30ff 	add.w	r0, r8, #4294967295
  4048d2:	d202      	bcs.n	4048da <__udivmoddi4+0x132>
  4048d4:	42ab      	cmp	r3, r5
  4048d6:	f200 80d1 	bhi.w	404a7c <__udivmoddi4+0x2d4>
  4048da:	4680      	mov	r8, r0
  4048dc:	1aed      	subs	r5, r5, r3
  4048de:	b2a3      	uxth	r3, r4
  4048e0:	fbb5 f0f2 	udiv	r0, r5, r2
  4048e4:	fb02 5510 	mls	r5, r2, r0, r5
  4048e8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4048ec:	fb0c fc00 	mul.w	ip, ip, r0
  4048f0:	45a4      	cmp	ip, r4
  4048f2:	d907      	bls.n	404904 <__udivmoddi4+0x15c>
  4048f4:	19e4      	adds	r4, r4, r7
  4048f6:	f100 33ff 	add.w	r3, r0, #4294967295
  4048fa:	d202      	bcs.n	404902 <__udivmoddi4+0x15a>
  4048fc:	45a4      	cmp	ip, r4
  4048fe:	f200 80b8 	bhi.w	404a72 <__udivmoddi4+0x2ca>
  404902:	4618      	mov	r0, r3
  404904:	eba4 040c 	sub.w	r4, r4, ip
  404908:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40490c:	e79d      	b.n	40484a <__udivmoddi4+0xa2>
  40490e:	4631      	mov	r1, r6
  404910:	4630      	mov	r0, r6
  404912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404916:	f1ce 0420 	rsb	r4, lr, #32
  40491a:	fa05 f30e 	lsl.w	r3, r5, lr
  40491e:	fa07 f70e 	lsl.w	r7, r7, lr
  404922:	fa20 f804 	lsr.w	r8, r0, r4
  404926:	0c3a      	lsrs	r2, r7, #16
  404928:	fa25 f404 	lsr.w	r4, r5, r4
  40492c:	ea48 0803 	orr.w	r8, r8, r3
  404930:	fbb4 f1f2 	udiv	r1, r4, r2
  404934:	ea4f 4518 	mov.w	r5, r8, lsr #16
  404938:	fb02 4411 	mls	r4, r2, r1, r4
  40493c:	fa1f fc87 	uxth.w	ip, r7
  404940:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  404944:	fb01 f30c 	mul.w	r3, r1, ip
  404948:	42ab      	cmp	r3, r5
  40494a:	fa00 f40e 	lsl.w	r4, r0, lr
  40494e:	d909      	bls.n	404964 <__udivmoddi4+0x1bc>
  404950:	19ed      	adds	r5, r5, r7
  404952:	f101 30ff 	add.w	r0, r1, #4294967295
  404956:	f080 808a 	bcs.w	404a6e <__udivmoddi4+0x2c6>
  40495a:	42ab      	cmp	r3, r5
  40495c:	f240 8087 	bls.w	404a6e <__udivmoddi4+0x2c6>
  404960:	3902      	subs	r1, #2
  404962:	443d      	add	r5, r7
  404964:	1aeb      	subs	r3, r5, r3
  404966:	fa1f f588 	uxth.w	r5, r8
  40496a:	fbb3 f0f2 	udiv	r0, r3, r2
  40496e:	fb02 3310 	mls	r3, r2, r0, r3
  404972:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404976:	fb00 f30c 	mul.w	r3, r0, ip
  40497a:	42ab      	cmp	r3, r5
  40497c:	d907      	bls.n	40498e <__udivmoddi4+0x1e6>
  40497e:	19ed      	adds	r5, r5, r7
  404980:	f100 38ff 	add.w	r8, r0, #4294967295
  404984:	d26f      	bcs.n	404a66 <__udivmoddi4+0x2be>
  404986:	42ab      	cmp	r3, r5
  404988:	d96d      	bls.n	404a66 <__udivmoddi4+0x2be>
  40498a:	3802      	subs	r0, #2
  40498c:	443d      	add	r5, r7
  40498e:	1aeb      	subs	r3, r5, r3
  404990:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  404994:	e78f      	b.n	4048b6 <__udivmoddi4+0x10e>
  404996:	f1c1 0720 	rsb	r7, r1, #32
  40499a:	fa22 f807 	lsr.w	r8, r2, r7
  40499e:	408b      	lsls	r3, r1
  4049a0:	fa05 f401 	lsl.w	r4, r5, r1
  4049a4:	ea48 0303 	orr.w	r3, r8, r3
  4049a8:	fa20 fe07 	lsr.w	lr, r0, r7
  4049ac:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4049b0:	40fd      	lsrs	r5, r7
  4049b2:	ea4e 0e04 	orr.w	lr, lr, r4
  4049b6:	fbb5 f9fc 	udiv	r9, r5, ip
  4049ba:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4049be:	fb0c 5519 	mls	r5, ip, r9, r5
  4049c2:	fa1f f883 	uxth.w	r8, r3
  4049c6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4049ca:	fb09 f408 	mul.w	r4, r9, r8
  4049ce:	42ac      	cmp	r4, r5
  4049d0:	fa02 f201 	lsl.w	r2, r2, r1
  4049d4:	fa00 fa01 	lsl.w	sl, r0, r1
  4049d8:	d908      	bls.n	4049ec <__udivmoddi4+0x244>
  4049da:	18ed      	adds	r5, r5, r3
  4049dc:	f109 30ff 	add.w	r0, r9, #4294967295
  4049e0:	d243      	bcs.n	404a6a <__udivmoddi4+0x2c2>
  4049e2:	42ac      	cmp	r4, r5
  4049e4:	d941      	bls.n	404a6a <__udivmoddi4+0x2c2>
  4049e6:	f1a9 0902 	sub.w	r9, r9, #2
  4049ea:	441d      	add	r5, r3
  4049ec:	1b2d      	subs	r5, r5, r4
  4049ee:	fa1f fe8e 	uxth.w	lr, lr
  4049f2:	fbb5 f0fc 	udiv	r0, r5, ip
  4049f6:	fb0c 5510 	mls	r5, ip, r0, r5
  4049fa:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4049fe:	fb00 f808 	mul.w	r8, r0, r8
  404a02:	45a0      	cmp	r8, r4
  404a04:	d907      	bls.n	404a16 <__udivmoddi4+0x26e>
  404a06:	18e4      	adds	r4, r4, r3
  404a08:	f100 35ff 	add.w	r5, r0, #4294967295
  404a0c:	d229      	bcs.n	404a62 <__udivmoddi4+0x2ba>
  404a0e:	45a0      	cmp	r8, r4
  404a10:	d927      	bls.n	404a62 <__udivmoddi4+0x2ba>
  404a12:	3802      	subs	r0, #2
  404a14:	441c      	add	r4, r3
  404a16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  404a1a:	eba4 0408 	sub.w	r4, r4, r8
  404a1e:	fba0 8902 	umull	r8, r9, r0, r2
  404a22:	454c      	cmp	r4, r9
  404a24:	46c6      	mov	lr, r8
  404a26:	464d      	mov	r5, r9
  404a28:	d315      	bcc.n	404a56 <__udivmoddi4+0x2ae>
  404a2a:	d012      	beq.n	404a52 <__udivmoddi4+0x2aa>
  404a2c:	b156      	cbz	r6, 404a44 <__udivmoddi4+0x29c>
  404a2e:	ebba 030e 	subs.w	r3, sl, lr
  404a32:	eb64 0405 	sbc.w	r4, r4, r5
  404a36:	fa04 f707 	lsl.w	r7, r4, r7
  404a3a:	40cb      	lsrs	r3, r1
  404a3c:	431f      	orrs	r7, r3
  404a3e:	40cc      	lsrs	r4, r1
  404a40:	6037      	str	r7, [r6, #0]
  404a42:	6074      	str	r4, [r6, #4]
  404a44:	2100      	movs	r1, #0
  404a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404a4a:	4618      	mov	r0, r3
  404a4c:	e6f8      	b.n	404840 <__udivmoddi4+0x98>
  404a4e:	4690      	mov	r8, r2
  404a50:	e6e0      	b.n	404814 <__udivmoddi4+0x6c>
  404a52:	45c2      	cmp	sl, r8
  404a54:	d2ea      	bcs.n	404a2c <__udivmoddi4+0x284>
  404a56:	ebb8 0e02 	subs.w	lr, r8, r2
  404a5a:	eb69 0503 	sbc.w	r5, r9, r3
  404a5e:	3801      	subs	r0, #1
  404a60:	e7e4      	b.n	404a2c <__udivmoddi4+0x284>
  404a62:	4628      	mov	r0, r5
  404a64:	e7d7      	b.n	404a16 <__udivmoddi4+0x26e>
  404a66:	4640      	mov	r0, r8
  404a68:	e791      	b.n	40498e <__udivmoddi4+0x1e6>
  404a6a:	4681      	mov	r9, r0
  404a6c:	e7be      	b.n	4049ec <__udivmoddi4+0x244>
  404a6e:	4601      	mov	r1, r0
  404a70:	e778      	b.n	404964 <__udivmoddi4+0x1bc>
  404a72:	3802      	subs	r0, #2
  404a74:	443c      	add	r4, r7
  404a76:	e745      	b.n	404904 <__udivmoddi4+0x15c>
  404a78:	4608      	mov	r0, r1
  404a7a:	e708      	b.n	40488e <__udivmoddi4+0xe6>
  404a7c:	f1a8 0802 	sub.w	r8, r8, #2
  404a80:	443d      	add	r5, r7
  404a82:	e72b      	b.n	4048dc <__udivmoddi4+0x134>

00404a84 <__aeabi_idiv0>:
  404a84:	4770      	bx	lr
  404a86:	bf00      	nop

00404a88 <__func__.5836>:
  404a88:	6262 705f 726f 5f74 6573 5f74 6164 6174     bb_port_set_data
  404a98:	645f 7269 6365 3174 0036 0000               _direct16...

00404aa4 <__func__.5845>:
  404aa4:	6262 705f 726f 5f74 6573 5f74 6164 6174     bb_port_set_data
  404ab4:	645f 7269 6365 3374 0032 0000               _direct32...

00404ac0 <__func__.5868>:
  404ac0:	6262 705f 726f 5f74 6567 5f74 6164 6174     bb_port_get_data
  404ad0:	645f 7269 6365 3374 0032 0000 6228 7479     _direct32...(byt
  404ae0:	4f65 6666 6573 4974 576e 726f 2064 2025     eOffsetInWord % 
  404af0:	5532 2029 3d3d 3020 0000 0000 2e2e 622f     2U) == 0....../b
  404b00:	616c 6b63 6f62 7261 2f64 6262 705f 726f     lackboard/bb_por
  404b10:	2e74 0063 7962 6574 664f 7366 7465 6e49     t.c.byteOffsetIn
  404b20:	6f57 6472 3d20 203d 0030 0000               Word == 0...

00404b2c <can_spec_can_element_list>:
  404b2c:	0400 0000 4c58 0040 0064 0000 0004 0000     ....XL@.d.......
  404b3c:	4c68 0040 0001 0004 0000 0000 0000 0000     hL@.............
	...
  404b5c:	0551 0040 0001 0000 0103 0000 0410 0000     Q.@.............
  404b6c:	4c74 0040 0064 0000 0008 0000 4c88 0040     tL@.d........L@.
  404b7c:	0001 0002 4c9c 0040 0201 0002 4cb0 0040     .....L@......L@.
  404b8c:	0401 0002 4cc0 0040 0601 0002 0000 0000     .....L@.........
  404b9c:	0000 0000 0001 0000 0460 0000 4cd0 0040     ........`....L@.
  404bac:	0064 0000 0001 0000 4cd4 0040 0001 0001     d........L@.....
	...
  404bdc:	0001 0000 0630 0000 4ce4 0040 0064 0000     ....0....L@.d...
  404bec:	0001 0000 4cf0 0040 0001 0001 0000 0000     .....L@.........
	...
  404c18:	0100 0000 0631 0000 4cfc 0040 0064 0000     ....1....L@.d...
  404c28:	0008 0000 4d08 0040 0001 0002 4d18 0040     .....M@......M@.
  404c38:	0201 0002 4d2c 0040 0401 0002 4d38 0040     ....,M@.....8M@.
  404c48:	0601 0002 0000 0000 0000 0000 0100 0000     ................
  404c58:	4353 5f4d 7953 7473 6d65 6142 6672 0079     SCM_SystemBarfy.
  404c68:	6554 7473 6c46 6f6f 7966 0000 4353 5f4d     TestFloofy..SCM_
  404c78:	6f4d 6f74 3172 6150 6172 736d 0031 0000     Motor1Params1...
  404c88:	6f6d 6f74 3172 6341 6563 656c 6172 6974     motor1Accelerati
  404c98:	6e6f 0000 6f6d 6f74 3172 6544 6563 656c     on..motor1Decele
  404ca8:	6172 6974 6e6f 0000 6f6d 6f74 3172 614d     ration..motor1Ma
  404cb8:	5378 6570 6465 0000 6f6d 6f74 3172 694d     xSpeed..motor1Mi
  404cc8:	536e 6570 6465 0000 4353 5f4d 6f4d 6f74     nSpeed..SCM_Moto
  404cd8:	3172 6f43 746e 6f72 006c 0000 4352 5f4d     r1Control...RCM_
  404ce8:	7953 7473 6d65 0000 6f4d 7564 656c 6449     System..ModuleId
  404cf8:	0000 0000 4352 5f4d 6553 736e 726f 0031     ....RCM_Sensor1.
  404d08:	6553 736e 726f 5631 6c6f 6174 6567 0000     Sensor1Voltage..
  404d18:	6553 736e 726f 5431 6d65 6570 6172 7574     Sensor1Temperatu
  404d28:	6572 0000 6553 736e 726f 4631 6f6f 0000     re..Sensor1Foo..
  404d38:	6553 736e 726f 4231 7261 0000 6574 7473     Sensor1Bar..test
  404d48:	6143 6c6c 6162 6b63 203a 4353 5f4d 5645     Callback: SCM_EV
  404d58:	4e45 5f54 4f46 3d4f 6425 202c 7872 6843     ENT_FOO=%d, rxCh
  404d68:	6e61 253d 2c64 7420 4378 6168 3d6e 6425     an=%d, txChan=%d
  404d78:	202c 6f63 6e75 6574 3d72 6425 000a 0000     , counter=%d....
  404d88:	4353 3a4d 6920 6143 486e 7a61 7854 203a     SCM: iCanHazTx: 
  404d98:	6425 203a 7025 202c 7830 7825 203a 7325     %d: %p, 0x%x: %s
  404da8:	000a 0000 0d0a 4520 7478 6e65 6564 2064     ...... Extended 
  404db8:	656d 7373 6761 2065 6572 6563 7669 6465     message received
  404dc8:	6920 206e 7852 6220 6675 6566 2e72 5420      in Rx buffer. T
  404dd8:	6568 7220 6365 6965 6576 2064 6164 6174     he received data
  404de8:	6920 3a73 0d20 000a 0d0a 5320 6174 646e      is: ..... Stand
  404df8:	7261 2064 656d 7373 6761 2065 6572 6563     ard message rece
  404e08:	7669 6465 6920 206e 7852 6220 6675 6566     ived in Rx buffe
  404e18:	2e72 5420 6568 7220 6365 6965 6576 2064     r. The received 
  404e28:	6164 6174 6920 3a73 0d20 000a 2020 6425     data is: ...  %d
  404e38:	0000 0000 0d0a 5320 6174 646e 7261 2064     ...... Standard 
  404e48:	656d 7373 6761 2065 6572 6563 7669 6465     message received
  404e58:	6920 206e 4946 4f46 3020 202e 6854 2065      in FIFO 0. The 
  404e68:	6572 6563 7669 6465 6420 7461 2061 7369     received data is
  404e78:	203a 0a0d 0000 0000 0d0a 4520 7478 6e65     : ........ Exten
  404e88:	6564 2064 656d 7373 6761 2065 6572 6563     ded message rece
  404e98:	7669 6465 6920 206e 4946 4f46 3120 202e     ived in FIFO 1. 
  404ea8:	6854 2065 6572 6563 7669 6465 6420 7461     The received dat
  404eb8:	2061 7369 203a 0a0d 0000 0000 203a 434d     a is: ......: MC
  404ec8:	4e41 6220 7375 6f20 6666 6520 7272 726f     AN bus off error
  404ed8:	202c 6572 692d 696e 6974 6c61 7a69 7461     , re-initializat
  404ee8:	6f69 2e6e 0d20 0d0a 000a 0000 7250 746f     ion. .......Prot
  404ef8:	636f 6c6f 4120 4b43 6520 7272 726f 202c     ocol ACK error, 
  404f08:	6c70 6165 6573 6420 756f 6c62 2065 6863     please double ch
  404f18:	6365 206b 6874 2065 6c63 636f 206b 6e69     eck the clock in
  404f28:	7420 6f77 6220 616f 6472 2e73 0d20 0d0a      two boards. ...
  404f38:	000a 0000 7250 746f 636f 6c6f 6620 726f     ....Protocol for
  404f48:	616d 2074 7265 6f72 2c72 7020 656c 7361     mat error, pleas
  404f58:	2065 6f64 6275 656c 6320 6568 6b63 7420     e double check t
  404f68:	6568 6320 6f6c 6b63 6920 206e 7774 206f     he clock in two 
  404f78:	6f62 7261 7364 202e 0a0d 0a0d 0000 0000     boards. ........
  404f88:	202c 7566 636e 6974 6e6f 203a 0000 0000     , function: ....
  404f98:	7361 6573 7472 6f69 206e 2522 2273 6620     assertion "%s" f
  404fa8:	6961 656c 3a64 6620 6c69 2065 2522 2273     ailed: file "%s"
  404fb8:	202c 696c 656e 2520 2564 2573 0a73 0000     , line %d%s%s...

00404fc8 <_global_impure_ptr>:
  404fc8:	0018 2040 3130 3332 3534 3736 3938 4241     ..@ 0123456789AB
  404fd8:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  404fe8:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  404ff8:	296c 0000                                   l)..

00404ffc <blanks.7217>:
  404ffc:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040500c <zeroes.7218>:
  40500c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40501c:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

0040502c <_ctype_>:
  40502c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40503c:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40504c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40505c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40506c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40507c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40508c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40509c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  4050ac:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00405130 <_init>:
  405130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405132:	bf00      	nop
  405134:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405136:	bc08      	pop	{r3}
  405138:	469e      	mov	lr, r3
  40513a:	4770      	bx	lr

0040513c <__init_array_start>:
  40513c:	00402c9d 	.word	0x00402c9d

00405140 <__frame_dummy_init_array_entry>:
  405140:	0040018d                                ..@.

00405144 <_fini>:
  405144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405146:	bf00      	nop
  405148:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40514a:	bc08      	pop	{r3}
  40514c:	469e      	mov	lr, r3
  40514e:	4770      	bx	lr

00405150 <__fini_array_start>:
  405150:	00400169 	.word	0x00400169
