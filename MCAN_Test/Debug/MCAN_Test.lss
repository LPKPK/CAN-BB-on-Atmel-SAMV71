
MCAN_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005060  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00405060  00405060  00015060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00405068  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000b18  204009c0  00405a28  000209c0  2**2
                  ALLOC
  4 .stack        00002000  204014d8  00406540  000209c0  2**0
                  ALLOC
  5 .heap         00000200  204034d8  00408540  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001fbbe  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004697  00000000  00000000  00040605  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006fa2  00000000  00000000  00044c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e08  00000000  00000000  0004bc3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e40  00000000  00000000  0004ca46  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00023850  00000000  00000000  0004d886  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000104bf  00000000  00000000  000710d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000980c7  00000000  00000000  00081595  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002d74  00000000  00000000  0011965c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d8 34 40 20 41 16 40 00 3f 16 40 00 3f 16 40 00     .4@ A.@.?.@.?.@.
  400010:	3f 16 40 00 3f 16 40 00 3f 16 40 00 00 00 00 00     ?.@.?.@.?.@.....
	...
  40002c:	3f 16 40 00 3f 16 40 00 00 00 00 00 3f 16 40 00     ?.@.?.@.....?.@.
  40003c:	3f 16 40 00 3f 16 40 00 3f 16 40 00 3f 16 40 00     ?.@.?.@.?.@.?.@.
  40004c:	3f 16 40 00 3f 16 40 00 3f 16 40 00 3f 16 40 00     ?.@.?.@.?.@.?.@.
  40005c:	3f 16 40 00 3f 16 40 00 00 00 00 00 01 13 40 00     ?.@.?.@.......@.
  40006c:	15 13 40 00 29 13 40 00 3f 16 40 00 3f 16 40 00     ..@.).@.?.@.?.@.
  40007c:	3f 16 40 00 3d 13 40 00 51 13 40 00 3f 16 40 00     ?.@.=.@.Q.@.?.@.
  40008c:	3f 16 40 00 3f 16 40 00 3f 16 40 00 3f 16 40 00     ?.@.?.@.?.@.?.@.
  40009c:	3f 16 40 00 3f 16 40 00 3f 16 40 00 3f 16 40 00     ?.@.?.@.?.@.?.@.
  4000ac:	3f 16 40 00 3f 16 40 00 3f 16 40 00 3f 16 40 00     ?.@.?.@.?.@.?.@.
  4000bc:	3f 16 40 00 3f 16 40 00 3f 16 40 00 3f 16 40 00     ?.@.?.@.?.@.?.@.
  4000cc:	3f 16 40 00 3f 16 40 00 c5 0a 40 00 3f 16 40 00     ?.@.?.@...@.?.@.
  4000dc:	3f 16 40 00 3f 16 40 00 3f 16 40 00 3f 16 40 00     ?.@.?.@.?.@.?.@.
  4000ec:	3f 16 40 00 3f 16 40 00 3f 16 40 00 3f 16 40 00     ?.@.?.@.?.@.?.@.
  4000fc:	3f 16 40 00 3f 16 40 00 3f 16 40 00 3f 16 40 00     ?.@.?.@.?.@.?.@.
  40010c:	3f 16 40 00 3f 16 40 00 3f 16 40 00 00 00 00 00     ?.@.?.@.?.@.....
  40011c:	00 00 00 00 3f 16 40 00 3f 16 40 00 3f 16 40 00     ....?.@.?.@.?.@.
  40012c:	3f 16 40 00 3f 16 40 00 3f 16 40 00 3f 16 40 00     ?.@.?.@.?.@.?.@.
  40013c:	3f 16 40 00 3f 16 40 00 3f 16 40 00 3f 16 40 00     ?.@.?.@.?.@.?.@.
  40014c:	3f 16 40 00 3f 16 40 00 3f 16 40 00 3f 16 40 00     ?.@.?.@.?.@.?.@.
  40015c:	3f 16 40 00 3f 16 40 00 3f 16 40 00                 ?.@.?.@.?.@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c0 	.word	0x204009c0
  400184:	00000000 	.word	0x00000000
  400188:	00405068 	.word	0x00405068

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00405068 	.word	0x00405068
  4001c8:	204009c4 	.word	0x204009c4
  4001cc:	00405068 	.word	0x00405068
  4001d0:	00000000 	.word	0x00000000

004001d4 <bb_elem_decrement_wakeup_offset>:
 * @return True if the wakeup offset was decremented, false if it was not
 */
bool_T bb_elem_decrement_wakeup_offset(BlackboardElement_T * bbElement, const uint32_t elapsedTicks)
{
    bool_T decremented = false;
    if (bbElement->wakeupOffset > elapsedTicks)
  4001d4:	68c3      	ldr	r3, [r0, #12]
  4001d6:	428b      	cmp	r3, r1
  4001d8:	d903      	bls.n	4001e2 <bb_elem_decrement_wakeup_offset+0xe>
    {
        bbElement->wakeupOffset = bbElement->wakeupOffset - elapsedTicks;
  4001da:	1a5b      	subs	r3, r3, r1
  4001dc:	60c3      	str	r3, [r0, #12]
        decremented = true;
  4001de:	2001      	movs	r0, #1
  4001e0:	4770      	bx	lr
    bool_T decremented = false;
  4001e2:	2000      	movs	r0, #0
    }
    return decremented;
}
  4001e4:	4770      	bx	lr
	...

004001e8 <bb_elem_get_data_for_can>:
 *
 * @param[out] data0 a pointer to a u32 that will be copied with the lower 4 bytes of data.
 * @param[out] data1 a pointer to a u32 that will be copied with the upper 4 bytes of data.
 */
void bb_elem_get_data_for_can(BlackboardElement_T const * bbElement, uint32_t * const data0, uint32_t * const data1)
{
  4001e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4001ea:	4606      	mov	r6, r0
  4001ec:	460f      	mov	r7, r1
  4001ee:	4615      	mov	r5, r2
    *data0 = bb_port_get_data_direct32(bbElement, 0U);
  4001f0:	2100      	movs	r1, #0
  4001f2:	4c04      	ldr	r4, [pc, #16]	; (400204 <bb_elem_get_data_for_can+0x1c>)
  4001f4:	47a0      	blx	r4
  4001f6:	6038      	str	r0, [r7, #0]
    *data1 = bb_port_get_data_direct32(bbElement, 4U);
  4001f8:	2104      	movs	r1, #4
  4001fa:	4630      	mov	r0, r6
  4001fc:	47a0      	blx	r4
  4001fe:	6028      	str	r0, [r5, #0]
  400200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400202:	bf00      	nop
  400204:	004004bd 	.word	0x004004bd

00400208 <bb_elem_set_data_from_can>:
 * @param data0 a u32 that will be copied into the lower 4 bytes of this element's data.
 * @param data1 a u32 that will be copied into the upper 4 bytes of this element's data.
 */
void bb_elem_set_data_from_can(BlackboardElement_T * bbElement, const CANElementIndex_T idx,
    const uint32_t data0, const uint32_t data1)
{
  400208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40020a:	4606      	mov	r6, r0
  40020c:	460d      	mov	r5, r1
  40020e:	4611      	mov	r1, r2
  400210:	461f      	mov	r7, r3
    bb_port_set_data_direct32(bbElement, data0, 0U);
  400212:	2200      	movs	r2, #0
  400214:	4c08      	ldr	r4, [pc, #32]	; (400238 <bb_elem_set_data_from_can+0x30>)
  400216:	47a0      	blx	r4
    bb_port_set_data_direct32(bbElement, data1, 4U);
  400218:	2204      	movs	r2, #4
  40021a:	4639      	mov	r1, r7
  40021c:	4630      	mov	r0, r6
  40021e:	47a0      	blx	r4

    const CANElement_T * canElement = can_elem_get_can_elem_idx(idx);
  400220:	4628      	mov	r0, r5
  400222:	4b06      	ldr	r3, [pc, #24]	; (40023c <bb_elem_set_data_from_can+0x34>)
  400224:	4798      	blx	r3

    if (canElement->callback.callbackFn != NULL)
  400226:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400228:	b123      	cbz	r3, 400234 <bb_elem_set_data_from_can+0x2c>
    {
        canElement->callback.callbackFn(canElement->callback.callbackCtx,
  40022a:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
  40022e:	2100      	movs	r1, #0
  400230:	6b40      	ldr	r0, [r0, #52]	; 0x34
  400232:	4798      	blx	r3
  400234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400236:	bf00      	nop
  400238:	00400491 	.word	0x00400491
  40023c:	004003cd 	.word	0x004003cd

00400240 <bb_elem_update_last_tick_count>:
 * @brief updateLastTickCount updates last tick count to the current tick if the scheduler is running
 *
 * @return none
 */
void bb_elem_update_last_tick_count(BlackboardElement_T * bbElement)
{
  400240:	b510      	push	{r4, lr}
  400242:	4604      	mov	r4, r0
    bbElement->lastUpdate_tick = bb_port_get_current_ticks();
  400244:	4b01      	ldr	r3, [pc, #4]	; (40024c <bb_elem_update_last_tick_count+0xc>)
  400246:	4798      	blx	r3
  400248:	60a0      	str	r0, [r4, #8]
  40024a:	bd10      	pop	{r4, pc}
  40024c:	0040044d 	.word	0x0040044d

00400250 <bb_elem_set_uint8_data>:
{
  400250:	b510      	push	{r4, lr}
  400252:	4604      	mov	r4, r0
    bb_port_set_data_direct8(bbElement, data8, index);
  400254:	4b02      	ldr	r3, [pc, #8]	; (400260 <bb_elem_set_uint8_data+0x10>)
  400256:	4798      	blx	r3
    bb_elem_update_last_tick_count(bbElement);
  400258:	4620      	mov	r0, r4
  40025a:	4b02      	ldr	r3, [pc, #8]	; (400264 <bb_elem_set_uint8_data+0x14>)
  40025c:	4798      	blx	r3
  40025e:	bd10      	pop	{r4, pc}
  400260:	00400459 	.word	0x00400459
  400264:	00400241 	.word	0x00400241

00400268 <bb_elem_set_int8_data>:
{
  400268:	b508      	push	{r3, lr}
    bb_elem_set_uint8_data(bbElement, bb_utils_toUnsigned8(data8), index);
  40026a:	b2c9      	uxtb	r1, r1
  40026c:	4b01      	ldr	r3, [pc, #4]	; (400274 <bb_elem_set_int8_data+0xc>)
  40026e:	4798      	blx	r3
  400270:	bd08      	pop	{r3, pc}
  400272:	bf00      	nop
  400274:	00400251 	.word	0x00400251

00400278 <bb_elem_set_uint16_data>:
{
  400278:	b510      	push	{r4, lr}
  40027a:	4604      	mov	r4, r0
    bb_port_set_data_direct16(bbElement, data16, index);
  40027c:	4b02      	ldr	r3, [pc, #8]	; (400288 <bb_elem_set_uint16_data+0x10>)
  40027e:	4798      	blx	r3
    bb_elem_update_last_tick_count(bbElement);
  400280:	4620      	mov	r0, r4
  400282:	4b02      	ldr	r3, [pc, #8]	; (40028c <bb_elem_set_uint16_data+0x14>)
  400284:	4798      	blx	r3
  400286:	bd10      	pop	{r4, pc}
  400288:	0040045d 	.word	0x0040045d
  40028c:	00400241 	.word	0x00400241

00400290 <bb_elem_set_int16_data>:
{
  400290:	b508      	push	{r3, lr}
    bb_elem_set_uint16_data(bbElement, bb_utils_toUnsigned16(data16), index);
  400292:	b289      	uxth	r1, r1
  400294:	4b01      	ldr	r3, [pc, #4]	; (40029c <bb_elem_set_int16_data+0xc>)
  400296:	4798      	blx	r3
  400298:	bd08      	pop	{r3, pc}
  40029a:	bf00      	nop
  40029c:	00400279 	.word	0x00400279

004002a0 <bb_tx_proc_init>:
void bb_tx_proc_init(BlackboardTxProcessor_T * bbTxProc,
                     uint32_t maxDelay,
                     ICANTx_T* transmitters,
                     uint32_t numTransmitters,
                     uint32_t currTimestampTicks)
{
  4002a0:	b570      	push	{r4, r5, r6, lr}
  4002a2:	9e04      	ldr	r6, [sp, #16]
    bbTxProc->maxDelay = maxDelay;
  4002a4:	6001      	str	r1, [r0, #0]
    bbTxProc->transmitters = transmitters;
  4002a6:	6042      	str	r2, [r0, #4]
    bbTxProc->numTransmitters = numTransmitters;
  4002a8:	6083      	str	r3, [r0, #8]

    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  4002aa:	2400      	movs	r4, #0
    {
        BlackboardElement_T * bbElement = bb_get_element((CANElementIndex_T)i);
  4002ac:	4d04      	ldr	r5, [pc, #16]	; (4002c0 <bb_tx_proc_init+0x20>)
  4002ae:	b2e0      	uxtb	r0, r4
  4002b0:	47a8      	blx	r5
        bb_elem_set_wakeup_offset(bbElement, currTimestampTicks + i);
  4002b2:	1933      	adds	r3, r6, r4
 *
 * @param bbElement Pointer to the blackboard element struct to set the data of
 */
static inline void bb_elem_set_wakeup_offset(BlackboardElement_T * bbElement, const uint32_t wakeupOffset)
{
    bbElement->wakeupOffset = wakeupOffset;
  4002b4:	60c3      	str	r3, [r0, #12]
    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  4002b6:	3401      	adds	r4, #1
  4002b8:	2c06      	cmp	r4, #6
  4002ba:	d1f8      	bne.n	4002ae <bb_tx_proc_init+0xe>
    }
}
  4002bc:	bd70      	pop	{r4, r5, r6, pc}
  4002be:	bf00      	nop
  4002c0:	004004e9 	.word	0x004004e9

004002c4 <bb_tx_proc_tx_message>:
                   const CANElement_T * canElement,
                   const BlackboardTxProcessor_T * const bbTxProc,
                   uint32_t canChannel,
                   uint32_t maskTxChannel,
                   uint32_t minimumOffsetTicks)
{
  4002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4002c6:	b083      	sub	sp, #12
  4002c8:	460f      	mov	r7, r1
  4002ca:	4615      	mov	r5, r2
  4002cc:	461e      	mov	r6, r3
    BlackboardElement_T * bbElement = bb_get_element((CANElementIndex_T)index);
  4002ce:	b2c0      	uxtb	r0, r0
  4002d0:	4b1c      	ldr	r3, [pc, #112]	; (400344 <bb_tx_proc_tx_message+0x80>)
  4002d2:	4798      	blx	r3
  4002d4:	4604      	mov	r4, r0
    if (!bb_elem_decrement_wakeup_offset(bbElement, elapsedTicks))
  4002d6:	4639      	mov	r1, r7
  4002d8:	4b1b      	ldr	r3, [pc, #108]	; (400348 <bb_tx_proc_tx_message+0x84>)
  4002da:	4798      	blx	r3
  4002dc:	b130      	cbz	r0, 4002ec <bb_tx_proc_tx_message+0x28>
 *
 * @return The smaller of the current minimum offset and the blackboard element's wakeup offset
 */
static inline uint32_t bb_elem_compute_minimum_offset_ticks(BlackboardElement_T const * bbElement, const uint32_t minimumOffsetTicks)
{
    return (minimumOffsetTicks > bbElement->wakeupOffset) ? bbElement->wakeupOffset : minimumOffsetTicks;
  4002de:	68e3      	ldr	r3, [r4, #12]
                                            CAN_NONE);                 // Rx Channel is N/A
        }
        // else Callback container is null, don't call
    }
    return bb_elem_compute_minimum_offset_ticks(bbElement, minimumOffsetTicks);
}
  4002e0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4002e2:	4298      	cmp	r0, r3
  4002e4:	bf28      	it	cs
  4002e6:	4618      	movcs	r0, r3
  4002e8:	b003      	add	sp, #12
  4002ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        const uint32_t period_ticks = BB_PORT_MS_TO_TICKS(msgInfo->period_ms);
  4002ec:	68aa      	ldr	r2, [r5, #8]
  4002ee:	23c8      	movs	r3, #200	; 0xc8
  4002f0:	fb03 f302 	mul.w	r3, r3, r2
  4002f4:	4a15      	ldr	r2, [pc, #84]	; (40034c <bb_tx_proc_tx_message+0x88>)
  4002f6:	fba2 2303 	umull	r2, r3, r2, r3
  4002fa:	099b      	lsrs	r3, r3, #6
    return elapsedTicks - bbElement->wakeupOffset;
  4002fc:	68e2      	ldr	r2, [r4, #12]
  4002fe:	1abf      	subs	r7, r7, r2
        bb_elem_set_wakeup_offset(bbElement, period_ticks - (overflow_ticks % period_ticks));
  400300:	fbb7 f2f3 	udiv	r2, r7, r3
  400304:	fb03 7712 	mls	r7, r3, r2, r7
  400308:	1bdb      	subs	r3, r3, r7
    bbElement->wakeupOffset = wakeupOffset;
  40030a:	60e3      	str	r3, [r4, #12]
        uint32_t tx_data[2] = {0, 0};
  40030c:	2300      	movs	r3, #0
  40030e:	9300      	str	r3, [sp, #0]
  400310:	9301      	str	r3, [sp, #4]
        bb_elem_get_data_for_can(bbElement, &tx_data[0], &tx_data[1]);
  400312:	aa01      	add	r2, sp, #4
  400314:	4669      	mov	r1, sp
  400316:	4620      	mov	r0, r4
  400318:	4b0d      	ldr	r3, [pc, #52]	; (400350 <bb_tx_proc_tx_message+0x8c>)
  40031a:	4798      	blx	r3
        const ICANTx_T * const transmitter = &bbTxProc->transmitters[canChannel];
  40031c:	6873      	ldr	r3, [r6, #4]
  40031e:	9a08      	ldr	r2, [sp, #32]
  400320:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
        transmitter->transmitFn(transmitter->context, msgInfo->id, (uint8_t *)(&tx_data[0]), (uint8_t)msgInfo->numBytes);
  400324:	f853 6032 	ldr.w	r6, [r3, r2, lsl #3]
  400328:	7b2b      	ldrb	r3, [r5, #12]
  40032a:	466a      	mov	r2, sp
  40032c:	6829      	ldr	r1, [r5, #0]
  40032e:	6840      	ldr	r0, [r0, #4]
  400330:	47b0      	blx	r6
        if (canElement->callback.callbackFn != NULL)
  400332:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  400334:	2b00      	cmp	r3, #0
  400336:	d0d2      	beq.n	4002de <bb_tx_proc_tx_message+0x1a>
            canElement->callback.callbackFn(canElement->callback.callbackCtx,
  400338:	2200      	movs	r2, #0
  40033a:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
  40033e:	6b68      	ldr	r0, [r5, #52]	; 0x34
  400340:	4798      	blx	r3
  400342:	e7cc      	b.n	4002de <bb_tx_proc_tx_message+0x1a>
  400344:	004004e9 	.word	0x004004e9
  400348:	004001d5 	.word	0x004001d5
  40034c:	10624dd3 	.word	0x10624dd3
  400350:	004001e9 	.word	0x004001e9

00400354 <bb_tx_proc_process_tx>:
{
  400354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400358:	b087      	sub	sp, #28
  40035a:	4606      	mov	r6, r0
    const uint32_t elapsedTicks = currTimestampTicks - prevTimestampTicks;
  40035c:	1a8b      	subs	r3, r1, r2
  40035e:	9305      	str	r3, [sp, #20]
    uint32_t minimumOffsetTicks = bbTxProc->maxDelay;
  400360:	f8d0 9000 	ldr.w	r9, [r0]
    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  400364:	2700      	movs	r7, #0
        const CANElement_T * canElement = can_elem_get_can_elem_idx((CANElementIndex_T)i);
  400366:	f8df b05c 	ldr.w	fp, [pc, #92]	; 4003c4 <bb_tx_proc_process_tx+0x70>
                    minimumOffsetTicks = bb_tx_proc_tx_message(i, elapsedTicks, canElement, bbTxProc, canChannel, maskTxChannel, minimumOffsetTicks);
  40036a:	f8df a05c 	ldr.w	sl, [pc, #92]	; 4003c8 <bb_tx_proc_process_tx+0x74>
  40036e:	e017      	b.n	4003a0 <bb_tx_proc_process_tx+0x4c>
            for(uint32_t canChannel = 0U; canChannel < bbTxProc->numTransmitters; canChannel++)
  400370:	3401      	adds	r4, #1
  400372:	68b3      	ldr	r3, [r6, #8]
  400374:	42a3      	cmp	r3, r4
  400376:	d910      	bls.n	40039a <bb_tx_proc_process_tx+0x46>
                const uint32_t maskTxChannel = (uint32_t)1U << canChannel;
  400378:	fa08 f304 	lsl.w	r3, r8, r4
                if (((uint32_t)canElement->txChan & maskTxChannel) > 0UL)
  40037c:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
  400380:	421a      	tst	r2, r3
  400382:	d0f5      	beq.n	400370 <bb_tx_proc_process_tx+0x1c>
                    minimumOffsetTicks = bb_tx_proc_tx_message(i, elapsedTicks, canElement, bbTxProc, canChannel, maskTxChannel, minimumOffsetTicks);
  400384:	f8cd 9008 	str.w	r9, [sp, #8]
  400388:	9301      	str	r3, [sp, #4]
  40038a:	9400      	str	r4, [sp, #0]
  40038c:	4633      	mov	r3, r6
  40038e:	462a      	mov	r2, r5
  400390:	9905      	ldr	r1, [sp, #20]
  400392:	4638      	mov	r0, r7
  400394:	47d0      	blx	sl
  400396:	4681      	mov	r9, r0
  400398:	e7ea      	b.n	400370 <bb_tx_proc_process_tx+0x1c>
    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  40039a:	3701      	adds	r7, #1
  40039c:	2f06      	cmp	r7, #6
  40039e:	d00d      	beq.n	4003bc <bb_tx_proc_process_tx+0x68>
        const CANElement_T * canElement = can_elem_get_can_elem_idx((CANElementIndex_T)i);
  4003a0:	b2f8      	uxtb	r0, r7
  4003a2:	47d8      	blx	fp
  4003a4:	4605      	mov	r5, r0
        if ((uint32_t)canElement->txChan > 0UL)
  4003a6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  4003aa:	2b00      	cmp	r3, #0
  4003ac:	d0f5      	beq.n	40039a <bb_tx_proc_process_tx+0x46>
            for(uint32_t canChannel = 0U; canChannel < bbTxProc->numTransmitters; canChannel++)
  4003ae:	68b3      	ldr	r3, [r6, #8]
  4003b0:	2b00      	cmp	r3, #0
  4003b2:	d0f2      	beq.n	40039a <bb_tx_proc_process_tx+0x46>
  4003b4:	2400      	movs	r4, #0
                const uint32_t maskTxChannel = (uint32_t)1U << canChannel;
  4003b6:	f04f 0801 	mov.w	r8, #1
  4003ba:	e7dd      	b.n	400378 <bb_tx_proc_process_tx+0x24>
}
  4003bc:	4648      	mov	r0, r9
  4003be:	b007      	add	sp, #28
  4003c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4003c4:	004003cd 	.word	0x004003cd
  4003c8:	004002c5 	.word	0x004002c5

004003cc <can_elem_get_can_elem_idx>:
 *
 * @return A pointer to the can element struct with the given index
 */
const CANElement_T * can_elem_get_can_elem_idx(const CANElementIndex_T idx)
{
    return &can_spec_can_element_list[idx];
  4003cc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
}
  4003d0:	4b01      	ldr	r3, [pc, #4]	; (4003d8 <can_elem_get_can_elem_idx+0xc>)
  4003d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4003d6:	4770      	bx	lr
  4003d8:	00404afc 	.word	0x00404afc

004003dc <can_elem_get_can_msg_info_idx>:
 *
 * @return A pointer to the can msg info struct with the given index
 */
const CANMsgInfo_T * can_elem_get_can_msg_info_idx(const CANElementIndex_T idx)
{
    return &can_spec_can_element_list[idx].canMsgInfo;
  4003dc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
}
  4003e0:	4b01      	ldr	r3, [pc, #4]	; (4003e8 <can_elem_get_can_msg_info_idx+0xc>)
  4003e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4003e6:	4770      	bx	lr
  4003e8:	00404afc 	.word	0x00404afc

004003ec <can_elem_get_can_msg_info_msgid>:
 *
 * @return The index of the element in the list with the given message ID
 * or CANElements::CAN_SPEC_LAST_MSG if it is not found
 */
const CANMsgInfo_T * can_elem_get_can_msg_info_msgid(const uint32_t msgID, CANElementIndex_T *foundIdx)
{
  4003ec:	b538      	push	{r3, r4, r5, lr}
    SLI_ASSERT(foundIdx != NULL);
  4003ee:	b191      	cbz	r1, 400416 <can_elem_get_can_msg_info_msgid+0x2a>
  4003f0:	460d      	mov	r5, r1
    const CANMsgInfo_T * canMsgInfo = NULL;
    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
    {
        const CANElementIndex_T idx = (CANElementIndex_T)(i);
        if (can_spec_can_element_list[idx].canMsgInfo.id == msgID)
  4003f2:	4b11      	ldr	r3, [pc, #68]	; (400438 <can_elem_get_can_msg_info_msgid+0x4c>)
  4003f4:	681b      	ldr	r3, [r3, #0]
  4003f6:	4298      	cmp	r0, r3
  4003f8:	d01b      	beq.n	400432 <can_elem_get_can_msg_info_msgid+0x46>
  4003fa:	2301      	movs	r3, #1
  4003fc:	4c0e      	ldr	r4, [pc, #56]	; (400438 <can_elem_get_can_msg_info_msgid+0x4c>)
  4003fe:	b2da      	uxtb	r2, r3
  400400:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
  400404:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
  400408:	4281      	cmp	r1, r0
  40040a:	d00a      	beq.n	400422 <can_elem_get_can_msg_info_msgid+0x36>
    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  40040c:	3301      	adds	r3, #1
  40040e:	2b06      	cmp	r3, #6
  400410:	d1f5      	bne.n	4003fe <can_elem_get_can_msg_info_msgid+0x12>
    const CANMsgInfo_T * canMsgInfo = NULL;
  400412:	2000      	movs	r0, #0
            *foundIdx = idx;
            break;
        }
    }
    return canMsgInfo;
}
  400414:	bd38      	pop	{r3, r4, r5, pc}
    SLI_ASSERT(foundIdx != NULL);
  400416:	4b09      	ldr	r3, [pc, #36]	; (40043c <can_elem_get_can_msg_info_msgid+0x50>)
  400418:	4a09      	ldr	r2, [pc, #36]	; (400440 <can_elem_get_can_msg_info_msgid+0x54>)
  40041a:	2136      	movs	r1, #54	; 0x36
  40041c:	4809      	ldr	r0, [pc, #36]	; (400444 <can_elem_get_can_msg_info_msgid+0x58>)
  40041e:	4c0a      	ldr	r4, [pc, #40]	; (400448 <can_elem_get_can_msg_info_msgid+0x5c>)
  400420:	47a0      	blx	r4
        const CANElementIndex_T idx = (CANElementIndex_T)(i);
  400422:	4613      	mov	r3, r2
            canMsgInfo = &can_spec_can_element_list[idx].canMsgInfo;
  400424:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
  400428:	4803      	ldr	r0, [pc, #12]	; (400438 <can_elem_get_can_msg_info_msgid+0x4c>)
  40042a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
            *foundIdx = idx;
  40042e:	702b      	strb	r3, [r5, #0]
            break;
  400430:	bd38      	pop	{r3, r4, r5, pc}
        if (can_spec_can_element_list[idx].canMsgInfo.id == msgID)
  400432:	2200      	movs	r2, #0
        const CANElementIndex_T idx = (CANElementIndex_T)(i);
  400434:	4613      	mov	r3, r2
  400436:	e7f5      	b.n	400424 <can_elem_get_can_msg_info_msgid+0x38>
  400438:	00404afc 	.word	0x00404afc
  40043c:	00404a28 	.word	0x00404a28
  400440:	00404a08 	.word	0x00404a08
  400444:	00404a40 	.word	0x00404a40
  400448:	0040195d 	.word	0x0040195d

0040044c <bb_port_get_current_ticks>:
 * g_tx_tick_count_ms.
 * @return the current time in ticks
 */
uint32_t bb_port_get_current_ticks(void)
{
  return g_tx_tick_count_ms;
  40044c:	4b01      	ldr	r3, [pc, #4]	; (400454 <bb_port_get_current_ticks+0x8>)
  40044e:	6818      	ldr	r0, [r3, #0]
}
  400450:	4770      	bx	lr
  400452:	bf00      	nop
  400454:	2040146c 	.word	0x2040146c

00400458 <bb_port_set_data_direct8>:
    const uint32_t byteOffsetInWord = (uint32_t)(byteIndexInElement) % 4U;
    const uint32_t wordIndex = (uint32_t)(byteIndexInElement) / 4U;

    volatile uint8_t * const dest8Ptr = (volatile uint8_t *)(&element->dataWords[wordIndex]) + byteOffsetInWord;

    *dest8Ptr = data8;
  400458:	5481      	strb	r1, [r0, r2]
  40045a:	4770      	bx	lr

0040045c <bb_port_set_data_direct16>:
 * perform an atomic write to the internal blackboard element storage.
 *
 * @see BlackboardPort.h for details on this method.
 */
void bb_port_set_data_direct16(BlackboardElement_T * element, const uint16_t data16, const uint8_t byteIndexInElement)
{
  40045c:	b510      	push	{r4, lr}
    const uint32_t byteOffsetInWord = (uint32_t)(byteIndexInElement) % 4U;
    const uint32_t wordIndex = (uint32_t)(byteIndexInElement) / 4U;

    // Dereferencing a u16 pointer with a byte offset.  Make sure it is u16-aligned within the
    // element.
    SLI_ASSERT((byteOffsetInWord % 2U) == 0);
  40045e:	f012 0f01 	tst.w	r2, #1
  400462:	d106      	bne.n	400472 <bb_port_set_data_direct16+0x16>
  400464:	f002 0303 	and.w	r3, r2, #3
  400468:	0894      	lsrs	r4, r2, #2
    volatile uint16_t * const dest16Ptr = (volatile uint16_t *)(((volatile uint8_t *)&element->dataWords[wordIndex]) + byteOffsetInWord);
  40046a:	eb03 0384 	add.w	r3, r3, r4, lsl #2

    *dest16Ptr = data16;
  40046e:	52c1      	strh	r1, [r0, r3]
  400470:	bd10      	pop	{r4, pc}
    SLI_ASSERT((byteOffsetInWord % 2U) == 0);
  400472:	4b03      	ldr	r3, [pc, #12]	; (400480 <bb_port_set_data_direct16+0x24>)
  400474:	4a03      	ldr	r2, [pc, #12]	; (400484 <bb_port_set_data_direct16+0x28>)
  400476:	2176      	movs	r1, #118	; 0x76
  400478:	4803      	ldr	r0, [pc, #12]	; (400488 <bb_port_set_data_direct16+0x2c>)
  40047a:	4c04      	ldr	r4, [pc, #16]	; (40048c <bb_port_set_data_direct16+0x30>)
  40047c:	47a0      	blx	r4
  40047e:	bf00      	nop
  400480:	00404aac 	.word	0x00404aac
  400484:	00404a58 	.word	0x00404a58
  400488:	00404acc 	.word	0x00404acc
  40048c:	0040195d 	.word	0x0040195d

00400490 <bb_port_set_data_direct32>:
    const uint32_t byteOffsetInWord = (uint32_t)(byteIndexInElement) % 4U;
    const uint32_t wordIndex = (uint32_t)(byteIndexInElement) / 4U;

    // Dereferencing a u32 pointer with a byte offset.  Make sure it is u32-aligned within the
    // element.
    SLI_ASSERT(byteOffsetInWord == 0);
  400490:	f012 0f03 	tst.w	r2, #3
  400494:	d103      	bne.n	40049e <bb_port_set_data_direct32+0xe>
  400496:	0893      	lsrs	r3, r2, #2
    volatile uint32_t * const dest32Ptr = (volatile uint32_t *)(&element->dataWords[wordIndex]);

    *dest32Ptr = data32;
  400498:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
  40049c:	4770      	bx	lr
{
  40049e:	b510      	push	{r4, lr}
    SLI_ASSERT(byteOffsetInWord == 0);
  4004a0:	4b02      	ldr	r3, [pc, #8]	; (4004ac <bb_port_set_data_direct32+0x1c>)
  4004a2:	4a03      	ldr	r2, [pc, #12]	; (4004b0 <bb_port_set_data_direct32+0x20>)
  4004a4:	218a      	movs	r1, #138	; 0x8a
  4004a6:	4803      	ldr	r0, [pc, #12]	; (4004b4 <bb_port_set_data_direct32+0x24>)
  4004a8:	4c03      	ldr	r4, [pc, #12]	; (4004b8 <bb_port_set_data_direct32+0x28>)
  4004aa:	47a0      	blx	r4
  4004ac:	00404ae4 	.word	0x00404ae4
  4004b0:	00404a74 	.word	0x00404a74
  4004b4:	00404acc 	.word	0x00404acc
  4004b8:	0040195d 	.word	0x0040195d

004004bc <bb_port_get_data_direct32>:
    const uint32_t byteOffsetInWord = (uint32_t)(byteIndexInElement) % 4U;
    const uint32_t wordIndex = (uint32_t)(byteIndexInElement) / 4U;

    // Dereferencing a u32 pointer with a byte offset.  Make sure it is u32-aligned within the
    // element.
    SLI_ASSERT(byteOffsetInWord == 0);
  4004bc:	f011 0f03 	tst.w	r1, #3
  4004c0:	d103      	bne.n	4004ca <bb_port_get_data_direct32+0xe>
  4004c2:	088b      	lsrs	r3, r1, #2
    volatile uint32_t * const src32Ptr = (volatile uint32_t *)(&element->dataWords[wordIndex]);

    return *src32Ptr;
  4004c4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
  4004c8:	4770      	bx	lr
{
  4004ca:	b510      	push	{r4, lr}
    SLI_ASSERT(byteOffsetInWord == 0);
  4004cc:	4b02      	ldr	r3, [pc, #8]	; (4004d8 <bb_port_get_data_direct32+0x1c>)
  4004ce:	4a03      	ldr	r2, [pc, #12]	; (4004dc <bb_port_get_data_direct32+0x20>)
  4004d0:	21c3      	movs	r1, #195	; 0xc3
  4004d2:	4803      	ldr	r0, [pc, #12]	; (4004e0 <bb_port_get_data_direct32+0x24>)
  4004d4:	4c03      	ldr	r4, [pc, #12]	; (4004e4 <bb_port_get_data_direct32+0x28>)
  4004d6:	47a0      	blx	r4
  4004d8:	00404ae4 	.word	0x00404ae4
  4004dc:	00404a90 	.word	0x00404a90
  4004e0:	00404acc 	.word	0x00404acc
  4004e4:	0040195d 	.word	0x0040195d

004004e8 <bb_get_element>:
 */
BlackboardElement_T * bb_get_element(const CANElementIndex_T idx)
{
    static Blackboard_T theBB;
    return &theBB.elements[idx];
}
  4004e8:	4b01      	ldr	r3, [pc, #4]	; (4004f0 <bb_get_element+0x8>)
  4004ea:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  4004ee:	4770      	bx	lr
  4004f0:	204009dc 	.word	0x204009dc

004004f4 <bb_set_SCM_motor1MaxSpeed>:
 * @brief Sets the SCM_motor1MaxSpeed value within the blackboard.
 * @see bb_get_SCM_motor1MaxSpeed for a description of this property.
 * @param value int16_t in step/s
 */
void bb_set_SCM_motor1MaxSpeed(const float32_T value)
{
  4004f4:	b500      	push	{lr}
  4004f6:	ed2d 8b02 	vpush	{d8}
  4004fa:	b083      	sub	sp, #12
  4004fc:	ee08 0a10 	vmov	s16, r0
    const CANMsgInfo_T * canMsgInfo = can_elem_get_can_msg_info_idx(CAN_ELEM_SCM_Motor1Params1);
  400500:	2000      	movs	r0, #0
  400502:	4b0a      	ldr	r3, [pc, #40]	; (40052c <bb_set_SCM_motor1MaxSpeed+0x38>)
  400504:	4798      	blx	r3
static inline int16_t bb_utils_floatToFixed16(const float32_T fvalue, const uint16_t bits)
{
    const uint32_t shift = 1UL << bits;
    const float32_T fshift = (float32_T)(shift);
    const float32_T fproduct = fvalue * fshift;
    return (int16_t)(fproduct);
  400506:	eef0 7a48 	vmov.f32	s15, s16
  40050a:	eefe 7acf 	vcvt.s32.f32	s15, s15, #2
  40050e:	edcd 7a01 	vstr	s15, [sp, #4]
    BlackboardElement_T * bbElem = bb_get_element(CAN_ELEM_SCM_Motor1Params1);
    const CANDataInfo_T * dataInfo = &canMsgInfo->data_info[2];
    bb_elem_set_int16_data(bbElem, bb_utils_floatToFixed16(value, 2U), dataInfo->start_byte);
  400512:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
  400516:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
  40051a:	4805      	ldr	r0, [pc, #20]	; (400530 <bb_set_SCM_motor1MaxSpeed+0x3c>)
  40051c:	4b05      	ldr	r3, [pc, #20]	; (400534 <bb_set_SCM_motor1MaxSpeed+0x40>)
  40051e:	4798      	blx	r3
}
  400520:	b003      	add	sp, #12
  400522:	ecbd 8b02 	vpop	{d8}
  400526:	f85d fb04 	ldr.w	pc, [sp], #4
  40052a:	bf00      	nop
  40052c:	004003dd 	.word	0x004003dd
  400530:	204009dc 	.word	0x204009dc
  400534:	00400291 	.word	0x00400291

00400538 <bb_set_SCM_motor1MinSpeed>:
 * @brief Sets the SCM_motor1MinSpeed value within the blackboard.
 * @see bb_get_SCM_motor1MinSpeed for a description of this property.
 * @param value int16_t in step/s
 */
void bb_set_SCM_motor1MinSpeed(const float32_T value)
{
  400538:	b500      	push	{lr}
  40053a:	ed2d 8b02 	vpush	{d8}
  40053e:	b083      	sub	sp, #12
  400540:	ee08 0a10 	vmov	s16, r0
    const CANMsgInfo_T * canMsgInfo = can_elem_get_can_msg_info_idx(CAN_ELEM_SCM_Motor1Params1);
  400544:	2000      	movs	r0, #0
  400546:	4b0a      	ldr	r3, [pc, #40]	; (400570 <bb_set_SCM_motor1MinSpeed+0x38>)
  400548:	4798      	blx	r3
  40054a:	eef0 7a48 	vmov.f32	s15, s16
  40054e:	eefe 7acf 	vcvt.s32.f32	s15, s15, #2
  400552:	edcd 7a01 	vstr	s15, [sp, #4]
    BlackboardElement_T * bbElem = bb_get_element(CAN_ELEM_SCM_Motor1Params1);
    const CANDataInfo_T * dataInfo = &canMsgInfo->data_info[3];
    bb_elem_set_int16_data(bbElem, bb_utils_floatToFixed16(value, 2U), dataInfo->start_byte);
  400556:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
  40055a:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
  40055e:	4805      	ldr	r0, [pc, #20]	; (400574 <bb_set_SCM_motor1MinSpeed+0x3c>)
  400560:	4b05      	ldr	r3, [pc, #20]	; (400578 <bb_set_SCM_motor1MinSpeed+0x40>)
  400562:	4798      	blx	r3
}
  400564:	b003      	add	sp, #12
  400566:	ecbd 8b02 	vpop	{d8}
  40056a:	f85d fb04 	ldr.w	pc, [sp], #4
  40056e:	bf00      	nop
  400570:	004003dd 	.word	0x004003dd
  400574:	204009dc 	.word	0x204009dc
  400578:	00400291 	.word	0x00400291

0040057c <bb_set_SCM_Motor1Control>:
 * @brief Sets the SCM_Motor1Control value within the blackboard.
 * @see bb_get_SCM_Motor1Control for a description of this property.
 * @param value int8_t in steps
 */
void bb_set_SCM_Motor1Control(const int8_t value)
{
  40057c:	b510      	push	{r4, lr}
  40057e:	4604      	mov	r4, r0
    const CANMsgInfo_T * canMsgInfo = can_elem_get_can_msg_info_idx(CAN_ELEM_SCM_Motor1Control);
  400580:	2001      	movs	r0, #1
  400582:	4b04      	ldr	r3, [pc, #16]	; (400594 <bb_set_SCM_Motor1Control+0x18>)
  400584:	4798      	blx	r3
    BlackboardElement_T * bbElem = bb_get_element(CAN_ELEM_SCM_Motor1Control);
    const CANDataInfo_T * dataInfo = &canMsgInfo->data_info[0];
    bb_elem_set_int8_data(bbElem, value, dataInfo->start_byte);
  400586:	7d42      	ldrb	r2, [r0, #21]
  400588:	4621      	mov	r1, r4
  40058a:	4803      	ldr	r0, [pc, #12]	; (400598 <bb_set_SCM_Motor1Control+0x1c>)
  40058c:	4b03      	ldr	r3, [pc, #12]	; (40059c <bb_set_SCM_Motor1Control+0x20>)
  40058e:	4798      	blx	r3
  400590:	bd10      	pop	{r4, pc}
  400592:	bf00      	nop
  400594:	004003dd 	.word	0x004003dd
  400598:	204009ec 	.word	0x204009ec
  40059c:	00400269 	.word	0x00400269

004005a0 <bb_set_SCM_Motor3Control>:
 * @brief Sets the SCM_Motor3Control value within the blackboard.
 * @see bb_get_SCM_Motor3Control for a description of this property.
 * @param value int8_t in steps
 */
void bb_set_SCM_Motor3Control(const int8_t value)
{
  4005a0:	b510      	push	{r4, lr}
  4005a2:	4604      	mov	r4, r0
    const CANMsgInfo_T * canMsgInfo = can_elem_get_can_msg_info_idx(CAN_ELEM_SCM_Motor3Control);
  4005a4:	2003      	movs	r0, #3
  4005a6:	4b04      	ldr	r3, [pc, #16]	; (4005b8 <bb_set_SCM_Motor3Control+0x18>)
  4005a8:	4798      	blx	r3
    BlackboardElement_T * bbElem = bb_get_element(CAN_ELEM_SCM_Motor3Control);
    const CANDataInfo_T * dataInfo = &canMsgInfo->data_info[0];
    bb_elem_set_int8_data(bbElem, value, dataInfo->start_byte);
  4005aa:	7d42      	ldrb	r2, [r0, #21]
  4005ac:	4621      	mov	r1, r4
  4005ae:	4803      	ldr	r0, [pc, #12]	; (4005bc <bb_set_SCM_Motor3Control+0x1c>)
  4005b0:	4b03      	ldr	r3, [pc, #12]	; (4005c0 <bb_set_SCM_Motor3Control+0x20>)
  4005b2:	4798      	blx	r3
  4005b4:	bd10      	pop	{r4, pc}
  4005b6:	bf00      	nop
  4005b8:	004003dd 	.word	0x004003dd
  4005bc:	20400a0c 	.word	0x20400a0c
  4005c0:	00400269 	.word	0x00400269

004005c4 <CANRxTask>:

// #include "stdint.h"
static int16_t canMessageNotReceived;

void CANRxTask(void)
{
  4005c4:	b530      	push	{r4, r5, lr}
  4005c6:	b087      	sub	sp, #28
  static const int16_t NO_CAN_MESSAGE_RECEIVED = 12000;   // 1 minute
  can_frame_t r_message;
  (void)candriver_read(&r_message);
  4005c8:	a802      	add	r0, sp, #8
  4005ca:	4b1d      	ldr	r3, [pc, #116]	; (400640 <CANRxTask+0x7c>)
  4005cc:	4798      	blx	r3
  CANElementIndex_T foundIdx = CAN_ELEM_LAST_MSG;
  4005ce:	a906      	add	r1, sp, #24
  4005d0:	2306      	movs	r3, #6
  4005d2:	f801 3d11 	strb.w	r3, [r1, #-17]!
  (void)can_elem_get_can_msg_info_msgid(r_message.id, &foundIdx);
  4005d6:	9802      	ldr	r0, [sp, #8]
  4005d8:	4b1a      	ldr	r3, [pc, #104]	; (400644 <CANRxTask+0x80>)
  4005da:	4798      	blx	r3
  if (foundIdx != CAN_ELEM_LAST_MSG){
  4005dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
  4005e0:	2806      	cmp	r0, #6
  4005e2:	d004      	beq.n	4005ee <CANRxTask+0x2a>
    // printf("%d\r\n", foundIdx);
    // Find the corresponding Blackboard Element using the index derived from the message ID
      const CANElement_T * canElement = can_elem_get_can_elem_idx(foundIdx);
  4005e4:	4b18      	ldr	r3, [pc, #96]	; (400648 <CANRxTask+0x84>)
  4005e6:	4798      	blx	r3
      if ((uint32_t)(canElement->rxChan) != 0UL)
  4005e8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
  4005ec:	b90b      	cbnz	r3, 4005f2 <CANRxTask+0x2e>
  //       bb_elem_set_data_from_can(bbElement, foundIdx, d0, d1);
  //     }
  //   }
  //   // else is a message this device does not subscribe to. Not an error.
  // }
  4005ee:	b007      	add	sp, #28
  4005f0:	bd30      	pop	{r4, r5, pc}
    ((uint32_t)b3 * 256U * 256U * 256U);
  4005f2:	f89d 4010 	ldrb.w	r4, [sp, #16]
    ((uint32_t)b2 * 256U * 256U) +
  4005f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
  4005fa:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    ((uint32_t)b1 * 256U) +
  4005fe:	f89d 400e 	ldrb.w	r4, [sp, #14]
    ((uint32_t)b2 * 256U * 256U) +
  400602:	eb04 2303 	add.w	r3, r4, r3, lsl #8
    (uint32_t)b0 +
  400606:	f89d 400d 	ldrb.w	r4, [sp, #13]
    ((uint32_t)b2 * 256U * 256U) +
  40060a:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    ((uint32_t)b3 * 256U * 256U * 256U);
  40060e:	f89d 5014 	ldrb.w	r5, [sp, #20]
    ((uint32_t)b2 * 256U * 256U) +
  400612:	f89d 3013 	ldrb.w	r3, [sp, #19]
  400616:	eb03 2305 	add.w	r3, r3, r5, lsl #8
    ((uint32_t)b1 * 256U) +
  40061a:	f89d 5012 	ldrb.w	r5, [sp, #18]
    ((uint32_t)b2 * 256U * 256U) +
  40061e:	eb05 2303 	add.w	r3, r5, r3, lsl #8
    (uint32_t)b0 +
  400622:	f89d 5011 	ldrb.w	r5, [sp, #17]
    ((uint32_t)b2 * 256U * 256U) +
  400626:	eb05 2503 	add.w	r5, r5, r3, lsl #8
        BlackboardElement_T *bbElement = bb_get_element(foundIdx);
  40062a:	f89d 0007 	ldrb.w	r0, [sp, #7]
  40062e:	4b07      	ldr	r3, [pc, #28]	; (40064c <CANRxTask+0x88>)
  400630:	4798      	blx	r3
        bb_elem_set_data_from_can(bbElement, foundIdx, d0, d1);
  400632:	462b      	mov	r3, r5
  400634:	4622      	mov	r2, r4
  400636:	f89d 1007 	ldrb.w	r1, [sp, #7]
  40063a:	4c05      	ldr	r4, [pc, #20]	; (400650 <CANRxTask+0x8c>)
  40063c:	47a0      	blx	r4
  40063e:	e7d6      	b.n	4005ee <CANRxTask+0x2a>
  400640:	00400b4d 	.word	0x00400b4d
  400644:	004003ed 	.word	0x004003ed
  400648:	004003cd 	.word	0x004003cd
  40064c:	004004e9 	.word	0x004004e9
  400650:	00400209 	.word	0x00400209

00400654 <CANTxTaskInit>:

static uint32_t prevTicks;
static uint32_t sleepTicks;

void CANTxTaskInit(void)
{
  400654:	b510      	push	{r4, lr}
  400656:	b082      	sub	sp, #8
	{
		{ &scm_can_trans, NULL }
	};

	const uint32_t MaxCanTxProcDelay = 10000UL;
	sleepTicks = 0U;
  400658:	2300      	movs	r3, #0
  40065a:	4a07      	ldr	r2, [pc, #28]	; (400678 <CANTxTaskInit+0x24>)
  40065c:	6013      	str	r3, [r2, #0]
	prevTicks = 0U;
  40065e:	4a07      	ldr	r2, [pc, #28]	; (40067c <CANTxTaskInit+0x28>)
  400660:	6013      	str	r3, [r2, #0]
	bb_tx_proc_init(&bbtxProc, MaxCanTxProcDelay, icanHazTxers, (uint32_t)(sizeof(icanHazTxers)/sizeof(icanHazTxers[0])), 0U);
  400662:	9300      	str	r3, [sp, #0]
  400664:	2301      	movs	r3, #1
  400666:	4a06      	ldr	r2, [pc, #24]	; (400680 <CANTxTaskInit+0x2c>)
  400668:	f242 7110 	movw	r1, #10000	; 0x2710
  40066c:	4805      	ldr	r0, [pc, #20]	; (400684 <CANTxTaskInit+0x30>)
  40066e:	4c06      	ldr	r4, [pc, #24]	; (400688 <CANTxTaskInit+0x34>)
  400670:	47a0      	blx	r4
}
  400672:	b002      	add	sp, #8
  400674:	bd10      	pop	{r4, pc}
  400676:	bf00      	nop
  400678:	20400a4c 	.word	0x20400a4c
  40067c:	20400a48 	.word	0x20400a48
  400680:	20400000 	.word	0x20400000
  400684:	20400a3c 	.word	0x20400a3c
  400688:	004002a1 	.word	0x004002a1

0040068c <CANTxTask>:

void CANTxTask(uint32_t curr_tick_ms)
{
	if (curr_tick_ms >= (prevTicks + sleepTicks))
  40068c:	4b09      	ldr	r3, [pc, #36]	; (4006b4 <CANTxTask+0x28>)
  40068e:	681a      	ldr	r2, [r3, #0]
  400690:	4b09      	ldr	r3, [pc, #36]	; (4006b8 <CANTxTask+0x2c>)
  400692:	681b      	ldr	r3, [r3, #0]
  400694:	4413      	add	r3, r2
  400696:	4283      	cmp	r3, r0
  400698:	d900      	bls.n	40069c <CANTxTask+0x10>
  40069a:	4770      	bx	lr
{
  40069c:	b510      	push	{r4, lr}
  40069e:	4604      	mov	r4, r0
	{
		sleepTicks = bb_tx_proc_process_tx(&bbtxProc, curr_tick_ms, prevTicks);
  4006a0:	4601      	mov	r1, r0
  4006a2:	4806      	ldr	r0, [pc, #24]	; (4006bc <CANTxTask+0x30>)
  4006a4:	4b06      	ldr	r3, [pc, #24]	; (4006c0 <CANTxTask+0x34>)
  4006a6:	4798      	blx	r3
  4006a8:	4b03      	ldr	r3, [pc, #12]	; (4006b8 <CANTxTask+0x2c>)
  4006aa:	6018      	str	r0, [r3, #0]
		prevTicks = curr_tick_ms;
  4006ac:	4b01      	ldr	r3, [pc, #4]	; (4006b4 <CANTxTask+0x28>)
  4006ae:	601c      	str	r4, [r3, #0]
  4006b0:	bd10      	pop	{r4, pc}
  4006b2:	bf00      	nop
  4006b4:	20400a48 	.word	0x20400a48
  4006b8:	20400a4c 	.word	0x20400a4c
  4006bc:	20400a3c 	.word	0x20400a3c
  4006c0:	00400355 	.word	0x00400355

004006c4 <SCMCallback_print>:
    SCMEvent_T scmEvent = (SCMEvent_T)(uint32_t)(uint64_t)(SCM_EVENT_FOO);
    // printf("testCallback: SCM_EVENT_FOO=%d, rxChan=%d, txChan=%d, counter=%d\n", scmEvent, rxChan, txChan, hackyStickyCounter++);
}


void SCMCallback_print(void * SCM_EVENT, CanChannel_T rxChan, CanChannel_T txChan){
  4006c4:	b508      	push	{r3, lr}
    printf("Receive =%d\n", hackyStickyCounter++);
  4006c6:	4b04      	ldr	r3, [pc, #16]	; (4006d8 <SCMCallback_print+0x14>)
  4006c8:	6819      	ldr	r1, [r3, #0]
  4006ca:	1c4a      	adds	r2, r1, #1
  4006cc:	601a      	str	r2, [r3, #0]
  4006ce:	4803      	ldr	r0, [pc, #12]	; (4006dc <SCMCallback_print+0x18>)
  4006d0:	4b03      	ldr	r3, [pc, #12]	; (4006e0 <SCMCallback_print+0x1c>)
  4006d2:	4798      	blx	r3
  4006d4:	bd08      	pop	{r3, pc}
  4006d6:	bf00      	nop
  4006d8:	20400a50 	.word	0x20400a50
  4006dc:	00404d5c 	.word	0x00404d5c
  4006e0:	00401a11 	.word	0x00401a11

004006e4 <CanMessageControl_Task>:


#include "sample.h"
#include "blackboard.h"

void CanMessageControl_Task(void){
  4006e4:	b538      	push	{r3, r4, r5, lr}

    #ifndef TEST
  static uint16_t currentCount = (uint16_t)0;
  #endif

  if ((uint16_t)0 == currentCount)
  4006e6:	4b14      	ldr	r3, [pc, #80]	; (400738 <CanMessageControl_Task+0x54>)
  4006e8:	881b      	ldrh	r3, [r3, #0]
  4006ea:	b1cb      	cbz	r3, 400720 <CanMessageControl_Task+0x3c>
  { // 20Hz (req >= 10Hz)
    bb_set_SCM_motor1MaxSpeed(4782.5);
  }
  if ((currentCount & (uint16_t)1) == (uint16_t)1)
  4006ec:	4b12      	ldr	r3, [pc, #72]	; (400738 <CanMessageControl_Task+0x54>)
  4006ee:	881b      	ldrh	r3, [r3, #0]
  4006f0:	f013 0f01 	tst.w	r3, #1
  4006f4:	d118      	bne.n	400728 <CanMessageControl_Task+0x44>
  { // 100Hz (req >= 50Hz)
    bb_set_SCM_motor1MinSpeed(2302);
  }
  // 200Hz (req >= 100Hz)

	bb_set_SCM_Motor1Control(add_1());
  4006f6:	4d11      	ldr	r5, [pc, #68]	; (40073c <CanMessageControl_Task+0x58>)
  4006f8:	47a8      	blx	r5
  4006fa:	4b11      	ldr	r3, [pc, #68]	; (400740 <CanMessageControl_Task+0x5c>)
  4006fc:	4798      	blx	r3
	bb_set_SCM_Motor3Control(add_1()+add_1());
  4006fe:	47a8      	blx	r5
  400700:	4604      	mov	r4, r0
  400702:	47a8      	blx	r5
  400704:	4420      	add	r0, r4
  400706:	b240      	sxtb	r0, r0
  400708:	4b0e      	ldr	r3, [pc, #56]	; (400744 <CanMessageControl_Task+0x60>)
  40070a:	4798      	blx	r3

  ++currentCount;
  40070c:	4b0a      	ldr	r3, [pc, #40]	; (400738 <CanMessageControl_Task+0x54>)
  40070e:	881b      	ldrh	r3, [r3, #0]
  400710:	3301      	adds	r3, #1
  400712:	b29b      	uxth	r3, r3
  if ((uint16_t)10 <= currentCount)
  400714:	2b09      	cmp	r3, #9
  400716:	d90b      	bls.n	400730 <CanMessageControl_Task+0x4c>
  {
    currentCount = (uint16_t)0;
  400718:	2200      	movs	r2, #0
  40071a:	4b07      	ldr	r3, [pc, #28]	; (400738 <CanMessageControl_Task+0x54>)
  40071c:	801a      	strh	r2, [r3, #0]
  40071e:	bd38      	pop	{r3, r4, r5, pc}
    bb_set_SCM_motor1MaxSpeed(4782.5);
  400720:	4809      	ldr	r0, [pc, #36]	; (400748 <CanMessageControl_Task+0x64>)
  400722:	4b0a      	ldr	r3, [pc, #40]	; (40074c <CanMessageControl_Task+0x68>)
  400724:	4798      	blx	r3
  400726:	e7e1      	b.n	4006ec <CanMessageControl_Task+0x8>
    bb_set_SCM_motor1MinSpeed(2302);
  400728:	4809      	ldr	r0, [pc, #36]	; (400750 <CanMessageControl_Task+0x6c>)
  40072a:	4b0a      	ldr	r3, [pc, #40]	; (400754 <CanMessageControl_Task+0x70>)
  40072c:	4798      	blx	r3
  40072e:	e7e2      	b.n	4006f6 <CanMessageControl_Task+0x12>
  ++currentCount;
  400730:	4a01      	ldr	r2, [pc, #4]	; (400738 <CanMessageControl_Task+0x54>)
  400732:	8013      	strh	r3, [r2, #0]
  400734:	bd38      	pop	{r3, r4, r5, pc}
  400736:	bf00      	nop
  400738:	20400a54 	.word	0x20400a54
  40073c:	00400769 	.word	0x00400769
  400740:	0040057d 	.word	0x0040057d
  400744:	004005a1 	.word	0x004005a1
  400748:	45957400 	.word	0x45957400
  40074c:	004004f5 	.word	0x004004f5
  400750:	450fe000 	.word	0x450fe000
  400754:	00400539 	.word	0x00400539

00400758 <sample_1>:
static uint16_t count_2=0;

void sample_init();
void sample_1(){

    count_1++;
  400758:	4a02      	ldr	r2, [pc, #8]	; (400764 <sample_1+0xc>)
  40075a:	8813      	ldrh	r3, [r2, #0]
  40075c:	3301      	adds	r3, #1
  40075e:	8013      	strh	r3, [r2, #0]
  400760:	4770      	bx	lr
  400762:	bf00      	nop
  400764:	20400a56 	.word	0x20400a56

00400768 <add_1>:
 
};

uint8_t add_1(){
    return count_1;
  400768:	4b01      	ldr	r3, [pc, #4]	; (400770 <add_1+0x8>)
  40076a:	7818      	ldrb	r0, [r3, #0]
  40076c:	4770      	bx	lr
  40076e:	bf00      	nop
  400770:	20400a56 	.word	0x20400a56

00400774 <scm_can_trans>:
* @param data CAN payload data, update to 8 bytes
* @param length Number of CAN data payload bytes to send
*/

void scm_can_trans(ICANTxCtx_T context, uint32_t msgID, uint8_t * data, uint8_t length)
{
  400774:	b510      	push	{r4, lr}
	const uint8_t MaxBytesPerCanMsg = 8U; // TODO: Centralized definition for this?
	SLI_ASSERT(length <= MaxBytesPerCanMsg);
  400776:	2b08      	cmp	r3, #8
  400778:	d80a      	bhi.n	400790 <scm_can_trans+0x1c>
  40077a:	4608      	mov	r0, r1
  40077c:	4611      	mov	r1, r2
	
	(void)context;    // Unused

	// CANDriver can track its own error counter
    (void)candriver_send(msgID, data, length);
  40077e:	461a      	mov	r2, r3
  400780:	4b06      	ldr	r3, [pc, #24]	; (40079c <scm_can_trans+0x28>)
  400782:	4798      	blx	r3

	candriver_error_poll();
  400784:	4b06      	ldr	r3, [pc, #24]	; (4007a0 <scm_can_trans+0x2c>)
  400786:	4798      	blx	r3
	printf("Success\r\n"); //delay
  400788:	4806      	ldr	r0, [pc, #24]	; (4007a4 <scm_can_trans+0x30>)
  40078a:	4b07      	ldr	r3, [pc, #28]	; (4007a8 <scm_can_trans+0x34>)
  40078c:	4798      	blx	r3
  40078e:	bd10      	pop	{r4, pc}
	SLI_ASSERT(length <= MaxBytesPerCanMsg);
  400790:	4b06      	ldr	r3, [pc, #24]	; (4007ac <scm_can_trans+0x38>)
  400792:	4a07      	ldr	r2, [pc, #28]	; (4007b0 <scm_can_trans+0x3c>)
  400794:	2123      	movs	r1, #35	; 0x23
  400796:	4807      	ldr	r0, [pc, #28]	; (4007b4 <scm_can_trans+0x40>)
  400798:	4c07      	ldr	r4, [pc, #28]	; (4007b8 <scm_can_trans+0x44>)
  40079a:	47a0      	blx	r4
  40079c:	00400bf5 	.word	0x00400bf5
  4007a0:	00400b49 	.word	0x00400b49
  4007a4:	00404db8 	.word	0x00404db8
  4007a8:	00401a11 	.word	0x00401a11
  4007ac:	00404d7c 	.word	0x00404d7c
  4007b0:	00404d6c 	.word	0x00404d6c
  4007b4:	00404d98 	.word	0x00404d98
  4007b8:	0040195d 	.word	0x0040195d

004007bc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4007be:	b083      	sub	sp, #12
  4007c0:	4605      	mov	r5, r0
  4007c2:	460c      	mov	r4, r1
	uint32_t val = 0;
  4007c4:	2300      	movs	r3, #0
  4007c6:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4007c8:	4b2a      	ldr	r3, [pc, #168]	; (400874 <usart_serial_getchar+0xb8>)
  4007ca:	4298      	cmp	r0, r3
  4007cc:	d013      	beq.n	4007f6 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4007ce:	4b2a      	ldr	r3, [pc, #168]	; (400878 <usart_serial_getchar+0xbc>)
  4007d0:	4298      	cmp	r0, r3
  4007d2:	d018      	beq.n	400806 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4007d4:	4b29      	ldr	r3, [pc, #164]	; (40087c <usart_serial_getchar+0xc0>)
  4007d6:	4298      	cmp	r0, r3
  4007d8:	d01d      	beq.n	400816 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4007da:	4b29      	ldr	r3, [pc, #164]	; (400880 <usart_serial_getchar+0xc4>)
  4007dc:	429d      	cmp	r5, r3
  4007de:	d022      	beq.n	400826 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4007e0:	4b28      	ldr	r3, [pc, #160]	; (400884 <usart_serial_getchar+0xc8>)
  4007e2:	429d      	cmp	r5, r3
  4007e4:	d027      	beq.n	400836 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4007e6:	4b28      	ldr	r3, [pc, #160]	; (400888 <usart_serial_getchar+0xcc>)
  4007e8:	429d      	cmp	r5, r3
  4007ea:	d02e      	beq.n	40084a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4007ec:	4b27      	ldr	r3, [pc, #156]	; (40088c <usart_serial_getchar+0xd0>)
  4007ee:	429d      	cmp	r5, r3
  4007f0:	d035      	beq.n	40085e <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4007f2:	b003      	add	sp, #12
  4007f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4007f6:	461f      	mov	r7, r3
  4007f8:	4e25      	ldr	r6, [pc, #148]	; (400890 <usart_serial_getchar+0xd4>)
  4007fa:	4621      	mov	r1, r4
  4007fc:	4638      	mov	r0, r7
  4007fe:	47b0      	blx	r6
  400800:	2800      	cmp	r0, #0
  400802:	d1fa      	bne.n	4007fa <usart_serial_getchar+0x3e>
  400804:	e7e9      	b.n	4007da <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400806:	461f      	mov	r7, r3
  400808:	4e21      	ldr	r6, [pc, #132]	; (400890 <usart_serial_getchar+0xd4>)
  40080a:	4621      	mov	r1, r4
  40080c:	4638      	mov	r0, r7
  40080e:	47b0      	blx	r6
  400810:	2800      	cmp	r0, #0
  400812:	d1fa      	bne.n	40080a <usart_serial_getchar+0x4e>
  400814:	e7e4      	b.n	4007e0 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  400816:	461f      	mov	r7, r3
  400818:	4e1d      	ldr	r6, [pc, #116]	; (400890 <usart_serial_getchar+0xd4>)
  40081a:	4621      	mov	r1, r4
  40081c:	4638      	mov	r0, r7
  40081e:	47b0      	blx	r6
  400820:	2800      	cmp	r0, #0
  400822:	d1fa      	bne.n	40081a <usart_serial_getchar+0x5e>
  400824:	e7df      	b.n	4007e6 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  400826:	461f      	mov	r7, r3
  400828:	4e19      	ldr	r6, [pc, #100]	; (400890 <usart_serial_getchar+0xd4>)
  40082a:	4621      	mov	r1, r4
  40082c:	4638      	mov	r0, r7
  40082e:	47b0      	blx	r6
  400830:	2800      	cmp	r0, #0
  400832:	d1fa      	bne.n	40082a <usart_serial_getchar+0x6e>
  400834:	e7da      	b.n	4007ec <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  400836:	461e      	mov	r6, r3
  400838:	4d16      	ldr	r5, [pc, #88]	; (400894 <usart_serial_getchar+0xd8>)
  40083a:	a901      	add	r1, sp, #4
  40083c:	4630      	mov	r0, r6
  40083e:	47a8      	blx	r5
  400840:	2800      	cmp	r0, #0
  400842:	d1fa      	bne.n	40083a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  400844:	9b01      	ldr	r3, [sp, #4]
  400846:	7023      	strb	r3, [r4, #0]
  400848:	e7d3      	b.n	4007f2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40084a:	461e      	mov	r6, r3
  40084c:	4d11      	ldr	r5, [pc, #68]	; (400894 <usart_serial_getchar+0xd8>)
  40084e:	a901      	add	r1, sp, #4
  400850:	4630      	mov	r0, r6
  400852:	47a8      	blx	r5
  400854:	2800      	cmp	r0, #0
  400856:	d1fa      	bne.n	40084e <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  400858:	9b01      	ldr	r3, [sp, #4]
  40085a:	7023      	strb	r3, [r4, #0]
  40085c:	e7c9      	b.n	4007f2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40085e:	461e      	mov	r6, r3
  400860:	4d0c      	ldr	r5, [pc, #48]	; (400894 <usart_serial_getchar+0xd8>)
  400862:	a901      	add	r1, sp, #4
  400864:	4630      	mov	r0, r6
  400866:	47a8      	blx	r5
  400868:	2800      	cmp	r0, #0
  40086a:	d1fa      	bne.n	400862 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  40086c:	9b01      	ldr	r3, [sp, #4]
  40086e:	7023      	strb	r3, [r4, #0]
}
  400870:	e7bf      	b.n	4007f2 <usart_serial_getchar+0x36>
  400872:	bf00      	nop
  400874:	400e0800 	.word	0x400e0800
  400878:	400e0a00 	.word	0x400e0a00
  40087c:	400e1a00 	.word	0x400e1a00
  400880:	400e1c00 	.word	0x400e1c00
  400884:	40024000 	.word	0x40024000
  400888:	40028000 	.word	0x40028000
  40088c:	4002c000 	.word	0x4002c000
  400890:	0040151b 	.word	0x0040151b
  400894:	00401627 	.word	0x00401627

00400898 <usart_serial_putchar>:
{
  400898:	b570      	push	{r4, r5, r6, lr}
  40089a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  40089c:	4b2a      	ldr	r3, [pc, #168]	; (400948 <usart_serial_putchar+0xb0>)
  40089e:	4298      	cmp	r0, r3
  4008a0:	d013      	beq.n	4008ca <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  4008a2:	4b2a      	ldr	r3, [pc, #168]	; (40094c <usart_serial_putchar+0xb4>)
  4008a4:	4298      	cmp	r0, r3
  4008a6:	d019      	beq.n	4008dc <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  4008a8:	4b29      	ldr	r3, [pc, #164]	; (400950 <usart_serial_putchar+0xb8>)
  4008aa:	4298      	cmp	r0, r3
  4008ac:	d01f      	beq.n	4008ee <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  4008ae:	4b29      	ldr	r3, [pc, #164]	; (400954 <usart_serial_putchar+0xbc>)
  4008b0:	4298      	cmp	r0, r3
  4008b2:	d025      	beq.n	400900 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4008b4:	4b28      	ldr	r3, [pc, #160]	; (400958 <usart_serial_putchar+0xc0>)
  4008b6:	4298      	cmp	r0, r3
  4008b8:	d02b      	beq.n	400912 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4008ba:	4b28      	ldr	r3, [pc, #160]	; (40095c <usart_serial_putchar+0xc4>)
  4008bc:	4298      	cmp	r0, r3
  4008be:	d031      	beq.n	400924 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4008c0:	4b27      	ldr	r3, [pc, #156]	; (400960 <usart_serial_putchar+0xc8>)
  4008c2:	4298      	cmp	r0, r3
  4008c4:	d037      	beq.n	400936 <usart_serial_putchar+0x9e>
	return 0;
  4008c6:	2000      	movs	r0, #0
}
  4008c8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4008ca:	461e      	mov	r6, r3
  4008cc:	4d25      	ldr	r5, [pc, #148]	; (400964 <usart_serial_putchar+0xcc>)
  4008ce:	4621      	mov	r1, r4
  4008d0:	4630      	mov	r0, r6
  4008d2:	47a8      	blx	r5
  4008d4:	2800      	cmp	r0, #0
  4008d6:	d1fa      	bne.n	4008ce <usart_serial_putchar+0x36>
		return 1;
  4008d8:	2001      	movs	r0, #1
  4008da:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4008dc:	461e      	mov	r6, r3
  4008de:	4d21      	ldr	r5, [pc, #132]	; (400964 <usart_serial_putchar+0xcc>)
  4008e0:	4621      	mov	r1, r4
  4008e2:	4630      	mov	r0, r6
  4008e4:	47a8      	blx	r5
  4008e6:	2800      	cmp	r0, #0
  4008e8:	d1fa      	bne.n	4008e0 <usart_serial_putchar+0x48>
		return 1;
  4008ea:	2001      	movs	r0, #1
  4008ec:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4008ee:	461e      	mov	r6, r3
  4008f0:	4d1c      	ldr	r5, [pc, #112]	; (400964 <usart_serial_putchar+0xcc>)
  4008f2:	4621      	mov	r1, r4
  4008f4:	4630      	mov	r0, r6
  4008f6:	47a8      	blx	r5
  4008f8:	2800      	cmp	r0, #0
  4008fa:	d1fa      	bne.n	4008f2 <usart_serial_putchar+0x5a>
		return 1;
  4008fc:	2001      	movs	r0, #1
  4008fe:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400900:	461e      	mov	r6, r3
  400902:	4d18      	ldr	r5, [pc, #96]	; (400964 <usart_serial_putchar+0xcc>)
  400904:	4621      	mov	r1, r4
  400906:	4630      	mov	r0, r6
  400908:	47a8      	blx	r5
  40090a:	2800      	cmp	r0, #0
  40090c:	d1fa      	bne.n	400904 <usart_serial_putchar+0x6c>
		return 1;
  40090e:	2001      	movs	r0, #1
  400910:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400912:	461e      	mov	r6, r3
  400914:	4d14      	ldr	r5, [pc, #80]	; (400968 <usart_serial_putchar+0xd0>)
  400916:	4621      	mov	r1, r4
  400918:	4630      	mov	r0, r6
  40091a:	47a8      	blx	r5
  40091c:	2800      	cmp	r0, #0
  40091e:	d1fa      	bne.n	400916 <usart_serial_putchar+0x7e>
		return 1;
  400920:	2001      	movs	r0, #1
  400922:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400924:	461e      	mov	r6, r3
  400926:	4d10      	ldr	r5, [pc, #64]	; (400968 <usart_serial_putchar+0xd0>)
  400928:	4621      	mov	r1, r4
  40092a:	4630      	mov	r0, r6
  40092c:	47a8      	blx	r5
  40092e:	2800      	cmp	r0, #0
  400930:	d1fa      	bne.n	400928 <usart_serial_putchar+0x90>
		return 1;
  400932:	2001      	movs	r0, #1
  400934:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400936:	461e      	mov	r6, r3
  400938:	4d0b      	ldr	r5, [pc, #44]	; (400968 <usart_serial_putchar+0xd0>)
  40093a:	4621      	mov	r1, r4
  40093c:	4630      	mov	r0, r6
  40093e:	47a8      	blx	r5
  400940:	2800      	cmp	r0, #0
  400942:	d1fa      	bne.n	40093a <usart_serial_putchar+0xa2>
		return 1;
  400944:	2001      	movs	r0, #1
  400946:	bd70      	pop	{r4, r5, r6, pc}
  400948:	400e0800 	.word	0x400e0800
  40094c:	400e0a00 	.word	0x400e0a00
  400950:	400e1a00 	.word	0x400e1a00
  400954:	400e1c00 	.word	0x400e1c00
  400958:	40024000 	.word	0x40024000
  40095c:	40028000 	.word	0x40028000
  400960:	4002c000 	.word	0x4002c000
  400964:	00401509 	.word	0x00401509
  400968:	00401611 	.word	0x00401611

0040096c <configure_mcan>:
/**
 * \brief MCAN module initialization.
 *
 */
static void configure_mcan(void)
{
  40096c:	b510      	push	{r4, lr}
  40096e:	b08a      	sub	sp, #40	; 0x28
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->run_in_standby = false;
  400970:	2300      	movs	r3, #0
  400972:	f88d 3004 	strb.w	r3, [sp, #4]
	config->watchdog_configuration = 0x00;
  400976:	f88d 3005 	strb.w	r3, [sp, #5]
	config->transmit_pause = true;
  40097a:	2201      	movs	r2, #1
  40097c:	f88d 2006 	strb.w	r2, [sp, #6]
	config->edge_filtering = true;
  400980:	f88d 2007 	strb.w	r2, [sp, #7]
	config->protocol_exception_handling = true;
  400984:	f88d 2008 	strb.w	r2, [sp, #8]
	config->automatic_retransmission = true;
  400988:	f88d 2009 	strb.w	r2, [sp, #9]
	config->clock_stop_request = false;
  40098c:	f88d 300a 	strb.w	r3, [sp, #10]
	config->clock_stop_acknowledge = false;
  400990:	f88d 300b 	strb.w	r3, [sp, #11]
	config->timestamp_prescaler = 0;
  400994:	f88d 300c 	strb.w	r3, [sp, #12]
	config->timeout_period = 0xFFFF;
  400998:	f64f 71ff 	movw	r1, #65535	; 0xffff
  40099c:	f8ad 100e 	strh.w	r1, [sp, #14]
	config->timeout_mode = MCAN_TIMEOUT_CONTINUES;
  4009a0:	f88d 3010 	strb.w	r3, [sp, #16]
	config->timeout_enable = false;
  4009a4:	f88d 3011 	strb.w	r3, [sp, #17]
	config->tdc_enable = false;
  4009a8:	f88d 3012 	strb.w	r3, [sp, #18]
	config->delay_compensation_offset = 0;
  4009ac:	f88d 3013 	strb.w	r3, [sp, #19]
#if (SAMV71B || SAME70B || SAMV70B)
	config->delay_compensation_filter_window_length = 0;
  4009b0:	f88d 3014 	strb.w	r3, [sp, #20]
#endif
	config->nonmatching_frames_action_standard = MCAN_NONMATCHING_FRAMES_FIFO_0;
  4009b4:	f88d 3015 	strb.w	r3, [sp, #21]
	config->nonmatching_frames_action_extended = MCAN_NONMATCHING_FRAMES_FIFO_1;
  4009b8:	f88d 2016 	strb.w	r2, [sp, #22]
	config->remote_frames_standard_reject = true;
  4009bc:	f88d 2017 	strb.w	r2, [sp, #23]
	config->remote_frames_extended_reject = true;
  4009c0:	f88d 2018 	strb.w	r2, [sp, #24]
	config->extended_id_mask = 0x1FFFFFFF;
  4009c4:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
  4009c8:	9107      	str	r1, [sp, #28]
	config->rx_fifo_0_overwrite = true;
  4009ca:	f88d 2020 	strb.w	r2, [sp, #32]
	config->rx_fifo_0_watermark = 0;
  4009ce:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	config->rx_fifo_1_overwrite = true;
  4009d2:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
	config->rx_fifo_1_watermark = 0;
  4009d6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	config->tx_queue_mode = false;
  4009da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	config->tx_event_fifo_watermark = 0;
  4009de:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	}

	/* Initialize the module. */
	struct mcan_config config_mcan;
	mcan_get_config_defaults(&config_mcan);
	mcan_init(&mcan_instance, MCAN_MODULE, &config_mcan);
  4009e2:	4c0b      	ldr	r4, [pc, #44]	; (400a10 <configure_mcan+0xa4>)
  4009e4:	aa01      	add	r2, sp, #4
  4009e6:	490b      	ldr	r1, [pc, #44]	; (400a14 <configure_mcan+0xa8>)
  4009e8:	4620      	mov	r0, r4
  4009ea:	4b0b      	ldr	r3, [pc, #44]	; (400a18 <configure_mcan+0xac>)
  4009ec:	4798      	blx	r3


	mcan_start(&mcan_instance);
  4009ee:	4620      	mov	r0, r4
  4009f0:	4b0a      	ldr	r3, [pc, #40]	; (400a1c <configure_mcan+0xb0>)
  4009f2:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4009f4:	4b0a      	ldr	r3, [pc, #40]	; (400a20 <configure_mcan+0xb4>)
  4009f6:	2220      	movs	r2, #32
  4009f8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4009fc:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400a00:	605a      	str	r2, [r3, #4]
 * \param[in] source  Interrupt source type
 */
static inline void mcan_enable_interrupt(struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
	module_inst->hw->MCAN_IE |= source;
  400a02:	6822      	ldr	r2, [r4, #0]
  400a04:	6d53      	ldr	r3, [r2, #84]	; 0x54
  400a06:	f043 43c4 	orr.w	r3, r3, #1644167168	; 0x62000000
  400a0a:	6553      	str	r3, [r2, #84]	; 0x54
	/* Enable interrupts for this MCAN module */
	irq_register_handler(MCAN1_INT0_IRQn, 1);
	mcan_enable_interrupt(&mcan_instance, MCAN_FORMAT_ERROR | MCAN_ACKNOWLEDGE_ERROR | MCAN_BUS_OFF);
}
  400a0c:	b00a      	add	sp, #40	; 0x28
  400a0e:	bd10      	pop	{r4, pc}
  400a10:	20400a58 	.word	0x20400a58
  400a14:	40034000 	.word	0x40034000
  400a18:	00400f39 	.word	0x00400f39
  400a1c:	004011ad 	.word	0x004011ad
  400a20:	e000e100 	.word	0xe000e100

00400a24 <can_init>:

void can_init()
{
  400a24:	b570      	push	{r4, r5, r6, lr}
  400a26:	b086      	sub	sp, #24
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400a28:	200e      	movs	r0, #14
  400a2a:	4e18      	ldr	r6, [pc, #96]	; (400a8c <can_init+0x68>)
  400a2c:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400a2e:	4d18      	ldr	r5, [pc, #96]	; (400a90 <can_init+0x6c>)
  400a30:	4b18      	ldr	r3, [pc, #96]	; (400a94 <can_init+0x70>)
  400a32:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400a34:	4a18      	ldr	r2, [pc, #96]	; (400a98 <can_init+0x74>)
  400a36:	4b19      	ldr	r3, [pc, #100]	; (400a9c <can_init+0x78>)
  400a38:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400a3a:	4a19      	ldr	r2, [pc, #100]	; (400aa0 <can_init+0x7c>)
  400a3c:	4b19      	ldr	r3, [pc, #100]	; (400aa4 <can_init+0x80>)
  400a3e:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  400a40:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400a44:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  400a46:	23c0      	movs	r3, #192	; 0xc0
  400a48:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  400a4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400a4e:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  400a50:	2400      	movs	r4, #0
  400a52:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  400a54:	9404      	str	r4, [sp, #16]
  400a56:	200e      	movs	r0, #14
  400a58:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  400a5a:	4a13      	ldr	r2, [pc, #76]	; (400aa8 <can_init+0x84>)
  400a5c:	4669      	mov	r1, sp
  400a5e:	4628      	mov	r0, r5
  400a60:	4b12      	ldr	r3, [pc, #72]	; (400aac <can_init+0x88>)
  400a62:	4798      	blx	r3
		usart_enable_tx(p_usart);
  400a64:	4628      	mov	r0, r5
  400a66:	4b12      	ldr	r3, [pc, #72]	; (400ab0 <can_init+0x8c>)
  400a68:	4798      	blx	r3
		usart_enable_rx(p_usart);
  400a6a:	4628      	mov	r0, r5
  400a6c:	4b11      	ldr	r3, [pc, #68]	; (400ab4 <can_init+0x90>)
  400a6e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400a70:	4e11      	ldr	r6, [pc, #68]	; (400ab8 <can_init+0x94>)
  400a72:	6833      	ldr	r3, [r6, #0]
  400a74:	4621      	mov	r1, r4
  400a76:	6898      	ldr	r0, [r3, #8]
  400a78:	4d10      	ldr	r5, [pc, #64]	; (400abc <can_init+0x98>)
  400a7a:	47a8      	blx	r5
	setbuf(stdin, NULL);
  400a7c:	6833      	ldr	r3, [r6, #0]
  400a7e:	4621      	mov	r1, r4
  400a80:	6858      	ldr	r0, [r3, #4]
  400a82:	47a8      	blx	r5
	configure_console();
	configure_mcan();
  400a84:	4b0e      	ldr	r3, [pc, #56]	; (400ac0 <can_init+0x9c>)
  400a86:	4798      	blx	r3
}
  400a88:	b006      	add	sp, #24
  400a8a:	bd70      	pop	{r4, r5, r6, pc}
  400a8c:	00401485 	.word	0x00401485
  400a90:	40028000 	.word	0x40028000
  400a94:	204014ac 	.word	0x204014ac
  400a98:	00400899 	.word	0x00400899
  400a9c:	204014a8 	.word	0x204014a8
  400aa0:	004007bd 	.word	0x004007bd
  400aa4:	204014a4 	.word	0x204014a4
  400aa8:	08f0d180 	.word	0x08f0d180
  400aac:	004015b1 	.word	0x004015b1
  400ab0:	00401605 	.word	0x00401605
  400ab4:	0040160b 	.word	0x0040160b
  400ab8:	20400010 	.word	0x20400010
  400abc:	00401c09 	.word	0x00401c09
  400ac0:	0040096d 	.word	0x0040096d

00400ac4 <MCAN1_INT0_Handler>:
/**
 * \brief Interrupt handler for MCAN,
 *   inlcuding RX,TX,ERROR and so on processes.
 */
void MCAN1_INT0_Handler(void)
{
  400ac4:	b500      	push	{lr}
  400ac6:	b083      	sub	sp, #12
 * \param[in] module_inst  Pointer to the MCAN software instance struct
 */
static inline uint32_t mcan_read_interrupt_status(
		struct mcan_module *const module_inst)
{
	return module_inst->hw->MCAN_IR;
  400ac8:	4b18      	ldr	r3, [pc, #96]	; (400b2c <MCAN1_INT0_Handler+0x68>)
  400aca:	681b      	ldr	r3, [r3, #0]
  400acc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
	volatile uint32_t status, i, rx_buffer_index;
	status = mcan_read_interrupt_status(&mcan_instance);
  400ace:	9201      	str	r2, [sp, #4]


	if (status & MCAN_BUS_OFF) {
  400ad0:	9a01      	ldr	r2, [sp, #4]
  400ad2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
  400ad6:	d10a      	bne.n	400aee <MCAN1_INT0_Handler+0x2a>
		mcan_stop(&mcan_instance);
		printf(": MCAN bus off error, re-initialization. \r\n\r\n");
		configure_mcan();
	}

	if (status & MCAN_ACKNOWLEDGE_ERROR) {
  400ad8:	9b01      	ldr	r3, [sp, #4]
  400ada:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  400ade:	d112      	bne.n	400b06 <MCAN1_INT0_Handler+0x42>
		mcan_clear_interrupt_status(&mcan_instance, MCAN_ACKNOWLEDGE_ERROR);
		printf("Protocol ACK error, please double check the clock in two boards. \r\n\r\n");
	}

	if (status & MCAN_FORMAT_ERROR) {
  400ae0:	9b01      	ldr	r3, [sp, #4]
  400ae2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  400ae6:	d117      	bne.n	400b18 <MCAN1_INT0_Handler+0x54>
		mcan_clear_interrupt_status(&mcan_instance, MCAN_FORMAT_ERROR);
		printf("Protocol format error, please double check the clock in two boards. \r\n\r\n");
	}
}
  400ae8:	b003      	add	sp, #12
  400aea:	f85d fb04 	ldr.w	pc, [sp], #4
 */
static inline void mcan_clear_interrupt_status(
		struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
	module_inst->hw->MCAN_IR = source;
  400aee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400af2:	651a      	str	r2, [r3, #80]	; 0x50
		mcan_stop(&mcan_instance);
  400af4:	480d      	ldr	r0, [pc, #52]	; (400b2c <MCAN1_INT0_Handler+0x68>)
  400af6:	4b0e      	ldr	r3, [pc, #56]	; (400b30 <MCAN1_INT0_Handler+0x6c>)
  400af8:	4798      	blx	r3
		printf(": MCAN bus off error, re-initialization. \r\n\r\n");
  400afa:	480e      	ldr	r0, [pc, #56]	; (400b34 <MCAN1_INT0_Handler+0x70>)
  400afc:	4b0e      	ldr	r3, [pc, #56]	; (400b38 <MCAN1_INT0_Handler+0x74>)
  400afe:	4798      	blx	r3
		configure_mcan();
  400b00:	4b0e      	ldr	r3, [pc, #56]	; (400b3c <MCAN1_INT0_Handler+0x78>)
  400b02:	4798      	blx	r3
  400b04:	e7e8      	b.n	400ad8 <MCAN1_INT0_Handler+0x14>
  400b06:	4b09      	ldr	r3, [pc, #36]	; (400b2c <MCAN1_INT0_Handler+0x68>)
  400b08:	681b      	ldr	r3, [r3, #0]
  400b0a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400b0e:	651a      	str	r2, [r3, #80]	; 0x50
		printf("Protocol ACK error, please double check the clock in two boards. \r\n\r\n");
  400b10:	480b      	ldr	r0, [pc, #44]	; (400b40 <MCAN1_INT0_Handler+0x7c>)
  400b12:	4b09      	ldr	r3, [pc, #36]	; (400b38 <MCAN1_INT0_Handler+0x74>)
  400b14:	4798      	blx	r3
  400b16:	e7e3      	b.n	400ae0 <MCAN1_INT0_Handler+0x1c>
  400b18:	4b04      	ldr	r3, [pc, #16]	; (400b2c <MCAN1_INT0_Handler+0x68>)
  400b1a:	681b      	ldr	r3, [r3, #0]
  400b1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400b20:	651a      	str	r2, [r3, #80]	; 0x50
		printf("Protocol format error, please double check the clock in two boards. \r\n\r\n");
  400b22:	4808      	ldr	r0, [pc, #32]	; (400b44 <MCAN1_INT0_Handler+0x80>)
  400b24:	4b04      	ldr	r3, [pc, #16]	; (400b38 <MCAN1_INT0_Handler+0x74>)
  400b26:	4798      	blx	r3
}
  400b28:	e7de      	b.n	400ae8 <MCAN1_INT0_Handler+0x24>
  400b2a:	bf00      	nop
  400b2c:	20400a58 	.word	0x20400a58
  400b30:	004011c3 	.word	0x004011c3
  400b34:	00404dc4 	.word	0x00404dc4
  400b38:	00401a11 	.word	0x00401a11
  400b3c:	0040096d 	.word	0x0040096d
  400b40:	00404df4 	.word	0x00404df4
  400b44:	00404e3c 	.word	0x00404e3c

00400b48 <candriver_error_poll>:


void candriver_error_poll(void)
{
  400b48:	4770      	bx	lr
	...

00400b4c <candriver_read>:
 *  @param msg[out] - the reference to a CAN message object to store received message
 *
 *  @return true if message received, false if no message or error.
 */
bool candriver_read(can_frame_t* msg)
{
  400b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  400b4e:	b083      	sub	sp, #12
  400b50:	4605      	mov	r5, r0
//   bool results = false;
	volatile uint32_t i;

  mcan_get_rx_fifo_0_element(&mcan_instance, &rx_element_fifo_0,
  400b52:	4c21      	ldr	r4, [pc, #132]	; (400bd8 <candriver_read+0x8c>)
  400b54:	6822      	ldr	r2, [r4, #0]
  400b56:	4e21      	ldr	r6, [pc, #132]	; (400bdc <candriver_read+0x90>)
  400b58:	4921      	ldr	r1, [pc, #132]	; (400be0 <candriver_read+0x94>)
  400b5a:	4630      	mov	r0, r6
  400b5c:	4b21      	ldr	r3, [pc, #132]	; (400be4 <candriver_read+0x98>)
  400b5e:	4798      	blx	r3
				standard_receive_index);
		mcan_rx_fifo_acknowledge(&mcan_instance, 0,
  400b60:	6823      	ldr	r3, [r4, #0]
		module_inst->hw->MCAN_RXF0A = MCAN_RXF0A_F0AI(index);
  400b62:	6832      	ldr	r2, [r6, #0]
  400b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  400b68:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
				standard_receive_index);
		standard_receive_index++;
  400b6c:	6823      	ldr	r3, [r4, #0]
  400b6e:	3301      	adds	r3, #1
  400b70:	6023      	str	r3, [r4, #0]
		if (standard_receive_index == CONF_MCAN0_RX_FIFO_0_NUM) {
  400b72:	6823      	ldr	r3, [r4, #0]
  400b74:	2b10      	cmp	r3, #16
  400b76:	d02c      	beq.n	400bd2 <candriver_read+0x86>
			standard_receive_index = 0;
		}

		// printf("\n\r Standard message received in FIFO 0. The received data is: ");
		msg->id = ((rx_element_fifo_0.R0.bit.ID >> 0x1U) & 0x7FFU);
  400b78:	4b19      	ldr	r3, [pc, #100]	; (400be0 <candriver_read+0x94>)
  400b7a:	681a      	ldr	r2, [r3, #0]
  400b7c:	f3c2 024a 	ubfx	r2, r2, #1, #11
  400b80:	602a      	str	r2, [r5, #0]
        msg->data_length_code = rx_element_fifo_0.R1.bit.DLC;
  400b82:	685a      	ldr	r2, [r3, #4]
  400b84:	f3c2 4203 	ubfx	r2, r2, #16, #4
  400b88:	712a      	strb	r2, [r5, #4]
		for (i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
  400b8a:	2200      	movs	r2, #0
  400b8c:	9201      	str	r2, [sp, #4]
  400b8e:	685b      	ldr	r3, [r3, #4]
  400b90:	f3c3 4303 	ubfx	r3, r3, #16, #4
  400b94:	9a01      	ldr	r2, [sp, #4]
  400b96:	4293      	cmp	r3, r2
  400b98:	d916      	bls.n	400bc8 <candriver_read+0x7c>
			msg->data[i] = rx_element_fifo_0.data[i];
  400b9a:	4c11      	ldr	r4, [pc, #68]	; (400be0 <candriver_read+0x94>)
			printf("  %d",rx_element_fifo_0.data[i]);
  400b9c:	4f12      	ldr	r7, [pc, #72]	; (400be8 <candriver_read+0x9c>)
  400b9e:	4e13      	ldr	r6, [pc, #76]	; (400bec <candriver_read+0xa0>)
			msg->data[i] = rx_element_fifo_0.data[i];
  400ba0:	9b01      	ldr	r3, [sp, #4]
  400ba2:	9a01      	ldr	r2, [sp, #4]
  400ba4:	4422      	add	r2, r4
  400ba6:	7a12      	ldrb	r2, [r2, #8]
  400ba8:	442b      	add	r3, r5
  400baa:	715a      	strb	r2, [r3, #5]
			printf("  %d",rx_element_fifo_0.data[i]);
  400bac:	9b01      	ldr	r3, [sp, #4]
  400bae:	4423      	add	r3, r4
  400bb0:	7a19      	ldrb	r1, [r3, #8]
  400bb2:	4638      	mov	r0, r7
  400bb4:	47b0      	blx	r6
		for (i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
  400bb6:	9b01      	ldr	r3, [sp, #4]
  400bb8:	3301      	adds	r3, #1
  400bba:	9301      	str	r3, [sp, #4]
  400bbc:	6863      	ldr	r3, [r4, #4]
  400bbe:	f3c3 4303 	ubfx	r3, r3, #16, #4
  400bc2:	9a01      	ldr	r2, [sp, #4]
  400bc4:	4293      	cmp	r3, r2
  400bc6:	d8eb      	bhi.n	400ba0 <candriver_read+0x54>
		}
		printf(" \r\n");
  400bc8:	4809      	ldr	r0, [pc, #36]	; (400bf0 <candriver_read+0xa4>)
  400bca:	4b08      	ldr	r3, [pc, #32]	; (400bec <candriver_read+0xa0>)
  400bcc:	4798      	blx	r3
		//printf(" %d\r\n", msg->id);
//   return results;
}
  400bce:	b003      	add	sp, #12
  400bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			standard_receive_index = 0;
  400bd2:	2200      	movs	r2, #0
  400bd4:	6022      	str	r2, [r4, #0]
  400bd6:	e7cf      	b.n	400b78 <candriver_read+0x2c>
  400bd8:	20400a6c 	.word	0x20400a6c
  400bdc:	20400a58 	.word	0x20400a58
  400be0:	20400a5c 	.word	0x20400a5c
  400be4:	004011d9 	.word	0x004011d9
  400be8:	00404e88 	.word	0x00404e88
  400bec:	00401a11 	.word	0x00401a11
  400bf0:	00404e90 	.word	0x00404e90

00400bf4 <candriver_send>:
 *  @param data_byte_length - the number of bytes sending
 *
 *  @post A message is sent if the CAN was not busy at the time of sending.
 */
bool candriver_send(uint32_t msg_id, uint8_t *msg_data, uint32_t data_byte_length)
{
  400bf4:	b510      	push	{r4, lr}
  400bf6:	b084      	sub	sp, #16
	tx_element->T0.reg = 0;
  400bf8:	2300      	movs	r3, #0
  400bfa:	9300      	str	r3, [sp, #0]
	tx_element->T1.reg = MCAN_TX_ELEMENT_T1_EFC |
  400bfc:	f44f 0308 	mov.w	r3, #8912896	; 0x880000
  400c00:	9301      	str	r3, [sp, #4]
	tx_element.T0.reg |= MCAN_TX_ELEMENT_T0_STANDARD_ID(id_value);
  400c02:	9c00      	ldr	r4, [sp, #0]
  400c04:	4b11      	ldr	r3, [pc, #68]	; (400c4c <candriver_send+0x58>)
  400c06:	ea03 4080 	and.w	r0, r3, r0, lsl #18
  400c0a:	4320      	orrs	r0, r4
  400c0c:	9000      	str	r0, [sp, #0]
	tx_element.T1.bit.DLC = data_length;
  400c0e:	9b01      	ldr	r3, [sp, #4]
  400c10:	f362 4313 	bfi	r3, r2, #16, #4
  400c14:	9301      	str	r3, [sp, #4]
	for (i = 0; i < data_length; i++) {
  400c16:	b142      	cbz	r2, 400c2a <candriver_send+0x36>
  400c18:	460b      	mov	r3, r1
  400c1a:	a802      	add	r0, sp, #8
  400c1c:	4411      	add	r1, r2
		tx_element.data[i] = *data;
  400c1e:	f813 4b01 	ldrb.w	r4, [r3], #1
  400c22:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < data_length; i++) {
  400c26:	428b      	cmp	r3, r1
  400c28:	d1f9      	bne.n	400c1e <candriver_send+0x2a>
	mcan_set_tx_buffer_element(&mcan_instance, &tx_element,
  400c2a:	4c09      	ldr	r4, [pc, #36]	; (400c50 <candriver_send+0x5c>)
  400c2c:	2200      	movs	r2, #0
  400c2e:	4669      	mov	r1, sp
  400c30:	4620      	mov	r0, r4
  400c32:	4b08      	ldr	r3, [pc, #32]	; (400c54 <candriver_send+0x60>)
  400c34:	4798      	blx	r3
	if (module_inst->hw->MCAN_CCCR & MCAN_CCCR_CCE) {
  400c36:	6823      	ldr	r3, [r4, #0]
  400c38:	699a      	ldr	r2, [r3, #24]
  400c3a:	f012 0f02 	tst.w	r2, #2
  400c3e:	d102      	bne.n	400c46 <candriver_send+0x52>
	module_inst->hw->MCAN_TXBAR = trig_mask;
  400c40:	2201      	movs	r2, #1
  400c42:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  mcan_send_standard_message(msg_id, msg_data,
					data_byte_length); 
  // return result;
  400c46:	b004      	add	sp, #16
  400c48:	bd10      	pop	{r4, pc}
  400c4a:	bf00      	nop
  400c4c:	1ffc0000 	.word	0x1ffc0000
  400c50:	20400a58 	.word	0x20400a58
  400c54:	0040122d 	.word	0x0040122d

00400c58 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400c58:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  400c5a:	4810      	ldr	r0, [pc, #64]	; (400c9c <sysclk_init+0x44>)
  400c5c:	4b10      	ldr	r3, [pc, #64]	; (400ca0 <sysclk_init+0x48>)
  400c5e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400c60:	213e      	movs	r1, #62	; 0x3e
  400c62:	2000      	movs	r0, #0
  400c64:	4b0f      	ldr	r3, [pc, #60]	; (400ca4 <sysclk_init+0x4c>)
  400c66:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400c68:	4c0f      	ldr	r4, [pc, #60]	; (400ca8 <sysclk_init+0x50>)
  400c6a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400c6c:	2800      	cmp	r0, #0
  400c6e:	d0fc      	beq.n	400c6a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400c70:	4b0e      	ldr	r3, [pc, #56]	; (400cac <sysclk_init+0x54>)
  400c72:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400c74:	4a0e      	ldr	r2, [pc, #56]	; (400cb0 <sysclk_init+0x58>)
  400c76:	4b0f      	ldr	r3, [pc, #60]	; (400cb4 <sysclk_init+0x5c>)
  400c78:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400c7a:	4c0f      	ldr	r4, [pc, #60]	; (400cb8 <sysclk_init+0x60>)
  400c7c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400c7e:	2800      	cmp	r0, #0
  400c80:	d0fc      	beq.n	400c7c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400c82:	2002      	movs	r0, #2
  400c84:	4b0d      	ldr	r3, [pc, #52]	; (400cbc <sysclk_init+0x64>)
  400c86:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400c88:	2000      	movs	r0, #0
  400c8a:	4b0d      	ldr	r3, [pc, #52]	; (400cc0 <sysclk_init+0x68>)
  400c8c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400c8e:	4b0d      	ldr	r3, [pc, #52]	; (400cc4 <sysclk_init+0x6c>)
  400c90:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  400c92:	4802      	ldr	r0, [pc, #8]	; (400c9c <sysclk_init+0x44>)
  400c94:	4b02      	ldr	r3, [pc, #8]	; (400ca0 <sysclk_init+0x48>)
  400c96:	4798      	blx	r3
  400c98:	bd10      	pop	{r4, pc}
  400c9a:	bf00      	nop
  400c9c:	08f0d180 	.word	0x08f0d180
  400ca0:	00401815 	.word	0x00401815
  400ca4:	00401401 	.word	0x00401401
  400ca8:	00401455 	.word	0x00401455
  400cac:	00401465 	.word	0x00401465
  400cb0:	20183f01 	.word	0x20183f01
  400cb4:	400e0600 	.word	0x400e0600
  400cb8:	00401475 	.word	0x00401475
  400cbc:	00401365 	.word	0x00401365
  400cc0:	0040139d 	.word	0x0040139d
  400cc4:	00401709 	.word	0x00401709

00400cc8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400ccc:	b980      	cbnz	r0, 400cf0 <_read+0x28>
  400cce:	460c      	mov	r4, r1
  400cd0:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400cd2:	2a00      	cmp	r2, #0
  400cd4:	dd0f      	ble.n	400cf6 <_read+0x2e>
  400cd6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400cd8:	4e08      	ldr	r6, [pc, #32]	; (400cfc <_read+0x34>)
  400cda:	4d09      	ldr	r5, [pc, #36]	; (400d00 <_read+0x38>)
  400cdc:	6830      	ldr	r0, [r6, #0]
  400cde:	4621      	mov	r1, r4
  400ce0:	682b      	ldr	r3, [r5, #0]
  400ce2:	4798      	blx	r3
		ptr++;
  400ce4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400ce6:	42bc      	cmp	r4, r7
  400ce8:	d1f8      	bne.n	400cdc <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400cea:	4640      	mov	r0, r8
  400cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400cf0:	f04f 38ff 	mov.w	r8, #4294967295
  400cf4:	e7f9      	b.n	400cea <_read+0x22>
	for (; len > 0; --len) {
  400cf6:	4680      	mov	r8, r0
  400cf8:	e7f7      	b.n	400cea <_read+0x22>
  400cfa:	bf00      	nop
  400cfc:	204014ac 	.word	0x204014ac
  400d00:	204014a4 	.word	0x204014a4

00400d04 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400d04:	3801      	subs	r0, #1
  400d06:	2802      	cmp	r0, #2
  400d08:	d815      	bhi.n	400d36 <_write+0x32>
{
  400d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400d0e:	460e      	mov	r6, r1
  400d10:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400d12:	b19a      	cbz	r2, 400d3c <_write+0x38>
  400d14:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400d16:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400d50 <_write+0x4c>
  400d1a:	4f0c      	ldr	r7, [pc, #48]	; (400d4c <_write+0x48>)
  400d1c:	f8d8 0000 	ldr.w	r0, [r8]
  400d20:	f815 1b01 	ldrb.w	r1, [r5], #1
  400d24:	683b      	ldr	r3, [r7, #0]
  400d26:	4798      	blx	r3
  400d28:	2800      	cmp	r0, #0
  400d2a:	db0a      	blt.n	400d42 <_write+0x3e>
  400d2c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400d2e:	3c01      	subs	r4, #1
  400d30:	d1f4      	bne.n	400d1c <_write+0x18>
  400d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400d36:	f04f 30ff 	mov.w	r0, #4294967295
  400d3a:	4770      	bx	lr
	for (; len != 0; --len) {
  400d3c:	4610      	mov	r0, r2
  400d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400d42:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400d4a:	bf00      	nop
  400d4c:	204014a8 	.word	0x204014a8
  400d50:	204014ac 	.word	0x204014ac

00400d54 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400d54:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400d56:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400d5a:	4b63      	ldr	r3, [pc, #396]	; (400ee8 <board_init+0x194>)
  400d5c:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400d5e:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
  400d62:	4a62      	ldr	r2, [pc, #392]	; (400eec <board_init+0x198>)
  400d64:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400d66:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  400d6a:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  400d6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400d70:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400d74:	4b5e      	ldr	r3, [pc, #376]	; (400ef0 <board_init+0x19c>)
  400d76:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400d7a:	f022 0201 	bic.w	r2, r2, #1
  400d7e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400d82:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400d86:	f022 0201 	bic.w	r2, r2, #1
  400d8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  400d8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400d92:	f3bf 8f6f 	isb	sy
  400d96:	200a      	movs	r0, #10
  400d98:	4c56      	ldr	r4, [pc, #344]	; (400ef4 <board_init+0x1a0>)
  400d9a:	47a0      	blx	r4
  400d9c:	200b      	movs	r0, #11
  400d9e:	47a0      	blx	r4
  400da0:	200c      	movs	r0, #12
  400da2:	47a0      	blx	r4
  400da4:	2010      	movs	r0, #16
  400da6:	47a0      	blx	r4
  400da8:	2011      	movs	r0, #17
  400daa:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400dac:	4b52      	ldr	r3, [pc, #328]	; (400ef8 <board_init+0x1a4>)
  400dae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400db2:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400db4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400db8:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400dba:	4a50      	ldr	r2, [pc, #320]	; (400efc <board_init+0x1a8>)
  400dbc:	f44f 7100 	mov.w	r1, #512	; 0x200
  400dc0:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400dc2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400dc6:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400dc8:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400dca:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400dce:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400dd0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400dd4:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400dd6:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  400dd8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400ddc:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400dde:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  400de2:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400de4:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400de6:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  400dea:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400dec:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400df0:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400df4:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400df8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  400dfc:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400dfe:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e02:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400e04:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400e06:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400e0a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400e0c:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  400e10:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400e12:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400e14:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  400e18:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400e1a:	6059      	str	r1, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400e1c:	4938      	ldr	r1, [pc, #224]	; (400f00 <board_init+0x1ac>)
  400e1e:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
  400e22:	f043 0310 	orr.w	r3, r3, #16
  400e26:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
		base->PIO_PUDR = mask;
  400e2a:	4b36      	ldr	r3, [pc, #216]	; (400f04 <board_init+0x1b0>)
  400e2c:	2110      	movs	r1, #16
  400e2e:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400e30:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e34:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400e36:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400e38:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400e3c:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400e3e:	4308      	orrs	r0, r1
  400e40:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400e42:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400e44:	4308      	orrs	r0, r1
  400e46:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400e48:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  400e4a:	2108      	movs	r1, #8
  400e4c:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400e4e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e52:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400e54:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400e56:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400e5a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400e5c:	f020 0008 	bic.w	r0, r0, #8
  400e60:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400e62:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400e64:	f020 0008 	bic.w	r0, r0, #8
  400e68:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400e6a:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  400e6c:	2104      	movs	r1, #4
  400e6e:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400e70:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e74:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400e76:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400e78:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400e7c:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400e7e:	f020 0004 	bic.w	r0, r0, #4
  400e82:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400e84:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400e86:	f020 0004 	bic.w	r0, r0, #4
  400e8a:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400e8c:	6059      	str	r1, [r3, #4]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400e8e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400e92:	2101      	movs	r1, #1
  400e94:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400e96:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400e9a:	2102      	movs	r1, #2
  400e9c:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400e9e:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  400ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400ea6:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400eac:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400eae:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400eb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400eb4:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400eb6:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  400eba:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400ebc:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400ebe:	4319      	orrs	r1, r3
  400ec0:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400ec2:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  400ec4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  400ec8:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ece:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400ed0:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400ed2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400ed6:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400ed8:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  400edc:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400ede:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400ee0:	4319      	orrs	r1, r3
  400ee2:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400ee4:	6053      	str	r3, [r2, #4]
  400ee6:	bd10      	pop	{r4, pc}
  400ee8:	400e1850 	.word	0x400e1850
  400eec:	5a00080c 	.word	0x5a00080c
  400ef0:	e000ed00 	.word	0xe000ed00
  400ef4:	00401485 	.word	0x00401485
  400ef8:	400e0e00 	.word	0x400e0e00
  400efc:	400e1200 	.word	0x400e1200
  400f00:	40088000 	.word	0x40088000
  400f04:	400e1000 	.word	0x400e1000

00400f08 <_mcan_enable_peripheral_clock>:
 *
 * \param module_inst  MCAN instance
 *
 */
static void _mcan_enable_peripheral_clock(struct mcan_module *const module_inst)
{
  400f08:	b508      	push	{r3, lr}
	if (module_inst->hw == MCAN0) {
  400f0a:	6803      	ldr	r3, [r0, #0]
  400f0c:	4a07      	ldr	r2, [pc, #28]	; (400f2c <_mcan_enable_peripheral_clock+0x24>)
  400f0e:	4293      	cmp	r3, r2
  400f10:	d003      	beq.n	400f1a <_mcan_enable_peripheral_clock+0x12>
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN0);
	} else if (module_inst->hw == MCAN1) {
  400f12:	4a07      	ldr	r2, [pc, #28]	; (400f30 <_mcan_enable_peripheral_clock+0x28>)
  400f14:	4293      	cmp	r3, r2
  400f16:	d004      	beq.n	400f22 <_mcan_enable_peripheral_clock+0x1a>
  400f18:	bd08      	pop	{r3, pc}
		pmc_enable_periph_clk(ID_MCAN0);
  400f1a:	2023      	movs	r0, #35	; 0x23
  400f1c:	4b05      	ldr	r3, [pc, #20]	; (400f34 <_mcan_enable_peripheral_clock+0x2c>)
  400f1e:	4798      	blx	r3
  400f20:	bd08      	pop	{r3, pc}
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN1);
  400f22:	2025      	movs	r0, #37	; 0x25
  400f24:	4b03      	ldr	r3, [pc, #12]	; (400f34 <_mcan_enable_peripheral_clock+0x2c>)
  400f26:	4798      	blx	r3
	}
}
  400f28:	e7f6      	b.n	400f18 <_mcan_enable_peripheral_clock+0x10>
  400f2a:	bf00      	nop
  400f2c:	40030000 	.word	0x40030000
  400f30:	40034000 	.word	0x40034000
  400f34:	00401485 	.word	0x00401485

00400f38 <mcan_init>:
 * \param hw  Base address of MCAN.
 * \param config default configuration .
 */
void mcan_init(struct mcan_module *const module_inst, Mcan *hw,
		struct mcan_config *config)
{
  400f38:	b570      	push	{r4, r5, r6, lr}
  400f3a:	4606      	mov	r6, r0
  400f3c:	460c      	mov	r4, r1
  400f3e:	4615      	mov	r5, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
  400f40:	6001      	str	r1, [r0, #0]

	pmc_disable_pck(PMC_PCK_5);
  400f42:	2005      	movs	r0, #5
  400f44:	4b82      	ldr	r3, [pc, #520]	; (401150 <mcan_init+0x218>)
  400f46:	4798      	blx	r3

	pmc_switch_pck_to_pllack(PMC_PCK_5, PMC_PCK_PRES(9));
  400f48:	2190      	movs	r1, #144	; 0x90
  400f4a:	2005      	movs	r0, #5
  400f4c:	4b81      	ldr	r3, [pc, #516]	; (401154 <mcan_init+0x21c>)
  400f4e:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_5);
  400f50:	2005      	movs	r0, #5
  400f52:	4b81      	ldr	r3, [pc, #516]	; (401158 <mcan_init+0x220>)
  400f54:	4798      	blx	r3

	/* Enable peripheral clock */
	_mcan_enable_peripheral_clock(module_inst);
  400f56:	4630      	mov	r0, r6
  400f58:	4b80      	ldr	r3, [pc, #512]	; (40115c <mcan_init+0x224>)
  400f5a:	4798      	blx	r3


	/* Configuration Change Enable. */
	hw->MCAN_CCCR |= MCAN_CCCR_CCE;
  400f5c:	69a3      	ldr	r3, [r4, #24]
  400f5e:	f043 0302 	orr.w	r3, r3, #2
  400f62:	61a3      	str	r3, [r4, #24]
	if (hw == MCAN0) {
  400f64:	4b7e      	ldr	r3, [pc, #504]	; (401160 <mcan_init+0x228>)
  400f66:	429c      	cmp	r4, r3
  400f68:	f000 809c 	beq.w	4010a4 <mcan_init+0x16c>
	} else if (hw == MCAN1) {
  400f6c:	4b7d      	ldr	r3, [pc, #500]	; (401164 <mcan_init+0x22c>)
  400f6e:	429c      	cmp	r4, r3
  400f70:	f000 80c3 	beq.w	4010fa <mcan_init+0x1c2>
		hw->MCAN_RXESC = MCAN_RXESC_RBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4) |
  400f74:	2300      	movs	r3, #0
  400f76:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		hw->MCAN_TXESC = MCAN_TXESC_TBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4);
  400f7a:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	hw->MCAN_NBTP = MCAN_NBTP_NBRP(CONF_MCAN_NBTP_NBRP_VALUE) |
  400f7e:	4b7a      	ldr	r3, [pc, #488]	; (401168 <mcan_init+0x230>)
  400f80:	61e3      	str	r3, [r4, #28]
	hw->MCAN_DBTP = MCAN_DBTP_DBRP(CONF_MCAN_FBTP_FBRP_VALUE) |
  400f82:	4b7a      	ldr	r3, [pc, #488]	; (40116c <mcan_init+0x234>)
  400f84:	60e3      	str	r3, [r4, #12]
	hw->MCAN_TDCR = MCAN_TDCR_TDCO(config->delay_compensation_offset) |
  400f86:	7beb      	ldrb	r3, [r5, #15]
  400f88:	021b      	lsls	r3, r3, #8
  400f8a:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
		    MCAN_TDCR_TDCF(config->delay_compensation_filter_window_length);
  400f8e:	7c2a      	ldrb	r2, [r5, #16]
  400f90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	hw->MCAN_TDCR = MCAN_TDCR_TDCO(config->delay_compensation_offset) |
  400f94:	4313      	orrs	r3, r2
  400f96:	64a3      	str	r3, [r4, #72]	; 0x48
	if (config->tdc_enable) {
  400f98:	7bab      	ldrb	r3, [r5, #14]
  400f9a:	b11b      	cbz	r3, 400fa4 <mcan_init+0x6c>
		hw->MCAN_DBTP |= MCAN_DBTP_TDC_ENABLED;
  400f9c:	68e3      	ldr	r3, [r4, #12]
  400f9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  400fa2:	60e3      	str	r3, [r4, #12]
	hw->MCAN_RWD |= MCAN_RWD_WDC(config->watchdog_configuration);
  400fa4:	6962      	ldr	r2, [r4, #20]
  400fa6:	786b      	ldrb	r3, [r5, #1]
  400fa8:	4313      	orrs	r3, r2
  400faa:	6163      	str	r3, [r4, #20]
	if (config->transmit_pause) {
  400fac:	78ab      	ldrb	r3, [r5, #2]
  400fae:	b11b      	cbz	r3, 400fb8 <mcan_init+0x80>
		hw->MCAN_CCCR |= MCAN_CCCR_TXP;
  400fb0:	69a3      	ldr	r3, [r4, #24]
  400fb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  400fb6:	61a3      	str	r3, [r4, #24]
	if (!config->automatic_retransmission) {
  400fb8:	796b      	ldrb	r3, [r5, #5]
  400fba:	b91b      	cbnz	r3, 400fc4 <mcan_init+0x8c>
		hw->MCAN_CCCR |= MCAN_CCCR_DAR;
  400fbc:	69a3      	ldr	r3, [r4, #24]
  400fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400fc2:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_request) {
  400fc4:	79ab      	ldrb	r3, [r5, #6]
  400fc6:	b11b      	cbz	r3, 400fd0 <mcan_init+0x98>
		hw->MCAN_CCCR |= MCAN_CCCR_CSR;
  400fc8:	69a3      	ldr	r3, [r4, #24]
  400fca:	f043 0310 	orr.w	r3, r3, #16
  400fce:	61a3      	str	r3, [r4, #24]
	hw->MCAN_TSCC = MCAN_TSCC_TCP(config->timestamp_prescaler) |
  400fd0:	7a2b      	ldrb	r3, [r5, #8]
  400fd2:	041b      	lsls	r3, r3, #16
  400fd4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  400fd8:	f043 0301 	orr.w	r3, r3, #1
  400fdc:	6223      	str	r3, [r4, #32]
			config->timeout_mode | config->timeout_enable;
  400fde:	7b2b      	ldrb	r3, [r5, #12]
  400fe0:	7b6a      	ldrb	r2, [r5, #13]
  400fe2:	4313      	orrs	r3, r2
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  400fe4:	896a      	ldrh	r2, [r5, #10]
			config->timeout_mode | config->timeout_enable;
  400fe6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  400fea:	62a3      	str	r3, [r4, #40]	; 0x28
	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  400fec:	7c6b      	ldrb	r3, [r5, #17]
  400fee:	011b      	lsls	r3, r3, #4
  400ff0:	f003 0330 	and.w	r3, r3, #48	; 0x30
			MCAN_GFC_ANFE(config->nonmatching_frames_action_extended);
  400ff4:	7caa      	ldrb	r2, [r5, #18]
  400ff6:	0092      	lsls	r2, r2, #2
  400ff8:	f002 020c 	and.w	r2, r2, #12
	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  400ffc:	4313      	orrs	r3, r2
  400ffe:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if (config->remote_frames_standard_reject) {
  401002:	7ceb      	ldrb	r3, [r5, #19]
  401004:	b12b      	cbz	r3, 401012 <mcan_init+0xda>
		hw->MCAN_GFC |= MCAN_GFC_RRFS;
  401006:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  40100a:	f043 0302 	orr.w	r3, r3, #2
  40100e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if (config->remote_frames_extended_reject) {
  401012:	7d2b      	ldrb	r3, [r5, #20]
  401014:	b12b      	cbz	r3, 401022 <mcan_init+0xea>
		hw->MCAN_GFC|= MCAN_GFC_RRFE;
  401016:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  40101a:	f043 0301 	orr.w	r3, r3, #1
  40101e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hw->MCAN_XIDAM = config->extended_id_mask;
  401022:	69ab      	ldr	r3, [r5, #24]
  401024:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	if (config->rx_fifo_0_overwrite) {
  401028:	7f2b      	ldrb	r3, [r5, #28]
  40102a:	b12b      	cbz	r3, 401038 <mcan_init+0x100>
		hw->MCAN_RXF0C |= MCAN_RXF0C_F0OM;
  40102c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
  401030:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  401034:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	hw->MCAN_RXF0C |= MCAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
  401038:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
  40103c:	7f6b      	ldrb	r3, [r5, #29]
  40103e:	061b      	lsls	r3, r3, #24
  401040:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  401044:	4313      	orrs	r3, r2
  401046:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	if (config->rx_fifo_1_overwrite) {
  40104a:	7fab      	ldrb	r3, [r5, #30]
  40104c:	b12b      	cbz	r3, 40105a <mcan_init+0x122>
		hw->MCAN_RXF1C |= MCAN_RXF1C_F1OM;
  40104e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
  401052:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  401056:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	hw->MCAN_RXF1C |= MCAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
  40105a:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
  40105e:	7feb      	ldrb	r3, [r5, #31]
  401060:	061b      	lsls	r3, r3, #24
  401062:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  401066:	4313      	orrs	r3, r2
  401068:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	if (config->tx_queue_mode) {
  40106c:	f895 3020 	ldrb.w	r3, [r5, #32]
  401070:	b12b      	cbz	r3, 40107e <mcan_init+0x146>
		hw->MCAN_TXBC |= MCAN_TXBC_TFQM;
  401072:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
  401076:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  40107a:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hw->MCAN_TXEFC |= MCAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
  40107e:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
  401082:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
  401086:	061b      	lsls	r3, r3, #24
  401088:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  40108c:	4313      	orrs	r3, r2
  40108e:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0

	/* Set the configuration. */
	_mcan_set_configuration(hw, config);

	/* Enable the interrupt setting which no need change. */
	hw->MCAN_ILE = MCAN_ILE_EINT0 | MCAN_ILE_EINT1;
  401092:	2303      	movs	r3, #3
  401094:	65e3      	str	r3, [r4, #92]	; 0x5c
	hw->MCAN_TXBTIE = 0xFFFFFFFFul;
  401096:	f04f 33ff 	mov.w	r3, #4294967295
  40109a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	hw->MCAN_TXBCIE = 0xFFFFFFFFul;
  40109e:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
  4010a2:	bd70      	pop	{r4, r5, r6, pc}
		hw->MCAN_SIDFC = ((uint32_t)mcan0_rx_standard_filter & BIT_2_TO_15_MASK) |
  4010a4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  4010a8:	4931      	ldr	r1, [pc, #196]	; (401170 <mcan_init+0x238>)
  4010aa:	4011      	ands	r1, r2
  4010ac:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  4010b0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		hw->MCAN_XIDFC = ((uint32_t)mcan0_rx_extended_filter & BIT_2_TO_15_MASK) |
  4010b4:	492f      	ldr	r1, [pc, #188]	; (401174 <mcan_init+0x23c>)
  4010b6:	4011      	ands	r1, r2
  4010b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4010bc:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		hw->MCAN_RXF0C = ((uint32_t)mcan0_rx_fifo_0 & BIT_2_TO_15_MASK) |
  4010c0:	492d      	ldr	r1, [pc, #180]	; (401178 <mcan_init+0x240>)
  4010c2:	4011      	ands	r1, r2
  4010c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4010c8:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		hw->MCAN_RXF1C = ((uint32_t)mcan0_rx_fifo_1 & BIT_2_TO_15_MASK) |
  4010cc:	492b      	ldr	r1, [pc, #172]	; (40117c <mcan_init+0x244>)
  4010ce:	4011      	ands	r1, r2
  4010d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4010d4:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		hw->MCAN_RXBC = ((uint32_t)mcan0_rx_buffer & BIT_2_TO_15_MASK);
  4010d8:	4929      	ldr	r1, [pc, #164]	; (401180 <mcan_init+0x248>)
  4010da:	4011      	ands	r1, r2
  4010dc:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  4010e0:	4828      	ldr	r0, [pc, #160]	; (401184 <mcan_init+0x24c>)
  4010e2:	4010      	ands	r0, r2
				MCAN_TXBC_NDTB(CONF_MCAN0_TX_BUFFER_NUM) |
  4010e4:	4928      	ldr	r1, [pc, #160]	; (401188 <mcan_init+0x250>)
  4010e6:	4301      	orrs	r1, r0
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  4010e8:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		hw->MCAN_TXEFC = ((uint32_t)mcan0_tx_event_fifo & BIT_2_TO_15_MASK) |
  4010ec:	4927      	ldr	r1, [pc, #156]	; (40118c <mcan_init+0x254>)
  4010ee:	400a      	ands	r2, r1
  4010f0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  4010f4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  4010f8:	e73c      	b.n	400f74 <mcan_init+0x3c>
		hw->MCAN_SIDFC = ((uint32_t)mcan1_rx_standard_filter & BIT_2_TO_15_MASK) |
  4010fa:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  4010fe:	4924      	ldr	r1, [pc, #144]	; (401190 <mcan_init+0x258>)
  401100:	4011      	ands	r1, r2
  401102:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  401106:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		hw->MCAN_XIDFC = ((uint32_t)mcan1_rx_extended_filter & BIT_2_TO_15_MASK) |
  40110a:	4922      	ldr	r1, [pc, #136]	; (401194 <mcan_init+0x25c>)
  40110c:	4011      	ands	r1, r2
  40110e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401112:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		hw->MCAN_RXF0C = ((uint32_t)mcan1_rx_fifo_0 & BIT_2_TO_15_MASK) |
  401116:	4920      	ldr	r1, [pc, #128]	; (401198 <mcan_init+0x260>)
  401118:	4011      	ands	r1, r2
  40111a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40111e:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		hw->MCAN_RXF1C = ((uint32_t)mcan1_rx_fifo_1 & BIT_2_TO_15_MASK) |
  401122:	491e      	ldr	r1, [pc, #120]	; (40119c <mcan_init+0x264>)
  401124:	4011      	ands	r1, r2
  401126:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40112a:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		hw->MCAN_RXBC = ((uint32_t)mcan1_rx_buffer & BIT_2_TO_15_MASK);
  40112e:	491c      	ldr	r1, [pc, #112]	; (4011a0 <mcan_init+0x268>)
  401130:	4011      	ands	r1, r2
  401132:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  401136:	481b      	ldr	r0, [pc, #108]	; (4011a4 <mcan_init+0x26c>)
  401138:	4010      	ands	r0, r2
				MCAN_TXBC_NDTB(CONF_MCAN1_TX_BUFFER_NUM) |
  40113a:	4913      	ldr	r1, [pc, #76]	; (401188 <mcan_init+0x250>)
  40113c:	4301      	orrs	r1, r0
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  40113e:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		hw->MCAN_TXEFC = ((uint32_t)mcan1_tx_event_fifo & BIT_2_TO_15_MASK) |
  401142:	4919      	ldr	r1, [pc, #100]	; (4011a8 <mcan_init+0x270>)
  401144:	400a      	ands	r2, r1
  401146:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  40114a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  40114e:	e711      	b.n	400f74 <mcan_init+0x3c>
  401150:	004014f5 	.word	0x004014f5
  401154:	004014a5 	.word	0x004014a5
  401158:	004014e1 	.word	0x004014e1
  40115c:	00400f09 	.word	0x00400f09
  401160:	40030000 	.word	0x40030000
  401164:	40034000 	.word	0x40034000
  401168:	06010507 	.word	0x06010507
  40116c:	00050a33 	.word	0x00050a33
  401170:	20400df0 	.word	0x20400df0
  401174:	20400b70 	.word	0x20400b70
  401178:	20400bf0 	.word	0x20400bf0
  40117c:	20400cf0 	.word	0x20400cf0
  401180:	20400a70 	.word	0x20400a70
  401184:	20400e70 	.word	0x20400e70
  401188:	04040000 	.word	0x04040000
  40118c:	20400ef0 	.word	0x20400ef0
  401190:	204012b0 	.word	0x204012b0
  401194:	20401030 	.word	0x20401030
  401198:	204010b0 	.word	0x204010b0
  40119c:	204011b0 	.word	0x204011b0
  4011a0:	20400f30 	.word	0x20400f30
  4011a4:	20401330 	.word	0x20401330
  4011a8:	204013b0 	.word	0x204013b0

004011ac <mcan_start>:
 * \param module_inst  MCAN instance
 *
 */
void mcan_start(struct mcan_module *const module_inst)
{
	module_inst->hw->MCAN_CCCR &= ~MCAN_CCCR_INIT;
  4011ac:	6802      	ldr	r2, [r0, #0]
  4011ae:	6993      	ldr	r3, [r2, #24]
  4011b0:	f023 0301 	bic.w	r3, r3, #1
  4011b4:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT);
  4011b6:	6802      	ldr	r2, [r0, #0]
  4011b8:	6993      	ldr	r3, [r2, #24]
  4011ba:	f013 0f01 	tst.w	r3, #1
  4011be:	d1fb      	bne.n	4011b8 <mcan_start+0xc>
}
  4011c0:	4770      	bx	lr

004011c2 <mcan_stop>:
 * \param module_inst  MCAN instance
 *
 */
void mcan_stop(struct mcan_module *const module_inst)
{
	module_inst->hw->MCAN_CCCR |= MCAN_CCCR_INIT;
  4011c2:	6802      	ldr	r2, [r0, #0]
  4011c4:	6993      	ldr	r3, [r2, #24]
  4011c6:	f043 0301 	orr.w	r3, r3, #1
  4011ca:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (!(module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT));
  4011cc:	6802      	ldr	r2, [r0, #0]
  4011ce:	6993      	ldr	r3, [r2, #24]
  4011d0:	f013 0f01 	tst.w	r3, #1
  4011d4:	d0fb      	beq.n	4011ce <mcan_stop+0xc>
}
  4011d6:	4770      	bx	lr

004011d8 <mcan_get_rx_fifo_0_element>:
 * \return status code.
 */
enum status_code mcan_get_rx_fifo_0_element(
		struct mcan_module *const module_inst,
		struct mcan_rx_element_fifo_0 *rx_element, uint32_t index)
{
  4011d8:	b430      	push	{r4, r5}
  4011da:	460d      	mov	r5, r1
	// uint16_t rx0Data = &mcan1_rx_fifo_0[index];
	// printf("rx0: %x\r\n", rx0Data);
	if (module_inst->hw == MCAN0) {
  4011dc:	6803      	ldr	r3, [r0, #0]
  4011de:	490f      	ldr	r1, [pc, #60]	; (40121c <mcan_get_rx_fifo_0_element+0x44>)
  4011e0:	428b      	cmp	r3, r1
  4011e2:	d00d      	beq.n	401200 <mcan_get_rx_fifo_0_element+0x28>
		memcpy(rx_element, &mcan0_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == MCAN1) {
  4011e4:	490e      	ldr	r1, [pc, #56]	; (401220 <mcan_get_rx_fifo_0_element+0x48>)
  4011e6:	428b      	cmp	r3, r1
  4011e8:	d114      	bne.n	401214 <mcan_get_rx_fifo_0_element+0x3c>
		memcpy(rx_element, &mcan1_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
  4011ea:	4c0e      	ldr	r4, [pc, #56]	; (401224 <mcan_get_rx_fifo_0_element+0x4c>)
  4011ec:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  4011f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  4011f2:	6028      	str	r0, [r5, #0]
  4011f4:	6069      	str	r1, [r5, #4]
  4011f6:	60aa      	str	r2, [r5, #8]
  4011f8:	60eb      	str	r3, [r5, #12]
		return STATUS_OK;
  4011fa:	2000      	movs	r0, #0
	}
	return ERR_INVALID_ARG;
}
  4011fc:	bc30      	pop	{r4, r5}
  4011fe:	4770      	bx	lr
		memcpy(rx_element, &mcan0_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
  401200:	4c09      	ldr	r4, [pc, #36]	; (401228 <mcan_get_rx_fifo_0_element+0x50>)
  401202:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  401206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  401208:	6028      	str	r0, [r5, #0]
  40120a:	6069      	str	r1, [r5, #4]
  40120c:	60aa      	str	r2, [r5, #8]
  40120e:	60eb      	str	r3, [r5, #12]
		return STATUS_OK;
  401210:	2000      	movs	r0, #0
  401212:	e7f3      	b.n	4011fc <mcan_get_rx_fifo_0_element+0x24>
	return ERR_INVALID_ARG;
  401214:	f06f 0007 	mvn.w	r0, #7
  401218:	e7f0      	b.n	4011fc <mcan_get_rx_fifo_0_element+0x24>
  40121a:	bf00      	nop
  40121c:	40030000 	.word	0x40030000
  401220:	40034000 	.word	0x40034000
  401224:	204010b0 	.word	0x204010b0
  401228:	20400bf0 	.word	0x20400bf0

0040122c <mcan_set_tx_buffer_element>:
 * \return status code.
 */
enum status_code mcan_set_tx_buffer_element(
		struct mcan_module *const module_inst,
		struct mcan_tx_element *tx_element, uint32_t index)
{
  40122c:	b410      	push	{r4}
	uint32_t i;
	if (module_inst->hw == MCAN0) {
  40122e:	6803      	ldr	r3, [r0, #0]
  401230:	4819      	ldr	r0, [pc, #100]	; (401298 <mcan_set_tx_buffer_element+0x6c>)
  401232:	4283      	cmp	r3, r0
  401234:	d018      	beq.n	401268 <mcan_set_tx_buffer_element+0x3c>
		mcan0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
			mcan0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	} else if (module_inst->hw == MCAN1) {
  401236:	4819      	ldr	r0, [pc, #100]	; (40129c <mcan_set_tx_buffer_element+0x70>)
  401238:	4283      	cmp	r3, r0
  40123a:	d129      	bne.n	401290 <mcan_set_tx_buffer_element+0x64>
		mcan1_tx_buffer[index].T0.reg = tx_element->T0.reg;
  40123c:	680c      	ldr	r4, [r1, #0]
  40123e:	4818      	ldr	r0, [pc, #96]	; (4012a0 <mcan_set_tx_buffer_element+0x74>)
  401240:	0112      	lsls	r2, r2, #4
  401242:	1883      	adds	r3, r0, r2
  401244:	5084      	str	r4, [r0, r2]
		mcan1_tx_buffer[index].T1.reg = tx_element->T1.reg;
  401246:	684c      	ldr	r4, [r1, #4]
  401248:	605c      	str	r4, [r3, #4]
  40124a:	f101 0308 	add.w	r3, r1, #8
  40124e:	3207      	adds	r2, #7
  401250:	4402      	add	r2, r0
  401252:	3110      	adds	r1, #16
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
			mcan1_tx_buffer[index].data[i] = tx_element->data[i];
  401254:	f813 0b01 	ldrb.w	r0, [r3], #1
  401258:	f802 0f01 	strb.w	r0, [r2, #1]!
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  40125c:	428b      	cmp	r3, r1
  40125e:	d1f9      	bne.n	401254 <mcan_set_tx_buffer_element+0x28>
		}
		return STATUS_OK;
  401260:	2000      	movs	r0, #0
	}
	return ERR_INVALID_ARG;
}
  401262:	f85d 4b04 	ldr.w	r4, [sp], #4
  401266:	4770      	bx	lr
		mcan0_tx_buffer[index].T0.reg = tx_element->T0.reg;
  401268:	680c      	ldr	r4, [r1, #0]
  40126a:	480e      	ldr	r0, [pc, #56]	; (4012a4 <mcan_set_tx_buffer_element+0x78>)
  40126c:	0112      	lsls	r2, r2, #4
  40126e:	1883      	adds	r3, r0, r2
  401270:	5084      	str	r4, [r0, r2]
		mcan0_tx_buffer[index].T1.reg = tx_element->T1.reg;
  401272:	684c      	ldr	r4, [r1, #4]
  401274:	605c      	str	r4, [r3, #4]
  401276:	f101 0308 	add.w	r3, r1, #8
  40127a:	3207      	adds	r2, #7
  40127c:	4402      	add	r2, r0
  40127e:	3110      	adds	r1, #16
			mcan0_tx_buffer[index].data[i] = tx_element->data[i];
  401280:	f813 0b01 	ldrb.w	r0, [r3], #1
  401284:	f802 0f01 	strb.w	r0, [r2, #1]!
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  401288:	428b      	cmp	r3, r1
  40128a:	d1f9      	bne.n	401280 <mcan_set_tx_buffer_element+0x54>
		return STATUS_OK;
  40128c:	2000      	movs	r0, #0
  40128e:	e7e8      	b.n	401262 <mcan_set_tx_buffer_element+0x36>
	return ERR_INVALID_ARG;
  401290:	f06f 0007 	mvn.w	r0, #7
  401294:	e7e5      	b.n	401262 <mcan_set_tx_buffer_element+0x36>
  401296:	bf00      	nop
  401298:	40030000 	.word	0x40030000
  40129c:	40034000 	.word	0x40034000
  4012a0:	20401330 	.word	0x20401330
  4012a4:	20400e70 	.word	0x20400e70

004012a8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4012a8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4012aa:	4770      	bx	lr

004012ac <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4012ac:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4012ae:	4770      	bx	lr

004012b0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4012b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4012b4:	4604      	mov	r4, r0
  4012b6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4012b8:	4b0e      	ldr	r3, [pc, #56]	; (4012f4 <pio_handler_process+0x44>)
  4012ba:	4798      	blx	r3
  4012bc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4012be:	4620      	mov	r0, r4
  4012c0:	4b0d      	ldr	r3, [pc, #52]	; (4012f8 <pio_handler_process+0x48>)
  4012c2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4012c4:	4005      	ands	r5, r0
  4012c6:	d013      	beq.n	4012f0 <pio_handler_process+0x40>
  4012c8:	4c0c      	ldr	r4, [pc, #48]	; (4012fc <pio_handler_process+0x4c>)
  4012ca:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4012ce:	e003      	b.n	4012d8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4012d0:	42b4      	cmp	r4, r6
  4012d2:	d00d      	beq.n	4012f0 <pio_handler_process+0x40>
  4012d4:	3410      	adds	r4, #16
		while (status != 0) {
  4012d6:	b15d      	cbz	r5, 4012f0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4012d8:	6820      	ldr	r0, [r4, #0]
  4012da:	4540      	cmp	r0, r8
  4012dc:	d1f8      	bne.n	4012d0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4012de:	6861      	ldr	r1, [r4, #4]
  4012e0:	4229      	tst	r1, r5
  4012e2:	d0f5      	beq.n	4012d0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4012e4:	68e3      	ldr	r3, [r4, #12]
  4012e6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4012e8:	6863      	ldr	r3, [r4, #4]
  4012ea:	ea25 0503 	bic.w	r5, r5, r3
  4012ee:	e7ef      	b.n	4012d0 <pio_handler_process+0x20>
  4012f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4012f4:	004012a9 	.word	0x004012a9
  4012f8:	004012ad 	.word	0x004012ad
  4012fc:	204013f0 	.word	0x204013f0

00401300 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401300:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401302:	210a      	movs	r1, #10
  401304:	4801      	ldr	r0, [pc, #4]	; (40130c <PIOA_Handler+0xc>)
  401306:	4b02      	ldr	r3, [pc, #8]	; (401310 <PIOA_Handler+0x10>)
  401308:	4798      	blx	r3
  40130a:	bd08      	pop	{r3, pc}
  40130c:	400e0e00 	.word	0x400e0e00
  401310:	004012b1 	.word	0x004012b1

00401314 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401314:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401316:	210b      	movs	r1, #11
  401318:	4801      	ldr	r0, [pc, #4]	; (401320 <PIOB_Handler+0xc>)
  40131a:	4b02      	ldr	r3, [pc, #8]	; (401324 <PIOB_Handler+0x10>)
  40131c:	4798      	blx	r3
  40131e:	bd08      	pop	{r3, pc}
  401320:	400e1000 	.word	0x400e1000
  401324:	004012b1 	.word	0x004012b1

00401328 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401328:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40132a:	210c      	movs	r1, #12
  40132c:	4801      	ldr	r0, [pc, #4]	; (401334 <PIOC_Handler+0xc>)
  40132e:	4b02      	ldr	r3, [pc, #8]	; (401338 <PIOC_Handler+0x10>)
  401330:	4798      	blx	r3
  401332:	bd08      	pop	{r3, pc}
  401334:	400e1200 	.word	0x400e1200
  401338:	004012b1 	.word	0x004012b1

0040133c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40133c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40133e:	2110      	movs	r1, #16
  401340:	4801      	ldr	r0, [pc, #4]	; (401348 <PIOD_Handler+0xc>)
  401342:	4b02      	ldr	r3, [pc, #8]	; (40134c <PIOD_Handler+0x10>)
  401344:	4798      	blx	r3
  401346:	bd08      	pop	{r3, pc}
  401348:	400e1400 	.word	0x400e1400
  40134c:	004012b1 	.word	0x004012b1

00401350 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401350:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401352:	2111      	movs	r1, #17
  401354:	4801      	ldr	r0, [pc, #4]	; (40135c <PIOE_Handler+0xc>)
  401356:	4b02      	ldr	r3, [pc, #8]	; (401360 <PIOE_Handler+0x10>)
  401358:	4798      	blx	r3
  40135a:	bd08      	pop	{r3, pc}
  40135c:	400e1600 	.word	0x400e1600
  401360:	004012b1 	.word	0x004012b1

00401364 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401364:	2803      	cmp	r0, #3
  401366:	d011      	beq.n	40138c <pmc_mck_set_division+0x28>
  401368:	2804      	cmp	r0, #4
  40136a:	d012      	beq.n	401392 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40136c:	2802      	cmp	r0, #2
  40136e:	bf0c      	ite	eq
  401370:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401374:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401376:	4a08      	ldr	r2, [pc, #32]	; (401398 <pmc_mck_set_division+0x34>)
  401378:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40137a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40137e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401380:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401382:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401384:	f013 0f08 	tst.w	r3, #8
  401388:	d0fb      	beq.n	401382 <pmc_mck_set_division+0x1e>
}
  40138a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40138c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401390:	e7f1      	b.n	401376 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401392:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401396:	e7ee      	b.n	401376 <pmc_mck_set_division+0x12>
  401398:	400e0600 	.word	0x400e0600

0040139c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40139c:	4a17      	ldr	r2, [pc, #92]	; (4013fc <pmc_switch_mck_to_pllack+0x60>)
  40139e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4013a4:	4318      	orrs	r0, r3
  4013a6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4013a8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013aa:	f013 0f08 	tst.w	r3, #8
  4013ae:	d10a      	bne.n	4013c6 <pmc_switch_mck_to_pllack+0x2a>
  4013b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4013b4:	4911      	ldr	r1, [pc, #68]	; (4013fc <pmc_switch_mck_to_pllack+0x60>)
  4013b6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4013b8:	f012 0f08 	tst.w	r2, #8
  4013bc:	d103      	bne.n	4013c6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4013be:	3b01      	subs	r3, #1
  4013c0:	d1f9      	bne.n	4013b6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4013c2:	2001      	movs	r0, #1
  4013c4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4013c6:	4a0d      	ldr	r2, [pc, #52]	; (4013fc <pmc_switch_mck_to_pllack+0x60>)
  4013c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013ca:	f023 0303 	bic.w	r3, r3, #3
  4013ce:	f043 0302 	orr.w	r3, r3, #2
  4013d2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4013d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013d6:	f013 0f08 	tst.w	r3, #8
  4013da:	d10a      	bne.n	4013f2 <pmc_switch_mck_to_pllack+0x56>
  4013dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4013e0:	4906      	ldr	r1, [pc, #24]	; (4013fc <pmc_switch_mck_to_pllack+0x60>)
  4013e2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4013e4:	f012 0f08 	tst.w	r2, #8
  4013e8:	d105      	bne.n	4013f6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4013ea:	3b01      	subs	r3, #1
  4013ec:	d1f9      	bne.n	4013e2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4013ee:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4013f0:	4770      	bx	lr
	return 0;
  4013f2:	2000      	movs	r0, #0
  4013f4:	4770      	bx	lr
  4013f6:	2000      	movs	r0, #0
  4013f8:	4770      	bx	lr
  4013fa:	bf00      	nop
  4013fc:	400e0600 	.word	0x400e0600

00401400 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401400:	b9a0      	cbnz	r0, 40142c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401402:	480e      	ldr	r0, [pc, #56]	; (40143c <pmc_switch_mainck_to_xtal+0x3c>)
  401404:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401406:	0209      	lsls	r1, r1, #8
  401408:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40140a:	4a0d      	ldr	r2, [pc, #52]	; (401440 <pmc_switch_mainck_to_xtal+0x40>)
  40140c:	401a      	ands	r2, r3
  40140e:	4b0d      	ldr	r3, [pc, #52]	; (401444 <pmc_switch_mainck_to_xtal+0x44>)
  401410:	4313      	orrs	r3, r2
  401412:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401414:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401416:	4602      	mov	r2, r0
  401418:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40141a:	f013 0f01 	tst.w	r3, #1
  40141e:	d0fb      	beq.n	401418 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401420:	4a06      	ldr	r2, [pc, #24]	; (40143c <pmc_switch_mainck_to_xtal+0x3c>)
  401422:	6a11      	ldr	r1, [r2, #32]
  401424:	4b08      	ldr	r3, [pc, #32]	; (401448 <pmc_switch_mainck_to_xtal+0x48>)
  401426:	430b      	orrs	r3, r1
  401428:	6213      	str	r3, [r2, #32]
  40142a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40142c:	4903      	ldr	r1, [pc, #12]	; (40143c <pmc_switch_mainck_to_xtal+0x3c>)
  40142e:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401430:	4a06      	ldr	r2, [pc, #24]	; (40144c <pmc_switch_mainck_to_xtal+0x4c>)
  401432:	401a      	ands	r2, r3
  401434:	4b06      	ldr	r3, [pc, #24]	; (401450 <pmc_switch_mainck_to_xtal+0x50>)
  401436:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401438:	620b      	str	r3, [r1, #32]
  40143a:	4770      	bx	lr
  40143c:	400e0600 	.word	0x400e0600
  401440:	ffc8fffc 	.word	0xffc8fffc
  401444:	00370001 	.word	0x00370001
  401448:	01370000 	.word	0x01370000
  40144c:	fec8fffc 	.word	0xfec8fffc
  401450:	01370002 	.word	0x01370002

00401454 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401454:	4b02      	ldr	r3, [pc, #8]	; (401460 <pmc_osc_is_ready_mainck+0xc>)
  401456:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401458:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40145c:	4770      	bx	lr
  40145e:	bf00      	nop
  401460:	400e0600 	.word	0x400e0600

00401464 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401464:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401468:	4b01      	ldr	r3, [pc, #4]	; (401470 <pmc_disable_pllack+0xc>)
  40146a:	629a      	str	r2, [r3, #40]	; 0x28
  40146c:	4770      	bx	lr
  40146e:	bf00      	nop
  401470:	400e0600 	.word	0x400e0600

00401474 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401474:	4b02      	ldr	r3, [pc, #8]	; (401480 <pmc_is_locked_pllack+0xc>)
  401476:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401478:	f000 0002 	and.w	r0, r0, #2
  40147c:	4770      	bx	lr
  40147e:	bf00      	nop
  401480:	400e0600 	.word	0x400e0600

00401484 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  401484:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  401488:	4b05      	ldr	r3, [pc, #20]	; (4014a0 <pmc_enable_periph_clk+0x1c>)
  40148a:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  40148e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  401492:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  401496:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40149a:	2000      	movs	r0, #0
  40149c:	4770      	bx	lr
  40149e:	bf00      	nop
  4014a0:	400e0600 	.word	0x400e0600

004014a4 <pmc_switch_pck_to_pllack>:
 */
uint32_t pmc_switch_pck_to_pllack(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLA_CLK | ul_pres;
  4014a4:	f041 0102 	orr.w	r1, r1, #2
  4014a8:	4b0c      	ldr	r3, [pc, #48]	; (4014dc <pmc_switch_pck_to_pllack+0x38>)
  4014aa:	f100 0210 	add.w	r2, r0, #16
  4014ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  4014b2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  4014b4:	f44f 7380 	mov.w	r3, #256	; 0x100
  4014b8:	fa03 f000 	lsl.w	r0, r3, r0
	for (ul_timeout = PMC_TIMEOUT;
  4014bc:	4202      	tst	r2, r0
  4014be:	d109      	bne.n	4014d4 <pmc_switch_pck_to_pllack+0x30>
  4014c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  4014c4:	4905      	ldr	r1, [pc, #20]	; (4014dc <pmc_switch_pck_to_pllack+0x38>)
  4014c6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	for (ul_timeout = PMC_TIMEOUT;
  4014c8:	4202      	tst	r2, r0
  4014ca:	d105      	bne.n	4014d8 <pmc_switch_pck_to_pllack+0x34>
		if (ul_timeout == 0) {
  4014cc:	3b01      	subs	r3, #1
  4014ce:	d1fa      	bne.n	4014c6 <pmc_switch_pck_to_pllack+0x22>
			return 1;
  4014d0:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4014d2:	4770      	bx	lr
	return 0;
  4014d4:	2000      	movs	r0, #0
  4014d6:	4770      	bx	lr
  4014d8:	2000      	movs	r0, #0
  4014da:	4770      	bx	lr
  4014dc:	400e0600 	.word	0x400e0600

004014e0 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  4014e0:	f44f 7380 	mov.w	r3, #256	; 0x100
  4014e4:	fa03 f000 	lsl.w	r0, r3, r0
  4014e8:	4b01      	ldr	r3, [pc, #4]	; (4014f0 <pmc_enable_pck+0x10>)
  4014ea:	6018      	str	r0, [r3, #0]
  4014ec:	4770      	bx	lr
  4014ee:	bf00      	nop
  4014f0:	400e0600 	.word	0x400e0600

004014f4 <pmc_disable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  4014f4:	f44f 7380 	mov.w	r3, #256	; 0x100
  4014f8:	fa03 f000 	lsl.w	r0, r3, r0
  4014fc:	4b01      	ldr	r3, [pc, #4]	; (401504 <pmc_disable_pck+0x10>)
  4014fe:	6058      	str	r0, [r3, #4]
  401500:	4770      	bx	lr
  401502:	bf00      	nop
  401504:	400e0600 	.word	0x400e0600

00401508 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401508:	6943      	ldr	r3, [r0, #20]
  40150a:	f013 0f02 	tst.w	r3, #2
  40150e:	d002      	beq.n	401516 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401510:	61c1      	str	r1, [r0, #28]
	return 0;
  401512:	2000      	movs	r0, #0
  401514:	4770      	bx	lr
		return 1;
  401516:	2001      	movs	r0, #1
}
  401518:	4770      	bx	lr

0040151a <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40151a:	6943      	ldr	r3, [r0, #20]
  40151c:	f013 0f01 	tst.w	r3, #1
  401520:	d003      	beq.n	40152a <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401522:	6983      	ldr	r3, [r0, #24]
  401524:	700b      	strb	r3, [r1, #0]
	return 0;
  401526:	2000      	movs	r0, #0
  401528:	4770      	bx	lr
		return 1;
  40152a:	2001      	movs	r0, #1
}
  40152c:	4770      	bx	lr

0040152e <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40152e:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401530:	010b      	lsls	r3, r1, #4
  401532:	4293      	cmp	r3, r2
  401534:	d914      	bls.n	401560 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401536:	00c9      	lsls	r1, r1, #3
  401538:	084b      	lsrs	r3, r1, #1
  40153a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  40153e:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401542:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401544:	1e5c      	subs	r4, r3, #1
  401546:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40154a:	428c      	cmp	r4, r1
  40154c:	d901      	bls.n	401552 <usart_set_async_baudrate+0x24>
		return 1;
  40154e:	2001      	movs	r0, #1
  401550:	e017      	b.n	401582 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401552:	6841      	ldr	r1, [r0, #4]
  401554:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401558:	6041      	str	r1, [r0, #4]
  40155a:	e00c      	b.n	401576 <usart_set_async_baudrate+0x48>
		return 1;
  40155c:	2001      	movs	r0, #1
  40155e:	e010      	b.n	401582 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401560:	0859      	lsrs	r1, r3, #1
  401562:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401566:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  40156a:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40156c:	1e5c      	subs	r4, r3, #1
  40156e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401572:	428c      	cmp	r4, r1
  401574:	d8f2      	bhi.n	40155c <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401576:	0412      	lsls	r2, r2, #16
  401578:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  40157c:	431a      	orrs	r2, r3
  40157e:	6202      	str	r2, [r0, #32]

	return 0;
  401580:	2000      	movs	r0, #0
}
  401582:	f85d 4b04 	ldr.w	r4, [sp], #4
  401586:	4770      	bx	lr

00401588 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401588:	4b08      	ldr	r3, [pc, #32]	; (4015ac <usart_reset+0x24>)
  40158a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  40158e:	2300      	movs	r3, #0
  401590:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401592:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401594:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401596:	2388      	movs	r3, #136	; 0x88
  401598:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40159a:	2324      	movs	r3, #36	; 0x24
  40159c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40159e:	f44f 7380 	mov.w	r3, #256	; 0x100
  4015a2:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4015a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4015a8:	6003      	str	r3, [r0, #0]
  4015aa:	4770      	bx	lr
  4015ac:	55534100 	.word	0x55534100

004015b0 <usart_init_rs232>:
{
  4015b0:	b570      	push	{r4, r5, r6, lr}
  4015b2:	4605      	mov	r5, r0
  4015b4:	460c      	mov	r4, r1
  4015b6:	4616      	mov	r6, r2
	usart_reset(p_usart);
  4015b8:	4b0f      	ldr	r3, [pc, #60]	; (4015f8 <usart_init_rs232+0x48>)
  4015ba:	4798      	blx	r3
	ul_reg_val = 0;
  4015bc:	2200      	movs	r2, #0
  4015be:	4b0f      	ldr	r3, [pc, #60]	; (4015fc <usart_init_rs232+0x4c>)
  4015c0:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4015c2:	b1a4      	cbz	r4, 4015ee <usart_init_rs232+0x3e>
  4015c4:	4632      	mov	r2, r6
  4015c6:	6821      	ldr	r1, [r4, #0]
  4015c8:	4628      	mov	r0, r5
  4015ca:	4b0d      	ldr	r3, [pc, #52]	; (401600 <usart_init_rs232+0x50>)
  4015cc:	4798      	blx	r3
  4015ce:	4602      	mov	r2, r0
  4015d0:	b978      	cbnz	r0, 4015f2 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4015d2:	6863      	ldr	r3, [r4, #4]
  4015d4:	68a1      	ldr	r1, [r4, #8]
  4015d6:	430b      	orrs	r3, r1
  4015d8:	6921      	ldr	r1, [r4, #16]
  4015da:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4015dc:	68e1      	ldr	r1, [r4, #12]
  4015de:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4015e0:	4906      	ldr	r1, [pc, #24]	; (4015fc <usart_init_rs232+0x4c>)
  4015e2:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4015e4:	6869      	ldr	r1, [r5, #4]
  4015e6:	430b      	orrs	r3, r1
  4015e8:	606b      	str	r3, [r5, #4]
}
  4015ea:	4610      	mov	r0, r2
  4015ec:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4015ee:	2201      	movs	r2, #1
  4015f0:	e7fb      	b.n	4015ea <usart_init_rs232+0x3a>
  4015f2:	2201      	movs	r2, #1
  4015f4:	e7f9      	b.n	4015ea <usart_init_rs232+0x3a>
  4015f6:	bf00      	nop
  4015f8:	00401589 	.word	0x00401589
  4015fc:	20401460 	.word	0x20401460
  401600:	0040152f 	.word	0x0040152f

00401604 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401604:	2340      	movs	r3, #64	; 0x40
  401606:	6003      	str	r3, [r0, #0]
  401608:	4770      	bx	lr

0040160a <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40160a:	2310      	movs	r3, #16
  40160c:	6003      	str	r3, [r0, #0]
  40160e:	4770      	bx	lr

00401610 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401610:	6943      	ldr	r3, [r0, #20]
  401612:	f013 0f02 	tst.w	r3, #2
  401616:	d004      	beq.n	401622 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401618:	f3c1 0108 	ubfx	r1, r1, #0, #9
  40161c:	61c1      	str	r1, [r0, #28]
	return 0;
  40161e:	2000      	movs	r0, #0
  401620:	4770      	bx	lr
		return 1;
  401622:	2001      	movs	r0, #1
}
  401624:	4770      	bx	lr

00401626 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401626:	6943      	ldr	r3, [r0, #20]
  401628:	f013 0f01 	tst.w	r3, #1
  40162c:	d005      	beq.n	40163a <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40162e:	6983      	ldr	r3, [r0, #24]
  401630:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401634:	600b      	str	r3, [r1, #0]
	return 0;
  401636:	2000      	movs	r0, #0
  401638:	4770      	bx	lr
		return 1;
  40163a:	2001      	movs	r0, #1
}
  40163c:	4770      	bx	lr

0040163e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40163e:	e7fe      	b.n	40163e <Dummy_Handler>

00401640 <Reset_Handler>:
{
  401640:	b500      	push	{lr}
  401642:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401644:	4b25      	ldr	r3, [pc, #148]	; (4016dc <Reset_Handler+0x9c>)
  401646:	4a26      	ldr	r2, [pc, #152]	; (4016e0 <Reset_Handler+0xa0>)
  401648:	429a      	cmp	r2, r3
  40164a:	d010      	beq.n	40166e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  40164c:	4b25      	ldr	r3, [pc, #148]	; (4016e4 <Reset_Handler+0xa4>)
  40164e:	4a23      	ldr	r2, [pc, #140]	; (4016dc <Reset_Handler+0x9c>)
  401650:	429a      	cmp	r2, r3
  401652:	d20c      	bcs.n	40166e <Reset_Handler+0x2e>
  401654:	3b01      	subs	r3, #1
  401656:	1a9b      	subs	r3, r3, r2
  401658:	f023 0303 	bic.w	r3, r3, #3
  40165c:	3304      	adds	r3, #4
  40165e:	4413      	add	r3, r2
  401660:	491f      	ldr	r1, [pc, #124]	; (4016e0 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401662:	f851 0b04 	ldr.w	r0, [r1], #4
  401666:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40166a:	429a      	cmp	r2, r3
  40166c:	d1f9      	bne.n	401662 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40166e:	4b1e      	ldr	r3, [pc, #120]	; (4016e8 <Reset_Handler+0xa8>)
  401670:	4a1e      	ldr	r2, [pc, #120]	; (4016ec <Reset_Handler+0xac>)
  401672:	429a      	cmp	r2, r3
  401674:	d20a      	bcs.n	40168c <Reset_Handler+0x4c>
  401676:	3b01      	subs	r3, #1
  401678:	1a9b      	subs	r3, r3, r2
  40167a:	f023 0303 	bic.w	r3, r3, #3
  40167e:	3304      	adds	r3, #4
  401680:	4413      	add	r3, r2
                *pDest++ = 0;
  401682:	2100      	movs	r1, #0
  401684:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401688:	4293      	cmp	r3, r2
  40168a:	d1fb      	bne.n	401684 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40168c:	4a18      	ldr	r2, [pc, #96]	; (4016f0 <Reset_Handler+0xb0>)
  40168e:	4b19      	ldr	r3, [pc, #100]	; (4016f4 <Reset_Handler+0xb4>)
  401690:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401694:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401696:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40169a:	fab3 f383 	clz	r3, r3
  40169e:	095b      	lsrs	r3, r3, #5
  4016a0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4016a2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4016a4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4016a8:	2200      	movs	r2, #0
  4016aa:	4b13      	ldr	r3, [pc, #76]	; (4016f8 <Reset_Handler+0xb8>)
  4016ac:	701a      	strb	r2, [r3, #0]
	return flags;
  4016ae:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4016b0:	4a12      	ldr	r2, [pc, #72]	; (4016fc <Reset_Handler+0xbc>)
  4016b2:	6813      	ldr	r3, [r2, #0]
  4016b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4016b8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  4016ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4016be:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4016c2:	b129      	cbz	r1, 4016d0 <Reset_Handler+0x90>
		cpu_irq_enable();
  4016c4:	2201      	movs	r2, #1
  4016c6:	4b0c      	ldr	r3, [pc, #48]	; (4016f8 <Reset_Handler+0xb8>)
  4016c8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4016ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4016ce:	b662      	cpsie	i
        __libc_init_array();
  4016d0:	4b0b      	ldr	r3, [pc, #44]	; (401700 <Reset_Handler+0xc0>)
  4016d2:	4798      	blx	r3
        main();
  4016d4:	4b0b      	ldr	r3, [pc, #44]	; (401704 <Reset_Handler+0xc4>)
  4016d6:	4798      	blx	r3
  4016d8:	e7fe      	b.n	4016d8 <Reset_Handler+0x98>
  4016da:	bf00      	nop
  4016dc:	20400000 	.word	0x20400000
  4016e0:	00405068 	.word	0x00405068
  4016e4:	204009c0 	.word	0x204009c0
  4016e8:	204014d8 	.word	0x204014d8
  4016ec:	204009c0 	.word	0x204009c0
  4016f0:	e000ed00 	.word	0xe000ed00
  4016f4:	00400000 	.word	0x00400000
  4016f8:	20400008 	.word	0x20400008
  4016fc:	e000ed88 	.word	0xe000ed88
  401700:	004019c1 	.word	0x004019c1
  401704:	004018fd 	.word	0x004018fd

00401708 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401708:	4b3b      	ldr	r3, [pc, #236]	; (4017f8 <SystemCoreClockUpdate+0xf0>)
  40170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40170c:	f003 0303 	and.w	r3, r3, #3
  401710:	2b01      	cmp	r3, #1
  401712:	d01d      	beq.n	401750 <SystemCoreClockUpdate+0x48>
  401714:	b183      	cbz	r3, 401738 <SystemCoreClockUpdate+0x30>
  401716:	2b02      	cmp	r3, #2
  401718:	d036      	beq.n	401788 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40171a:	4b37      	ldr	r3, [pc, #220]	; (4017f8 <SystemCoreClockUpdate+0xf0>)
  40171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40171e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401722:	2b70      	cmp	r3, #112	; 0x70
  401724:	d05f      	beq.n	4017e6 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401726:	4b34      	ldr	r3, [pc, #208]	; (4017f8 <SystemCoreClockUpdate+0xf0>)
  401728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40172a:	4934      	ldr	r1, [pc, #208]	; (4017fc <SystemCoreClockUpdate+0xf4>)
  40172c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401730:	680b      	ldr	r3, [r1, #0]
  401732:	40d3      	lsrs	r3, r2
  401734:	600b      	str	r3, [r1, #0]
  401736:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401738:	4b31      	ldr	r3, [pc, #196]	; (401800 <SystemCoreClockUpdate+0xf8>)
  40173a:	695b      	ldr	r3, [r3, #20]
  40173c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401740:	bf14      	ite	ne
  401742:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401746:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40174a:	4b2c      	ldr	r3, [pc, #176]	; (4017fc <SystemCoreClockUpdate+0xf4>)
  40174c:	601a      	str	r2, [r3, #0]
  40174e:	e7e4      	b.n	40171a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401750:	4b29      	ldr	r3, [pc, #164]	; (4017f8 <SystemCoreClockUpdate+0xf0>)
  401752:	6a1b      	ldr	r3, [r3, #32]
  401754:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401758:	d003      	beq.n	401762 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40175a:	4a2a      	ldr	r2, [pc, #168]	; (401804 <SystemCoreClockUpdate+0xfc>)
  40175c:	4b27      	ldr	r3, [pc, #156]	; (4017fc <SystemCoreClockUpdate+0xf4>)
  40175e:	601a      	str	r2, [r3, #0]
  401760:	e7db      	b.n	40171a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401762:	4a29      	ldr	r2, [pc, #164]	; (401808 <SystemCoreClockUpdate+0x100>)
  401764:	4b25      	ldr	r3, [pc, #148]	; (4017fc <SystemCoreClockUpdate+0xf4>)
  401766:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401768:	4b23      	ldr	r3, [pc, #140]	; (4017f8 <SystemCoreClockUpdate+0xf0>)
  40176a:	6a1b      	ldr	r3, [r3, #32]
  40176c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401770:	2b10      	cmp	r3, #16
  401772:	d005      	beq.n	401780 <SystemCoreClockUpdate+0x78>
  401774:	2b20      	cmp	r3, #32
  401776:	d1d0      	bne.n	40171a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401778:	4a22      	ldr	r2, [pc, #136]	; (401804 <SystemCoreClockUpdate+0xfc>)
  40177a:	4b20      	ldr	r3, [pc, #128]	; (4017fc <SystemCoreClockUpdate+0xf4>)
  40177c:	601a      	str	r2, [r3, #0]
          break;
  40177e:	e7cc      	b.n	40171a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401780:	4a22      	ldr	r2, [pc, #136]	; (40180c <SystemCoreClockUpdate+0x104>)
  401782:	4b1e      	ldr	r3, [pc, #120]	; (4017fc <SystemCoreClockUpdate+0xf4>)
  401784:	601a      	str	r2, [r3, #0]
          break;
  401786:	e7c8      	b.n	40171a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401788:	4b1b      	ldr	r3, [pc, #108]	; (4017f8 <SystemCoreClockUpdate+0xf0>)
  40178a:	6a1b      	ldr	r3, [r3, #32]
  40178c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401790:	d016      	beq.n	4017c0 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401792:	4a1c      	ldr	r2, [pc, #112]	; (401804 <SystemCoreClockUpdate+0xfc>)
  401794:	4b19      	ldr	r3, [pc, #100]	; (4017fc <SystemCoreClockUpdate+0xf4>)
  401796:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401798:	4b17      	ldr	r3, [pc, #92]	; (4017f8 <SystemCoreClockUpdate+0xf0>)
  40179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40179c:	f003 0303 	and.w	r3, r3, #3
  4017a0:	2b02      	cmp	r3, #2
  4017a2:	d1ba      	bne.n	40171a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4017a4:	4a14      	ldr	r2, [pc, #80]	; (4017f8 <SystemCoreClockUpdate+0xf0>)
  4017a6:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4017a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4017aa:	4814      	ldr	r0, [pc, #80]	; (4017fc <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4017ac:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4017b0:	6803      	ldr	r3, [r0, #0]
  4017b2:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4017b6:	b2d2      	uxtb	r2, r2
  4017b8:	fbb3 f3f2 	udiv	r3, r3, r2
  4017bc:	6003      	str	r3, [r0, #0]
  4017be:	e7ac      	b.n	40171a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4017c0:	4a11      	ldr	r2, [pc, #68]	; (401808 <SystemCoreClockUpdate+0x100>)
  4017c2:	4b0e      	ldr	r3, [pc, #56]	; (4017fc <SystemCoreClockUpdate+0xf4>)
  4017c4:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4017c6:	4b0c      	ldr	r3, [pc, #48]	; (4017f8 <SystemCoreClockUpdate+0xf0>)
  4017c8:	6a1b      	ldr	r3, [r3, #32]
  4017ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4017ce:	2b10      	cmp	r3, #16
  4017d0:	d005      	beq.n	4017de <SystemCoreClockUpdate+0xd6>
  4017d2:	2b20      	cmp	r3, #32
  4017d4:	d1e0      	bne.n	401798 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4017d6:	4a0b      	ldr	r2, [pc, #44]	; (401804 <SystemCoreClockUpdate+0xfc>)
  4017d8:	4b08      	ldr	r3, [pc, #32]	; (4017fc <SystemCoreClockUpdate+0xf4>)
  4017da:	601a      	str	r2, [r3, #0]
          break;
  4017dc:	e7dc      	b.n	401798 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4017de:	4a0b      	ldr	r2, [pc, #44]	; (40180c <SystemCoreClockUpdate+0x104>)
  4017e0:	4b06      	ldr	r3, [pc, #24]	; (4017fc <SystemCoreClockUpdate+0xf4>)
  4017e2:	601a      	str	r2, [r3, #0]
          break;
  4017e4:	e7d8      	b.n	401798 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4017e6:	4a05      	ldr	r2, [pc, #20]	; (4017fc <SystemCoreClockUpdate+0xf4>)
  4017e8:	6813      	ldr	r3, [r2, #0]
  4017ea:	4909      	ldr	r1, [pc, #36]	; (401810 <SystemCoreClockUpdate+0x108>)
  4017ec:	fba1 1303 	umull	r1, r3, r1, r3
  4017f0:	085b      	lsrs	r3, r3, #1
  4017f2:	6013      	str	r3, [r2, #0]
  4017f4:	4770      	bx	lr
  4017f6:	bf00      	nop
  4017f8:	400e0600 	.word	0x400e0600
  4017fc:	2040000c 	.word	0x2040000c
  401800:	400e1810 	.word	0x400e1810
  401804:	00b71b00 	.word	0x00b71b00
  401808:	003d0900 	.word	0x003d0900
  40180c:	007a1200 	.word	0x007a1200
  401810:	aaaaaaab 	.word	0xaaaaaaab

00401814 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401814:	4b16      	ldr	r3, [pc, #88]	; (401870 <system_init_flash+0x5c>)
  401816:	4298      	cmp	r0, r3
  401818:	d913      	bls.n	401842 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40181a:	4b16      	ldr	r3, [pc, #88]	; (401874 <system_init_flash+0x60>)
  40181c:	4298      	cmp	r0, r3
  40181e:	d915      	bls.n	40184c <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401820:	4b15      	ldr	r3, [pc, #84]	; (401878 <system_init_flash+0x64>)
  401822:	4298      	cmp	r0, r3
  401824:	d916      	bls.n	401854 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401826:	4b15      	ldr	r3, [pc, #84]	; (40187c <system_init_flash+0x68>)
  401828:	4298      	cmp	r0, r3
  40182a:	d917      	bls.n	40185c <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40182c:	4b14      	ldr	r3, [pc, #80]	; (401880 <system_init_flash+0x6c>)
  40182e:	4298      	cmp	r0, r3
  401830:	d918      	bls.n	401864 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401832:	4b14      	ldr	r3, [pc, #80]	; (401884 <system_init_flash+0x70>)
  401834:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401836:	bf94      	ite	ls
  401838:	4a13      	ldrls	r2, [pc, #76]	; (401888 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40183a:	4a14      	ldrhi	r2, [pc, #80]	; (40188c <system_init_flash+0x78>)
  40183c:	4b14      	ldr	r3, [pc, #80]	; (401890 <system_init_flash+0x7c>)
  40183e:	601a      	str	r2, [r3, #0]
  401840:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401842:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401846:	4b12      	ldr	r3, [pc, #72]	; (401890 <system_init_flash+0x7c>)
  401848:	601a      	str	r2, [r3, #0]
  40184a:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40184c:	4a11      	ldr	r2, [pc, #68]	; (401894 <system_init_flash+0x80>)
  40184e:	4b10      	ldr	r3, [pc, #64]	; (401890 <system_init_flash+0x7c>)
  401850:	601a      	str	r2, [r3, #0]
  401852:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401854:	4a10      	ldr	r2, [pc, #64]	; (401898 <system_init_flash+0x84>)
  401856:	4b0e      	ldr	r3, [pc, #56]	; (401890 <system_init_flash+0x7c>)
  401858:	601a      	str	r2, [r3, #0]
  40185a:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40185c:	4a0f      	ldr	r2, [pc, #60]	; (40189c <system_init_flash+0x88>)
  40185e:	4b0c      	ldr	r3, [pc, #48]	; (401890 <system_init_flash+0x7c>)
  401860:	601a      	str	r2, [r3, #0]
  401862:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401864:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401868:	4b09      	ldr	r3, [pc, #36]	; (401890 <system_init_flash+0x7c>)
  40186a:	601a      	str	r2, [r3, #0]
  40186c:	4770      	bx	lr
  40186e:	bf00      	nop
  401870:	015ef3bf 	.word	0x015ef3bf
  401874:	02bde77f 	.word	0x02bde77f
  401878:	041cdb3f 	.word	0x041cdb3f
  40187c:	057bceff 	.word	0x057bceff
  401880:	06dac2bf 	.word	0x06dac2bf
  401884:	0839b67f 	.word	0x0839b67f
  401888:	04000500 	.word	0x04000500
  40188c:	04000600 	.word	0x04000600
  401890:	400e0c00 	.word	0x400e0c00
  401894:	04000100 	.word	0x04000100
  401898:	04000200 	.word	0x04000200
  40189c:	04000300 	.word	0x04000300

004018a0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4018a0:	4b0a      	ldr	r3, [pc, #40]	; (4018cc <_sbrk+0x2c>)
  4018a2:	681b      	ldr	r3, [r3, #0]
  4018a4:	b153      	cbz	r3, 4018bc <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4018a6:	4b09      	ldr	r3, [pc, #36]	; (4018cc <_sbrk+0x2c>)
  4018a8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4018aa:	181a      	adds	r2, r3, r0
  4018ac:	4908      	ldr	r1, [pc, #32]	; (4018d0 <_sbrk+0x30>)
  4018ae:	4291      	cmp	r1, r2
  4018b0:	db08      	blt.n	4018c4 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4018b2:	4610      	mov	r0, r2
  4018b4:	4a05      	ldr	r2, [pc, #20]	; (4018cc <_sbrk+0x2c>)
  4018b6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4018b8:	4618      	mov	r0, r3
  4018ba:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4018bc:	4a05      	ldr	r2, [pc, #20]	; (4018d4 <_sbrk+0x34>)
  4018be:	4b03      	ldr	r3, [pc, #12]	; (4018cc <_sbrk+0x2c>)
  4018c0:	601a      	str	r2, [r3, #0]
  4018c2:	e7f0      	b.n	4018a6 <_sbrk+0x6>
		return (caddr_t) -1;	
  4018c4:	f04f 30ff 	mov.w	r0, #4294967295
}
  4018c8:	4770      	bx	lr
  4018ca:	bf00      	nop
  4018cc:	20401464 	.word	0x20401464
  4018d0:	2045fffc 	.word	0x2045fffc
  4018d4:	204036d8 	.word	0x204036d8

004018d8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4018d8:	f04f 30ff 	mov.w	r0, #4294967295
  4018dc:	4770      	bx	lr

004018de <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4018de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4018e2:	604b      	str	r3, [r1, #4]

	return 0;
}
  4018e4:	2000      	movs	r0, #0
  4018e6:	4770      	bx	lr

004018e8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4018e8:	2001      	movs	r0, #1
  4018ea:	4770      	bx	lr

004018ec <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4018ec:	2000      	movs	r0, #0
  4018ee:	4770      	bx	lr

004018f0 <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
  4018f0:	be00      	bkpt	0x0000
  4018f2:	e7fe      	b.n	4018f2 <_exit+0x2>

004018f4 <_kill>:
	for (;;);
}

extern void _kill(int pid, int sig)
{
  4018f4:	4770      	bx	lr

004018f6 <_getpid>:
}

extern int _getpid(void)
{
	return -1;
}
  4018f6:	f04f 30ff 	mov.w	r0, #4294967295
  4018fa:	4770      	bx	lr

004018fc <main>:
volatile uint64_t    g_tickTime_ms      = 0UL;
volatile uint32_t    g_tx_tick_count_ms = 0U;


 int main(void)
 {
  4018fc:	b508      	push	{r3, lr}
 	uint8_t key;

 	sysclk_init();
  4018fe:	4b0d      	ldr	r3, [pc, #52]	; (401934 <main+0x38>)
  401900:	4798      	blx	r3
 	board_init();
  401902:	4b0d      	ldr	r3, [pc, #52]	; (401938 <main+0x3c>)
  401904:	4798      	blx	r3

	// sample_init();
	
	g_tickCount = 0;
  401906:	2300      	movs	r3, #0
  401908:	4a0c      	ldr	r2, [pc, #48]	; (40193c <main+0x40>)
  40190a:	6013      	str	r3, [r2, #0]
	g_tx_tick_count_ms = 0;
  40190c:	4a0c      	ldr	r2, [pc, #48]	; (401940 <main+0x44>)
  40190e:	6013      	str	r3, [r2, #0]

 	can_init();    // CAN1_Initialize();
  401910:	4b0c      	ldr	r3, [pc, #48]	; (401944 <main+0x48>)
  401912:	4798      	blx	r3
 	CANTxTaskInit();
  401914:	4b0c      	ldr	r3, [pc, #48]	; (401948 <main+0x4c>)
  401916:	4798      	blx	r3
	
	while(1)
  {
	sample_1();
  401918:	4e0c      	ldr	r6, [pc, #48]	; (40194c <main+0x50>)
    CANRxTask();
  40191a:	4d0d      	ldr	r5, [pc, #52]	; (401950 <main+0x54>)
    CANTxTask(g_tx_tick_count_ms);
  40191c:	4c08      	ldr	r4, [pc, #32]	; (401940 <main+0x44>)
	sample_1();
  40191e:	47b0      	blx	r6
    CANRxTask();
  401920:	47a8      	blx	r5
    CANTxTask(g_tx_tick_count_ms);
  401922:	6820      	ldr	r0, [r4, #0]
  401924:	4b0b      	ldr	r3, [pc, #44]	; (401954 <main+0x58>)
  401926:	4798      	blx	r3
    g_tx_tick_count_ms++;
  401928:	6823      	ldr	r3, [r4, #0]
  40192a:	3301      	adds	r3, #1
  40192c:	6023      	str	r3, [r4, #0]
    CanMessageControl_Task();
  40192e:	4b0a      	ldr	r3, [pc, #40]	; (401958 <main+0x5c>)
  401930:	4798      	blx	r3
  401932:	e7f4      	b.n	40191e <main+0x22>
  401934:	00400c59 	.word	0x00400c59
  401938:	00400d55 	.word	0x00400d55
  40193c:	20401468 	.word	0x20401468
  401940:	2040146c 	.word	0x2040146c
  401944:	00400a25 	.word	0x00400a25
  401948:	00400655 	.word	0x00400655
  40194c:	00400759 	.word	0x00400759
  401950:	004005c5 	.word	0x004005c5
  401954:	0040068d 	.word	0x0040068d
  401958:	004006e5 	.word	0x004006e5

0040195c <__assert_func>:
  40195c:	b500      	push	{lr}
  40195e:	4c0a      	ldr	r4, [pc, #40]	; (401988 <__assert_func+0x2c>)
  401960:	6826      	ldr	r6, [r4, #0]
  401962:	4605      	mov	r5, r0
  401964:	b085      	sub	sp, #20
  401966:	461c      	mov	r4, r3
  401968:	68f0      	ldr	r0, [r6, #12]
  40196a:	b152      	cbz	r2, 401982 <__assert_func+0x26>
  40196c:	4b07      	ldr	r3, [pc, #28]	; (40198c <__assert_func+0x30>)
  40196e:	9202      	str	r2, [sp, #8]
  401970:	e88d 000a 	stmia.w	sp, {r1, r3}
  401974:	4622      	mov	r2, r4
  401976:	462b      	mov	r3, r5
  401978:	4905      	ldr	r1, [pc, #20]	; (401990 <__assert_func+0x34>)
  40197a:	f000 f80d 	bl	401998 <fiprintf>
  40197e:	f001 f94b 	bl	402c18 <abort>
  401982:	4b04      	ldr	r3, [pc, #16]	; (401994 <__assert_func+0x38>)
  401984:	461a      	mov	r2, r3
  401986:	e7f2      	b.n	40196e <__assert_func+0x12>
  401988:	20400010 	.word	0x20400010
  40198c:	00404e94 	.word	0x00404e94
  401990:	00404ea4 	.word	0x00404ea4
  401994:	00404e84 	.word	0x00404e84

00401998 <fiprintf>:
  401998:	b40e      	push	{r1, r2, r3}
  40199a:	b510      	push	{r4, lr}
  40199c:	b083      	sub	sp, #12
  40199e:	ab05      	add	r3, sp, #20
  4019a0:	4c06      	ldr	r4, [pc, #24]	; (4019bc <fiprintf+0x24>)
  4019a2:	f853 2b04 	ldr.w	r2, [r3], #4
  4019a6:	9301      	str	r3, [sp, #4]
  4019a8:	4601      	mov	r1, r0
  4019aa:	6820      	ldr	r0, [r4, #0]
  4019ac:	f000 fa3c 	bl	401e28 <_vfiprintf_r>
  4019b0:	b003      	add	sp, #12
  4019b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4019b6:	b003      	add	sp, #12
  4019b8:	4770      	bx	lr
  4019ba:	bf00      	nop
  4019bc:	20400010 	.word	0x20400010

004019c0 <__libc_init_array>:
  4019c0:	b570      	push	{r4, r5, r6, lr}
  4019c2:	4e0f      	ldr	r6, [pc, #60]	; (401a00 <__libc_init_array+0x40>)
  4019c4:	4d0f      	ldr	r5, [pc, #60]	; (401a04 <__libc_init_array+0x44>)
  4019c6:	1b76      	subs	r6, r6, r5
  4019c8:	10b6      	asrs	r6, r6, #2
  4019ca:	bf18      	it	ne
  4019cc:	2400      	movne	r4, #0
  4019ce:	d005      	beq.n	4019dc <__libc_init_array+0x1c>
  4019d0:	3401      	adds	r4, #1
  4019d2:	f855 3b04 	ldr.w	r3, [r5], #4
  4019d6:	4798      	blx	r3
  4019d8:	42a6      	cmp	r6, r4
  4019da:	d1f9      	bne.n	4019d0 <__libc_init_array+0x10>
  4019dc:	4e0a      	ldr	r6, [pc, #40]	; (401a08 <__libc_init_array+0x48>)
  4019de:	4d0b      	ldr	r5, [pc, #44]	; (401a0c <__libc_init_array+0x4c>)
  4019e0:	1b76      	subs	r6, r6, r5
  4019e2:	f003 fb2b 	bl	40503c <_init>
  4019e6:	10b6      	asrs	r6, r6, #2
  4019e8:	bf18      	it	ne
  4019ea:	2400      	movne	r4, #0
  4019ec:	d006      	beq.n	4019fc <__libc_init_array+0x3c>
  4019ee:	3401      	adds	r4, #1
  4019f0:	f855 3b04 	ldr.w	r3, [r5], #4
  4019f4:	4798      	blx	r3
  4019f6:	42a6      	cmp	r6, r4
  4019f8:	d1f9      	bne.n	4019ee <__libc_init_array+0x2e>
  4019fa:	bd70      	pop	{r4, r5, r6, pc}
  4019fc:	bd70      	pop	{r4, r5, r6, pc}
  4019fe:	bf00      	nop
  401a00:	00405048 	.word	0x00405048
  401a04:	00405048 	.word	0x00405048
  401a08:	00405050 	.word	0x00405050
  401a0c:	00405048 	.word	0x00405048

00401a10 <iprintf>:
  401a10:	b40f      	push	{r0, r1, r2, r3}
  401a12:	b500      	push	{lr}
  401a14:	4907      	ldr	r1, [pc, #28]	; (401a34 <iprintf+0x24>)
  401a16:	b083      	sub	sp, #12
  401a18:	ab04      	add	r3, sp, #16
  401a1a:	6808      	ldr	r0, [r1, #0]
  401a1c:	f853 2b04 	ldr.w	r2, [r3], #4
  401a20:	6881      	ldr	r1, [r0, #8]
  401a22:	9301      	str	r3, [sp, #4]
  401a24:	f000 fa00 	bl	401e28 <_vfiprintf_r>
  401a28:	b003      	add	sp, #12
  401a2a:	f85d eb04 	ldr.w	lr, [sp], #4
  401a2e:	b004      	add	sp, #16
  401a30:	4770      	bx	lr
  401a32:	bf00      	nop
  401a34:	20400010 	.word	0x20400010

00401a38 <memcpy>:
  401a38:	4684      	mov	ip, r0
  401a3a:	ea41 0300 	orr.w	r3, r1, r0
  401a3e:	f013 0303 	ands.w	r3, r3, #3
  401a42:	d16d      	bne.n	401b20 <memcpy+0xe8>
  401a44:	3a40      	subs	r2, #64	; 0x40
  401a46:	d341      	bcc.n	401acc <memcpy+0x94>
  401a48:	f851 3b04 	ldr.w	r3, [r1], #4
  401a4c:	f840 3b04 	str.w	r3, [r0], #4
  401a50:	f851 3b04 	ldr.w	r3, [r1], #4
  401a54:	f840 3b04 	str.w	r3, [r0], #4
  401a58:	f851 3b04 	ldr.w	r3, [r1], #4
  401a5c:	f840 3b04 	str.w	r3, [r0], #4
  401a60:	f851 3b04 	ldr.w	r3, [r1], #4
  401a64:	f840 3b04 	str.w	r3, [r0], #4
  401a68:	f851 3b04 	ldr.w	r3, [r1], #4
  401a6c:	f840 3b04 	str.w	r3, [r0], #4
  401a70:	f851 3b04 	ldr.w	r3, [r1], #4
  401a74:	f840 3b04 	str.w	r3, [r0], #4
  401a78:	f851 3b04 	ldr.w	r3, [r1], #4
  401a7c:	f840 3b04 	str.w	r3, [r0], #4
  401a80:	f851 3b04 	ldr.w	r3, [r1], #4
  401a84:	f840 3b04 	str.w	r3, [r0], #4
  401a88:	f851 3b04 	ldr.w	r3, [r1], #4
  401a8c:	f840 3b04 	str.w	r3, [r0], #4
  401a90:	f851 3b04 	ldr.w	r3, [r1], #4
  401a94:	f840 3b04 	str.w	r3, [r0], #4
  401a98:	f851 3b04 	ldr.w	r3, [r1], #4
  401a9c:	f840 3b04 	str.w	r3, [r0], #4
  401aa0:	f851 3b04 	ldr.w	r3, [r1], #4
  401aa4:	f840 3b04 	str.w	r3, [r0], #4
  401aa8:	f851 3b04 	ldr.w	r3, [r1], #4
  401aac:	f840 3b04 	str.w	r3, [r0], #4
  401ab0:	f851 3b04 	ldr.w	r3, [r1], #4
  401ab4:	f840 3b04 	str.w	r3, [r0], #4
  401ab8:	f851 3b04 	ldr.w	r3, [r1], #4
  401abc:	f840 3b04 	str.w	r3, [r0], #4
  401ac0:	f851 3b04 	ldr.w	r3, [r1], #4
  401ac4:	f840 3b04 	str.w	r3, [r0], #4
  401ac8:	3a40      	subs	r2, #64	; 0x40
  401aca:	d2bd      	bcs.n	401a48 <memcpy+0x10>
  401acc:	3230      	adds	r2, #48	; 0x30
  401ace:	d311      	bcc.n	401af4 <memcpy+0xbc>
  401ad0:	f851 3b04 	ldr.w	r3, [r1], #4
  401ad4:	f840 3b04 	str.w	r3, [r0], #4
  401ad8:	f851 3b04 	ldr.w	r3, [r1], #4
  401adc:	f840 3b04 	str.w	r3, [r0], #4
  401ae0:	f851 3b04 	ldr.w	r3, [r1], #4
  401ae4:	f840 3b04 	str.w	r3, [r0], #4
  401ae8:	f851 3b04 	ldr.w	r3, [r1], #4
  401aec:	f840 3b04 	str.w	r3, [r0], #4
  401af0:	3a10      	subs	r2, #16
  401af2:	d2ed      	bcs.n	401ad0 <memcpy+0x98>
  401af4:	320c      	adds	r2, #12
  401af6:	d305      	bcc.n	401b04 <memcpy+0xcc>
  401af8:	f851 3b04 	ldr.w	r3, [r1], #4
  401afc:	f840 3b04 	str.w	r3, [r0], #4
  401b00:	3a04      	subs	r2, #4
  401b02:	d2f9      	bcs.n	401af8 <memcpy+0xc0>
  401b04:	3204      	adds	r2, #4
  401b06:	d008      	beq.n	401b1a <memcpy+0xe2>
  401b08:	07d2      	lsls	r2, r2, #31
  401b0a:	bf1c      	itt	ne
  401b0c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  401b10:	f800 3b01 	strbne.w	r3, [r0], #1
  401b14:	d301      	bcc.n	401b1a <memcpy+0xe2>
  401b16:	880b      	ldrh	r3, [r1, #0]
  401b18:	8003      	strh	r3, [r0, #0]
  401b1a:	4660      	mov	r0, ip
  401b1c:	4770      	bx	lr
  401b1e:	bf00      	nop
  401b20:	2a08      	cmp	r2, #8
  401b22:	d313      	bcc.n	401b4c <memcpy+0x114>
  401b24:	078b      	lsls	r3, r1, #30
  401b26:	d08d      	beq.n	401a44 <memcpy+0xc>
  401b28:	f010 0303 	ands.w	r3, r0, #3
  401b2c:	d08a      	beq.n	401a44 <memcpy+0xc>
  401b2e:	f1c3 0304 	rsb	r3, r3, #4
  401b32:	1ad2      	subs	r2, r2, r3
  401b34:	07db      	lsls	r3, r3, #31
  401b36:	bf1c      	itt	ne
  401b38:	f811 3b01 	ldrbne.w	r3, [r1], #1
  401b3c:	f800 3b01 	strbne.w	r3, [r0], #1
  401b40:	d380      	bcc.n	401a44 <memcpy+0xc>
  401b42:	f831 3b02 	ldrh.w	r3, [r1], #2
  401b46:	f820 3b02 	strh.w	r3, [r0], #2
  401b4a:	e77b      	b.n	401a44 <memcpy+0xc>
  401b4c:	3a04      	subs	r2, #4
  401b4e:	d3d9      	bcc.n	401b04 <memcpy+0xcc>
  401b50:	3a01      	subs	r2, #1
  401b52:	f811 3b01 	ldrb.w	r3, [r1], #1
  401b56:	f800 3b01 	strb.w	r3, [r0], #1
  401b5a:	d2f9      	bcs.n	401b50 <memcpy+0x118>
  401b5c:	780b      	ldrb	r3, [r1, #0]
  401b5e:	7003      	strb	r3, [r0, #0]
  401b60:	784b      	ldrb	r3, [r1, #1]
  401b62:	7043      	strb	r3, [r0, #1]
  401b64:	788b      	ldrb	r3, [r1, #2]
  401b66:	7083      	strb	r3, [r0, #2]
  401b68:	4660      	mov	r0, ip
  401b6a:	4770      	bx	lr

00401b6c <memset>:
  401b6c:	b470      	push	{r4, r5, r6}
  401b6e:	0786      	lsls	r6, r0, #30
  401b70:	d046      	beq.n	401c00 <memset+0x94>
  401b72:	1e54      	subs	r4, r2, #1
  401b74:	2a00      	cmp	r2, #0
  401b76:	d041      	beq.n	401bfc <memset+0x90>
  401b78:	b2ca      	uxtb	r2, r1
  401b7a:	4603      	mov	r3, r0
  401b7c:	e002      	b.n	401b84 <memset+0x18>
  401b7e:	f114 34ff 	adds.w	r4, r4, #4294967295
  401b82:	d33b      	bcc.n	401bfc <memset+0x90>
  401b84:	f803 2b01 	strb.w	r2, [r3], #1
  401b88:	079d      	lsls	r5, r3, #30
  401b8a:	d1f8      	bne.n	401b7e <memset+0x12>
  401b8c:	2c03      	cmp	r4, #3
  401b8e:	d92e      	bls.n	401bee <memset+0x82>
  401b90:	b2cd      	uxtb	r5, r1
  401b92:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401b96:	2c0f      	cmp	r4, #15
  401b98:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401b9c:	d919      	bls.n	401bd2 <memset+0x66>
  401b9e:	f103 0210 	add.w	r2, r3, #16
  401ba2:	4626      	mov	r6, r4
  401ba4:	3e10      	subs	r6, #16
  401ba6:	2e0f      	cmp	r6, #15
  401ba8:	f842 5c10 	str.w	r5, [r2, #-16]
  401bac:	f842 5c0c 	str.w	r5, [r2, #-12]
  401bb0:	f842 5c08 	str.w	r5, [r2, #-8]
  401bb4:	f842 5c04 	str.w	r5, [r2, #-4]
  401bb8:	f102 0210 	add.w	r2, r2, #16
  401bbc:	d8f2      	bhi.n	401ba4 <memset+0x38>
  401bbe:	f1a4 0210 	sub.w	r2, r4, #16
  401bc2:	f022 020f 	bic.w	r2, r2, #15
  401bc6:	f004 040f 	and.w	r4, r4, #15
  401bca:	3210      	adds	r2, #16
  401bcc:	2c03      	cmp	r4, #3
  401bce:	4413      	add	r3, r2
  401bd0:	d90d      	bls.n	401bee <memset+0x82>
  401bd2:	461e      	mov	r6, r3
  401bd4:	4622      	mov	r2, r4
  401bd6:	3a04      	subs	r2, #4
  401bd8:	2a03      	cmp	r2, #3
  401bda:	f846 5b04 	str.w	r5, [r6], #4
  401bde:	d8fa      	bhi.n	401bd6 <memset+0x6a>
  401be0:	1f22      	subs	r2, r4, #4
  401be2:	f022 0203 	bic.w	r2, r2, #3
  401be6:	3204      	adds	r2, #4
  401be8:	4413      	add	r3, r2
  401bea:	f004 0403 	and.w	r4, r4, #3
  401bee:	b12c      	cbz	r4, 401bfc <memset+0x90>
  401bf0:	b2c9      	uxtb	r1, r1
  401bf2:	441c      	add	r4, r3
  401bf4:	f803 1b01 	strb.w	r1, [r3], #1
  401bf8:	429c      	cmp	r4, r3
  401bfa:	d1fb      	bne.n	401bf4 <memset+0x88>
  401bfc:	bc70      	pop	{r4, r5, r6}
  401bfe:	4770      	bx	lr
  401c00:	4614      	mov	r4, r2
  401c02:	4603      	mov	r3, r0
  401c04:	e7c2      	b.n	401b8c <memset+0x20>
  401c06:	bf00      	nop

00401c08 <setbuf>:
  401c08:	2900      	cmp	r1, #0
  401c0a:	bf0c      	ite	eq
  401c0c:	2202      	moveq	r2, #2
  401c0e:	2200      	movne	r2, #0
  401c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401c14:	f000 b800 	b.w	401c18 <setvbuf>

00401c18 <setvbuf>:
  401c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401c1c:	4c61      	ldr	r4, [pc, #388]	; (401da4 <setvbuf+0x18c>)
  401c1e:	6825      	ldr	r5, [r4, #0]
  401c20:	b083      	sub	sp, #12
  401c22:	4604      	mov	r4, r0
  401c24:	460f      	mov	r7, r1
  401c26:	4690      	mov	r8, r2
  401c28:	461e      	mov	r6, r3
  401c2a:	b115      	cbz	r5, 401c32 <setvbuf+0x1a>
  401c2c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401c2e:	2b00      	cmp	r3, #0
  401c30:	d064      	beq.n	401cfc <setvbuf+0xe4>
  401c32:	f1b8 0f02 	cmp.w	r8, #2
  401c36:	d006      	beq.n	401c46 <setvbuf+0x2e>
  401c38:	f1b8 0f01 	cmp.w	r8, #1
  401c3c:	f200 809f 	bhi.w	401d7e <setvbuf+0x166>
  401c40:	2e00      	cmp	r6, #0
  401c42:	f2c0 809c 	blt.w	401d7e <setvbuf+0x166>
  401c46:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401c48:	07d8      	lsls	r0, r3, #31
  401c4a:	d534      	bpl.n	401cb6 <setvbuf+0x9e>
  401c4c:	4621      	mov	r1, r4
  401c4e:	4628      	mov	r0, r5
  401c50:	f001 f890 	bl	402d74 <_fflush_r>
  401c54:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401c56:	b141      	cbz	r1, 401c6a <setvbuf+0x52>
  401c58:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401c5c:	4299      	cmp	r1, r3
  401c5e:	d002      	beq.n	401c66 <setvbuf+0x4e>
  401c60:	4628      	mov	r0, r5
  401c62:	f001 fa05 	bl	403070 <_free_r>
  401c66:	2300      	movs	r3, #0
  401c68:	6323      	str	r3, [r4, #48]	; 0x30
  401c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401c6e:	2200      	movs	r2, #0
  401c70:	61a2      	str	r2, [r4, #24]
  401c72:	6062      	str	r2, [r4, #4]
  401c74:	061a      	lsls	r2, r3, #24
  401c76:	d43a      	bmi.n	401cee <setvbuf+0xd6>
  401c78:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401c7c:	f023 0303 	bic.w	r3, r3, #3
  401c80:	f1b8 0f02 	cmp.w	r8, #2
  401c84:	81a3      	strh	r3, [r4, #12]
  401c86:	d01d      	beq.n	401cc4 <setvbuf+0xac>
  401c88:	ab01      	add	r3, sp, #4
  401c8a:	466a      	mov	r2, sp
  401c8c:	4621      	mov	r1, r4
  401c8e:	4628      	mov	r0, r5
  401c90:	f001 fc8c 	bl	4035ac <__swhatbuf_r>
  401c94:	89a3      	ldrh	r3, [r4, #12]
  401c96:	4318      	orrs	r0, r3
  401c98:	81a0      	strh	r0, [r4, #12]
  401c9a:	2e00      	cmp	r6, #0
  401c9c:	d132      	bne.n	401d04 <setvbuf+0xec>
  401c9e:	9e00      	ldr	r6, [sp, #0]
  401ca0:	4630      	mov	r0, r6
  401ca2:	f001 fcfb 	bl	40369c <malloc>
  401ca6:	4607      	mov	r7, r0
  401ca8:	2800      	cmp	r0, #0
  401caa:	d06b      	beq.n	401d84 <setvbuf+0x16c>
  401cac:	89a3      	ldrh	r3, [r4, #12]
  401cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401cb2:	81a3      	strh	r3, [r4, #12]
  401cb4:	e028      	b.n	401d08 <setvbuf+0xf0>
  401cb6:	89a3      	ldrh	r3, [r4, #12]
  401cb8:	0599      	lsls	r1, r3, #22
  401cba:	d4c7      	bmi.n	401c4c <setvbuf+0x34>
  401cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401cbe:	f001 fc71 	bl	4035a4 <__retarget_lock_acquire_recursive>
  401cc2:	e7c3      	b.n	401c4c <setvbuf+0x34>
  401cc4:	2500      	movs	r5, #0
  401cc6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401cc8:	2600      	movs	r6, #0
  401cca:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401cce:	f043 0302 	orr.w	r3, r3, #2
  401cd2:	2001      	movs	r0, #1
  401cd4:	60a6      	str	r6, [r4, #8]
  401cd6:	07ce      	lsls	r6, r1, #31
  401cd8:	81a3      	strh	r3, [r4, #12]
  401cda:	6022      	str	r2, [r4, #0]
  401cdc:	6122      	str	r2, [r4, #16]
  401cde:	6160      	str	r0, [r4, #20]
  401ce0:	d401      	bmi.n	401ce6 <setvbuf+0xce>
  401ce2:	0598      	lsls	r0, r3, #22
  401ce4:	d53e      	bpl.n	401d64 <setvbuf+0x14c>
  401ce6:	4628      	mov	r0, r5
  401ce8:	b003      	add	sp, #12
  401cea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401cee:	6921      	ldr	r1, [r4, #16]
  401cf0:	4628      	mov	r0, r5
  401cf2:	f001 f9bd 	bl	403070 <_free_r>
  401cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401cfa:	e7bd      	b.n	401c78 <setvbuf+0x60>
  401cfc:	4628      	mov	r0, r5
  401cfe:	f001 f891 	bl	402e24 <__sinit>
  401d02:	e796      	b.n	401c32 <setvbuf+0x1a>
  401d04:	2f00      	cmp	r7, #0
  401d06:	d0cb      	beq.n	401ca0 <setvbuf+0x88>
  401d08:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401d0a:	2b00      	cmp	r3, #0
  401d0c:	d033      	beq.n	401d76 <setvbuf+0x15e>
  401d0e:	9b00      	ldr	r3, [sp, #0]
  401d10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401d14:	6027      	str	r7, [r4, #0]
  401d16:	429e      	cmp	r6, r3
  401d18:	bf1c      	itt	ne
  401d1a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  401d1e:	81a2      	strhne	r2, [r4, #12]
  401d20:	f1b8 0f01 	cmp.w	r8, #1
  401d24:	bf04      	itt	eq
  401d26:	f042 0201 	orreq.w	r2, r2, #1
  401d2a:	81a2      	strheq	r2, [r4, #12]
  401d2c:	b292      	uxth	r2, r2
  401d2e:	f012 0308 	ands.w	r3, r2, #8
  401d32:	6127      	str	r7, [r4, #16]
  401d34:	6166      	str	r6, [r4, #20]
  401d36:	d00e      	beq.n	401d56 <setvbuf+0x13e>
  401d38:	07d1      	lsls	r1, r2, #31
  401d3a:	d51a      	bpl.n	401d72 <setvbuf+0x15a>
  401d3c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401d3e:	4276      	negs	r6, r6
  401d40:	2300      	movs	r3, #0
  401d42:	f015 0501 	ands.w	r5, r5, #1
  401d46:	61a6      	str	r6, [r4, #24]
  401d48:	60a3      	str	r3, [r4, #8]
  401d4a:	d009      	beq.n	401d60 <setvbuf+0x148>
  401d4c:	2500      	movs	r5, #0
  401d4e:	4628      	mov	r0, r5
  401d50:	b003      	add	sp, #12
  401d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401d56:	60a3      	str	r3, [r4, #8]
  401d58:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401d5a:	f015 0501 	ands.w	r5, r5, #1
  401d5e:	d1f5      	bne.n	401d4c <setvbuf+0x134>
  401d60:	0593      	lsls	r3, r2, #22
  401d62:	d4c0      	bmi.n	401ce6 <setvbuf+0xce>
  401d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401d66:	f001 fc1f 	bl	4035a8 <__retarget_lock_release_recursive>
  401d6a:	4628      	mov	r0, r5
  401d6c:	b003      	add	sp, #12
  401d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401d72:	60a6      	str	r6, [r4, #8]
  401d74:	e7f0      	b.n	401d58 <setvbuf+0x140>
  401d76:	4628      	mov	r0, r5
  401d78:	f001 f854 	bl	402e24 <__sinit>
  401d7c:	e7c7      	b.n	401d0e <setvbuf+0xf6>
  401d7e:	f04f 35ff 	mov.w	r5, #4294967295
  401d82:	e7b0      	b.n	401ce6 <setvbuf+0xce>
  401d84:	f8dd 9000 	ldr.w	r9, [sp]
  401d88:	45b1      	cmp	r9, r6
  401d8a:	d004      	beq.n	401d96 <setvbuf+0x17e>
  401d8c:	4648      	mov	r0, r9
  401d8e:	f001 fc85 	bl	40369c <malloc>
  401d92:	4607      	mov	r7, r0
  401d94:	b920      	cbnz	r0, 401da0 <setvbuf+0x188>
  401d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401d9a:	f04f 35ff 	mov.w	r5, #4294967295
  401d9e:	e792      	b.n	401cc6 <setvbuf+0xae>
  401da0:	464e      	mov	r6, r9
  401da2:	e783      	b.n	401cac <setvbuf+0x94>
  401da4:	20400010 	.word	0x20400010

00401da8 <__sprint_r.part.0>:
  401da8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401dac:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401dae:	049c      	lsls	r4, r3, #18
  401db0:	4693      	mov	fp, r2
  401db2:	d52f      	bpl.n	401e14 <__sprint_r.part.0+0x6c>
  401db4:	6893      	ldr	r3, [r2, #8]
  401db6:	6812      	ldr	r2, [r2, #0]
  401db8:	b353      	cbz	r3, 401e10 <__sprint_r.part.0+0x68>
  401dba:	460e      	mov	r6, r1
  401dbc:	4607      	mov	r7, r0
  401dbe:	f102 0908 	add.w	r9, r2, #8
  401dc2:	e919 0420 	ldmdb	r9, {r5, sl}
  401dc6:	ea5f 089a 	movs.w	r8, sl, lsr #2
  401dca:	d017      	beq.n	401dfc <__sprint_r.part.0+0x54>
  401dcc:	3d04      	subs	r5, #4
  401dce:	2400      	movs	r4, #0
  401dd0:	e001      	b.n	401dd6 <__sprint_r.part.0+0x2e>
  401dd2:	45a0      	cmp	r8, r4
  401dd4:	d010      	beq.n	401df8 <__sprint_r.part.0+0x50>
  401dd6:	4632      	mov	r2, r6
  401dd8:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401ddc:	4638      	mov	r0, r7
  401dde:	f001 f8c3 	bl	402f68 <_fputwc_r>
  401de2:	1c43      	adds	r3, r0, #1
  401de4:	f104 0401 	add.w	r4, r4, #1
  401de8:	d1f3      	bne.n	401dd2 <__sprint_r.part.0+0x2a>
  401dea:	2300      	movs	r3, #0
  401dec:	f8cb 3008 	str.w	r3, [fp, #8]
  401df0:	f8cb 3004 	str.w	r3, [fp, #4]
  401df4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401df8:	f8db 3008 	ldr.w	r3, [fp, #8]
  401dfc:	f02a 0a03 	bic.w	sl, sl, #3
  401e00:	eba3 030a 	sub.w	r3, r3, sl
  401e04:	f8cb 3008 	str.w	r3, [fp, #8]
  401e08:	f109 0908 	add.w	r9, r9, #8
  401e0c:	2b00      	cmp	r3, #0
  401e0e:	d1d8      	bne.n	401dc2 <__sprint_r.part.0+0x1a>
  401e10:	2000      	movs	r0, #0
  401e12:	e7ea      	b.n	401dea <__sprint_r.part.0+0x42>
  401e14:	f001 fa12 	bl	40323c <__sfvwrite_r>
  401e18:	2300      	movs	r3, #0
  401e1a:	f8cb 3008 	str.w	r3, [fp, #8]
  401e1e:	f8cb 3004 	str.w	r3, [fp, #4]
  401e22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e26:	bf00      	nop

00401e28 <_vfiprintf_r>:
  401e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401e2c:	b0ad      	sub	sp, #180	; 0xb4
  401e2e:	461d      	mov	r5, r3
  401e30:	468b      	mov	fp, r1
  401e32:	4690      	mov	r8, r2
  401e34:	9307      	str	r3, [sp, #28]
  401e36:	9006      	str	r0, [sp, #24]
  401e38:	b118      	cbz	r0, 401e42 <_vfiprintf_r+0x1a>
  401e3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401e3c:	2b00      	cmp	r3, #0
  401e3e:	f000 80f3 	beq.w	402028 <_vfiprintf_r+0x200>
  401e42:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401e46:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401e4a:	07df      	lsls	r7, r3, #31
  401e4c:	b281      	uxth	r1, r0
  401e4e:	d402      	bmi.n	401e56 <_vfiprintf_r+0x2e>
  401e50:	058e      	lsls	r6, r1, #22
  401e52:	f140 80fc 	bpl.w	40204e <_vfiprintf_r+0x226>
  401e56:	048c      	lsls	r4, r1, #18
  401e58:	d40a      	bmi.n	401e70 <_vfiprintf_r+0x48>
  401e5a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401e5e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  401e62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401e66:	f8ab 100c 	strh.w	r1, [fp, #12]
  401e6a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  401e6e:	b289      	uxth	r1, r1
  401e70:	0708      	lsls	r0, r1, #28
  401e72:	f140 80b3 	bpl.w	401fdc <_vfiprintf_r+0x1b4>
  401e76:	f8db 3010 	ldr.w	r3, [fp, #16]
  401e7a:	2b00      	cmp	r3, #0
  401e7c:	f000 80ae 	beq.w	401fdc <_vfiprintf_r+0x1b4>
  401e80:	f001 031a 	and.w	r3, r1, #26
  401e84:	2b0a      	cmp	r3, #10
  401e86:	f000 80b5 	beq.w	401ff4 <_vfiprintf_r+0x1cc>
  401e8a:	2300      	movs	r3, #0
  401e8c:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  401e90:	930b      	str	r3, [sp, #44]	; 0x2c
  401e92:	9311      	str	r3, [sp, #68]	; 0x44
  401e94:	9310      	str	r3, [sp, #64]	; 0x40
  401e96:	9303      	str	r3, [sp, #12]
  401e98:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401e9c:	46ca      	mov	sl, r9
  401e9e:	f8cd b010 	str.w	fp, [sp, #16]
  401ea2:	f898 3000 	ldrb.w	r3, [r8]
  401ea6:	4644      	mov	r4, r8
  401ea8:	b1fb      	cbz	r3, 401eea <_vfiprintf_r+0xc2>
  401eaa:	2b25      	cmp	r3, #37	; 0x25
  401eac:	d102      	bne.n	401eb4 <_vfiprintf_r+0x8c>
  401eae:	e01c      	b.n	401eea <_vfiprintf_r+0xc2>
  401eb0:	2b25      	cmp	r3, #37	; 0x25
  401eb2:	d003      	beq.n	401ebc <_vfiprintf_r+0x94>
  401eb4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  401eb8:	2b00      	cmp	r3, #0
  401eba:	d1f9      	bne.n	401eb0 <_vfiprintf_r+0x88>
  401ebc:	eba4 0508 	sub.w	r5, r4, r8
  401ec0:	b19d      	cbz	r5, 401eea <_vfiprintf_r+0xc2>
  401ec2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401ec4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401ec6:	f8ca 8000 	str.w	r8, [sl]
  401eca:	3301      	adds	r3, #1
  401ecc:	442a      	add	r2, r5
  401ece:	2b07      	cmp	r3, #7
  401ed0:	f8ca 5004 	str.w	r5, [sl, #4]
  401ed4:	9211      	str	r2, [sp, #68]	; 0x44
  401ed6:	9310      	str	r3, [sp, #64]	; 0x40
  401ed8:	dd7a      	ble.n	401fd0 <_vfiprintf_r+0x1a8>
  401eda:	2a00      	cmp	r2, #0
  401edc:	f040 84b0 	bne.w	402840 <_vfiprintf_r+0xa18>
  401ee0:	9b03      	ldr	r3, [sp, #12]
  401ee2:	9210      	str	r2, [sp, #64]	; 0x40
  401ee4:	442b      	add	r3, r5
  401ee6:	46ca      	mov	sl, r9
  401ee8:	9303      	str	r3, [sp, #12]
  401eea:	7823      	ldrb	r3, [r4, #0]
  401eec:	2b00      	cmp	r3, #0
  401eee:	f000 83e0 	beq.w	4026b2 <_vfiprintf_r+0x88a>
  401ef2:	2000      	movs	r0, #0
  401ef4:	f04f 0300 	mov.w	r3, #0
  401ef8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  401efc:	f104 0801 	add.w	r8, r4, #1
  401f00:	7862      	ldrb	r2, [r4, #1]
  401f02:	4605      	mov	r5, r0
  401f04:	4606      	mov	r6, r0
  401f06:	4603      	mov	r3, r0
  401f08:	f04f 34ff 	mov.w	r4, #4294967295
  401f0c:	f108 0801 	add.w	r8, r8, #1
  401f10:	f1a2 0120 	sub.w	r1, r2, #32
  401f14:	2958      	cmp	r1, #88	; 0x58
  401f16:	f200 82de 	bhi.w	4024d6 <_vfiprintf_r+0x6ae>
  401f1a:	e8df f011 	tbh	[pc, r1, lsl #1]
  401f1e:	0221      	.short	0x0221
  401f20:	02dc02dc 	.word	0x02dc02dc
  401f24:	02dc0229 	.word	0x02dc0229
  401f28:	02dc02dc 	.word	0x02dc02dc
  401f2c:	02dc02dc 	.word	0x02dc02dc
  401f30:	028902dc 	.word	0x028902dc
  401f34:	02dc0295 	.word	0x02dc0295
  401f38:	02bd00a2 	.word	0x02bd00a2
  401f3c:	019f02dc 	.word	0x019f02dc
  401f40:	01a401a4 	.word	0x01a401a4
  401f44:	01a401a4 	.word	0x01a401a4
  401f48:	01a401a4 	.word	0x01a401a4
  401f4c:	01a401a4 	.word	0x01a401a4
  401f50:	02dc01a4 	.word	0x02dc01a4
  401f54:	02dc02dc 	.word	0x02dc02dc
  401f58:	02dc02dc 	.word	0x02dc02dc
  401f5c:	02dc02dc 	.word	0x02dc02dc
  401f60:	02dc02dc 	.word	0x02dc02dc
  401f64:	01b202dc 	.word	0x01b202dc
  401f68:	02dc02dc 	.word	0x02dc02dc
  401f6c:	02dc02dc 	.word	0x02dc02dc
  401f70:	02dc02dc 	.word	0x02dc02dc
  401f74:	02dc02dc 	.word	0x02dc02dc
  401f78:	02dc02dc 	.word	0x02dc02dc
  401f7c:	02dc0197 	.word	0x02dc0197
  401f80:	02dc02dc 	.word	0x02dc02dc
  401f84:	02dc02dc 	.word	0x02dc02dc
  401f88:	02dc019b 	.word	0x02dc019b
  401f8c:	025302dc 	.word	0x025302dc
  401f90:	02dc02dc 	.word	0x02dc02dc
  401f94:	02dc02dc 	.word	0x02dc02dc
  401f98:	02dc02dc 	.word	0x02dc02dc
  401f9c:	02dc02dc 	.word	0x02dc02dc
  401fa0:	02dc02dc 	.word	0x02dc02dc
  401fa4:	021b025a 	.word	0x021b025a
  401fa8:	02dc02dc 	.word	0x02dc02dc
  401fac:	026e02dc 	.word	0x026e02dc
  401fb0:	02dc021b 	.word	0x02dc021b
  401fb4:	027302dc 	.word	0x027302dc
  401fb8:	01f502dc 	.word	0x01f502dc
  401fbc:	02090182 	.word	0x02090182
  401fc0:	02dc02d7 	.word	0x02dc02d7
  401fc4:	02dc029a 	.word	0x02dc029a
  401fc8:	02dc00a7 	.word	0x02dc00a7
  401fcc:	022e02dc 	.word	0x022e02dc
  401fd0:	f10a 0a08 	add.w	sl, sl, #8
  401fd4:	9b03      	ldr	r3, [sp, #12]
  401fd6:	442b      	add	r3, r5
  401fd8:	9303      	str	r3, [sp, #12]
  401fda:	e786      	b.n	401eea <_vfiprintf_r+0xc2>
  401fdc:	4659      	mov	r1, fp
  401fde:	9806      	ldr	r0, [sp, #24]
  401fe0:	f000 fdac 	bl	402b3c <__swsetup_r>
  401fe4:	bb18      	cbnz	r0, 40202e <_vfiprintf_r+0x206>
  401fe6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  401fea:	f001 031a 	and.w	r3, r1, #26
  401fee:	2b0a      	cmp	r3, #10
  401ff0:	f47f af4b 	bne.w	401e8a <_vfiprintf_r+0x62>
  401ff4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  401ff8:	2b00      	cmp	r3, #0
  401ffa:	f6ff af46 	blt.w	401e8a <_vfiprintf_r+0x62>
  401ffe:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402002:	07db      	lsls	r3, r3, #31
  402004:	d405      	bmi.n	402012 <_vfiprintf_r+0x1ea>
  402006:	058f      	lsls	r7, r1, #22
  402008:	d403      	bmi.n	402012 <_vfiprintf_r+0x1ea>
  40200a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40200e:	f001 facb 	bl	4035a8 <__retarget_lock_release_recursive>
  402012:	462b      	mov	r3, r5
  402014:	4642      	mov	r2, r8
  402016:	4659      	mov	r1, fp
  402018:	9806      	ldr	r0, [sp, #24]
  40201a:	f000 fd4d 	bl	402ab8 <__sbprintf>
  40201e:	9003      	str	r0, [sp, #12]
  402020:	9803      	ldr	r0, [sp, #12]
  402022:	b02d      	add	sp, #180	; 0xb4
  402024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402028:	f000 fefc 	bl	402e24 <__sinit>
  40202c:	e709      	b.n	401e42 <_vfiprintf_r+0x1a>
  40202e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402032:	07d9      	lsls	r1, r3, #31
  402034:	d404      	bmi.n	402040 <_vfiprintf_r+0x218>
  402036:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40203a:	059a      	lsls	r2, r3, #22
  40203c:	f140 84aa 	bpl.w	402994 <_vfiprintf_r+0xb6c>
  402040:	f04f 33ff 	mov.w	r3, #4294967295
  402044:	9303      	str	r3, [sp, #12]
  402046:	9803      	ldr	r0, [sp, #12]
  402048:	b02d      	add	sp, #180	; 0xb4
  40204a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40204e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402052:	f001 faa7 	bl	4035a4 <__retarget_lock_acquire_recursive>
  402056:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40205a:	b281      	uxth	r1, r0
  40205c:	e6fb      	b.n	401e56 <_vfiprintf_r+0x2e>
  40205e:	4276      	negs	r6, r6
  402060:	9207      	str	r2, [sp, #28]
  402062:	f043 0304 	orr.w	r3, r3, #4
  402066:	f898 2000 	ldrb.w	r2, [r8]
  40206a:	e74f      	b.n	401f0c <_vfiprintf_r+0xe4>
  40206c:	9608      	str	r6, [sp, #32]
  40206e:	069e      	lsls	r6, r3, #26
  402070:	f100 8450 	bmi.w	402914 <_vfiprintf_r+0xaec>
  402074:	9907      	ldr	r1, [sp, #28]
  402076:	06dd      	lsls	r5, r3, #27
  402078:	460a      	mov	r2, r1
  40207a:	f100 83ef 	bmi.w	40285c <_vfiprintf_r+0xa34>
  40207e:	0658      	lsls	r0, r3, #25
  402080:	f140 83ec 	bpl.w	40285c <_vfiprintf_r+0xa34>
  402084:	880e      	ldrh	r6, [r1, #0]
  402086:	3104      	adds	r1, #4
  402088:	2700      	movs	r7, #0
  40208a:	2201      	movs	r2, #1
  40208c:	9107      	str	r1, [sp, #28]
  40208e:	f04f 0100 	mov.w	r1, #0
  402092:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  402096:	2500      	movs	r5, #0
  402098:	1c61      	adds	r1, r4, #1
  40209a:	f000 8116 	beq.w	4022ca <_vfiprintf_r+0x4a2>
  40209e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4020a2:	9102      	str	r1, [sp, #8]
  4020a4:	ea56 0107 	orrs.w	r1, r6, r7
  4020a8:	f040 8114 	bne.w	4022d4 <_vfiprintf_r+0x4ac>
  4020ac:	2c00      	cmp	r4, #0
  4020ae:	f040 835c 	bne.w	40276a <_vfiprintf_r+0x942>
  4020b2:	2a00      	cmp	r2, #0
  4020b4:	f040 83b7 	bne.w	402826 <_vfiprintf_r+0x9fe>
  4020b8:	f013 0301 	ands.w	r3, r3, #1
  4020bc:	9305      	str	r3, [sp, #20]
  4020be:	f000 8457 	beq.w	402970 <_vfiprintf_r+0xb48>
  4020c2:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4020c6:	2330      	movs	r3, #48	; 0x30
  4020c8:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  4020cc:	9b05      	ldr	r3, [sp, #20]
  4020ce:	42a3      	cmp	r3, r4
  4020d0:	bfb8      	it	lt
  4020d2:	4623      	movlt	r3, r4
  4020d4:	9301      	str	r3, [sp, #4]
  4020d6:	b10d      	cbz	r5, 4020dc <_vfiprintf_r+0x2b4>
  4020d8:	3301      	adds	r3, #1
  4020da:	9301      	str	r3, [sp, #4]
  4020dc:	9b02      	ldr	r3, [sp, #8]
  4020de:	f013 0302 	ands.w	r3, r3, #2
  4020e2:	9309      	str	r3, [sp, #36]	; 0x24
  4020e4:	d002      	beq.n	4020ec <_vfiprintf_r+0x2c4>
  4020e6:	9b01      	ldr	r3, [sp, #4]
  4020e8:	3302      	adds	r3, #2
  4020ea:	9301      	str	r3, [sp, #4]
  4020ec:	9b02      	ldr	r3, [sp, #8]
  4020ee:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4020f2:	930a      	str	r3, [sp, #40]	; 0x28
  4020f4:	f040 8217 	bne.w	402526 <_vfiprintf_r+0x6fe>
  4020f8:	9b08      	ldr	r3, [sp, #32]
  4020fa:	9a01      	ldr	r2, [sp, #4]
  4020fc:	1a9d      	subs	r5, r3, r2
  4020fe:	2d00      	cmp	r5, #0
  402100:	f340 8211 	ble.w	402526 <_vfiprintf_r+0x6fe>
  402104:	2d10      	cmp	r5, #16
  402106:	f340 8490 	ble.w	402a2a <_vfiprintf_r+0xc02>
  40210a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40210c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40210e:	4ec4      	ldr	r6, [pc, #784]	; (402420 <_vfiprintf_r+0x5f8>)
  402110:	46d6      	mov	lr, sl
  402112:	2710      	movs	r7, #16
  402114:	46a2      	mov	sl, r4
  402116:	4619      	mov	r1, r3
  402118:	9c06      	ldr	r4, [sp, #24]
  40211a:	e007      	b.n	40212c <_vfiprintf_r+0x304>
  40211c:	f101 0c02 	add.w	ip, r1, #2
  402120:	f10e 0e08 	add.w	lr, lr, #8
  402124:	4601      	mov	r1, r0
  402126:	3d10      	subs	r5, #16
  402128:	2d10      	cmp	r5, #16
  40212a:	dd11      	ble.n	402150 <_vfiprintf_r+0x328>
  40212c:	1c48      	adds	r0, r1, #1
  40212e:	3210      	adds	r2, #16
  402130:	2807      	cmp	r0, #7
  402132:	9211      	str	r2, [sp, #68]	; 0x44
  402134:	e88e 00c0 	stmia.w	lr, {r6, r7}
  402138:	9010      	str	r0, [sp, #64]	; 0x40
  40213a:	ddef      	ble.n	40211c <_vfiprintf_r+0x2f4>
  40213c:	2a00      	cmp	r2, #0
  40213e:	f040 81e4 	bne.w	40250a <_vfiprintf_r+0x6e2>
  402142:	3d10      	subs	r5, #16
  402144:	2d10      	cmp	r5, #16
  402146:	4611      	mov	r1, r2
  402148:	f04f 0c01 	mov.w	ip, #1
  40214c:	46ce      	mov	lr, r9
  40214e:	dced      	bgt.n	40212c <_vfiprintf_r+0x304>
  402150:	4654      	mov	r4, sl
  402152:	4661      	mov	r1, ip
  402154:	46f2      	mov	sl, lr
  402156:	442a      	add	r2, r5
  402158:	2907      	cmp	r1, #7
  40215a:	9211      	str	r2, [sp, #68]	; 0x44
  40215c:	f8ca 6000 	str.w	r6, [sl]
  402160:	f8ca 5004 	str.w	r5, [sl, #4]
  402164:	9110      	str	r1, [sp, #64]	; 0x40
  402166:	f300 82ec 	bgt.w	402742 <_vfiprintf_r+0x91a>
  40216a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40216e:	f10a 0a08 	add.w	sl, sl, #8
  402172:	1c48      	adds	r0, r1, #1
  402174:	2d00      	cmp	r5, #0
  402176:	f040 81de 	bne.w	402536 <_vfiprintf_r+0x70e>
  40217a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40217c:	2b00      	cmp	r3, #0
  40217e:	f000 81f8 	beq.w	402572 <_vfiprintf_r+0x74a>
  402182:	3202      	adds	r2, #2
  402184:	a90e      	add	r1, sp, #56	; 0x38
  402186:	2302      	movs	r3, #2
  402188:	2807      	cmp	r0, #7
  40218a:	9211      	str	r2, [sp, #68]	; 0x44
  40218c:	9010      	str	r0, [sp, #64]	; 0x40
  40218e:	e88a 000a 	stmia.w	sl, {r1, r3}
  402192:	f340 81ea 	ble.w	40256a <_vfiprintf_r+0x742>
  402196:	2a00      	cmp	r2, #0
  402198:	f040 838c 	bne.w	4028b4 <_vfiprintf_r+0xa8c>
  40219c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40219e:	2b80      	cmp	r3, #128	; 0x80
  4021a0:	f04f 0001 	mov.w	r0, #1
  4021a4:	4611      	mov	r1, r2
  4021a6:	46ca      	mov	sl, r9
  4021a8:	f040 81e7 	bne.w	40257a <_vfiprintf_r+0x752>
  4021ac:	9b08      	ldr	r3, [sp, #32]
  4021ae:	9d01      	ldr	r5, [sp, #4]
  4021b0:	1b5e      	subs	r6, r3, r5
  4021b2:	2e00      	cmp	r6, #0
  4021b4:	f340 81e1 	ble.w	40257a <_vfiprintf_r+0x752>
  4021b8:	2e10      	cmp	r6, #16
  4021ba:	4d9a      	ldr	r5, [pc, #616]	; (402424 <_vfiprintf_r+0x5fc>)
  4021bc:	f340 8450 	ble.w	402a60 <_vfiprintf_r+0xc38>
  4021c0:	46d4      	mov	ip, sl
  4021c2:	2710      	movs	r7, #16
  4021c4:	46a2      	mov	sl, r4
  4021c6:	9c06      	ldr	r4, [sp, #24]
  4021c8:	e007      	b.n	4021da <_vfiprintf_r+0x3b2>
  4021ca:	f101 0e02 	add.w	lr, r1, #2
  4021ce:	f10c 0c08 	add.w	ip, ip, #8
  4021d2:	4601      	mov	r1, r0
  4021d4:	3e10      	subs	r6, #16
  4021d6:	2e10      	cmp	r6, #16
  4021d8:	dd11      	ble.n	4021fe <_vfiprintf_r+0x3d6>
  4021da:	1c48      	adds	r0, r1, #1
  4021dc:	3210      	adds	r2, #16
  4021de:	2807      	cmp	r0, #7
  4021e0:	9211      	str	r2, [sp, #68]	; 0x44
  4021e2:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4021e6:	9010      	str	r0, [sp, #64]	; 0x40
  4021e8:	ddef      	ble.n	4021ca <_vfiprintf_r+0x3a2>
  4021ea:	2a00      	cmp	r2, #0
  4021ec:	f040 829d 	bne.w	40272a <_vfiprintf_r+0x902>
  4021f0:	3e10      	subs	r6, #16
  4021f2:	2e10      	cmp	r6, #16
  4021f4:	f04f 0e01 	mov.w	lr, #1
  4021f8:	4611      	mov	r1, r2
  4021fa:	46cc      	mov	ip, r9
  4021fc:	dced      	bgt.n	4021da <_vfiprintf_r+0x3b2>
  4021fe:	4654      	mov	r4, sl
  402200:	46e2      	mov	sl, ip
  402202:	4432      	add	r2, r6
  402204:	f1be 0f07 	cmp.w	lr, #7
  402208:	9211      	str	r2, [sp, #68]	; 0x44
  40220a:	e88a 0060 	stmia.w	sl, {r5, r6}
  40220e:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  402212:	f300 8369 	bgt.w	4028e8 <_vfiprintf_r+0xac0>
  402216:	f10a 0a08 	add.w	sl, sl, #8
  40221a:	f10e 0001 	add.w	r0, lr, #1
  40221e:	4671      	mov	r1, lr
  402220:	e1ab      	b.n	40257a <_vfiprintf_r+0x752>
  402222:	9608      	str	r6, [sp, #32]
  402224:	f013 0220 	ands.w	r2, r3, #32
  402228:	f040 838c 	bne.w	402944 <_vfiprintf_r+0xb1c>
  40222c:	f013 0110 	ands.w	r1, r3, #16
  402230:	f040 831a 	bne.w	402868 <_vfiprintf_r+0xa40>
  402234:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  402238:	f000 8316 	beq.w	402868 <_vfiprintf_r+0xa40>
  40223c:	9807      	ldr	r0, [sp, #28]
  40223e:	460a      	mov	r2, r1
  402240:	4601      	mov	r1, r0
  402242:	3104      	adds	r1, #4
  402244:	8806      	ldrh	r6, [r0, #0]
  402246:	9107      	str	r1, [sp, #28]
  402248:	2700      	movs	r7, #0
  40224a:	e720      	b.n	40208e <_vfiprintf_r+0x266>
  40224c:	9608      	str	r6, [sp, #32]
  40224e:	f043 0310 	orr.w	r3, r3, #16
  402252:	e7e7      	b.n	402224 <_vfiprintf_r+0x3fc>
  402254:	9608      	str	r6, [sp, #32]
  402256:	f043 0310 	orr.w	r3, r3, #16
  40225a:	e708      	b.n	40206e <_vfiprintf_r+0x246>
  40225c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402260:	f898 2000 	ldrb.w	r2, [r8]
  402264:	e652      	b.n	401f0c <_vfiprintf_r+0xe4>
  402266:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40226a:	2600      	movs	r6, #0
  40226c:	f818 2b01 	ldrb.w	r2, [r8], #1
  402270:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  402274:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  402278:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40227c:	2909      	cmp	r1, #9
  40227e:	d9f5      	bls.n	40226c <_vfiprintf_r+0x444>
  402280:	e646      	b.n	401f10 <_vfiprintf_r+0xe8>
  402282:	9608      	str	r6, [sp, #32]
  402284:	2800      	cmp	r0, #0
  402286:	f040 8408 	bne.w	402a9a <_vfiprintf_r+0xc72>
  40228a:	f043 0310 	orr.w	r3, r3, #16
  40228e:	069e      	lsls	r6, r3, #26
  402290:	f100 834c 	bmi.w	40292c <_vfiprintf_r+0xb04>
  402294:	06dd      	lsls	r5, r3, #27
  402296:	f100 82f3 	bmi.w	402880 <_vfiprintf_r+0xa58>
  40229a:	0658      	lsls	r0, r3, #25
  40229c:	f140 82f0 	bpl.w	402880 <_vfiprintf_r+0xa58>
  4022a0:	9d07      	ldr	r5, [sp, #28]
  4022a2:	f9b5 6000 	ldrsh.w	r6, [r5]
  4022a6:	462a      	mov	r2, r5
  4022a8:	17f7      	asrs	r7, r6, #31
  4022aa:	3204      	adds	r2, #4
  4022ac:	4630      	mov	r0, r6
  4022ae:	4639      	mov	r1, r7
  4022b0:	9207      	str	r2, [sp, #28]
  4022b2:	2800      	cmp	r0, #0
  4022b4:	f171 0200 	sbcs.w	r2, r1, #0
  4022b8:	f2c0 835d 	blt.w	402976 <_vfiprintf_r+0xb4e>
  4022bc:	1c61      	adds	r1, r4, #1
  4022be:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4022c2:	f04f 0201 	mov.w	r2, #1
  4022c6:	f47f aeea 	bne.w	40209e <_vfiprintf_r+0x276>
  4022ca:	ea56 0107 	orrs.w	r1, r6, r7
  4022ce:	f000 824d 	beq.w	40276c <_vfiprintf_r+0x944>
  4022d2:	9302      	str	r3, [sp, #8]
  4022d4:	2a01      	cmp	r2, #1
  4022d6:	f000 828c 	beq.w	4027f2 <_vfiprintf_r+0x9ca>
  4022da:	2a02      	cmp	r2, #2
  4022dc:	f040 825c 	bne.w	402798 <_vfiprintf_r+0x970>
  4022e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4022e2:	46cb      	mov	fp, r9
  4022e4:	0933      	lsrs	r3, r6, #4
  4022e6:	f006 010f 	and.w	r1, r6, #15
  4022ea:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4022ee:	093a      	lsrs	r2, r7, #4
  4022f0:	461e      	mov	r6, r3
  4022f2:	4617      	mov	r7, r2
  4022f4:	5c43      	ldrb	r3, [r0, r1]
  4022f6:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4022fa:	ea56 0307 	orrs.w	r3, r6, r7
  4022fe:	d1f1      	bne.n	4022e4 <_vfiprintf_r+0x4bc>
  402300:	eba9 030b 	sub.w	r3, r9, fp
  402304:	9305      	str	r3, [sp, #20]
  402306:	e6e1      	b.n	4020cc <_vfiprintf_r+0x2a4>
  402308:	2800      	cmp	r0, #0
  40230a:	f040 83c0 	bne.w	402a8e <_vfiprintf_r+0xc66>
  40230e:	0699      	lsls	r1, r3, #26
  402310:	f100 8367 	bmi.w	4029e2 <_vfiprintf_r+0xbba>
  402314:	06da      	lsls	r2, r3, #27
  402316:	f100 80f1 	bmi.w	4024fc <_vfiprintf_r+0x6d4>
  40231a:	065b      	lsls	r3, r3, #25
  40231c:	f140 80ee 	bpl.w	4024fc <_vfiprintf_r+0x6d4>
  402320:	9a07      	ldr	r2, [sp, #28]
  402322:	6813      	ldr	r3, [r2, #0]
  402324:	3204      	adds	r2, #4
  402326:	9207      	str	r2, [sp, #28]
  402328:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40232c:	801a      	strh	r2, [r3, #0]
  40232e:	e5b8      	b.n	401ea2 <_vfiprintf_r+0x7a>
  402330:	9807      	ldr	r0, [sp, #28]
  402332:	4a3d      	ldr	r2, [pc, #244]	; (402428 <_vfiprintf_r+0x600>)
  402334:	9608      	str	r6, [sp, #32]
  402336:	920b      	str	r2, [sp, #44]	; 0x2c
  402338:	6806      	ldr	r6, [r0, #0]
  40233a:	2278      	movs	r2, #120	; 0x78
  40233c:	2130      	movs	r1, #48	; 0x30
  40233e:	3004      	adds	r0, #4
  402340:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  402344:	f043 0302 	orr.w	r3, r3, #2
  402348:	9007      	str	r0, [sp, #28]
  40234a:	2700      	movs	r7, #0
  40234c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402350:	2202      	movs	r2, #2
  402352:	e69c      	b.n	40208e <_vfiprintf_r+0x266>
  402354:	9608      	str	r6, [sp, #32]
  402356:	2800      	cmp	r0, #0
  402358:	d099      	beq.n	40228e <_vfiprintf_r+0x466>
  40235a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40235e:	e796      	b.n	40228e <_vfiprintf_r+0x466>
  402360:	f898 2000 	ldrb.w	r2, [r8]
  402364:	2d00      	cmp	r5, #0
  402366:	f47f add1 	bne.w	401f0c <_vfiprintf_r+0xe4>
  40236a:	2001      	movs	r0, #1
  40236c:	2520      	movs	r5, #32
  40236e:	e5cd      	b.n	401f0c <_vfiprintf_r+0xe4>
  402370:	f043 0301 	orr.w	r3, r3, #1
  402374:	f898 2000 	ldrb.w	r2, [r8]
  402378:	e5c8      	b.n	401f0c <_vfiprintf_r+0xe4>
  40237a:	9608      	str	r6, [sp, #32]
  40237c:	2800      	cmp	r0, #0
  40237e:	f040 8393 	bne.w	402aa8 <_vfiprintf_r+0xc80>
  402382:	4929      	ldr	r1, [pc, #164]	; (402428 <_vfiprintf_r+0x600>)
  402384:	910b      	str	r1, [sp, #44]	; 0x2c
  402386:	069f      	lsls	r7, r3, #26
  402388:	f100 82e8 	bmi.w	40295c <_vfiprintf_r+0xb34>
  40238c:	9807      	ldr	r0, [sp, #28]
  40238e:	06de      	lsls	r6, r3, #27
  402390:	4601      	mov	r1, r0
  402392:	f100 8270 	bmi.w	402876 <_vfiprintf_r+0xa4e>
  402396:	065d      	lsls	r5, r3, #25
  402398:	f140 826d 	bpl.w	402876 <_vfiprintf_r+0xa4e>
  40239c:	3104      	adds	r1, #4
  40239e:	8806      	ldrh	r6, [r0, #0]
  4023a0:	9107      	str	r1, [sp, #28]
  4023a2:	2700      	movs	r7, #0
  4023a4:	07d8      	lsls	r0, r3, #31
  4023a6:	f140 8222 	bpl.w	4027ee <_vfiprintf_r+0x9c6>
  4023aa:	ea56 0107 	orrs.w	r1, r6, r7
  4023ae:	f000 821e 	beq.w	4027ee <_vfiprintf_r+0x9c6>
  4023b2:	2130      	movs	r1, #48	; 0x30
  4023b4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4023b8:	f043 0302 	orr.w	r3, r3, #2
  4023bc:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4023c0:	2202      	movs	r2, #2
  4023c2:	e664      	b.n	40208e <_vfiprintf_r+0x266>
  4023c4:	9608      	str	r6, [sp, #32]
  4023c6:	2800      	cmp	r0, #0
  4023c8:	f040 836b 	bne.w	402aa2 <_vfiprintf_r+0xc7a>
  4023cc:	4917      	ldr	r1, [pc, #92]	; (40242c <_vfiprintf_r+0x604>)
  4023ce:	910b      	str	r1, [sp, #44]	; 0x2c
  4023d0:	e7d9      	b.n	402386 <_vfiprintf_r+0x55e>
  4023d2:	9907      	ldr	r1, [sp, #28]
  4023d4:	9608      	str	r6, [sp, #32]
  4023d6:	680a      	ldr	r2, [r1, #0]
  4023d8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4023dc:	f04f 0000 	mov.w	r0, #0
  4023e0:	460a      	mov	r2, r1
  4023e2:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4023e6:	3204      	adds	r2, #4
  4023e8:	2001      	movs	r0, #1
  4023ea:	9001      	str	r0, [sp, #4]
  4023ec:	9207      	str	r2, [sp, #28]
  4023ee:	9005      	str	r0, [sp, #20]
  4023f0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4023f4:	9302      	str	r3, [sp, #8]
  4023f6:	2400      	movs	r4, #0
  4023f8:	e670      	b.n	4020dc <_vfiprintf_r+0x2b4>
  4023fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4023fe:	f898 2000 	ldrb.w	r2, [r8]
  402402:	e583      	b.n	401f0c <_vfiprintf_r+0xe4>
  402404:	f898 2000 	ldrb.w	r2, [r8]
  402408:	2a6c      	cmp	r2, #108	; 0x6c
  40240a:	bf03      	ittte	eq
  40240c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  402410:	f043 0320 	orreq.w	r3, r3, #32
  402414:	f108 0801 	addeq.w	r8, r8, #1
  402418:	f043 0310 	orrne.w	r3, r3, #16
  40241c:	e576      	b.n	401f0c <_vfiprintf_r+0xe4>
  40241e:	bf00      	nop
  402420:	00404f08 	.word	0x00404f08
  402424:	00404f18 	.word	0x00404f18
  402428:	00404eec 	.word	0x00404eec
  40242c:	00404ed8 	.word	0x00404ed8
  402430:	9907      	ldr	r1, [sp, #28]
  402432:	680e      	ldr	r6, [r1, #0]
  402434:	460a      	mov	r2, r1
  402436:	2e00      	cmp	r6, #0
  402438:	f102 0204 	add.w	r2, r2, #4
  40243c:	f6ff ae0f 	blt.w	40205e <_vfiprintf_r+0x236>
  402440:	9207      	str	r2, [sp, #28]
  402442:	f898 2000 	ldrb.w	r2, [r8]
  402446:	e561      	b.n	401f0c <_vfiprintf_r+0xe4>
  402448:	f898 2000 	ldrb.w	r2, [r8]
  40244c:	2001      	movs	r0, #1
  40244e:	252b      	movs	r5, #43	; 0x2b
  402450:	e55c      	b.n	401f0c <_vfiprintf_r+0xe4>
  402452:	9907      	ldr	r1, [sp, #28]
  402454:	9608      	str	r6, [sp, #32]
  402456:	f8d1 b000 	ldr.w	fp, [r1]
  40245a:	f04f 0200 	mov.w	r2, #0
  40245e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  402462:	1d0e      	adds	r6, r1, #4
  402464:	f1bb 0f00 	cmp.w	fp, #0
  402468:	f000 82e5 	beq.w	402a36 <_vfiprintf_r+0xc0e>
  40246c:	1c67      	adds	r7, r4, #1
  40246e:	f000 82c4 	beq.w	4029fa <_vfiprintf_r+0xbd2>
  402472:	4622      	mov	r2, r4
  402474:	2100      	movs	r1, #0
  402476:	4658      	mov	r0, fp
  402478:	9301      	str	r3, [sp, #4]
  40247a:	f001 fbe1 	bl	403c40 <memchr>
  40247e:	9b01      	ldr	r3, [sp, #4]
  402480:	2800      	cmp	r0, #0
  402482:	f000 82e5 	beq.w	402a50 <_vfiprintf_r+0xc28>
  402486:	eba0 020b 	sub.w	r2, r0, fp
  40248a:	9205      	str	r2, [sp, #20]
  40248c:	9607      	str	r6, [sp, #28]
  40248e:	9302      	str	r3, [sp, #8]
  402490:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402494:	2400      	movs	r4, #0
  402496:	e619      	b.n	4020cc <_vfiprintf_r+0x2a4>
  402498:	f898 2000 	ldrb.w	r2, [r8]
  40249c:	2a2a      	cmp	r2, #42	; 0x2a
  40249e:	f108 0701 	add.w	r7, r8, #1
  4024a2:	f000 82e9 	beq.w	402a78 <_vfiprintf_r+0xc50>
  4024a6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4024aa:	2909      	cmp	r1, #9
  4024ac:	46b8      	mov	r8, r7
  4024ae:	f04f 0400 	mov.w	r4, #0
  4024b2:	f63f ad2d 	bhi.w	401f10 <_vfiprintf_r+0xe8>
  4024b6:	f818 2b01 	ldrb.w	r2, [r8], #1
  4024ba:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4024be:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4024c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4024c6:	2909      	cmp	r1, #9
  4024c8:	d9f5      	bls.n	4024b6 <_vfiprintf_r+0x68e>
  4024ca:	e521      	b.n	401f10 <_vfiprintf_r+0xe8>
  4024cc:	f043 0320 	orr.w	r3, r3, #32
  4024d0:	f898 2000 	ldrb.w	r2, [r8]
  4024d4:	e51a      	b.n	401f0c <_vfiprintf_r+0xe4>
  4024d6:	9608      	str	r6, [sp, #32]
  4024d8:	2800      	cmp	r0, #0
  4024da:	f040 82db 	bne.w	402a94 <_vfiprintf_r+0xc6c>
  4024de:	2a00      	cmp	r2, #0
  4024e0:	f000 80e7 	beq.w	4026b2 <_vfiprintf_r+0x88a>
  4024e4:	2101      	movs	r1, #1
  4024e6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4024ea:	f04f 0200 	mov.w	r2, #0
  4024ee:	9101      	str	r1, [sp, #4]
  4024f0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4024f4:	9105      	str	r1, [sp, #20]
  4024f6:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4024fa:	e77b      	b.n	4023f4 <_vfiprintf_r+0x5cc>
  4024fc:	9a07      	ldr	r2, [sp, #28]
  4024fe:	6813      	ldr	r3, [r2, #0]
  402500:	3204      	adds	r2, #4
  402502:	9207      	str	r2, [sp, #28]
  402504:	9a03      	ldr	r2, [sp, #12]
  402506:	601a      	str	r2, [r3, #0]
  402508:	e4cb      	b.n	401ea2 <_vfiprintf_r+0x7a>
  40250a:	aa0f      	add	r2, sp, #60	; 0x3c
  40250c:	9904      	ldr	r1, [sp, #16]
  40250e:	4620      	mov	r0, r4
  402510:	f7ff fc4a 	bl	401da8 <__sprint_r.part.0>
  402514:	2800      	cmp	r0, #0
  402516:	f040 8139 	bne.w	40278c <_vfiprintf_r+0x964>
  40251a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40251c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40251e:	f101 0c01 	add.w	ip, r1, #1
  402522:	46ce      	mov	lr, r9
  402524:	e5ff      	b.n	402126 <_vfiprintf_r+0x2fe>
  402526:	9910      	ldr	r1, [sp, #64]	; 0x40
  402528:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40252a:	1c48      	adds	r0, r1, #1
  40252c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402530:	2d00      	cmp	r5, #0
  402532:	f43f ae22 	beq.w	40217a <_vfiprintf_r+0x352>
  402536:	3201      	adds	r2, #1
  402538:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40253c:	2101      	movs	r1, #1
  40253e:	2807      	cmp	r0, #7
  402540:	9211      	str	r2, [sp, #68]	; 0x44
  402542:	9010      	str	r0, [sp, #64]	; 0x40
  402544:	f8ca 5000 	str.w	r5, [sl]
  402548:	f8ca 1004 	str.w	r1, [sl, #4]
  40254c:	f340 8108 	ble.w	402760 <_vfiprintf_r+0x938>
  402550:	2a00      	cmp	r2, #0
  402552:	f040 81bc 	bne.w	4028ce <_vfiprintf_r+0xaa6>
  402556:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402558:	2b00      	cmp	r3, #0
  40255a:	f43f ae1f 	beq.w	40219c <_vfiprintf_r+0x374>
  40255e:	ab0e      	add	r3, sp, #56	; 0x38
  402560:	2202      	movs	r2, #2
  402562:	4608      	mov	r0, r1
  402564:	931c      	str	r3, [sp, #112]	; 0x70
  402566:	921d      	str	r2, [sp, #116]	; 0x74
  402568:	46ca      	mov	sl, r9
  40256a:	4601      	mov	r1, r0
  40256c:	f10a 0a08 	add.w	sl, sl, #8
  402570:	3001      	adds	r0, #1
  402572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402574:	2b80      	cmp	r3, #128	; 0x80
  402576:	f43f ae19 	beq.w	4021ac <_vfiprintf_r+0x384>
  40257a:	9b05      	ldr	r3, [sp, #20]
  40257c:	1ae4      	subs	r4, r4, r3
  40257e:	2c00      	cmp	r4, #0
  402580:	dd2e      	ble.n	4025e0 <_vfiprintf_r+0x7b8>
  402582:	2c10      	cmp	r4, #16
  402584:	4db3      	ldr	r5, [pc, #716]	; (402854 <_vfiprintf_r+0xa2c>)
  402586:	dd1e      	ble.n	4025c6 <_vfiprintf_r+0x79e>
  402588:	46d6      	mov	lr, sl
  40258a:	2610      	movs	r6, #16
  40258c:	9f06      	ldr	r7, [sp, #24]
  40258e:	f8dd a010 	ldr.w	sl, [sp, #16]
  402592:	e006      	b.n	4025a2 <_vfiprintf_r+0x77a>
  402594:	1c88      	adds	r0, r1, #2
  402596:	f10e 0e08 	add.w	lr, lr, #8
  40259a:	4619      	mov	r1, r3
  40259c:	3c10      	subs	r4, #16
  40259e:	2c10      	cmp	r4, #16
  4025a0:	dd10      	ble.n	4025c4 <_vfiprintf_r+0x79c>
  4025a2:	1c4b      	adds	r3, r1, #1
  4025a4:	3210      	adds	r2, #16
  4025a6:	2b07      	cmp	r3, #7
  4025a8:	9211      	str	r2, [sp, #68]	; 0x44
  4025aa:	e88e 0060 	stmia.w	lr, {r5, r6}
  4025ae:	9310      	str	r3, [sp, #64]	; 0x40
  4025b0:	ddf0      	ble.n	402594 <_vfiprintf_r+0x76c>
  4025b2:	2a00      	cmp	r2, #0
  4025b4:	d165      	bne.n	402682 <_vfiprintf_r+0x85a>
  4025b6:	3c10      	subs	r4, #16
  4025b8:	2c10      	cmp	r4, #16
  4025ba:	f04f 0001 	mov.w	r0, #1
  4025be:	4611      	mov	r1, r2
  4025c0:	46ce      	mov	lr, r9
  4025c2:	dcee      	bgt.n	4025a2 <_vfiprintf_r+0x77a>
  4025c4:	46f2      	mov	sl, lr
  4025c6:	4422      	add	r2, r4
  4025c8:	2807      	cmp	r0, #7
  4025ca:	9211      	str	r2, [sp, #68]	; 0x44
  4025cc:	f8ca 5000 	str.w	r5, [sl]
  4025d0:	f8ca 4004 	str.w	r4, [sl, #4]
  4025d4:	9010      	str	r0, [sp, #64]	; 0x40
  4025d6:	f300 8085 	bgt.w	4026e4 <_vfiprintf_r+0x8bc>
  4025da:	f10a 0a08 	add.w	sl, sl, #8
  4025de:	3001      	adds	r0, #1
  4025e0:	9905      	ldr	r1, [sp, #20]
  4025e2:	f8ca b000 	str.w	fp, [sl]
  4025e6:	440a      	add	r2, r1
  4025e8:	2807      	cmp	r0, #7
  4025ea:	9211      	str	r2, [sp, #68]	; 0x44
  4025ec:	f8ca 1004 	str.w	r1, [sl, #4]
  4025f0:	9010      	str	r0, [sp, #64]	; 0x40
  4025f2:	f340 8082 	ble.w	4026fa <_vfiprintf_r+0x8d2>
  4025f6:	2a00      	cmp	r2, #0
  4025f8:	f040 8118 	bne.w	40282c <_vfiprintf_r+0xa04>
  4025fc:	9b02      	ldr	r3, [sp, #8]
  4025fe:	9210      	str	r2, [sp, #64]	; 0x40
  402600:	0758      	lsls	r0, r3, #29
  402602:	d535      	bpl.n	402670 <_vfiprintf_r+0x848>
  402604:	9b08      	ldr	r3, [sp, #32]
  402606:	9901      	ldr	r1, [sp, #4]
  402608:	1a5c      	subs	r4, r3, r1
  40260a:	2c00      	cmp	r4, #0
  40260c:	f340 80e7 	ble.w	4027de <_vfiprintf_r+0x9b6>
  402610:	46ca      	mov	sl, r9
  402612:	2c10      	cmp	r4, #16
  402614:	f340 8218 	ble.w	402a48 <_vfiprintf_r+0xc20>
  402618:	9910      	ldr	r1, [sp, #64]	; 0x40
  40261a:	4e8f      	ldr	r6, [pc, #572]	; (402858 <_vfiprintf_r+0xa30>)
  40261c:	9f06      	ldr	r7, [sp, #24]
  40261e:	f8dd b010 	ldr.w	fp, [sp, #16]
  402622:	2510      	movs	r5, #16
  402624:	e006      	b.n	402634 <_vfiprintf_r+0x80c>
  402626:	1c88      	adds	r0, r1, #2
  402628:	f10a 0a08 	add.w	sl, sl, #8
  40262c:	4619      	mov	r1, r3
  40262e:	3c10      	subs	r4, #16
  402630:	2c10      	cmp	r4, #16
  402632:	dd11      	ble.n	402658 <_vfiprintf_r+0x830>
  402634:	1c4b      	adds	r3, r1, #1
  402636:	3210      	adds	r2, #16
  402638:	2b07      	cmp	r3, #7
  40263a:	9211      	str	r2, [sp, #68]	; 0x44
  40263c:	f8ca 6000 	str.w	r6, [sl]
  402640:	f8ca 5004 	str.w	r5, [sl, #4]
  402644:	9310      	str	r3, [sp, #64]	; 0x40
  402646:	ddee      	ble.n	402626 <_vfiprintf_r+0x7fe>
  402648:	bb42      	cbnz	r2, 40269c <_vfiprintf_r+0x874>
  40264a:	3c10      	subs	r4, #16
  40264c:	2c10      	cmp	r4, #16
  40264e:	f04f 0001 	mov.w	r0, #1
  402652:	4611      	mov	r1, r2
  402654:	46ca      	mov	sl, r9
  402656:	dced      	bgt.n	402634 <_vfiprintf_r+0x80c>
  402658:	4422      	add	r2, r4
  40265a:	2807      	cmp	r0, #7
  40265c:	9211      	str	r2, [sp, #68]	; 0x44
  40265e:	f8ca 6000 	str.w	r6, [sl]
  402662:	f8ca 4004 	str.w	r4, [sl, #4]
  402666:	9010      	str	r0, [sp, #64]	; 0x40
  402668:	dd51      	ble.n	40270e <_vfiprintf_r+0x8e6>
  40266a:	2a00      	cmp	r2, #0
  40266c:	f040 819b 	bne.w	4029a6 <_vfiprintf_r+0xb7e>
  402670:	9b03      	ldr	r3, [sp, #12]
  402672:	9a08      	ldr	r2, [sp, #32]
  402674:	9901      	ldr	r1, [sp, #4]
  402676:	428a      	cmp	r2, r1
  402678:	bfac      	ite	ge
  40267a:	189b      	addge	r3, r3, r2
  40267c:	185b      	addlt	r3, r3, r1
  40267e:	9303      	str	r3, [sp, #12]
  402680:	e04e      	b.n	402720 <_vfiprintf_r+0x8f8>
  402682:	aa0f      	add	r2, sp, #60	; 0x3c
  402684:	4651      	mov	r1, sl
  402686:	4638      	mov	r0, r7
  402688:	f7ff fb8e 	bl	401da8 <__sprint_r.part.0>
  40268c:	2800      	cmp	r0, #0
  40268e:	f040 813f 	bne.w	402910 <_vfiprintf_r+0xae8>
  402692:	9910      	ldr	r1, [sp, #64]	; 0x40
  402694:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402696:	1c48      	adds	r0, r1, #1
  402698:	46ce      	mov	lr, r9
  40269a:	e77f      	b.n	40259c <_vfiprintf_r+0x774>
  40269c:	aa0f      	add	r2, sp, #60	; 0x3c
  40269e:	4659      	mov	r1, fp
  4026a0:	4638      	mov	r0, r7
  4026a2:	f7ff fb81 	bl	401da8 <__sprint_r.part.0>
  4026a6:	b960      	cbnz	r0, 4026c2 <_vfiprintf_r+0x89a>
  4026a8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4026aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4026ac:	1c48      	adds	r0, r1, #1
  4026ae:	46ca      	mov	sl, r9
  4026b0:	e7bd      	b.n	40262e <_vfiprintf_r+0x806>
  4026b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4026b4:	f8dd b010 	ldr.w	fp, [sp, #16]
  4026b8:	2b00      	cmp	r3, #0
  4026ba:	f040 81d4 	bne.w	402a66 <_vfiprintf_r+0xc3e>
  4026be:	2300      	movs	r3, #0
  4026c0:	9310      	str	r3, [sp, #64]	; 0x40
  4026c2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4026c6:	f013 0f01 	tst.w	r3, #1
  4026ca:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4026ce:	d102      	bne.n	4026d6 <_vfiprintf_r+0x8ae>
  4026d0:	059a      	lsls	r2, r3, #22
  4026d2:	f140 80de 	bpl.w	402892 <_vfiprintf_r+0xa6a>
  4026d6:	065b      	lsls	r3, r3, #25
  4026d8:	f53f acb2 	bmi.w	402040 <_vfiprintf_r+0x218>
  4026dc:	9803      	ldr	r0, [sp, #12]
  4026de:	b02d      	add	sp, #180	; 0xb4
  4026e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026e4:	2a00      	cmp	r2, #0
  4026e6:	f040 8106 	bne.w	4028f6 <_vfiprintf_r+0xace>
  4026ea:	9a05      	ldr	r2, [sp, #20]
  4026ec:	921d      	str	r2, [sp, #116]	; 0x74
  4026ee:	2301      	movs	r3, #1
  4026f0:	9211      	str	r2, [sp, #68]	; 0x44
  4026f2:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4026f6:	9310      	str	r3, [sp, #64]	; 0x40
  4026f8:	46ca      	mov	sl, r9
  4026fa:	f10a 0a08 	add.w	sl, sl, #8
  4026fe:	9b02      	ldr	r3, [sp, #8]
  402700:	0759      	lsls	r1, r3, #29
  402702:	d504      	bpl.n	40270e <_vfiprintf_r+0x8e6>
  402704:	9b08      	ldr	r3, [sp, #32]
  402706:	9901      	ldr	r1, [sp, #4]
  402708:	1a5c      	subs	r4, r3, r1
  40270a:	2c00      	cmp	r4, #0
  40270c:	dc81      	bgt.n	402612 <_vfiprintf_r+0x7ea>
  40270e:	9b03      	ldr	r3, [sp, #12]
  402710:	9908      	ldr	r1, [sp, #32]
  402712:	9801      	ldr	r0, [sp, #4]
  402714:	4281      	cmp	r1, r0
  402716:	bfac      	ite	ge
  402718:	185b      	addge	r3, r3, r1
  40271a:	181b      	addlt	r3, r3, r0
  40271c:	9303      	str	r3, [sp, #12]
  40271e:	bb72      	cbnz	r2, 40277e <_vfiprintf_r+0x956>
  402720:	2300      	movs	r3, #0
  402722:	9310      	str	r3, [sp, #64]	; 0x40
  402724:	46ca      	mov	sl, r9
  402726:	f7ff bbbc 	b.w	401ea2 <_vfiprintf_r+0x7a>
  40272a:	aa0f      	add	r2, sp, #60	; 0x3c
  40272c:	9904      	ldr	r1, [sp, #16]
  40272e:	4620      	mov	r0, r4
  402730:	f7ff fb3a 	bl	401da8 <__sprint_r.part.0>
  402734:	bb50      	cbnz	r0, 40278c <_vfiprintf_r+0x964>
  402736:	9910      	ldr	r1, [sp, #64]	; 0x40
  402738:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40273a:	f101 0e01 	add.w	lr, r1, #1
  40273e:	46cc      	mov	ip, r9
  402740:	e548      	b.n	4021d4 <_vfiprintf_r+0x3ac>
  402742:	2a00      	cmp	r2, #0
  402744:	f040 8140 	bne.w	4029c8 <_vfiprintf_r+0xba0>
  402748:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40274c:	2900      	cmp	r1, #0
  40274e:	f000 811b 	beq.w	402988 <_vfiprintf_r+0xb60>
  402752:	2201      	movs	r2, #1
  402754:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  402758:	4610      	mov	r0, r2
  40275a:	921d      	str	r2, [sp, #116]	; 0x74
  40275c:	911c      	str	r1, [sp, #112]	; 0x70
  40275e:	46ca      	mov	sl, r9
  402760:	4601      	mov	r1, r0
  402762:	f10a 0a08 	add.w	sl, sl, #8
  402766:	3001      	adds	r0, #1
  402768:	e507      	b.n	40217a <_vfiprintf_r+0x352>
  40276a:	9b02      	ldr	r3, [sp, #8]
  40276c:	2a01      	cmp	r2, #1
  40276e:	f000 8098 	beq.w	4028a2 <_vfiprintf_r+0xa7a>
  402772:	2a02      	cmp	r2, #2
  402774:	d10d      	bne.n	402792 <_vfiprintf_r+0x96a>
  402776:	9302      	str	r3, [sp, #8]
  402778:	2600      	movs	r6, #0
  40277a:	2700      	movs	r7, #0
  40277c:	e5b0      	b.n	4022e0 <_vfiprintf_r+0x4b8>
  40277e:	aa0f      	add	r2, sp, #60	; 0x3c
  402780:	9904      	ldr	r1, [sp, #16]
  402782:	9806      	ldr	r0, [sp, #24]
  402784:	f7ff fb10 	bl	401da8 <__sprint_r.part.0>
  402788:	2800      	cmp	r0, #0
  40278a:	d0c9      	beq.n	402720 <_vfiprintf_r+0x8f8>
  40278c:	f8dd b010 	ldr.w	fp, [sp, #16]
  402790:	e797      	b.n	4026c2 <_vfiprintf_r+0x89a>
  402792:	9302      	str	r3, [sp, #8]
  402794:	2600      	movs	r6, #0
  402796:	2700      	movs	r7, #0
  402798:	4649      	mov	r1, r9
  40279a:	e000      	b.n	40279e <_vfiprintf_r+0x976>
  40279c:	4659      	mov	r1, fp
  40279e:	08f2      	lsrs	r2, r6, #3
  4027a0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4027a4:	08f8      	lsrs	r0, r7, #3
  4027a6:	f006 0307 	and.w	r3, r6, #7
  4027aa:	4607      	mov	r7, r0
  4027ac:	4616      	mov	r6, r2
  4027ae:	3330      	adds	r3, #48	; 0x30
  4027b0:	ea56 0207 	orrs.w	r2, r6, r7
  4027b4:	f801 3c01 	strb.w	r3, [r1, #-1]
  4027b8:	f101 3bff 	add.w	fp, r1, #4294967295
  4027bc:	d1ee      	bne.n	40279c <_vfiprintf_r+0x974>
  4027be:	9a02      	ldr	r2, [sp, #8]
  4027c0:	07d6      	lsls	r6, r2, #31
  4027c2:	f57f ad9d 	bpl.w	402300 <_vfiprintf_r+0x4d8>
  4027c6:	2b30      	cmp	r3, #48	; 0x30
  4027c8:	f43f ad9a 	beq.w	402300 <_vfiprintf_r+0x4d8>
  4027cc:	3902      	subs	r1, #2
  4027ce:	2330      	movs	r3, #48	; 0x30
  4027d0:	f80b 3c01 	strb.w	r3, [fp, #-1]
  4027d4:	eba9 0301 	sub.w	r3, r9, r1
  4027d8:	9305      	str	r3, [sp, #20]
  4027da:	468b      	mov	fp, r1
  4027dc:	e476      	b.n	4020cc <_vfiprintf_r+0x2a4>
  4027de:	9b03      	ldr	r3, [sp, #12]
  4027e0:	9a08      	ldr	r2, [sp, #32]
  4027e2:	428a      	cmp	r2, r1
  4027e4:	bfac      	ite	ge
  4027e6:	189b      	addge	r3, r3, r2
  4027e8:	185b      	addlt	r3, r3, r1
  4027ea:	9303      	str	r3, [sp, #12]
  4027ec:	e798      	b.n	402720 <_vfiprintf_r+0x8f8>
  4027ee:	2202      	movs	r2, #2
  4027f0:	e44d      	b.n	40208e <_vfiprintf_r+0x266>
  4027f2:	2f00      	cmp	r7, #0
  4027f4:	bf08      	it	eq
  4027f6:	2e0a      	cmpeq	r6, #10
  4027f8:	d352      	bcc.n	4028a0 <_vfiprintf_r+0xa78>
  4027fa:	46cb      	mov	fp, r9
  4027fc:	4630      	mov	r0, r6
  4027fe:	4639      	mov	r1, r7
  402800:	220a      	movs	r2, #10
  402802:	2300      	movs	r3, #0
  402804:	f001 ff78 	bl	4046f8 <__aeabi_uldivmod>
  402808:	3230      	adds	r2, #48	; 0x30
  40280a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40280e:	4630      	mov	r0, r6
  402810:	4639      	mov	r1, r7
  402812:	2300      	movs	r3, #0
  402814:	220a      	movs	r2, #10
  402816:	f001 ff6f 	bl	4046f8 <__aeabi_uldivmod>
  40281a:	4606      	mov	r6, r0
  40281c:	460f      	mov	r7, r1
  40281e:	ea56 0307 	orrs.w	r3, r6, r7
  402822:	d1eb      	bne.n	4027fc <_vfiprintf_r+0x9d4>
  402824:	e56c      	b.n	402300 <_vfiprintf_r+0x4d8>
  402826:	9405      	str	r4, [sp, #20]
  402828:	46cb      	mov	fp, r9
  40282a:	e44f      	b.n	4020cc <_vfiprintf_r+0x2a4>
  40282c:	aa0f      	add	r2, sp, #60	; 0x3c
  40282e:	9904      	ldr	r1, [sp, #16]
  402830:	9806      	ldr	r0, [sp, #24]
  402832:	f7ff fab9 	bl	401da8 <__sprint_r.part.0>
  402836:	2800      	cmp	r0, #0
  402838:	d1a8      	bne.n	40278c <_vfiprintf_r+0x964>
  40283a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40283c:	46ca      	mov	sl, r9
  40283e:	e75e      	b.n	4026fe <_vfiprintf_r+0x8d6>
  402840:	aa0f      	add	r2, sp, #60	; 0x3c
  402842:	9904      	ldr	r1, [sp, #16]
  402844:	9806      	ldr	r0, [sp, #24]
  402846:	f7ff faaf 	bl	401da8 <__sprint_r.part.0>
  40284a:	2800      	cmp	r0, #0
  40284c:	d19e      	bne.n	40278c <_vfiprintf_r+0x964>
  40284e:	46ca      	mov	sl, r9
  402850:	f7ff bbc0 	b.w	401fd4 <_vfiprintf_r+0x1ac>
  402854:	00404f18 	.word	0x00404f18
  402858:	00404f08 	.word	0x00404f08
  40285c:	3104      	adds	r1, #4
  40285e:	6816      	ldr	r6, [r2, #0]
  402860:	9107      	str	r1, [sp, #28]
  402862:	2201      	movs	r2, #1
  402864:	2700      	movs	r7, #0
  402866:	e412      	b.n	40208e <_vfiprintf_r+0x266>
  402868:	9807      	ldr	r0, [sp, #28]
  40286a:	4601      	mov	r1, r0
  40286c:	3104      	adds	r1, #4
  40286e:	6806      	ldr	r6, [r0, #0]
  402870:	9107      	str	r1, [sp, #28]
  402872:	2700      	movs	r7, #0
  402874:	e40b      	b.n	40208e <_vfiprintf_r+0x266>
  402876:	680e      	ldr	r6, [r1, #0]
  402878:	3104      	adds	r1, #4
  40287a:	9107      	str	r1, [sp, #28]
  40287c:	2700      	movs	r7, #0
  40287e:	e591      	b.n	4023a4 <_vfiprintf_r+0x57c>
  402880:	9907      	ldr	r1, [sp, #28]
  402882:	680e      	ldr	r6, [r1, #0]
  402884:	460a      	mov	r2, r1
  402886:	17f7      	asrs	r7, r6, #31
  402888:	3204      	adds	r2, #4
  40288a:	9207      	str	r2, [sp, #28]
  40288c:	4630      	mov	r0, r6
  40288e:	4639      	mov	r1, r7
  402890:	e50f      	b.n	4022b2 <_vfiprintf_r+0x48a>
  402892:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402896:	f000 fe87 	bl	4035a8 <__retarget_lock_release_recursive>
  40289a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40289e:	e71a      	b.n	4026d6 <_vfiprintf_r+0x8ae>
  4028a0:	9b02      	ldr	r3, [sp, #8]
  4028a2:	9302      	str	r3, [sp, #8]
  4028a4:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4028a8:	3630      	adds	r6, #48	; 0x30
  4028aa:	2301      	movs	r3, #1
  4028ac:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4028b0:	9305      	str	r3, [sp, #20]
  4028b2:	e40b      	b.n	4020cc <_vfiprintf_r+0x2a4>
  4028b4:	aa0f      	add	r2, sp, #60	; 0x3c
  4028b6:	9904      	ldr	r1, [sp, #16]
  4028b8:	9806      	ldr	r0, [sp, #24]
  4028ba:	f7ff fa75 	bl	401da8 <__sprint_r.part.0>
  4028be:	2800      	cmp	r0, #0
  4028c0:	f47f af64 	bne.w	40278c <_vfiprintf_r+0x964>
  4028c4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4028c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4028c8:	1c48      	adds	r0, r1, #1
  4028ca:	46ca      	mov	sl, r9
  4028cc:	e651      	b.n	402572 <_vfiprintf_r+0x74a>
  4028ce:	aa0f      	add	r2, sp, #60	; 0x3c
  4028d0:	9904      	ldr	r1, [sp, #16]
  4028d2:	9806      	ldr	r0, [sp, #24]
  4028d4:	f7ff fa68 	bl	401da8 <__sprint_r.part.0>
  4028d8:	2800      	cmp	r0, #0
  4028da:	f47f af57 	bne.w	40278c <_vfiprintf_r+0x964>
  4028de:	9910      	ldr	r1, [sp, #64]	; 0x40
  4028e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4028e2:	1c48      	adds	r0, r1, #1
  4028e4:	46ca      	mov	sl, r9
  4028e6:	e448      	b.n	40217a <_vfiprintf_r+0x352>
  4028e8:	2a00      	cmp	r2, #0
  4028ea:	f040 8091 	bne.w	402a10 <_vfiprintf_r+0xbe8>
  4028ee:	2001      	movs	r0, #1
  4028f0:	4611      	mov	r1, r2
  4028f2:	46ca      	mov	sl, r9
  4028f4:	e641      	b.n	40257a <_vfiprintf_r+0x752>
  4028f6:	aa0f      	add	r2, sp, #60	; 0x3c
  4028f8:	9904      	ldr	r1, [sp, #16]
  4028fa:	9806      	ldr	r0, [sp, #24]
  4028fc:	f7ff fa54 	bl	401da8 <__sprint_r.part.0>
  402900:	2800      	cmp	r0, #0
  402902:	f47f af43 	bne.w	40278c <_vfiprintf_r+0x964>
  402906:	9810      	ldr	r0, [sp, #64]	; 0x40
  402908:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40290a:	3001      	adds	r0, #1
  40290c:	46ca      	mov	sl, r9
  40290e:	e667      	b.n	4025e0 <_vfiprintf_r+0x7b8>
  402910:	46d3      	mov	fp, sl
  402912:	e6d6      	b.n	4026c2 <_vfiprintf_r+0x89a>
  402914:	9e07      	ldr	r6, [sp, #28]
  402916:	3607      	adds	r6, #7
  402918:	f026 0207 	bic.w	r2, r6, #7
  40291c:	f102 0108 	add.w	r1, r2, #8
  402920:	e9d2 6700 	ldrd	r6, r7, [r2]
  402924:	9107      	str	r1, [sp, #28]
  402926:	2201      	movs	r2, #1
  402928:	f7ff bbb1 	b.w	40208e <_vfiprintf_r+0x266>
  40292c:	9e07      	ldr	r6, [sp, #28]
  40292e:	3607      	adds	r6, #7
  402930:	f026 0607 	bic.w	r6, r6, #7
  402934:	e9d6 0100 	ldrd	r0, r1, [r6]
  402938:	f106 0208 	add.w	r2, r6, #8
  40293c:	9207      	str	r2, [sp, #28]
  40293e:	4606      	mov	r6, r0
  402940:	460f      	mov	r7, r1
  402942:	e4b6      	b.n	4022b2 <_vfiprintf_r+0x48a>
  402944:	9e07      	ldr	r6, [sp, #28]
  402946:	3607      	adds	r6, #7
  402948:	f026 0207 	bic.w	r2, r6, #7
  40294c:	f102 0108 	add.w	r1, r2, #8
  402950:	e9d2 6700 	ldrd	r6, r7, [r2]
  402954:	9107      	str	r1, [sp, #28]
  402956:	2200      	movs	r2, #0
  402958:	f7ff bb99 	b.w	40208e <_vfiprintf_r+0x266>
  40295c:	9e07      	ldr	r6, [sp, #28]
  40295e:	3607      	adds	r6, #7
  402960:	f026 0107 	bic.w	r1, r6, #7
  402964:	f101 0008 	add.w	r0, r1, #8
  402968:	9007      	str	r0, [sp, #28]
  40296a:	e9d1 6700 	ldrd	r6, r7, [r1]
  40296e:	e519      	b.n	4023a4 <_vfiprintf_r+0x57c>
  402970:	46cb      	mov	fp, r9
  402972:	f7ff bbab 	b.w	4020cc <_vfiprintf_r+0x2a4>
  402976:	252d      	movs	r5, #45	; 0x2d
  402978:	4276      	negs	r6, r6
  40297a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40297e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402982:	2201      	movs	r2, #1
  402984:	f7ff bb88 	b.w	402098 <_vfiprintf_r+0x270>
  402988:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40298a:	b9b3      	cbnz	r3, 4029ba <_vfiprintf_r+0xb92>
  40298c:	4611      	mov	r1, r2
  40298e:	2001      	movs	r0, #1
  402990:	46ca      	mov	sl, r9
  402992:	e5f2      	b.n	40257a <_vfiprintf_r+0x752>
  402994:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402998:	f000 fe06 	bl	4035a8 <__retarget_lock_release_recursive>
  40299c:	f04f 33ff 	mov.w	r3, #4294967295
  4029a0:	9303      	str	r3, [sp, #12]
  4029a2:	f7ff bb50 	b.w	402046 <_vfiprintf_r+0x21e>
  4029a6:	aa0f      	add	r2, sp, #60	; 0x3c
  4029a8:	9904      	ldr	r1, [sp, #16]
  4029aa:	9806      	ldr	r0, [sp, #24]
  4029ac:	f7ff f9fc 	bl	401da8 <__sprint_r.part.0>
  4029b0:	2800      	cmp	r0, #0
  4029b2:	f47f aeeb 	bne.w	40278c <_vfiprintf_r+0x964>
  4029b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4029b8:	e6a9      	b.n	40270e <_vfiprintf_r+0x8e6>
  4029ba:	ab0e      	add	r3, sp, #56	; 0x38
  4029bc:	2202      	movs	r2, #2
  4029be:	931c      	str	r3, [sp, #112]	; 0x70
  4029c0:	921d      	str	r2, [sp, #116]	; 0x74
  4029c2:	2001      	movs	r0, #1
  4029c4:	46ca      	mov	sl, r9
  4029c6:	e5d0      	b.n	40256a <_vfiprintf_r+0x742>
  4029c8:	aa0f      	add	r2, sp, #60	; 0x3c
  4029ca:	9904      	ldr	r1, [sp, #16]
  4029cc:	9806      	ldr	r0, [sp, #24]
  4029ce:	f7ff f9eb 	bl	401da8 <__sprint_r.part.0>
  4029d2:	2800      	cmp	r0, #0
  4029d4:	f47f aeda 	bne.w	40278c <_vfiprintf_r+0x964>
  4029d8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4029da:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4029dc:	1c48      	adds	r0, r1, #1
  4029de:	46ca      	mov	sl, r9
  4029e0:	e5a4      	b.n	40252c <_vfiprintf_r+0x704>
  4029e2:	9a07      	ldr	r2, [sp, #28]
  4029e4:	9903      	ldr	r1, [sp, #12]
  4029e6:	6813      	ldr	r3, [r2, #0]
  4029e8:	17cd      	asrs	r5, r1, #31
  4029ea:	4608      	mov	r0, r1
  4029ec:	3204      	adds	r2, #4
  4029ee:	4629      	mov	r1, r5
  4029f0:	9207      	str	r2, [sp, #28]
  4029f2:	e9c3 0100 	strd	r0, r1, [r3]
  4029f6:	f7ff ba54 	b.w	401ea2 <_vfiprintf_r+0x7a>
  4029fa:	4658      	mov	r0, fp
  4029fc:	9607      	str	r6, [sp, #28]
  4029fe:	9302      	str	r3, [sp, #8]
  402a00:	f001 fc3e 	bl	404280 <strlen>
  402a04:	2400      	movs	r4, #0
  402a06:	9005      	str	r0, [sp, #20]
  402a08:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402a0c:	f7ff bb5e 	b.w	4020cc <_vfiprintf_r+0x2a4>
  402a10:	aa0f      	add	r2, sp, #60	; 0x3c
  402a12:	9904      	ldr	r1, [sp, #16]
  402a14:	9806      	ldr	r0, [sp, #24]
  402a16:	f7ff f9c7 	bl	401da8 <__sprint_r.part.0>
  402a1a:	2800      	cmp	r0, #0
  402a1c:	f47f aeb6 	bne.w	40278c <_vfiprintf_r+0x964>
  402a20:	9910      	ldr	r1, [sp, #64]	; 0x40
  402a22:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402a24:	1c48      	adds	r0, r1, #1
  402a26:	46ca      	mov	sl, r9
  402a28:	e5a7      	b.n	40257a <_vfiprintf_r+0x752>
  402a2a:	9910      	ldr	r1, [sp, #64]	; 0x40
  402a2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402a2e:	4e20      	ldr	r6, [pc, #128]	; (402ab0 <_vfiprintf_r+0xc88>)
  402a30:	3101      	adds	r1, #1
  402a32:	f7ff bb90 	b.w	402156 <_vfiprintf_r+0x32e>
  402a36:	2c06      	cmp	r4, #6
  402a38:	bf28      	it	cs
  402a3a:	2406      	movcs	r4, #6
  402a3c:	9405      	str	r4, [sp, #20]
  402a3e:	9607      	str	r6, [sp, #28]
  402a40:	9401      	str	r4, [sp, #4]
  402a42:	f8df b070 	ldr.w	fp, [pc, #112]	; 402ab4 <_vfiprintf_r+0xc8c>
  402a46:	e4d5      	b.n	4023f4 <_vfiprintf_r+0x5cc>
  402a48:	9810      	ldr	r0, [sp, #64]	; 0x40
  402a4a:	4e19      	ldr	r6, [pc, #100]	; (402ab0 <_vfiprintf_r+0xc88>)
  402a4c:	3001      	adds	r0, #1
  402a4e:	e603      	b.n	402658 <_vfiprintf_r+0x830>
  402a50:	9405      	str	r4, [sp, #20]
  402a52:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402a56:	9607      	str	r6, [sp, #28]
  402a58:	9302      	str	r3, [sp, #8]
  402a5a:	4604      	mov	r4, r0
  402a5c:	f7ff bb36 	b.w	4020cc <_vfiprintf_r+0x2a4>
  402a60:	4686      	mov	lr, r0
  402a62:	f7ff bbce 	b.w	402202 <_vfiprintf_r+0x3da>
  402a66:	9806      	ldr	r0, [sp, #24]
  402a68:	aa0f      	add	r2, sp, #60	; 0x3c
  402a6a:	4659      	mov	r1, fp
  402a6c:	f7ff f99c 	bl	401da8 <__sprint_r.part.0>
  402a70:	2800      	cmp	r0, #0
  402a72:	f43f ae24 	beq.w	4026be <_vfiprintf_r+0x896>
  402a76:	e624      	b.n	4026c2 <_vfiprintf_r+0x89a>
  402a78:	9907      	ldr	r1, [sp, #28]
  402a7a:	f898 2001 	ldrb.w	r2, [r8, #1]
  402a7e:	680c      	ldr	r4, [r1, #0]
  402a80:	3104      	adds	r1, #4
  402a82:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  402a86:	46b8      	mov	r8, r7
  402a88:	9107      	str	r1, [sp, #28]
  402a8a:	f7ff ba3f 	b.w	401f0c <_vfiprintf_r+0xe4>
  402a8e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402a92:	e43c      	b.n	40230e <_vfiprintf_r+0x4e6>
  402a94:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402a98:	e521      	b.n	4024de <_vfiprintf_r+0x6b6>
  402a9a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402a9e:	f7ff bbf4 	b.w	40228a <_vfiprintf_r+0x462>
  402aa2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402aa6:	e491      	b.n	4023cc <_vfiprintf_r+0x5a4>
  402aa8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402aac:	e469      	b.n	402382 <_vfiprintf_r+0x55a>
  402aae:	bf00      	nop
  402ab0:	00404f08 	.word	0x00404f08
  402ab4:	00404f00 	.word	0x00404f00

00402ab8 <__sbprintf>:
  402ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402abc:	460c      	mov	r4, r1
  402abe:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  402ac2:	8989      	ldrh	r1, [r1, #12]
  402ac4:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402ac6:	89e5      	ldrh	r5, [r4, #14]
  402ac8:	9619      	str	r6, [sp, #100]	; 0x64
  402aca:	f021 0102 	bic.w	r1, r1, #2
  402ace:	4606      	mov	r6, r0
  402ad0:	69e0      	ldr	r0, [r4, #28]
  402ad2:	f8ad 100c 	strh.w	r1, [sp, #12]
  402ad6:	4617      	mov	r7, r2
  402ad8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402adc:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402ade:	f8ad 500e 	strh.w	r5, [sp, #14]
  402ae2:	4698      	mov	r8, r3
  402ae4:	ad1a      	add	r5, sp, #104	; 0x68
  402ae6:	2300      	movs	r3, #0
  402ae8:	9007      	str	r0, [sp, #28]
  402aea:	a816      	add	r0, sp, #88	; 0x58
  402aec:	9209      	str	r2, [sp, #36]	; 0x24
  402aee:	9306      	str	r3, [sp, #24]
  402af0:	9500      	str	r5, [sp, #0]
  402af2:	9504      	str	r5, [sp, #16]
  402af4:	9102      	str	r1, [sp, #8]
  402af6:	9105      	str	r1, [sp, #20]
  402af8:	f000 fd50 	bl	40359c <__retarget_lock_init_recursive>
  402afc:	4643      	mov	r3, r8
  402afe:	463a      	mov	r2, r7
  402b00:	4669      	mov	r1, sp
  402b02:	4630      	mov	r0, r6
  402b04:	f7ff f990 	bl	401e28 <_vfiprintf_r>
  402b08:	1e05      	subs	r5, r0, #0
  402b0a:	db07      	blt.n	402b1c <__sbprintf+0x64>
  402b0c:	4630      	mov	r0, r6
  402b0e:	4669      	mov	r1, sp
  402b10:	f000 f930 	bl	402d74 <_fflush_r>
  402b14:	2800      	cmp	r0, #0
  402b16:	bf18      	it	ne
  402b18:	f04f 35ff 	movne.w	r5, #4294967295
  402b1c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402b20:	065b      	lsls	r3, r3, #25
  402b22:	d503      	bpl.n	402b2c <__sbprintf+0x74>
  402b24:	89a3      	ldrh	r3, [r4, #12]
  402b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402b2a:	81a3      	strh	r3, [r4, #12]
  402b2c:	9816      	ldr	r0, [sp, #88]	; 0x58
  402b2e:	f000 fd37 	bl	4035a0 <__retarget_lock_close_recursive>
  402b32:	4628      	mov	r0, r5
  402b34:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  402b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00402b3c <__swsetup_r>:
  402b3c:	b538      	push	{r3, r4, r5, lr}
  402b3e:	4b30      	ldr	r3, [pc, #192]	; (402c00 <__swsetup_r+0xc4>)
  402b40:	681b      	ldr	r3, [r3, #0]
  402b42:	4605      	mov	r5, r0
  402b44:	460c      	mov	r4, r1
  402b46:	b113      	cbz	r3, 402b4e <__swsetup_r+0x12>
  402b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402b4a:	2a00      	cmp	r2, #0
  402b4c:	d038      	beq.n	402bc0 <__swsetup_r+0x84>
  402b4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402b52:	b293      	uxth	r3, r2
  402b54:	0718      	lsls	r0, r3, #28
  402b56:	d50c      	bpl.n	402b72 <__swsetup_r+0x36>
  402b58:	6920      	ldr	r0, [r4, #16]
  402b5a:	b1a8      	cbz	r0, 402b88 <__swsetup_r+0x4c>
  402b5c:	f013 0201 	ands.w	r2, r3, #1
  402b60:	d01e      	beq.n	402ba0 <__swsetup_r+0x64>
  402b62:	6963      	ldr	r3, [r4, #20]
  402b64:	2200      	movs	r2, #0
  402b66:	425b      	negs	r3, r3
  402b68:	61a3      	str	r3, [r4, #24]
  402b6a:	60a2      	str	r2, [r4, #8]
  402b6c:	b1f0      	cbz	r0, 402bac <__swsetup_r+0x70>
  402b6e:	2000      	movs	r0, #0
  402b70:	bd38      	pop	{r3, r4, r5, pc}
  402b72:	06d9      	lsls	r1, r3, #27
  402b74:	d53c      	bpl.n	402bf0 <__swsetup_r+0xb4>
  402b76:	0758      	lsls	r0, r3, #29
  402b78:	d426      	bmi.n	402bc8 <__swsetup_r+0x8c>
  402b7a:	6920      	ldr	r0, [r4, #16]
  402b7c:	f042 0308 	orr.w	r3, r2, #8
  402b80:	81a3      	strh	r3, [r4, #12]
  402b82:	b29b      	uxth	r3, r3
  402b84:	2800      	cmp	r0, #0
  402b86:	d1e9      	bne.n	402b5c <__swsetup_r+0x20>
  402b88:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402b8c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402b90:	d0e4      	beq.n	402b5c <__swsetup_r+0x20>
  402b92:	4628      	mov	r0, r5
  402b94:	4621      	mov	r1, r4
  402b96:	f000 fd37 	bl	403608 <__smakebuf_r>
  402b9a:	89a3      	ldrh	r3, [r4, #12]
  402b9c:	6920      	ldr	r0, [r4, #16]
  402b9e:	e7dd      	b.n	402b5c <__swsetup_r+0x20>
  402ba0:	0799      	lsls	r1, r3, #30
  402ba2:	bf58      	it	pl
  402ba4:	6962      	ldrpl	r2, [r4, #20]
  402ba6:	60a2      	str	r2, [r4, #8]
  402ba8:	2800      	cmp	r0, #0
  402baa:	d1e0      	bne.n	402b6e <__swsetup_r+0x32>
  402bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402bb0:	061a      	lsls	r2, r3, #24
  402bb2:	d5dd      	bpl.n	402b70 <__swsetup_r+0x34>
  402bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402bb8:	81a3      	strh	r3, [r4, #12]
  402bba:	f04f 30ff 	mov.w	r0, #4294967295
  402bbe:	bd38      	pop	{r3, r4, r5, pc}
  402bc0:	4618      	mov	r0, r3
  402bc2:	f000 f92f 	bl	402e24 <__sinit>
  402bc6:	e7c2      	b.n	402b4e <__swsetup_r+0x12>
  402bc8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402bca:	b151      	cbz	r1, 402be2 <__swsetup_r+0xa6>
  402bcc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402bd0:	4299      	cmp	r1, r3
  402bd2:	d004      	beq.n	402bde <__swsetup_r+0xa2>
  402bd4:	4628      	mov	r0, r5
  402bd6:	f000 fa4b 	bl	403070 <_free_r>
  402bda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402bde:	2300      	movs	r3, #0
  402be0:	6323      	str	r3, [r4, #48]	; 0x30
  402be2:	2300      	movs	r3, #0
  402be4:	6920      	ldr	r0, [r4, #16]
  402be6:	6063      	str	r3, [r4, #4]
  402be8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402bec:	6020      	str	r0, [r4, #0]
  402bee:	e7c5      	b.n	402b7c <__swsetup_r+0x40>
  402bf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402bf4:	2309      	movs	r3, #9
  402bf6:	602b      	str	r3, [r5, #0]
  402bf8:	f04f 30ff 	mov.w	r0, #4294967295
  402bfc:	81a2      	strh	r2, [r4, #12]
  402bfe:	bd38      	pop	{r3, r4, r5, pc}
  402c00:	20400010 	.word	0x20400010

00402c04 <register_fini>:
  402c04:	4b02      	ldr	r3, [pc, #8]	; (402c10 <register_fini+0xc>)
  402c06:	b113      	cbz	r3, 402c0e <register_fini+0xa>
  402c08:	4802      	ldr	r0, [pc, #8]	; (402c14 <register_fini+0x10>)
  402c0a:	f000 b80d 	b.w	402c28 <atexit>
  402c0e:	4770      	bx	lr
  402c10:	00000000 	.word	0x00000000
  402c14:	00402e95 	.word	0x00402e95

00402c18 <abort>:
  402c18:	b508      	push	{r3, lr}
  402c1a:	2006      	movs	r0, #6
  402c1c:	f001 fab8 	bl	404190 <raise>
  402c20:	2001      	movs	r0, #1
  402c22:	f7fe fe65 	bl	4018f0 <_exit>
  402c26:	bf00      	nop

00402c28 <atexit>:
  402c28:	2300      	movs	r3, #0
  402c2a:	4601      	mov	r1, r0
  402c2c:	461a      	mov	r2, r3
  402c2e:	4618      	mov	r0, r3
  402c30:	f001 bc3a 	b.w	4044a8 <__register_exitproc>

00402c34 <__sflush_r>:
  402c34:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  402c38:	b29a      	uxth	r2, r3
  402c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402c3e:	460d      	mov	r5, r1
  402c40:	0711      	lsls	r1, r2, #28
  402c42:	4680      	mov	r8, r0
  402c44:	d43a      	bmi.n	402cbc <__sflush_r+0x88>
  402c46:	686a      	ldr	r2, [r5, #4]
  402c48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402c4c:	2a00      	cmp	r2, #0
  402c4e:	81ab      	strh	r3, [r5, #12]
  402c50:	dd6f      	ble.n	402d32 <__sflush_r+0xfe>
  402c52:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402c54:	2c00      	cmp	r4, #0
  402c56:	d049      	beq.n	402cec <__sflush_r+0xb8>
  402c58:	2200      	movs	r2, #0
  402c5a:	b29b      	uxth	r3, r3
  402c5c:	f8d8 6000 	ldr.w	r6, [r8]
  402c60:	f8c8 2000 	str.w	r2, [r8]
  402c64:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  402c68:	d067      	beq.n	402d3a <__sflush_r+0x106>
  402c6a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402c6c:	075f      	lsls	r7, r3, #29
  402c6e:	d505      	bpl.n	402c7c <__sflush_r+0x48>
  402c70:	6869      	ldr	r1, [r5, #4]
  402c72:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402c74:	1a52      	subs	r2, r2, r1
  402c76:	b10b      	cbz	r3, 402c7c <__sflush_r+0x48>
  402c78:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402c7a:	1ad2      	subs	r2, r2, r3
  402c7c:	2300      	movs	r3, #0
  402c7e:	69e9      	ldr	r1, [r5, #28]
  402c80:	4640      	mov	r0, r8
  402c82:	47a0      	blx	r4
  402c84:	1c44      	adds	r4, r0, #1
  402c86:	d03c      	beq.n	402d02 <__sflush_r+0xce>
  402c88:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402c8c:	692a      	ldr	r2, [r5, #16]
  402c8e:	602a      	str	r2, [r5, #0]
  402c90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402c94:	2200      	movs	r2, #0
  402c96:	81ab      	strh	r3, [r5, #12]
  402c98:	04db      	lsls	r3, r3, #19
  402c9a:	606a      	str	r2, [r5, #4]
  402c9c:	d447      	bmi.n	402d2e <__sflush_r+0xfa>
  402c9e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402ca0:	f8c8 6000 	str.w	r6, [r8]
  402ca4:	b311      	cbz	r1, 402cec <__sflush_r+0xb8>
  402ca6:	f105 0340 	add.w	r3, r5, #64	; 0x40
  402caa:	4299      	cmp	r1, r3
  402cac:	d002      	beq.n	402cb4 <__sflush_r+0x80>
  402cae:	4640      	mov	r0, r8
  402cb0:	f000 f9de 	bl	403070 <_free_r>
  402cb4:	2000      	movs	r0, #0
  402cb6:	6328      	str	r0, [r5, #48]	; 0x30
  402cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402cbc:	692e      	ldr	r6, [r5, #16]
  402cbe:	b1ae      	cbz	r6, 402cec <__sflush_r+0xb8>
  402cc0:	682c      	ldr	r4, [r5, #0]
  402cc2:	602e      	str	r6, [r5, #0]
  402cc4:	0791      	lsls	r1, r2, #30
  402cc6:	bf0c      	ite	eq
  402cc8:	696b      	ldreq	r3, [r5, #20]
  402cca:	2300      	movne	r3, #0
  402ccc:	1ba4      	subs	r4, r4, r6
  402cce:	60ab      	str	r3, [r5, #8]
  402cd0:	e00a      	b.n	402ce8 <__sflush_r+0xb4>
  402cd2:	4623      	mov	r3, r4
  402cd4:	4632      	mov	r2, r6
  402cd6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402cd8:	69e9      	ldr	r1, [r5, #28]
  402cda:	4640      	mov	r0, r8
  402cdc:	47b8      	blx	r7
  402cde:	2800      	cmp	r0, #0
  402ce0:	eba4 0400 	sub.w	r4, r4, r0
  402ce4:	4406      	add	r6, r0
  402ce6:	dd04      	ble.n	402cf2 <__sflush_r+0xbe>
  402ce8:	2c00      	cmp	r4, #0
  402cea:	dcf2      	bgt.n	402cd2 <__sflush_r+0x9e>
  402cec:	2000      	movs	r0, #0
  402cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402cf2:	89ab      	ldrh	r3, [r5, #12]
  402cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402cf8:	81ab      	strh	r3, [r5, #12]
  402cfa:	f04f 30ff 	mov.w	r0, #4294967295
  402cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402d02:	f8d8 4000 	ldr.w	r4, [r8]
  402d06:	2c1d      	cmp	r4, #29
  402d08:	d8f3      	bhi.n	402cf2 <__sflush_r+0xbe>
  402d0a:	4b19      	ldr	r3, [pc, #100]	; (402d70 <__sflush_r+0x13c>)
  402d0c:	40e3      	lsrs	r3, r4
  402d0e:	43db      	mvns	r3, r3
  402d10:	f013 0301 	ands.w	r3, r3, #1
  402d14:	d1ed      	bne.n	402cf2 <__sflush_r+0xbe>
  402d16:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  402d1a:	606b      	str	r3, [r5, #4]
  402d1c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402d20:	6929      	ldr	r1, [r5, #16]
  402d22:	81ab      	strh	r3, [r5, #12]
  402d24:	04da      	lsls	r2, r3, #19
  402d26:	6029      	str	r1, [r5, #0]
  402d28:	d5b9      	bpl.n	402c9e <__sflush_r+0x6a>
  402d2a:	2c00      	cmp	r4, #0
  402d2c:	d1b7      	bne.n	402c9e <__sflush_r+0x6a>
  402d2e:	6528      	str	r0, [r5, #80]	; 0x50
  402d30:	e7b5      	b.n	402c9e <__sflush_r+0x6a>
  402d32:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402d34:	2a00      	cmp	r2, #0
  402d36:	dc8c      	bgt.n	402c52 <__sflush_r+0x1e>
  402d38:	e7d8      	b.n	402cec <__sflush_r+0xb8>
  402d3a:	2301      	movs	r3, #1
  402d3c:	69e9      	ldr	r1, [r5, #28]
  402d3e:	4640      	mov	r0, r8
  402d40:	47a0      	blx	r4
  402d42:	1c43      	adds	r3, r0, #1
  402d44:	4602      	mov	r2, r0
  402d46:	d002      	beq.n	402d4e <__sflush_r+0x11a>
  402d48:	89ab      	ldrh	r3, [r5, #12]
  402d4a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402d4c:	e78e      	b.n	402c6c <__sflush_r+0x38>
  402d4e:	f8d8 3000 	ldr.w	r3, [r8]
  402d52:	2b00      	cmp	r3, #0
  402d54:	d0f8      	beq.n	402d48 <__sflush_r+0x114>
  402d56:	2b1d      	cmp	r3, #29
  402d58:	d001      	beq.n	402d5e <__sflush_r+0x12a>
  402d5a:	2b16      	cmp	r3, #22
  402d5c:	d102      	bne.n	402d64 <__sflush_r+0x130>
  402d5e:	f8c8 6000 	str.w	r6, [r8]
  402d62:	e7c3      	b.n	402cec <__sflush_r+0xb8>
  402d64:	89ab      	ldrh	r3, [r5, #12]
  402d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402d6a:	81ab      	strh	r3, [r5, #12]
  402d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402d70:	20400001 	.word	0x20400001

00402d74 <_fflush_r>:
  402d74:	b538      	push	{r3, r4, r5, lr}
  402d76:	460d      	mov	r5, r1
  402d78:	4604      	mov	r4, r0
  402d7a:	b108      	cbz	r0, 402d80 <_fflush_r+0xc>
  402d7c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402d7e:	b1bb      	cbz	r3, 402db0 <_fflush_r+0x3c>
  402d80:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402d84:	b188      	cbz	r0, 402daa <_fflush_r+0x36>
  402d86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402d88:	07db      	lsls	r3, r3, #31
  402d8a:	d401      	bmi.n	402d90 <_fflush_r+0x1c>
  402d8c:	0581      	lsls	r1, r0, #22
  402d8e:	d517      	bpl.n	402dc0 <_fflush_r+0x4c>
  402d90:	4620      	mov	r0, r4
  402d92:	4629      	mov	r1, r5
  402d94:	f7ff ff4e 	bl	402c34 <__sflush_r>
  402d98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402d9a:	07da      	lsls	r2, r3, #31
  402d9c:	4604      	mov	r4, r0
  402d9e:	d402      	bmi.n	402da6 <_fflush_r+0x32>
  402da0:	89ab      	ldrh	r3, [r5, #12]
  402da2:	059b      	lsls	r3, r3, #22
  402da4:	d507      	bpl.n	402db6 <_fflush_r+0x42>
  402da6:	4620      	mov	r0, r4
  402da8:	bd38      	pop	{r3, r4, r5, pc}
  402daa:	4604      	mov	r4, r0
  402dac:	4620      	mov	r0, r4
  402dae:	bd38      	pop	{r3, r4, r5, pc}
  402db0:	f000 f838 	bl	402e24 <__sinit>
  402db4:	e7e4      	b.n	402d80 <_fflush_r+0xc>
  402db6:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402db8:	f000 fbf6 	bl	4035a8 <__retarget_lock_release_recursive>
  402dbc:	4620      	mov	r0, r4
  402dbe:	bd38      	pop	{r3, r4, r5, pc}
  402dc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402dc2:	f000 fbef 	bl	4035a4 <__retarget_lock_acquire_recursive>
  402dc6:	e7e3      	b.n	402d90 <_fflush_r+0x1c>

00402dc8 <_cleanup_r>:
  402dc8:	4901      	ldr	r1, [pc, #4]	; (402dd0 <_cleanup_r+0x8>)
  402dca:	f000 bbaf 	b.w	40352c <_fwalk_reent>
  402dce:	bf00      	nop
  402dd0:	00404591 	.word	0x00404591

00402dd4 <std.isra.0>:
  402dd4:	b510      	push	{r4, lr}
  402dd6:	2300      	movs	r3, #0
  402dd8:	4604      	mov	r4, r0
  402dda:	8181      	strh	r1, [r0, #12]
  402ddc:	81c2      	strh	r2, [r0, #14]
  402dde:	6003      	str	r3, [r0, #0]
  402de0:	6043      	str	r3, [r0, #4]
  402de2:	6083      	str	r3, [r0, #8]
  402de4:	6643      	str	r3, [r0, #100]	; 0x64
  402de6:	6103      	str	r3, [r0, #16]
  402de8:	6143      	str	r3, [r0, #20]
  402dea:	6183      	str	r3, [r0, #24]
  402dec:	4619      	mov	r1, r3
  402dee:	2208      	movs	r2, #8
  402df0:	305c      	adds	r0, #92	; 0x5c
  402df2:	f7fe febb 	bl	401b6c <memset>
  402df6:	4807      	ldr	r0, [pc, #28]	; (402e14 <std.isra.0+0x40>)
  402df8:	4907      	ldr	r1, [pc, #28]	; (402e18 <std.isra.0+0x44>)
  402dfa:	4a08      	ldr	r2, [pc, #32]	; (402e1c <std.isra.0+0x48>)
  402dfc:	4b08      	ldr	r3, [pc, #32]	; (402e20 <std.isra.0+0x4c>)
  402dfe:	6220      	str	r0, [r4, #32]
  402e00:	61e4      	str	r4, [r4, #28]
  402e02:	6261      	str	r1, [r4, #36]	; 0x24
  402e04:	62a2      	str	r2, [r4, #40]	; 0x28
  402e06:	62e3      	str	r3, [r4, #44]	; 0x2c
  402e08:	f104 0058 	add.w	r0, r4, #88	; 0x58
  402e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402e10:	f000 bbc4 	b.w	40359c <__retarget_lock_init_recursive>
  402e14:	004041cd 	.word	0x004041cd
  402e18:	004041f1 	.word	0x004041f1
  402e1c:	0040422d 	.word	0x0040422d
  402e20:	0040424d 	.word	0x0040424d

00402e24 <__sinit>:
  402e24:	b510      	push	{r4, lr}
  402e26:	4604      	mov	r4, r0
  402e28:	4812      	ldr	r0, [pc, #72]	; (402e74 <__sinit+0x50>)
  402e2a:	f000 fbbb 	bl	4035a4 <__retarget_lock_acquire_recursive>
  402e2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402e30:	b9d2      	cbnz	r2, 402e68 <__sinit+0x44>
  402e32:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  402e36:	4810      	ldr	r0, [pc, #64]	; (402e78 <__sinit+0x54>)
  402e38:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  402e3c:	2103      	movs	r1, #3
  402e3e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  402e42:	63e0      	str	r0, [r4, #60]	; 0x3c
  402e44:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  402e48:	6860      	ldr	r0, [r4, #4]
  402e4a:	2104      	movs	r1, #4
  402e4c:	f7ff ffc2 	bl	402dd4 <std.isra.0>
  402e50:	2201      	movs	r2, #1
  402e52:	2109      	movs	r1, #9
  402e54:	68a0      	ldr	r0, [r4, #8]
  402e56:	f7ff ffbd 	bl	402dd4 <std.isra.0>
  402e5a:	2202      	movs	r2, #2
  402e5c:	2112      	movs	r1, #18
  402e5e:	68e0      	ldr	r0, [r4, #12]
  402e60:	f7ff ffb8 	bl	402dd4 <std.isra.0>
  402e64:	2301      	movs	r3, #1
  402e66:	63a3      	str	r3, [r4, #56]	; 0x38
  402e68:	4802      	ldr	r0, [pc, #8]	; (402e74 <__sinit+0x50>)
  402e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402e6e:	f000 bb9b 	b.w	4035a8 <__retarget_lock_release_recursive>
  402e72:	bf00      	nop
  402e74:	204014bc 	.word	0x204014bc
  402e78:	00402dc9 	.word	0x00402dc9

00402e7c <__sfp_lock_acquire>:
  402e7c:	4801      	ldr	r0, [pc, #4]	; (402e84 <__sfp_lock_acquire+0x8>)
  402e7e:	f000 bb91 	b.w	4035a4 <__retarget_lock_acquire_recursive>
  402e82:	bf00      	nop
  402e84:	204014d0 	.word	0x204014d0

00402e88 <__sfp_lock_release>:
  402e88:	4801      	ldr	r0, [pc, #4]	; (402e90 <__sfp_lock_release+0x8>)
  402e8a:	f000 bb8d 	b.w	4035a8 <__retarget_lock_release_recursive>
  402e8e:	bf00      	nop
  402e90:	204014d0 	.word	0x204014d0

00402e94 <__libc_fini_array>:
  402e94:	b538      	push	{r3, r4, r5, lr}
  402e96:	4c0a      	ldr	r4, [pc, #40]	; (402ec0 <__libc_fini_array+0x2c>)
  402e98:	4d0a      	ldr	r5, [pc, #40]	; (402ec4 <__libc_fini_array+0x30>)
  402e9a:	1b64      	subs	r4, r4, r5
  402e9c:	10a4      	asrs	r4, r4, #2
  402e9e:	d00a      	beq.n	402eb6 <__libc_fini_array+0x22>
  402ea0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402ea4:	3b01      	subs	r3, #1
  402ea6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402eaa:	3c01      	subs	r4, #1
  402eac:	f855 3904 	ldr.w	r3, [r5], #-4
  402eb0:	4798      	blx	r3
  402eb2:	2c00      	cmp	r4, #0
  402eb4:	d1f9      	bne.n	402eaa <__libc_fini_array+0x16>
  402eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402eba:	f002 b8c9 	b.w	405050 <_fini>
  402ebe:	bf00      	nop
  402ec0:	00405060 	.word	0x00405060
  402ec4:	0040505c 	.word	0x0040505c

00402ec8 <__fputwc>:
  402ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402ecc:	b082      	sub	sp, #8
  402ece:	4680      	mov	r8, r0
  402ed0:	4689      	mov	r9, r1
  402ed2:	4614      	mov	r4, r2
  402ed4:	f000 fb54 	bl	403580 <__locale_mb_cur_max>
  402ed8:	2801      	cmp	r0, #1
  402eda:	d036      	beq.n	402f4a <__fputwc+0x82>
  402edc:	464a      	mov	r2, r9
  402ede:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402ee2:	a901      	add	r1, sp, #4
  402ee4:	4640      	mov	r0, r8
  402ee6:	f001 fa91 	bl	40440c <_wcrtomb_r>
  402eea:	1c42      	adds	r2, r0, #1
  402eec:	4606      	mov	r6, r0
  402eee:	d025      	beq.n	402f3c <__fputwc+0x74>
  402ef0:	b3a8      	cbz	r0, 402f5e <__fputwc+0x96>
  402ef2:	f89d e004 	ldrb.w	lr, [sp, #4]
  402ef6:	2500      	movs	r5, #0
  402ef8:	f10d 0a04 	add.w	sl, sp, #4
  402efc:	e009      	b.n	402f12 <__fputwc+0x4a>
  402efe:	6823      	ldr	r3, [r4, #0]
  402f00:	1c5a      	adds	r2, r3, #1
  402f02:	6022      	str	r2, [r4, #0]
  402f04:	f883 e000 	strb.w	lr, [r3]
  402f08:	3501      	adds	r5, #1
  402f0a:	42b5      	cmp	r5, r6
  402f0c:	d227      	bcs.n	402f5e <__fputwc+0x96>
  402f0e:	f815 e00a 	ldrb.w	lr, [r5, sl]
  402f12:	68a3      	ldr	r3, [r4, #8]
  402f14:	3b01      	subs	r3, #1
  402f16:	2b00      	cmp	r3, #0
  402f18:	60a3      	str	r3, [r4, #8]
  402f1a:	daf0      	bge.n	402efe <__fputwc+0x36>
  402f1c:	69a7      	ldr	r7, [r4, #24]
  402f1e:	42bb      	cmp	r3, r7
  402f20:	4671      	mov	r1, lr
  402f22:	4622      	mov	r2, r4
  402f24:	4640      	mov	r0, r8
  402f26:	db02      	blt.n	402f2e <__fputwc+0x66>
  402f28:	f1be 0f0a 	cmp.w	lr, #10
  402f2c:	d1e7      	bne.n	402efe <__fputwc+0x36>
  402f2e:	f001 fa15 	bl	40435c <__swbuf_r>
  402f32:	1c43      	adds	r3, r0, #1
  402f34:	d1e8      	bne.n	402f08 <__fputwc+0x40>
  402f36:	b002      	add	sp, #8
  402f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402f3c:	89a3      	ldrh	r3, [r4, #12]
  402f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402f42:	81a3      	strh	r3, [r4, #12]
  402f44:	b002      	add	sp, #8
  402f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402f4a:	f109 33ff 	add.w	r3, r9, #4294967295
  402f4e:	2bfe      	cmp	r3, #254	; 0xfe
  402f50:	d8c4      	bhi.n	402edc <__fputwc+0x14>
  402f52:	fa5f fe89 	uxtb.w	lr, r9
  402f56:	4606      	mov	r6, r0
  402f58:	f88d e004 	strb.w	lr, [sp, #4]
  402f5c:	e7cb      	b.n	402ef6 <__fputwc+0x2e>
  402f5e:	4648      	mov	r0, r9
  402f60:	b002      	add	sp, #8
  402f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402f66:	bf00      	nop

00402f68 <_fputwc_r>:
  402f68:	b530      	push	{r4, r5, lr}
  402f6a:	6e53      	ldr	r3, [r2, #100]	; 0x64
  402f6c:	f013 0f01 	tst.w	r3, #1
  402f70:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402f74:	4614      	mov	r4, r2
  402f76:	b083      	sub	sp, #12
  402f78:	4605      	mov	r5, r0
  402f7a:	b29a      	uxth	r2, r3
  402f7c:	d101      	bne.n	402f82 <_fputwc_r+0x1a>
  402f7e:	0590      	lsls	r0, r2, #22
  402f80:	d51c      	bpl.n	402fbc <_fputwc_r+0x54>
  402f82:	0490      	lsls	r0, r2, #18
  402f84:	d406      	bmi.n	402f94 <_fputwc_r+0x2c>
  402f86:	6e62      	ldr	r2, [r4, #100]	; 0x64
  402f88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402f90:	81a3      	strh	r3, [r4, #12]
  402f92:	6662      	str	r2, [r4, #100]	; 0x64
  402f94:	4628      	mov	r0, r5
  402f96:	4622      	mov	r2, r4
  402f98:	f7ff ff96 	bl	402ec8 <__fputwc>
  402f9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402f9e:	07da      	lsls	r2, r3, #31
  402fa0:	4605      	mov	r5, r0
  402fa2:	d402      	bmi.n	402faa <_fputwc_r+0x42>
  402fa4:	89a3      	ldrh	r3, [r4, #12]
  402fa6:	059b      	lsls	r3, r3, #22
  402fa8:	d502      	bpl.n	402fb0 <_fputwc_r+0x48>
  402faa:	4628      	mov	r0, r5
  402fac:	b003      	add	sp, #12
  402fae:	bd30      	pop	{r4, r5, pc}
  402fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402fb2:	f000 faf9 	bl	4035a8 <__retarget_lock_release_recursive>
  402fb6:	4628      	mov	r0, r5
  402fb8:	b003      	add	sp, #12
  402fba:	bd30      	pop	{r4, r5, pc}
  402fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402fbe:	9101      	str	r1, [sp, #4]
  402fc0:	f000 faf0 	bl	4035a4 <__retarget_lock_acquire_recursive>
  402fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402fc8:	9901      	ldr	r1, [sp, #4]
  402fca:	b29a      	uxth	r2, r3
  402fcc:	e7d9      	b.n	402f82 <_fputwc_r+0x1a>
  402fce:	bf00      	nop

00402fd0 <_malloc_trim_r>:
  402fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402fd2:	4f24      	ldr	r7, [pc, #144]	; (403064 <_malloc_trim_r+0x94>)
  402fd4:	460c      	mov	r4, r1
  402fd6:	4606      	mov	r6, r0
  402fd8:	f000 fee6 	bl	403da8 <__malloc_lock>
  402fdc:	68bb      	ldr	r3, [r7, #8]
  402fde:	685d      	ldr	r5, [r3, #4]
  402fe0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402fe4:	310f      	adds	r1, #15
  402fe6:	f025 0503 	bic.w	r5, r5, #3
  402fea:	4429      	add	r1, r5
  402fec:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402ff0:	f021 010f 	bic.w	r1, r1, #15
  402ff4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  402ff8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402ffc:	db07      	blt.n	40300e <_malloc_trim_r+0x3e>
  402ffe:	2100      	movs	r1, #0
  403000:	4630      	mov	r0, r6
  403002:	f001 f883 	bl	40410c <_sbrk_r>
  403006:	68bb      	ldr	r3, [r7, #8]
  403008:	442b      	add	r3, r5
  40300a:	4298      	cmp	r0, r3
  40300c:	d004      	beq.n	403018 <_malloc_trim_r+0x48>
  40300e:	4630      	mov	r0, r6
  403010:	f000 fed0 	bl	403db4 <__malloc_unlock>
  403014:	2000      	movs	r0, #0
  403016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403018:	4261      	negs	r1, r4
  40301a:	4630      	mov	r0, r6
  40301c:	f001 f876 	bl	40410c <_sbrk_r>
  403020:	3001      	adds	r0, #1
  403022:	d00d      	beq.n	403040 <_malloc_trim_r+0x70>
  403024:	4b10      	ldr	r3, [pc, #64]	; (403068 <_malloc_trim_r+0x98>)
  403026:	68ba      	ldr	r2, [r7, #8]
  403028:	6819      	ldr	r1, [r3, #0]
  40302a:	1b2d      	subs	r5, r5, r4
  40302c:	f045 0501 	orr.w	r5, r5, #1
  403030:	4630      	mov	r0, r6
  403032:	1b09      	subs	r1, r1, r4
  403034:	6055      	str	r5, [r2, #4]
  403036:	6019      	str	r1, [r3, #0]
  403038:	f000 febc 	bl	403db4 <__malloc_unlock>
  40303c:	2001      	movs	r0, #1
  40303e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403040:	2100      	movs	r1, #0
  403042:	4630      	mov	r0, r6
  403044:	f001 f862 	bl	40410c <_sbrk_r>
  403048:	68ba      	ldr	r2, [r7, #8]
  40304a:	1a83      	subs	r3, r0, r2
  40304c:	2b0f      	cmp	r3, #15
  40304e:	ddde      	ble.n	40300e <_malloc_trim_r+0x3e>
  403050:	4c06      	ldr	r4, [pc, #24]	; (40306c <_malloc_trim_r+0x9c>)
  403052:	4905      	ldr	r1, [pc, #20]	; (403068 <_malloc_trim_r+0x98>)
  403054:	6824      	ldr	r4, [r4, #0]
  403056:	f043 0301 	orr.w	r3, r3, #1
  40305a:	1b00      	subs	r0, r0, r4
  40305c:	6053      	str	r3, [r2, #4]
  40305e:	6008      	str	r0, [r1, #0]
  403060:	e7d5      	b.n	40300e <_malloc_trim_r+0x3e>
  403062:	bf00      	nop
  403064:	204005b0 	.word	0x204005b0
  403068:	20401470 	.word	0x20401470
  40306c:	204009b8 	.word	0x204009b8

00403070 <_free_r>:
  403070:	2900      	cmp	r1, #0
  403072:	d044      	beq.n	4030fe <_free_r+0x8e>
  403074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403078:	460d      	mov	r5, r1
  40307a:	4680      	mov	r8, r0
  40307c:	f000 fe94 	bl	403da8 <__malloc_lock>
  403080:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403084:	4969      	ldr	r1, [pc, #420]	; (40322c <_free_r+0x1bc>)
  403086:	f027 0301 	bic.w	r3, r7, #1
  40308a:	f1a5 0408 	sub.w	r4, r5, #8
  40308e:	18e2      	adds	r2, r4, r3
  403090:	688e      	ldr	r6, [r1, #8]
  403092:	6850      	ldr	r0, [r2, #4]
  403094:	42b2      	cmp	r2, r6
  403096:	f020 0003 	bic.w	r0, r0, #3
  40309a:	d05e      	beq.n	40315a <_free_r+0xea>
  40309c:	07fe      	lsls	r6, r7, #31
  40309e:	6050      	str	r0, [r2, #4]
  4030a0:	d40b      	bmi.n	4030ba <_free_r+0x4a>
  4030a2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4030a6:	1be4      	subs	r4, r4, r7
  4030a8:	f101 0e08 	add.w	lr, r1, #8
  4030ac:	68a5      	ldr	r5, [r4, #8]
  4030ae:	4575      	cmp	r5, lr
  4030b0:	443b      	add	r3, r7
  4030b2:	d06d      	beq.n	403190 <_free_r+0x120>
  4030b4:	68e7      	ldr	r7, [r4, #12]
  4030b6:	60ef      	str	r7, [r5, #12]
  4030b8:	60bd      	str	r5, [r7, #8]
  4030ba:	1815      	adds	r5, r2, r0
  4030bc:	686d      	ldr	r5, [r5, #4]
  4030be:	07ed      	lsls	r5, r5, #31
  4030c0:	d53e      	bpl.n	403140 <_free_r+0xd0>
  4030c2:	f043 0201 	orr.w	r2, r3, #1
  4030c6:	6062      	str	r2, [r4, #4]
  4030c8:	50e3      	str	r3, [r4, r3]
  4030ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4030ce:	d217      	bcs.n	403100 <_free_r+0x90>
  4030d0:	08db      	lsrs	r3, r3, #3
  4030d2:	1c58      	adds	r0, r3, #1
  4030d4:	109a      	asrs	r2, r3, #2
  4030d6:	684d      	ldr	r5, [r1, #4]
  4030d8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4030dc:	60a7      	str	r7, [r4, #8]
  4030de:	2301      	movs	r3, #1
  4030e0:	4093      	lsls	r3, r2
  4030e2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4030e6:	432b      	orrs	r3, r5
  4030e8:	3a08      	subs	r2, #8
  4030ea:	60e2      	str	r2, [r4, #12]
  4030ec:	604b      	str	r3, [r1, #4]
  4030ee:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4030f2:	60fc      	str	r4, [r7, #12]
  4030f4:	4640      	mov	r0, r8
  4030f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4030fa:	f000 be5b 	b.w	403db4 <__malloc_unlock>
  4030fe:	4770      	bx	lr
  403100:	0a5a      	lsrs	r2, r3, #9
  403102:	2a04      	cmp	r2, #4
  403104:	d852      	bhi.n	4031ac <_free_r+0x13c>
  403106:	099a      	lsrs	r2, r3, #6
  403108:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40310c:	00ff      	lsls	r7, r7, #3
  40310e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  403112:	19c8      	adds	r0, r1, r7
  403114:	59ca      	ldr	r2, [r1, r7]
  403116:	3808      	subs	r0, #8
  403118:	4290      	cmp	r0, r2
  40311a:	d04f      	beq.n	4031bc <_free_r+0x14c>
  40311c:	6851      	ldr	r1, [r2, #4]
  40311e:	f021 0103 	bic.w	r1, r1, #3
  403122:	428b      	cmp	r3, r1
  403124:	d232      	bcs.n	40318c <_free_r+0x11c>
  403126:	6892      	ldr	r2, [r2, #8]
  403128:	4290      	cmp	r0, r2
  40312a:	d1f7      	bne.n	40311c <_free_r+0xac>
  40312c:	68c3      	ldr	r3, [r0, #12]
  40312e:	60a0      	str	r0, [r4, #8]
  403130:	60e3      	str	r3, [r4, #12]
  403132:	609c      	str	r4, [r3, #8]
  403134:	60c4      	str	r4, [r0, #12]
  403136:	4640      	mov	r0, r8
  403138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40313c:	f000 be3a 	b.w	403db4 <__malloc_unlock>
  403140:	6895      	ldr	r5, [r2, #8]
  403142:	4f3b      	ldr	r7, [pc, #236]	; (403230 <_free_r+0x1c0>)
  403144:	42bd      	cmp	r5, r7
  403146:	4403      	add	r3, r0
  403148:	d040      	beq.n	4031cc <_free_r+0x15c>
  40314a:	68d0      	ldr	r0, [r2, #12]
  40314c:	60e8      	str	r0, [r5, #12]
  40314e:	f043 0201 	orr.w	r2, r3, #1
  403152:	6085      	str	r5, [r0, #8]
  403154:	6062      	str	r2, [r4, #4]
  403156:	50e3      	str	r3, [r4, r3]
  403158:	e7b7      	b.n	4030ca <_free_r+0x5a>
  40315a:	07ff      	lsls	r7, r7, #31
  40315c:	4403      	add	r3, r0
  40315e:	d407      	bmi.n	403170 <_free_r+0x100>
  403160:	f855 2c08 	ldr.w	r2, [r5, #-8]
  403164:	1aa4      	subs	r4, r4, r2
  403166:	4413      	add	r3, r2
  403168:	68a0      	ldr	r0, [r4, #8]
  40316a:	68e2      	ldr	r2, [r4, #12]
  40316c:	60c2      	str	r2, [r0, #12]
  40316e:	6090      	str	r0, [r2, #8]
  403170:	4a30      	ldr	r2, [pc, #192]	; (403234 <_free_r+0x1c4>)
  403172:	6812      	ldr	r2, [r2, #0]
  403174:	f043 0001 	orr.w	r0, r3, #1
  403178:	4293      	cmp	r3, r2
  40317a:	6060      	str	r0, [r4, #4]
  40317c:	608c      	str	r4, [r1, #8]
  40317e:	d3b9      	bcc.n	4030f4 <_free_r+0x84>
  403180:	4b2d      	ldr	r3, [pc, #180]	; (403238 <_free_r+0x1c8>)
  403182:	4640      	mov	r0, r8
  403184:	6819      	ldr	r1, [r3, #0]
  403186:	f7ff ff23 	bl	402fd0 <_malloc_trim_r>
  40318a:	e7b3      	b.n	4030f4 <_free_r+0x84>
  40318c:	4610      	mov	r0, r2
  40318e:	e7cd      	b.n	40312c <_free_r+0xbc>
  403190:	1811      	adds	r1, r2, r0
  403192:	6849      	ldr	r1, [r1, #4]
  403194:	07c9      	lsls	r1, r1, #31
  403196:	d444      	bmi.n	403222 <_free_r+0x1b2>
  403198:	6891      	ldr	r1, [r2, #8]
  40319a:	68d2      	ldr	r2, [r2, #12]
  40319c:	60ca      	str	r2, [r1, #12]
  40319e:	4403      	add	r3, r0
  4031a0:	f043 0001 	orr.w	r0, r3, #1
  4031a4:	6091      	str	r1, [r2, #8]
  4031a6:	6060      	str	r0, [r4, #4]
  4031a8:	50e3      	str	r3, [r4, r3]
  4031aa:	e7a3      	b.n	4030f4 <_free_r+0x84>
  4031ac:	2a14      	cmp	r2, #20
  4031ae:	d816      	bhi.n	4031de <_free_r+0x16e>
  4031b0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4031b4:	00ff      	lsls	r7, r7, #3
  4031b6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4031ba:	e7aa      	b.n	403112 <_free_r+0xa2>
  4031bc:	10aa      	asrs	r2, r5, #2
  4031be:	2301      	movs	r3, #1
  4031c0:	684d      	ldr	r5, [r1, #4]
  4031c2:	4093      	lsls	r3, r2
  4031c4:	432b      	orrs	r3, r5
  4031c6:	604b      	str	r3, [r1, #4]
  4031c8:	4603      	mov	r3, r0
  4031ca:	e7b0      	b.n	40312e <_free_r+0xbe>
  4031cc:	f043 0201 	orr.w	r2, r3, #1
  4031d0:	614c      	str	r4, [r1, #20]
  4031d2:	610c      	str	r4, [r1, #16]
  4031d4:	60e5      	str	r5, [r4, #12]
  4031d6:	60a5      	str	r5, [r4, #8]
  4031d8:	6062      	str	r2, [r4, #4]
  4031da:	50e3      	str	r3, [r4, r3]
  4031dc:	e78a      	b.n	4030f4 <_free_r+0x84>
  4031de:	2a54      	cmp	r2, #84	; 0x54
  4031e0:	d806      	bhi.n	4031f0 <_free_r+0x180>
  4031e2:	0b1a      	lsrs	r2, r3, #12
  4031e4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4031e8:	00ff      	lsls	r7, r7, #3
  4031ea:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4031ee:	e790      	b.n	403112 <_free_r+0xa2>
  4031f0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4031f4:	d806      	bhi.n	403204 <_free_r+0x194>
  4031f6:	0bda      	lsrs	r2, r3, #15
  4031f8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4031fc:	00ff      	lsls	r7, r7, #3
  4031fe:	f102 0577 	add.w	r5, r2, #119	; 0x77
  403202:	e786      	b.n	403112 <_free_r+0xa2>
  403204:	f240 5054 	movw	r0, #1364	; 0x554
  403208:	4282      	cmp	r2, r0
  40320a:	d806      	bhi.n	40321a <_free_r+0x1aa>
  40320c:	0c9a      	lsrs	r2, r3, #18
  40320e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  403212:	00ff      	lsls	r7, r7, #3
  403214:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  403218:	e77b      	b.n	403112 <_free_r+0xa2>
  40321a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40321e:	257e      	movs	r5, #126	; 0x7e
  403220:	e777      	b.n	403112 <_free_r+0xa2>
  403222:	f043 0101 	orr.w	r1, r3, #1
  403226:	6061      	str	r1, [r4, #4]
  403228:	6013      	str	r3, [r2, #0]
  40322a:	e763      	b.n	4030f4 <_free_r+0x84>
  40322c:	204005b0 	.word	0x204005b0
  403230:	204005b8 	.word	0x204005b8
  403234:	204009bc 	.word	0x204009bc
  403238:	204014a0 	.word	0x204014a0

0040323c <__sfvwrite_r>:
  40323c:	6893      	ldr	r3, [r2, #8]
  40323e:	2b00      	cmp	r3, #0
  403240:	d073      	beq.n	40332a <__sfvwrite_r+0xee>
  403242:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403246:	898b      	ldrh	r3, [r1, #12]
  403248:	b083      	sub	sp, #12
  40324a:	460c      	mov	r4, r1
  40324c:	0719      	lsls	r1, r3, #28
  40324e:	9000      	str	r0, [sp, #0]
  403250:	4616      	mov	r6, r2
  403252:	d526      	bpl.n	4032a2 <__sfvwrite_r+0x66>
  403254:	6922      	ldr	r2, [r4, #16]
  403256:	b322      	cbz	r2, 4032a2 <__sfvwrite_r+0x66>
  403258:	f013 0002 	ands.w	r0, r3, #2
  40325c:	6835      	ldr	r5, [r6, #0]
  40325e:	d02c      	beq.n	4032ba <__sfvwrite_r+0x7e>
  403260:	f04f 0900 	mov.w	r9, #0
  403264:	4fb0      	ldr	r7, [pc, #704]	; (403528 <__sfvwrite_r+0x2ec>)
  403266:	46c8      	mov	r8, r9
  403268:	46b2      	mov	sl, r6
  40326a:	45b8      	cmp	r8, r7
  40326c:	4643      	mov	r3, r8
  40326e:	464a      	mov	r2, r9
  403270:	bf28      	it	cs
  403272:	463b      	movcs	r3, r7
  403274:	9800      	ldr	r0, [sp, #0]
  403276:	f1b8 0f00 	cmp.w	r8, #0
  40327a:	d050      	beq.n	40331e <__sfvwrite_r+0xe2>
  40327c:	69e1      	ldr	r1, [r4, #28]
  40327e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403280:	47b0      	blx	r6
  403282:	2800      	cmp	r0, #0
  403284:	dd58      	ble.n	403338 <__sfvwrite_r+0xfc>
  403286:	f8da 3008 	ldr.w	r3, [sl, #8]
  40328a:	1a1b      	subs	r3, r3, r0
  40328c:	4481      	add	r9, r0
  40328e:	eba8 0800 	sub.w	r8, r8, r0
  403292:	f8ca 3008 	str.w	r3, [sl, #8]
  403296:	2b00      	cmp	r3, #0
  403298:	d1e7      	bne.n	40326a <__sfvwrite_r+0x2e>
  40329a:	2000      	movs	r0, #0
  40329c:	b003      	add	sp, #12
  40329e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4032a2:	4621      	mov	r1, r4
  4032a4:	9800      	ldr	r0, [sp, #0]
  4032a6:	f7ff fc49 	bl	402b3c <__swsetup_r>
  4032aa:	2800      	cmp	r0, #0
  4032ac:	f040 8133 	bne.w	403516 <__sfvwrite_r+0x2da>
  4032b0:	89a3      	ldrh	r3, [r4, #12]
  4032b2:	6835      	ldr	r5, [r6, #0]
  4032b4:	f013 0002 	ands.w	r0, r3, #2
  4032b8:	d1d2      	bne.n	403260 <__sfvwrite_r+0x24>
  4032ba:	f013 0901 	ands.w	r9, r3, #1
  4032be:	d145      	bne.n	40334c <__sfvwrite_r+0x110>
  4032c0:	464f      	mov	r7, r9
  4032c2:	9601      	str	r6, [sp, #4]
  4032c4:	b337      	cbz	r7, 403314 <__sfvwrite_r+0xd8>
  4032c6:	059a      	lsls	r2, r3, #22
  4032c8:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4032cc:	f140 8083 	bpl.w	4033d6 <__sfvwrite_r+0x19a>
  4032d0:	4547      	cmp	r7, r8
  4032d2:	46c3      	mov	fp, r8
  4032d4:	f0c0 80ab 	bcc.w	40342e <__sfvwrite_r+0x1f2>
  4032d8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4032dc:	f040 80ac 	bne.w	403438 <__sfvwrite_r+0x1fc>
  4032e0:	6820      	ldr	r0, [r4, #0]
  4032e2:	46ba      	mov	sl, r7
  4032e4:	465a      	mov	r2, fp
  4032e6:	4649      	mov	r1, r9
  4032e8:	f000 fcfa 	bl	403ce0 <memmove>
  4032ec:	68a2      	ldr	r2, [r4, #8]
  4032ee:	6823      	ldr	r3, [r4, #0]
  4032f0:	eba2 0208 	sub.w	r2, r2, r8
  4032f4:	445b      	add	r3, fp
  4032f6:	60a2      	str	r2, [r4, #8]
  4032f8:	6023      	str	r3, [r4, #0]
  4032fa:	9a01      	ldr	r2, [sp, #4]
  4032fc:	6893      	ldr	r3, [r2, #8]
  4032fe:	eba3 030a 	sub.w	r3, r3, sl
  403302:	44d1      	add	r9, sl
  403304:	eba7 070a 	sub.w	r7, r7, sl
  403308:	6093      	str	r3, [r2, #8]
  40330a:	2b00      	cmp	r3, #0
  40330c:	d0c5      	beq.n	40329a <__sfvwrite_r+0x5e>
  40330e:	89a3      	ldrh	r3, [r4, #12]
  403310:	2f00      	cmp	r7, #0
  403312:	d1d8      	bne.n	4032c6 <__sfvwrite_r+0x8a>
  403314:	f8d5 9000 	ldr.w	r9, [r5]
  403318:	686f      	ldr	r7, [r5, #4]
  40331a:	3508      	adds	r5, #8
  40331c:	e7d2      	b.n	4032c4 <__sfvwrite_r+0x88>
  40331e:	f8d5 9000 	ldr.w	r9, [r5]
  403322:	f8d5 8004 	ldr.w	r8, [r5, #4]
  403326:	3508      	adds	r5, #8
  403328:	e79f      	b.n	40326a <__sfvwrite_r+0x2e>
  40332a:	2000      	movs	r0, #0
  40332c:	4770      	bx	lr
  40332e:	4621      	mov	r1, r4
  403330:	9800      	ldr	r0, [sp, #0]
  403332:	f7ff fd1f 	bl	402d74 <_fflush_r>
  403336:	b370      	cbz	r0, 403396 <__sfvwrite_r+0x15a>
  403338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40333c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403340:	f04f 30ff 	mov.w	r0, #4294967295
  403344:	81a3      	strh	r3, [r4, #12]
  403346:	b003      	add	sp, #12
  403348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40334c:	4681      	mov	r9, r0
  40334e:	4633      	mov	r3, r6
  403350:	464e      	mov	r6, r9
  403352:	46a8      	mov	r8, r5
  403354:	469a      	mov	sl, r3
  403356:	464d      	mov	r5, r9
  403358:	b34e      	cbz	r6, 4033ae <__sfvwrite_r+0x172>
  40335a:	b380      	cbz	r0, 4033be <__sfvwrite_r+0x182>
  40335c:	6820      	ldr	r0, [r4, #0]
  40335e:	6923      	ldr	r3, [r4, #16]
  403360:	6962      	ldr	r2, [r4, #20]
  403362:	45b1      	cmp	r9, r6
  403364:	46cb      	mov	fp, r9
  403366:	bf28      	it	cs
  403368:	46b3      	movcs	fp, r6
  40336a:	4298      	cmp	r0, r3
  40336c:	465f      	mov	r7, fp
  40336e:	d904      	bls.n	40337a <__sfvwrite_r+0x13e>
  403370:	68a3      	ldr	r3, [r4, #8]
  403372:	4413      	add	r3, r2
  403374:	459b      	cmp	fp, r3
  403376:	f300 80a6 	bgt.w	4034c6 <__sfvwrite_r+0x28a>
  40337a:	4593      	cmp	fp, r2
  40337c:	db4b      	blt.n	403416 <__sfvwrite_r+0x1da>
  40337e:	4613      	mov	r3, r2
  403380:	6a67      	ldr	r7, [r4, #36]	; 0x24
  403382:	69e1      	ldr	r1, [r4, #28]
  403384:	9800      	ldr	r0, [sp, #0]
  403386:	462a      	mov	r2, r5
  403388:	47b8      	blx	r7
  40338a:	1e07      	subs	r7, r0, #0
  40338c:	ddd4      	ble.n	403338 <__sfvwrite_r+0xfc>
  40338e:	ebb9 0907 	subs.w	r9, r9, r7
  403392:	d0cc      	beq.n	40332e <__sfvwrite_r+0xf2>
  403394:	2001      	movs	r0, #1
  403396:	f8da 3008 	ldr.w	r3, [sl, #8]
  40339a:	1bdb      	subs	r3, r3, r7
  40339c:	443d      	add	r5, r7
  40339e:	1bf6      	subs	r6, r6, r7
  4033a0:	f8ca 3008 	str.w	r3, [sl, #8]
  4033a4:	2b00      	cmp	r3, #0
  4033a6:	f43f af78 	beq.w	40329a <__sfvwrite_r+0x5e>
  4033aa:	2e00      	cmp	r6, #0
  4033ac:	d1d5      	bne.n	40335a <__sfvwrite_r+0x11e>
  4033ae:	f108 0308 	add.w	r3, r8, #8
  4033b2:	e913 0060 	ldmdb	r3, {r5, r6}
  4033b6:	4698      	mov	r8, r3
  4033b8:	3308      	adds	r3, #8
  4033ba:	2e00      	cmp	r6, #0
  4033bc:	d0f9      	beq.n	4033b2 <__sfvwrite_r+0x176>
  4033be:	4632      	mov	r2, r6
  4033c0:	210a      	movs	r1, #10
  4033c2:	4628      	mov	r0, r5
  4033c4:	f000 fc3c 	bl	403c40 <memchr>
  4033c8:	2800      	cmp	r0, #0
  4033ca:	f000 80a1 	beq.w	403510 <__sfvwrite_r+0x2d4>
  4033ce:	3001      	adds	r0, #1
  4033d0:	eba0 0905 	sub.w	r9, r0, r5
  4033d4:	e7c2      	b.n	40335c <__sfvwrite_r+0x120>
  4033d6:	6820      	ldr	r0, [r4, #0]
  4033d8:	6923      	ldr	r3, [r4, #16]
  4033da:	4298      	cmp	r0, r3
  4033dc:	d802      	bhi.n	4033e4 <__sfvwrite_r+0x1a8>
  4033de:	6963      	ldr	r3, [r4, #20]
  4033e0:	429f      	cmp	r7, r3
  4033e2:	d25d      	bcs.n	4034a0 <__sfvwrite_r+0x264>
  4033e4:	45b8      	cmp	r8, r7
  4033e6:	bf28      	it	cs
  4033e8:	46b8      	movcs	r8, r7
  4033ea:	4642      	mov	r2, r8
  4033ec:	4649      	mov	r1, r9
  4033ee:	f000 fc77 	bl	403ce0 <memmove>
  4033f2:	68a3      	ldr	r3, [r4, #8]
  4033f4:	6822      	ldr	r2, [r4, #0]
  4033f6:	eba3 0308 	sub.w	r3, r3, r8
  4033fa:	4442      	add	r2, r8
  4033fc:	60a3      	str	r3, [r4, #8]
  4033fe:	6022      	str	r2, [r4, #0]
  403400:	b10b      	cbz	r3, 403406 <__sfvwrite_r+0x1ca>
  403402:	46c2      	mov	sl, r8
  403404:	e779      	b.n	4032fa <__sfvwrite_r+0xbe>
  403406:	4621      	mov	r1, r4
  403408:	9800      	ldr	r0, [sp, #0]
  40340a:	f7ff fcb3 	bl	402d74 <_fflush_r>
  40340e:	2800      	cmp	r0, #0
  403410:	d192      	bne.n	403338 <__sfvwrite_r+0xfc>
  403412:	46c2      	mov	sl, r8
  403414:	e771      	b.n	4032fa <__sfvwrite_r+0xbe>
  403416:	465a      	mov	r2, fp
  403418:	4629      	mov	r1, r5
  40341a:	f000 fc61 	bl	403ce0 <memmove>
  40341e:	68a2      	ldr	r2, [r4, #8]
  403420:	6823      	ldr	r3, [r4, #0]
  403422:	eba2 020b 	sub.w	r2, r2, fp
  403426:	445b      	add	r3, fp
  403428:	60a2      	str	r2, [r4, #8]
  40342a:	6023      	str	r3, [r4, #0]
  40342c:	e7af      	b.n	40338e <__sfvwrite_r+0x152>
  40342e:	6820      	ldr	r0, [r4, #0]
  403430:	46b8      	mov	r8, r7
  403432:	46ba      	mov	sl, r7
  403434:	46bb      	mov	fp, r7
  403436:	e755      	b.n	4032e4 <__sfvwrite_r+0xa8>
  403438:	6962      	ldr	r2, [r4, #20]
  40343a:	6820      	ldr	r0, [r4, #0]
  40343c:	6921      	ldr	r1, [r4, #16]
  40343e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  403442:	eba0 0a01 	sub.w	sl, r0, r1
  403446:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40344a:	f10a 0001 	add.w	r0, sl, #1
  40344e:	ea4f 0868 	mov.w	r8, r8, asr #1
  403452:	4438      	add	r0, r7
  403454:	4540      	cmp	r0, r8
  403456:	4642      	mov	r2, r8
  403458:	bf84      	itt	hi
  40345a:	4680      	movhi	r8, r0
  40345c:	4642      	movhi	r2, r8
  40345e:	055b      	lsls	r3, r3, #21
  403460:	d544      	bpl.n	4034ec <__sfvwrite_r+0x2b0>
  403462:	4611      	mov	r1, r2
  403464:	9800      	ldr	r0, [sp, #0]
  403466:	f000 f921 	bl	4036ac <_malloc_r>
  40346a:	4683      	mov	fp, r0
  40346c:	2800      	cmp	r0, #0
  40346e:	d055      	beq.n	40351c <__sfvwrite_r+0x2e0>
  403470:	4652      	mov	r2, sl
  403472:	6921      	ldr	r1, [r4, #16]
  403474:	f7fe fae0 	bl	401a38 <memcpy>
  403478:	89a3      	ldrh	r3, [r4, #12]
  40347a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40347e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403482:	81a3      	strh	r3, [r4, #12]
  403484:	eb0b 000a 	add.w	r0, fp, sl
  403488:	eba8 030a 	sub.w	r3, r8, sl
  40348c:	f8c4 b010 	str.w	fp, [r4, #16]
  403490:	f8c4 8014 	str.w	r8, [r4, #20]
  403494:	6020      	str	r0, [r4, #0]
  403496:	60a3      	str	r3, [r4, #8]
  403498:	46b8      	mov	r8, r7
  40349a:	46ba      	mov	sl, r7
  40349c:	46bb      	mov	fp, r7
  40349e:	e721      	b.n	4032e4 <__sfvwrite_r+0xa8>
  4034a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4034a4:	42b9      	cmp	r1, r7
  4034a6:	bf28      	it	cs
  4034a8:	4639      	movcs	r1, r7
  4034aa:	464a      	mov	r2, r9
  4034ac:	fb91 f1f3 	sdiv	r1, r1, r3
  4034b0:	9800      	ldr	r0, [sp, #0]
  4034b2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4034b4:	fb03 f301 	mul.w	r3, r3, r1
  4034b8:	69e1      	ldr	r1, [r4, #28]
  4034ba:	47b0      	blx	r6
  4034bc:	f1b0 0a00 	subs.w	sl, r0, #0
  4034c0:	f73f af1b 	bgt.w	4032fa <__sfvwrite_r+0xbe>
  4034c4:	e738      	b.n	403338 <__sfvwrite_r+0xfc>
  4034c6:	461a      	mov	r2, r3
  4034c8:	4629      	mov	r1, r5
  4034ca:	9301      	str	r3, [sp, #4]
  4034cc:	f000 fc08 	bl	403ce0 <memmove>
  4034d0:	6822      	ldr	r2, [r4, #0]
  4034d2:	9b01      	ldr	r3, [sp, #4]
  4034d4:	9800      	ldr	r0, [sp, #0]
  4034d6:	441a      	add	r2, r3
  4034d8:	6022      	str	r2, [r4, #0]
  4034da:	4621      	mov	r1, r4
  4034dc:	f7ff fc4a 	bl	402d74 <_fflush_r>
  4034e0:	9b01      	ldr	r3, [sp, #4]
  4034e2:	2800      	cmp	r0, #0
  4034e4:	f47f af28 	bne.w	403338 <__sfvwrite_r+0xfc>
  4034e8:	461f      	mov	r7, r3
  4034ea:	e750      	b.n	40338e <__sfvwrite_r+0x152>
  4034ec:	9800      	ldr	r0, [sp, #0]
  4034ee:	f000 fc67 	bl	403dc0 <_realloc_r>
  4034f2:	4683      	mov	fp, r0
  4034f4:	2800      	cmp	r0, #0
  4034f6:	d1c5      	bne.n	403484 <__sfvwrite_r+0x248>
  4034f8:	9d00      	ldr	r5, [sp, #0]
  4034fa:	6921      	ldr	r1, [r4, #16]
  4034fc:	4628      	mov	r0, r5
  4034fe:	f7ff fdb7 	bl	403070 <_free_r>
  403502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403506:	220c      	movs	r2, #12
  403508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40350c:	602a      	str	r2, [r5, #0]
  40350e:	e715      	b.n	40333c <__sfvwrite_r+0x100>
  403510:	f106 0901 	add.w	r9, r6, #1
  403514:	e722      	b.n	40335c <__sfvwrite_r+0x120>
  403516:	f04f 30ff 	mov.w	r0, #4294967295
  40351a:	e6bf      	b.n	40329c <__sfvwrite_r+0x60>
  40351c:	9a00      	ldr	r2, [sp, #0]
  40351e:	230c      	movs	r3, #12
  403520:	6013      	str	r3, [r2, #0]
  403522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403526:	e709      	b.n	40333c <__sfvwrite_r+0x100>
  403528:	7ffffc00 	.word	0x7ffffc00

0040352c <_fwalk_reent>:
  40352c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403530:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  403534:	d01f      	beq.n	403576 <_fwalk_reent+0x4a>
  403536:	4688      	mov	r8, r1
  403538:	4606      	mov	r6, r0
  40353a:	f04f 0900 	mov.w	r9, #0
  40353e:	687d      	ldr	r5, [r7, #4]
  403540:	68bc      	ldr	r4, [r7, #8]
  403542:	3d01      	subs	r5, #1
  403544:	d411      	bmi.n	40356a <_fwalk_reent+0x3e>
  403546:	89a3      	ldrh	r3, [r4, #12]
  403548:	2b01      	cmp	r3, #1
  40354a:	f105 35ff 	add.w	r5, r5, #4294967295
  40354e:	d908      	bls.n	403562 <_fwalk_reent+0x36>
  403550:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  403554:	3301      	adds	r3, #1
  403556:	4621      	mov	r1, r4
  403558:	4630      	mov	r0, r6
  40355a:	d002      	beq.n	403562 <_fwalk_reent+0x36>
  40355c:	47c0      	blx	r8
  40355e:	ea49 0900 	orr.w	r9, r9, r0
  403562:	1c6b      	adds	r3, r5, #1
  403564:	f104 0468 	add.w	r4, r4, #104	; 0x68
  403568:	d1ed      	bne.n	403546 <_fwalk_reent+0x1a>
  40356a:	683f      	ldr	r7, [r7, #0]
  40356c:	2f00      	cmp	r7, #0
  40356e:	d1e6      	bne.n	40353e <_fwalk_reent+0x12>
  403570:	4648      	mov	r0, r9
  403572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403576:	46b9      	mov	r9, r7
  403578:	4648      	mov	r0, r9
  40357a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40357e:	bf00      	nop

00403580 <__locale_mb_cur_max>:
  403580:	4b04      	ldr	r3, [pc, #16]	; (403594 <__locale_mb_cur_max+0x14>)
  403582:	4a05      	ldr	r2, [pc, #20]	; (403598 <__locale_mb_cur_max+0x18>)
  403584:	681b      	ldr	r3, [r3, #0]
  403586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  403588:	2b00      	cmp	r3, #0
  40358a:	bf08      	it	eq
  40358c:	4613      	moveq	r3, r2
  40358e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  403592:	4770      	bx	lr
  403594:	20400010 	.word	0x20400010
  403598:	20400444 	.word	0x20400444

0040359c <__retarget_lock_init_recursive>:
  40359c:	4770      	bx	lr
  40359e:	bf00      	nop

004035a0 <__retarget_lock_close_recursive>:
  4035a0:	4770      	bx	lr
  4035a2:	bf00      	nop

004035a4 <__retarget_lock_acquire_recursive>:
  4035a4:	4770      	bx	lr
  4035a6:	bf00      	nop

004035a8 <__retarget_lock_release_recursive>:
  4035a8:	4770      	bx	lr
  4035aa:	bf00      	nop

004035ac <__swhatbuf_r>:
  4035ac:	b570      	push	{r4, r5, r6, lr}
  4035ae:	460c      	mov	r4, r1
  4035b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4035b4:	2900      	cmp	r1, #0
  4035b6:	b090      	sub	sp, #64	; 0x40
  4035b8:	4615      	mov	r5, r2
  4035ba:	461e      	mov	r6, r3
  4035bc:	db14      	blt.n	4035e8 <__swhatbuf_r+0x3c>
  4035be:	aa01      	add	r2, sp, #4
  4035c0:	f001 f848 	bl	404654 <_fstat_r>
  4035c4:	2800      	cmp	r0, #0
  4035c6:	db0f      	blt.n	4035e8 <__swhatbuf_r+0x3c>
  4035c8:	9a02      	ldr	r2, [sp, #8]
  4035ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4035ce:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4035d2:	fab2 f282 	clz	r2, r2
  4035d6:	0952      	lsrs	r2, r2, #5
  4035d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4035dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4035e0:	6032      	str	r2, [r6, #0]
  4035e2:	602b      	str	r3, [r5, #0]
  4035e4:	b010      	add	sp, #64	; 0x40
  4035e6:	bd70      	pop	{r4, r5, r6, pc}
  4035e8:	89a2      	ldrh	r2, [r4, #12]
  4035ea:	2300      	movs	r3, #0
  4035ec:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4035f0:	6033      	str	r3, [r6, #0]
  4035f2:	d004      	beq.n	4035fe <__swhatbuf_r+0x52>
  4035f4:	2240      	movs	r2, #64	; 0x40
  4035f6:	4618      	mov	r0, r3
  4035f8:	602a      	str	r2, [r5, #0]
  4035fa:	b010      	add	sp, #64	; 0x40
  4035fc:	bd70      	pop	{r4, r5, r6, pc}
  4035fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403602:	602b      	str	r3, [r5, #0]
  403604:	b010      	add	sp, #64	; 0x40
  403606:	bd70      	pop	{r4, r5, r6, pc}

00403608 <__smakebuf_r>:
  403608:	898a      	ldrh	r2, [r1, #12]
  40360a:	0792      	lsls	r2, r2, #30
  40360c:	460b      	mov	r3, r1
  40360e:	d506      	bpl.n	40361e <__smakebuf_r+0x16>
  403610:	f101 0243 	add.w	r2, r1, #67	; 0x43
  403614:	2101      	movs	r1, #1
  403616:	601a      	str	r2, [r3, #0]
  403618:	611a      	str	r2, [r3, #16]
  40361a:	6159      	str	r1, [r3, #20]
  40361c:	4770      	bx	lr
  40361e:	b5f0      	push	{r4, r5, r6, r7, lr}
  403620:	b083      	sub	sp, #12
  403622:	ab01      	add	r3, sp, #4
  403624:	466a      	mov	r2, sp
  403626:	460c      	mov	r4, r1
  403628:	4606      	mov	r6, r0
  40362a:	f7ff ffbf 	bl	4035ac <__swhatbuf_r>
  40362e:	9900      	ldr	r1, [sp, #0]
  403630:	4605      	mov	r5, r0
  403632:	4630      	mov	r0, r6
  403634:	f000 f83a 	bl	4036ac <_malloc_r>
  403638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40363c:	b1d8      	cbz	r0, 403676 <__smakebuf_r+0x6e>
  40363e:	9a01      	ldr	r2, [sp, #4]
  403640:	4f15      	ldr	r7, [pc, #84]	; (403698 <__smakebuf_r+0x90>)
  403642:	9900      	ldr	r1, [sp, #0]
  403644:	63f7      	str	r7, [r6, #60]	; 0x3c
  403646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40364a:	81a3      	strh	r3, [r4, #12]
  40364c:	6020      	str	r0, [r4, #0]
  40364e:	6120      	str	r0, [r4, #16]
  403650:	6161      	str	r1, [r4, #20]
  403652:	b91a      	cbnz	r2, 40365c <__smakebuf_r+0x54>
  403654:	432b      	orrs	r3, r5
  403656:	81a3      	strh	r3, [r4, #12]
  403658:	b003      	add	sp, #12
  40365a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40365c:	4630      	mov	r0, r6
  40365e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403662:	f001 f80b 	bl	40467c <_isatty_r>
  403666:	b1a0      	cbz	r0, 403692 <__smakebuf_r+0x8a>
  403668:	89a3      	ldrh	r3, [r4, #12]
  40366a:	f023 0303 	bic.w	r3, r3, #3
  40366e:	f043 0301 	orr.w	r3, r3, #1
  403672:	b21b      	sxth	r3, r3
  403674:	e7ee      	b.n	403654 <__smakebuf_r+0x4c>
  403676:	059a      	lsls	r2, r3, #22
  403678:	d4ee      	bmi.n	403658 <__smakebuf_r+0x50>
  40367a:	f023 0303 	bic.w	r3, r3, #3
  40367e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403682:	f043 0302 	orr.w	r3, r3, #2
  403686:	2101      	movs	r1, #1
  403688:	81a3      	strh	r3, [r4, #12]
  40368a:	6022      	str	r2, [r4, #0]
  40368c:	6122      	str	r2, [r4, #16]
  40368e:	6161      	str	r1, [r4, #20]
  403690:	e7e2      	b.n	403658 <__smakebuf_r+0x50>
  403692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403696:	e7dd      	b.n	403654 <__smakebuf_r+0x4c>
  403698:	00402dc9 	.word	0x00402dc9

0040369c <malloc>:
  40369c:	4b02      	ldr	r3, [pc, #8]	; (4036a8 <malloc+0xc>)
  40369e:	4601      	mov	r1, r0
  4036a0:	6818      	ldr	r0, [r3, #0]
  4036a2:	f000 b803 	b.w	4036ac <_malloc_r>
  4036a6:	bf00      	nop
  4036a8:	20400010 	.word	0x20400010

004036ac <_malloc_r>:
  4036ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4036b0:	f101 060b 	add.w	r6, r1, #11
  4036b4:	2e16      	cmp	r6, #22
  4036b6:	b083      	sub	sp, #12
  4036b8:	4605      	mov	r5, r0
  4036ba:	f240 809e 	bls.w	4037fa <_malloc_r+0x14e>
  4036be:	f036 0607 	bics.w	r6, r6, #7
  4036c2:	f100 80bd 	bmi.w	403840 <_malloc_r+0x194>
  4036c6:	42b1      	cmp	r1, r6
  4036c8:	f200 80ba 	bhi.w	403840 <_malloc_r+0x194>
  4036cc:	f000 fb6c 	bl	403da8 <__malloc_lock>
  4036d0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4036d4:	f0c0 8293 	bcc.w	403bfe <_malloc_r+0x552>
  4036d8:	0a73      	lsrs	r3, r6, #9
  4036da:	f000 80b8 	beq.w	40384e <_malloc_r+0x1a2>
  4036de:	2b04      	cmp	r3, #4
  4036e0:	f200 8179 	bhi.w	4039d6 <_malloc_r+0x32a>
  4036e4:	09b3      	lsrs	r3, r6, #6
  4036e6:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4036ea:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4036ee:	00c3      	lsls	r3, r0, #3
  4036f0:	4fbf      	ldr	r7, [pc, #764]	; (4039f0 <_malloc_r+0x344>)
  4036f2:	443b      	add	r3, r7
  4036f4:	f1a3 0108 	sub.w	r1, r3, #8
  4036f8:	685c      	ldr	r4, [r3, #4]
  4036fa:	42a1      	cmp	r1, r4
  4036fc:	d106      	bne.n	40370c <_malloc_r+0x60>
  4036fe:	e00c      	b.n	40371a <_malloc_r+0x6e>
  403700:	2a00      	cmp	r2, #0
  403702:	f280 80aa 	bge.w	40385a <_malloc_r+0x1ae>
  403706:	68e4      	ldr	r4, [r4, #12]
  403708:	42a1      	cmp	r1, r4
  40370a:	d006      	beq.n	40371a <_malloc_r+0x6e>
  40370c:	6863      	ldr	r3, [r4, #4]
  40370e:	f023 0303 	bic.w	r3, r3, #3
  403712:	1b9a      	subs	r2, r3, r6
  403714:	2a0f      	cmp	r2, #15
  403716:	ddf3      	ble.n	403700 <_malloc_r+0x54>
  403718:	4670      	mov	r0, lr
  40371a:	693c      	ldr	r4, [r7, #16]
  40371c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403a04 <_malloc_r+0x358>
  403720:	4574      	cmp	r4, lr
  403722:	f000 81ab 	beq.w	403a7c <_malloc_r+0x3d0>
  403726:	6863      	ldr	r3, [r4, #4]
  403728:	f023 0303 	bic.w	r3, r3, #3
  40372c:	1b9a      	subs	r2, r3, r6
  40372e:	2a0f      	cmp	r2, #15
  403730:	f300 8190 	bgt.w	403a54 <_malloc_r+0x3a8>
  403734:	2a00      	cmp	r2, #0
  403736:	f8c7 e014 	str.w	lr, [r7, #20]
  40373a:	f8c7 e010 	str.w	lr, [r7, #16]
  40373e:	f280 809d 	bge.w	40387c <_malloc_r+0x1d0>
  403742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403746:	f080 8161 	bcs.w	403a0c <_malloc_r+0x360>
  40374a:	08db      	lsrs	r3, r3, #3
  40374c:	f103 0c01 	add.w	ip, r3, #1
  403750:	1099      	asrs	r1, r3, #2
  403752:	687a      	ldr	r2, [r7, #4]
  403754:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403758:	f8c4 8008 	str.w	r8, [r4, #8]
  40375c:	2301      	movs	r3, #1
  40375e:	408b      	lsls	r3, r1
  403760:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403764:	4313      	orrs	r3, r2
  403766:	3908      	subs	r1, #8
  403768:	60e1      	str	r1, [r4, #12]
  40376a:	607b      	str	r3, [r7, #4]
  40376c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403770:	f8c8 400c 	str.w	r4, [r8, #12]
  403774:	1082      	asrs	r2, r0, #2
  403776:	2401      	movs	r4, #1
  403778:	4094      	lsls	r4, r2
  40377a:	429c      	cmp	r4, r3
  40377c:	f200 808b 	bhi.w	403896 <_malloc_r+0x1ea>
  403780:	421c      	tst	r4, r3
  403782:	d106      	bne.n	403792 <_malloc_r+0xe6>
  403784:	f020 0003 	bic.w	r0, r0, #3
  403788:	0064      	lsls	r4, r4, #1
  40378a:	421c      	tst	r4, r3
  40378c:	f100 0004 	add.w	r0, r0, #4
  403790:	d0fa      	beq.n	403788 <_malloc_r+0xdc>
  403792:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403796:	46cc      	mov	ip, r9
  403798:	4680      	mov	r8, r0
  40379a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40379e:	459c      	cmp	ip, r3
  4037a0:	d107      	bne.n	4037b2 <_malloc_r+0x106>
  4037a2:	e16d      	b.n	403a80 <_malloc_r+0x3d4>
  4037a4:	2a00      	cmp	r2, #0
  4037a6:	f280 817b 	bge.w	403aa0 <_malloc_r+0x3f4>
  4037aa:	68db      	ldr	r3, [r3, #12]
  4037ac:	459c      	cmp	ip, r3
  4037ae:	f000 8167 	beq.w	403a80 <_malloc_r+0x3d4>
  4037b2:	6859      	ldr	r1, [r3, #4]
  4037b4:	f021 0103 	bic.w	r1, r1, #3
  4037b8:	1b8a      	subs	r2, r1, r6
  4037ba:	2a0f      	cmp	r2, #15
  4037bc:	ddf2      	ble.n	4037a4 <_malloc_r+0xf8>
  4037be:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4037c2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4037c6:	9300      	str	r3, [sp, #0]
  4037c8:	199c      	adds	r4, r3, r6
  4037ca:	4628      	mov	r0, r5
  4037cc:	f046 0601 	orr.w	r6, r6, #1
  4037d0:	f042 0501 	orr.w	r5, r2, #1
  4037d4:	605e      	str	r6, [r3, #4]
  4037d6:	f8c8 c00c 	str.w	ip, [r8, #12]
  4037da:	f8cc 8008 	str.w	r8, [ip, #8]
  4037de:	617c      	str	r4, [r7, #20]
  4037e0:	613c      	str	r4, [r7, #16]
  4037e2:	f8c4 e00c 	str.w	lr, [r4, #12]
  4037e6:	f8c4 e008 	str.w	lr, [r4, #8]
  4037ea:	6065      	str	r5, [r4, #4]
  4037ec:	505a      	str	r2, [r3, r1]
  4037ee:	f000 fae1 	bl	403db4 <__malloc_unlock>
  4037f2:	9b00      	ldr	r3, [sp, #0]
  4037f4:	f103 0408 	add.w	r4, r3, #8
  4037f8:	e01e      	b.n	403838 <_malloc_r+0x18c>
  4037fa:	2910      	cmp	r1, #16
  4037fc:	d820      	bhi.n	403840 <_malloc_r+0x194>
  4037fe:	f000 fad3 	bl	403da8 <__malloc_lock>
  403802:	2610      	movs	r6, #16
  403804:	2318      	movs	r3, #24
  403806:	2002      	movs	r0, #2
  403808:	4f79      	ldr	r7, [pc, #484]	; (4039f0 <_malloc_r+0x344>)
  40380a:	443b      	add	r3, r7
  40380c:	f1a3 0208 	sub.w	r2, r3, #8
  403810:	685c      	ldr	r4, [r3, #4]
  403812:	4294      	cmp	r4, r2
  403814:	f000 813d 	beq.w	403a92 <_malloc_r+0x3e6>
  403818:	6863      	ldr	r3, [r4, #4]
  40381a:	68e1      	ldr	r1, [r4, #12]
  40381c:	68a6      	ldr	r6, [r4, #8]
  40381e:	f023 0303 	bic.w	r3, r3, #3
  403822:	4423      	add	r3, r4
  403824:	4628      	mov	r0, r5
  403826:	685a      	ldr	r2, [r3, #4]
  403828:	60f1      	str	r1, [r6, #12]
  40382a:	f042 0201 	orr.w	r2, r2, #1
  40382e:	608e      	str	r6, [r1, #8]
  403830:	605a      	str	r2, [r3, #4]
  403832:	f000 fabf 	bl	403db4 <__malloc_unlock>
  403836:	3408      	adds	r4, #8
  403838:	4620      	mov	r0, r4
  40383a:	b003      	add	sp, #12
  40383c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403840:	2400      	movs	r4, #0
  403842:	230c      	movs	r3, #12
  403844:	4620      	mov	r0, r4
  403846:	602b      	str	r3, [r5, #0]
  403848:	b003      	add	sp, #12
  40384a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40384e:	2040      	movs	r0, #64	; 0x40
  403850:	f44f 7300 	mov.w	r3, #512	; 0x200
  403854:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403858:	e74a      	b.n	4036f0 <_malloc_r+0x44>
  40385a:	4423      	add	r3, r4
  40385c:	68e1      	ldr	r1, [r4, #12]
  40385e:	685a      	ldr	r2, [r3, #4]
  403860:	68a6      	ldr	r6, [r4, #8]
  403862:	f042 0201 	orr.w	r2, r2, #1
  403866:	60f1      	str	r1, [r6, #12]
  403868:	4628      	mov	r0, r5
  40386a:	608e      	str	r6, [r1, #8]
  40386c:	605a      	str	r2, [r3, #4]
  40386e:	f000 faa1 	bl	403db4 <__malloc_unlock>
  403872:	3408      	adds	r4, #8
  403874:	4620      	mov	r0, r4
  403876:	b003      	add	sp, #12
  403878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40387c:	4423      	add	r3, r4
  40387e:	4628      	mov	r0, r5
  403880:	685a      	ldr	r2, [r3, #4]
  403882:	f042 0201 	orr.w	r2, r2, #1
  403886:	605a      	str	r2, [r3, #4]
  403888:	f000 fa94 	bl	403db4 <__malloc_unlock>
  40388c:	3408      	adds	r4, #8
  40388e:	4620      	mov	r0, r4
  403890:	b003      	add	sp, #12
  403892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403896:	68bc      	ldr	r4, [r7, #8]
  403898:	6863      	ldr	r3, [r4, #4]
  40389a:	f023 0803 	bic.w	r8, r3, #3
  40389e:	45b0      	cmp	r8, r6
  4038a0:	d304      	bcc.n	4038ac <_malloc_r+0x200>
  4038a2:	eba8 0306 	sub.w	r3, r8, r6
  4038a6:	2b0f      	cmp	r3, #15
  4038a8:	f300 8085 	bgt.w	4039b6 <_malloc_r+0x30a>
  4038ac:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403a08 <_malloc_r+0x35c>
  4038b0:	4b50      	ldr	r3, [pc, #320]	; (4039f4 <_malloc_r+0x348>)
  4038b2:	f8d9 2000 	ldr.w	r2, [r9]
  4038b6:	681b      	ldr	r3, [r3, #0]
  4038b8:	3201      	adds	r2, #1
  4038ba:	4433      	add	r3, r6
  4038bc:	eb04 0a08 	add.w	sl, r4, r8
  4038c0:	f000 8155 	beq.w	403b6e <_malloc_r+0x4c2>
  4038c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4038c8:	330f      	adds	r3, #15
  4038ca:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4038ce:	f02b 0b0f 	bic.w	fp, fp, #15
  4038d2:	4659      	mov	r1, fp
  4038d4:	4628      	mov	r0, r5
  4038d6:	f000 fc19 	bl	40410c <_sbrk_r>
  4038da:	1c41      	adds	r1, r0, #1
  4038dc:	4602      	mov	r2, r0
  4038de:	f000 80fc 	beq.w	403ada <_malloc_r+0x42e>
  4038e2:	4582      	cmp	sl, r0
  4038e4:	f200 80f7 	bhi.w	403ad6 <_malloc_r+0x42a>
  4038e8:	4b43      	ldr	r3, [pc, #268]	; (4039f8 <_malloc_r+0x34c>)
  4038ea:	6819      	ldr	r1, [r3, #0]
  4038ec:	4459      	add	r1, fp
  4038ee:	6019      	str	r1, [r3, #0]
  4038f0:	f000 814d 	beq.w	403b8e <_malloc_r+0x4e2>
  4038f4:	f8d9 0000 	ldr.w	r0, [r9]
  4038f8:	3001      	adds	r0, #1
  4038fa:	bf1b      	ittet	ne
  4038fc:	eba2 0a0a 	subne.w	sl, r2, sl
  403900:	4451      	addne	r1, sl
  403902:	f8c9 2000 	streq.w	r2, [r9]
  403906:	6019      	strne	r1, [r3, #0]
  403908:	f012 0107 	ands.w	r1, r2, #7
  40390c:	f000 8115 	beq.w	403b3a <_malloc_r+0x48e>
  403910:	f1c1 0008 	rsb	r0, r1, #8
  403914:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403918:	4402      	add	r2, r0
  40391a:	3108      	adds	r1, #8
  40391c:	eb02 090b 	add.w	r9, r2, fp
  403920:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403924:	eba1 0909 	sub.w	r9, r1, r9
  403928:	4649      	mov	r1, r9
  40392a:	4628      	mov	r0, r5
  40392c:	9301      	str	r3, [sp, #4]
  40392e:	9200      	str	r2, [sp, #0]
  403930:	f000 fbec 	bl	40410c <_sbrk_r>
  403934:	1c43      	adds	r3, r0, #1
  403936:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40393a:	f000 8143 	beq.w	403bc4 <_malloc_r+0x518>
  40393e:	1a80      	subs	r0, r0, r2
  403940:	4448      	add	r0, r9
  403942:	f040 0001 	orr.w	r0, r0, #1
  403946:	6819      	ldr	r1, [r3, #0]
  403948:	60ba      	str	r2, [r7, #8]
  40394a:	4449      	add	r1, r9
  40394c:	42bc      	cmp	r4, r7
  40394e:	6050      	str	r0, [r2, #4]
  403950:	6019      	str	r1, [r3, #0]
  403952:	d017      	beq.n	403984 <_malloc_r+0x2d8>
  403954:	f1b8 0f0f 	cmp.w	r8, #15
  403958:	f240 80fb 	bls.w	403b52 <_malloc_r+0x4a6>
  40395c:	6860      	ldr	r0, [r4, #4]
  40395e:	f1a8 020c 	sub.w	r2, r8, #12
  403962:	f022 0207 	bic.w	r2, r2, #7
  403966:	eb04 0e02 	add.w	lr, r4, r2
  40396a:	f000 0001 	and.w	r0, r0, #1
  40396e:	f04f 0c05 	mov.w	ip, #5
  403972:	4310      	orrs	r0, r2
  403974:	2a0f      	cmp	r2, #15
  403976:	6060      	str	r0, [r4, #4]
  403978:	f8ce c004 	str.w	ip, [lr, #4]
  40397c:	f8ce c008 	str.w	ip, [lr, #8]
  403980:	f200 8117 	bhi.w	403bb2 <_malloc_r+0x506>
  403984:	4b1d      	ldr	r3, [pc, #116]	; (4039fc <_malloc_r+0x350>)
  403986:	68bc      	ldr	r4, [r7, #8]
  403988:	681a      	ldr	r2, [r3, #0]
  40398a:	4291      	cmp	r1, r2
  40398c:	bf88      	it	hi
  40398e:	6019      	strhi	r1, [r3, #0]
  403990:	4b1b      	ldr	r3, [pc, #108]	; (403a00 <_malloc_r+0x354>)
  403992:	681a      	ldr	r2, [r3, #0]
  403994:	4291      	cmp	r1, r2
  403996:	6862      	ldr	r2, [r4, #4]
  403998:	bf88      	it	hi
  40399a:	6019      	strhi	r1, [r3, #0]
  40399c:	f022 0203 	bic.w	r2, r2, #3
  4039a0:	4296      	cmp	r6, r2
  4039a2:	eba2 0306 	sub.w	r3, r2, r6
  4039a6:	d801      	bhi.n	4039ac <_malloc_r+0x300>
  4039a8:	2b0f      	cmp	r3, #15
  4039aa:	dc04      	bgt.n	4039b6 <_malloc_r+0x30a>
  4039ac:	4628      	mov	r0, r5
  4039ae:	f000 fa01 	bl	403db4 <__malloc_unlock>
  4039b2:	2400      	movs	r4, #0
  4039b4:	e740      	b.n	403838 <_malloc_r+0x18c>
  4039b6:	19a2      	adds	r2, r4, r6
  4039b8:	f043 0301 	orr.w	r3, r3, #1
  4039bc:	f046 0601 	orr.w	r6, r6, #1
  4039c0:	6066      	str	r6, [r4, #4]
  4039c2:	4628      	mov	r0, r5
  4039c4:	60ba      	str	r2, [r7, #8]
  4039c6:	6053      	str	r3, [r2, #4]
  4039c8:	f000 f9f4 	bl	403db4 <__malloc_unlock>
  4039cc:	3408      	adds	r4, #8
  4039ce:	4620      	mov	r0, r4
  4039d0:	b003      	add	sp, #12
  4039d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039d6:	2b14      	cmp	r3, #20
  4039d8:	d971      	bls.n	403abe <_malloc_r+0x412>
  4039da:	2b54      	cmp	r3, #84	; 0x54
  4039dc:	f200 80a3 	bhi.w	403b26 <_malloc_r+0x47a>
  4039e0:	0b33      	lsrs	r3, r6, #12
  4039e2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4039e6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4039ea:	00c3      	lsls	r3, r0, #3
  4039ec:	e680      	b.n	4036f0 <_malloc_r+0x44>
  4039ee:	bf00      	nop
  4039f0:	204005b0 	.word	0x204005b0
  4039f4:	204014a0 	.word	0x204014a0
  4039f8:	20401470 	.word	0x20401470
  4039fc:	20401498 	.word	0x20401498
  403a00:	2040149c 	.word	0x2040149c
  403a04:	204005b8 	.word	0x204005b8
  403a08:	204009b8 	.word	0x204009b8
  403a0c:	0a5a      	lsrs	r2, r3, #9
  403a0e:	2a04      	cmp	r2, #4
  403a10:	d95b      	bls.n	403aca <_malloc_r+0x41e>
  403a12:	2a14      	cmp	r2, #20
  403a14:	f200 80ae 	bhi.w	403b74 <_malloc_r+0x4c8>
  403a18:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403a1c:	00c9      	lsls	r1, r1, #3
  403a1e:	325b      	adds	r2, #91	; 0x5b
  403a20:	eb07 0c01 	add.w	ip, r7, r1
  403a24:	5879      	ldr	r1, [r7, r1]
  403a26:	f1ac 0c08 	sub.w	ip, ip, #8
  403a2a:	458c      	cmp	ip, r1
  403a2c:	f000 8088 	beq.w	403b40 <_malloc_r+0x494>
  403a30:	684a      	ldr	r2, [r1, #4]
  403a32:	f022 0203 	bic.w	r2, r2, #3
  403a36:	4293      	cmp	r3, r2
  403a38:	d273      	bcs.n	403b22 <_malloc_r+0x476>
  403a3a:	6889      	ldr	r1, [r1, #8]
  403a3c:	458c      	cmp	ip, r1
  403a3e:	d1f7      	bne.n	403a30 <_malloc_r+0x384>
  403a40:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403a44:	687b      	ldr	r3, [r7, #4]
  403a46:	60e2      	str	r2, [r4, #12]
  403a48:	f8c4 c008 	str.w	ip, [r4, #8]
  403a4c:	6094      	str	r4, [r2, #8]
  403a4e:	f8cc 400c 	str.w	r4, [ip, #12]
  403a52:	e68f      	b.n	403774 <_malloc_r+0xc8>
  403a54:	19a1      	adds	r1, r4, r6
  403a56:	f046 0c01 	orr.w	ip, r6, #1
  403a5a:	f042 0601 	orr.w	r6, r2, #1
  403a5e:	f8c4 c004 	str.w	ip, [r4, #4]
  403a62:	4628      	mov	r0, r5
  403a64:	6179      	str	r1, [r7, #20]
  403a66:	6139      	str	r1, [r7, #16]
  403a68:	f8c1 e00c 	str.w	lr, [r1, #12]
  403a6c:	f8c1 e008 	str.w	lr, [r1, #8]
  403a70:	604e      	str	r6, [r1, #4]
  403a72:	50e2      	str	r2, [r4, r3]
  403a74:	f000 f99e 	bl	403db4 <__malloc_unlock>
  403a78:	3408      	adds	r4, #8
  403a7a:	e6dd      	b.n	403838 <_malloc_r+0x18c>
  403a7c:	687b      	ldr	r3, [r7, #4]
  403a7e:	e679      	b.n	403774 <_malloc_r+0xc8>
  403a80:	f108 0801 	add.w	r8, r8, #1
  403a84:	f018 0f03 	tst.w	r8, #3
  403a88:	f10c 0c08 	add.w	ip, ip, #8
  403a8c:	f47f ae85 	bne.w	40379a <_malloc_r+0xee>
  403a90:	e02d      	b.n	403aee <_malloc_r+0x442>
  403a92:	68dc      	ldr	r4, [r3, #12]
  403a94:	42a3      	cmp	r3, r4
  403a96:	bf08      	it	eq
  403a98:	3002      	addeq	r0, #2
  403a9a:	f43f ae3e 	beq.w	40371a <_malloc_r+0x6e>
  403a9e:	e6bb      	b.n	403818 <_malloc_r+0x16c>
  403aa0:	4419      	add	r1, r3
  403aa2:	461c      	mov	r4, r3
  403aa4:	684a      	ldr	r2, [r1, #4]
  403aa6:	68db      	ldr	r3, [r3, #12]
  403aa8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403aac:	f042 0201 	orr.w	r2, r2, #1
  403ab0:	604a      	str	r2, [r1, #4]
  403ab2:	4628      	mov	r0, r5
  403ab4:	60f3      	str	r3, [r6, #12]
  403ab6:	609e      	str	r6, [r3, #8]
  403ab8:	f000 f97c 	bl	403db4 <__malloc_unlock>
  403abc:	e6bc      	b.n	403838 <_malloc_r+0x18c>
  403abe:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403ac2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403ac6:	00c3      	lsls	r3, r0, #3
  403ac8:	e612      	b.n	4036f0 <_malloc_r+0x44>
  403aca:	099a      	lsrs	r2, r3, #6
  403acc:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403ad0:	00c9      	lsls	r1, r1, #3
  403ad2:	3238      	adds	r2, #56	; 0x38
  403ad4:	e7a4      	b.n	403a20 <_malloc_r+0x374>
  403ad6:	42bc      	cmp	r4, r7
  403ad8:	d054      	beq.n	403b84 <_malloc_r+0x4d8>
  403ada:	68bc      	ldr	r4, [r7, #8]
  403adc:	6862      	ldr	r2, [r4, #4]
  403ade:	f022 0203 	bic.w	r2, r2, #3
  403ae2:	e75d      	b.n	4039a0 <_malloc_r+0x2f4>
  403ae4:	f859 3908 	ldr.w	r3, [r9], #-8
  403ae8:	4599      	cmp	r9, r3
  403aea:	f040 8086 	bne.w	403bfa <_malloc_r+0x54e>
  403aee:	f010 0f03 	tst.w	r0, #3
  403af2:	f100 30ff 	add.w	r0, r0, #4294967295
  403af6:	d1f5      	bne.n	403ae4 <_malloc_r+0x438>
  403af8:	687b      	ldr	r3, [r7, #4]
  403afa:	ea23 0304 	bic.w	r3, r3, r4
  403afe:	607b      	str	r3, [r7, #4]
  403b00:	0064      	lsls	r4, r4, #1
  403b02:	429c      	cmp	r4, r3
  403b04:	f63f aec7 	bhi.w	403896 <_malloc_r+0x1ea>
  403b08:	2c00      	cmp	r4, #0
  403b0a:	f43f aec4 	beq.w	403896 <_malloc_r+0x1ea>
  403b0e:	421c      	tst	r4, r3
  403b10:	4640      	mov	r0, r8
  403b12:	f47f ae3e 	bne.w	403792 <_malloc_r+0xe6>
  403b16:	0064      	lsls	r4, r4, #1
  403b18:	421c      	tst	r4, r3
  403b1a:	f100 0004 	add.w	r0, r0, #4
  403b1e:	d0fa      	beq.n	403b16 <_malloc_r+0x46a>
  403b20:	e637      	b.n	403792 <_malloc_r+0xe6>
  403b22:	468c      	mov	ip, r1
  403b24:	e78c      	b.n	403a40 <_malloc_r+0x394>
  403b26:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403b2a:	d815      	bhi.n	403b58 <_malloc_r+0x4ac>
  403b2c:	0bf3      	lsrs	r3, r6, #15
  403b2e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403b32:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403b36:	00c3      	lsls	r3, r0, #3
  403b38:	e5da      	b.n	4036f0 <_malloc_r+0x44>
  403b3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403b3e:	e6ed      	b.n	40391c <_malloc_r+0x270>
  403b40:	687b      	ldr	r3, [r7, #4]
  403b42:	1092      	asrs	r2, r2, #2
  403b44:	2101      	movs	r1, #1
  403b46:	fa01 f202 	lsl.w	r2, r1, r2
  403b4a:	4313      	orrs	r3, r2
  403b4c:	607b      	str	r3, [r7, #4]
  403b4e:	4662      	mov	r2, ip
  403b50:	e779      	b.n	403a46 <_malloc_r+0x39a>
  403b52:	2301      	movs	r3, #1
  403b54:	6053      	str	r3, [r2, #4]
  403b56:	e729      	b.n	4039ac <_malloc_r+0x300>
  403b58:	f240 5254 	movw	r2, #1364	; 0x554
  403b5c:	4293      	cmp	r3, r2
  403b5e:	d822      	bhi.n	403ba6 <_malloc_r+0x4fa>
  403b60:	0cb3      	lsrs	r3, r6, #18
  403b62:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403b66:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403b6a:	00c3      	lsls	r3, r0, #3
  403b6c:	e5c0      	b.n	4036f0 <_malloc_r+0x44>
  403b6e:	f103 0b10 	add.w	fp, r3, #16
  403b72:	e6ae      	b.n	4038d2 <_malloc_r+0x226>
  403b74:	2a54      	cmp	r2, #84	; 0x54
  403b76:	d829      	bhi.n	403bcc <_malloc_r+0x520>
  403b78:	0b1a      	lsrs	r2, r3, #12
  403b7a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403b7e:	00c9      	lsls	r1, r1, #3
  403b80:	326e      	adds	r2, #110	; 0x6e
  403b82:	e74d      	b.n	403a20 <_malloc_r+0x374>
  403b84:	4b20      	ldr	r3, [pc, #128]	; (403c08 <_malloc_r+0x55c>)
  403b86:	6819      	ldr	r1, [r3, #0]
  403b88:	4459      	add	r1, fp
  403b8a:	6019      	str	r1, [r3, #0]
  403b8c:	e6b2      	b.n	4038f4 <_malloc_r+0x248>
  403b8e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403b92:	2800      	cmp	r0, #0
  403b94:	f47f aeae 	bne.w	4038f4 <_malloc_r+0x248>
  403b98:	eb08 030b 	add.w	r3, r8, fp
  403b9c:	68ba      	ldr	r2, [r7, #8]
  403b9e:	f043 0301 	orr.w	r3, r3, #1
  403ba2:	6053      	str	r3, [r2, #4]
  403ba4:	e6ee      	b.n	403984 <_malloc_r+0x2d8>
  403ba6:	207f      	movs	r0, #127	; 0x7f
  403ba8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403bac:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403bb0:	e59e      	b.n	4036f0 <_malloc_r+0x44>
  403bb2:	f104 0108 	add.w	r1, r4, #8
  403bb6:	4628      	mov	r0, r5
  403bb8:	9300      	str	r3, [sp, #0]
  403bba:	f7ff fa59 	bl	403070 <_free_r>
  403bbe:	9b00      	ldr	r3, [sp, #0]
  403bc0:	6819      	ldr	r1, [r3, #0]
  403bc2:	e6df      	b.n	403984 <_malloc_r+0x2d8>
  403bc4:	2001      	movs	r0, #1
  403bc6:	f04f 0900 	mov.w	r9, #0
  403bca:	e6bc      	b.n	403946 <_malloc_r+0x29a>
  403bcc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403bd0:	d805      	bhi.n	403bde <_malloc_r+0x532>
  403bd2:	0bda      	lsrs	r2, r3, #15
  403bd4:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403bd8:	00c9      	lsls	r1, r1, #3
  403bda:	3277      	adds	r2, #119	; 0x77
  403bdc:	e720      	b.n	403a20 <_malloc_r+0x374>
  403bde:	f240 5154 	movw	r1, #1364	; 0x554
  403be2:	428a      	cmp	r2, r1
  403be4:	d805      	bhi.n	403bf2 <_malloc_r+0x546>
  403be6:	0c9a      	lsrs	r2, r3, #18
  403be8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403bec:	00c9      	lsls	r1, r1, #3
  403bee:	327c      	adds	r2, #124	; 0x7c
  403bf0:	e716      	b.n	403a20 <_malloc_r+0x374>
  403bf2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403bf6:	227e      	movs	r2, #126	; 0x7e
  403bf8:	e712      	b.n	403a20 <_malloc_r+0x374>
  403bfa:	687b      	ldr	r3, [r7, #4]
  403bfc:	e780      	b.n	403b00 <_malloc_r+0x454>
  403bfe:	08f0      	lsrs	r0, r6, #3
  403c00:	f106 0308 	add.w	r3, r6, #8
  403c04:	e600      	b.n	403808 <_malloc_r+0x15c>
  403c06:	bf00      	nop
  403c08:	20401470 	.word	0x20401470

00403c0c <__ascii_mbtowc>:
  403c0c:	b082      	sub	sp, #8
  403c0e:	b149      	cbz	r1, 403c24 <__ascii_mbtowc+0x18>
  403c10:	b15a      	cbz	r2, 403c2a <__ascii_mbtowc+0x1e>
  403c12:	b16b      	cbz	r3, 403c30 <__ascii_mbtowc+0x24>
  403c14:	7813      	ldrb	r3, [r2, #0]
  403c16:	600b      	str	r3, [r1, #0]
  403c18:	7812      	ldrb	r2, [r2, #0]
  403c1a:	1c10      	adds	r0, r2, #0
  403c1c:	bf18      	it	ne
  403c1e:	2001      	movne	r0, #1
  403c20:	b002      	add	sp, #8
  403c22:	4770      	bx	lr
  403c24:	a901      	add	r1, sp, #4
  403c26:	2a00      	cmp	r2, #0
  403c28:	d1f3      	bne.n	403c12 <__ascii_mbtowc+0x6>
  403c2a:	4610      	mov	r0, r2
  403c2c:	b002      	add	sp, #8
  403c2e:	4770      	bx	lr
  403c30:	f06f 0001 	mvn.w	r0, #1
  403c34:	e7f4      	b.n	403c20 <__ascii_mbtowc+0x14>
  403c36:	bf00      	nop
	...

00403c40 <memchr>:
  403c40:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403c44:	2a10      	cmp	r2, #16
  403c46:	db2b      	blt.n	403ca0 <memchr+0x60>
  403c48:	f010 0f07 	tst.w	r0, #7
  403c4c:	d008      	beq.n	403c60 <memchr+0x20>
  403c4e:	f810 3b01 	ldrb.w	r3, [r0], #1
  403c52:	3a01      	subs	r2, #1
  403c54:	428b      	cmp	r3, r1
  403c56:	d02d      	beq.n	403cb4 <memchr+0x74>
  403c58:	f010 0f07 	tst.w	r0, #7
  403c5c:	b342      	cbz	r2, 403cb0 <memchr+0x70>
  403c5e:	d1f6      	bne.n	403c4e <memchr+0xe>
  403c60:	b4f0      	push	{r4, r5, r6, r7}
  403c62:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403c66:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  403c6a:	f022 0407 	bic.w	r4, r2, #7
  403c6e:	f07f 0700 	mvns.w	r7, #0
  403c72:	2300      	movs	r3, #0
  403c74:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403c78:	3c08      	subs	r4, #8
  403c7a:	ea85 0501 	eor.w	r5, r5, r1
  403c7e:	ea86 0601 	eor.w	r6, r6, r1
  403c82:	fa85 f547 	uadd8	r5, r5, r7
  403c86:	faa3 f587 	sel	r5, r3, r7
  403c8a:	fa86 f647 	uadd8	r6, r6, r7
  403c8e:	faa5 f687 	sel	r6, r5, r7
  403c92:	b98e      	cbnz	r6, 403cb8 <memchr+0x78>
  403c94:	d1ee      	bne.n	403c74 <memchr+0x34>
  403c96:	bcf0      	pop	{r4, r5, r6, r7}
  403c98:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403c9c:	f002 0207 	and.w	r2, r2, #7
  403ca0:	b132      	cbz	r2, 403cb0 <memchr+0x70>
  403ca2:	f810 3b01 	ldrb.w	r3, [r0], #1
  403ca6:	3a01      	subs	r2, #1
  403ca8:	ea83 0301 	eor.w	r3, r3, r1
  403cac:	b113      	cbz	r3, 403cb4 <memchr+0x74>
  403cae:	d1f8      	bne.n	403ca2 <memchr+0x62>
  403cb0:	2000      	movs	r0, #0
  403cb2:	4770      	bx	lr
  403cb4:	3801      	subs	r0, #1
  403cb6:	4770      	bx	lr
  403cb8:	2d00      	cmp	r5, #0
  403cba:	bf06      	itte	eq
  403cbc:	4635      	moveq	r5, r6
  403cbe:	3803      	subeq	r0, #3
  403cc0:	3807      	subne	r0, #7
  403cc2:	f015 0f01 	tst.w	r5, #1
  403cc6:	d107      	bne.n	403cd8 <memchr+0x98>
  403cc8:	3001      	adds	r0, #1
  403cca:	f415 7f80 	tst.w	r5, #256	; 0x100
  403cce:	bf02      	ittt	eq
  403cd0:	3001      	addeq	r0, #1
  403cd2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403cd6:	3001      	addeq	r0, #1
  403cd8:	bcf0      	pop	{r4, r5, r6, r7}
  403cda:	3801      	subs	r0, #1
  403cdc:	4770      	bx	lr
  403cde:	bf00      	nop

00403ce0 <memmove>:
  403ce0:	4288      	cmp	r0, r1
  403ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
  403ce4:	d90d      	bls.n	403d02 <memmove+0x22>
  403ce6:	188b      	adds	r3, r1, r2
  403ce8:	4298      	cmp	r0, r3
  403cea:	d20a      	bcs.n	403d02 <memmove+0x22>
  403cec:	1884      	adds	r4, r0, r2
  403cee:	2a00      	cmp	r2, #0
  403cf0:	d051      	beq.n	403d96 <memmove+0xb6>
  403cf2:	4622      	mov	r2, r4
  403cf4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  403cf8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  403cfc:	4299      	cmp	r1, r3
  403cfe:	d1f9      	bne.n	403cf4 <memmove+0x14>
  403d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403d02:	2a0f      	cmp	r2, #15
  403d04:	d948      	bls.n	403d98 <memmove+0xb8>
  403d06:	ea41 0300 	orr.w	r3, r1, r0
  403d0a:	079b      	lsls	r3, r3, #30
  403d0c:	d146      	bne.n	403d9c <memmove+0xbc>
  403d0e:	f100 0410 	add.w	r4, r0, #16
  403d12:	f101 0310 	add.w	r3, r1, #16
  403d16:	4615      	mov	r5, r2
  403d18:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403d1c:	f844 6c10 	str.w	r6, [r4, #-16]
  403d20:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403d24:	f844 6c0c 	str.w	r6, [r4, #-12]
  403d28:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403d2c:	f844 6c08 	str.w	r6, [r4, #-8]
  403d30:	3d10      	subs	r5, #16
  403d32:	f853 6c04 	ldr.w	r6, [r3, #-4]
  403d36:	f844 6c04 	str.w	r6, [r4, #-4]
  403d3a:	2d0f      	cmp	r5, #15
  403d3c:	f103 0310 	add.w	r3, r3, #16
  403d40:	f104 0410 	add.w	r4, r4, #16
  403d44:	d8e8      	bhi.n	403d18 <memmove+0x38>
  403d46:	f1a2 0310 	sub.w	r3, r2, #16
  403d4a:	f023 030f 	bic.w	r3, r3, #15
  403d4e:	f002 0e0f 	and.w	lr, r2, #15
  403d52:	3310      	adds	r3, #16
  403d54:	f1be 0f03 	cmp.w	lr, #3
  403d58:	4419      	add	r1, r3
  403d5a:	4403      	add	r3, r0
  403d5c:	d921      	bls.n	403da2 <memmove+0xc2>
  403d5e:	1f1e      	subs	r6, r3, #4
  403d60:	460d      	mov	r5, r1
  403d62:	4674      	mov	r4, lr
  403d64:	3c04      	subs	r4, #4
  403d66:	f855 7b04 	ldr.w	r7, [r5], #4
  403d6a:	f846 7f04 	str.w	r7, [r6, #4]!
  403d6e:	2c03      	cmp	r4, #3
  403d70:	d8f8      	bhi.n	403d64 <memmove+0x84>
  403d72:	f1ae 0404 	sub.w	r4, lr, #4
  403d76:	f024 0403 	bic.w	r4, r4, #3
  403d7a:	3404      	adds	r4, #4
  403d7c:	4421      	add	r1, r4
  403d7e:	4423      	add	r3, r4
  403d80:	f002 0203 	and.w	r2, r2, #3
  403d84:	b162      	cbz	r2, 403da0 <memmove+0xc0>
  403d86:	3b01      	subs	r3, #1
  403d88:	440a      	add	r2, r1
  403d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
  403d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
  403d92:	428a      	cmp	r2, r1
  403d94:	d1f9      	bne.n	403d8a <memmove+0xaa>
  403d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403d98:	4603      	mov	r3, r0
  403d9a:	e7f3      	b.n	403d84 <memmove+0xa4>
  403d9c:	4603      	mov	r3, r0
  403d9e:	e7f2      	b.n	403d86 <memmove+0xa6>
  403da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403da2:	4672      	mov	r2, lr
  403da4:	e7ee      	b.n	403d84 <memmove+0xa4>
  403da6:	bf00      	nop

00403da8 <__malloc_lock>:
  403da8:	4801      	ldr	r0, [pc, #4]	; (403db0 <__malloc_lock+0x8>)
  403daa:	f7ff bbfb 	b.w	4035a4 <__retarget_lock_acquire_recursive>
  403dae:	bf00      	nop
  403db0:	204014c0 	.word	0x204014c0

00403db4 <__malloc_unlock>:
  403db4:	4801      	ldr	r0, [pc, #4]	; (403dbc <__malloc_unlock+0x8>)
  403db6:	f7ff bbf7 	b.w	4035a8 <__retarget_lock_release_recursive>
  403dba:	bf00      	nop
  403dbc:	204014c0 	.word	0x204014c0

00403dc0 <_realloc_r>:
  403dc0:	2900      	cmp	r1, #0
  403dc2:	f000 8095 	beq.w	403ef0 <_realloc_r+0x130>
  403dc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403dca:	460d      	mov	r5, r1
  403dcc:	4616      	mov	r6, r2
  403dce:	b083      	sub	sp, #12
  403dd0:	4680      	mov	r8, r0
  403dd2:	f106 070b 	add.w	r7, r6, #11
  403dd6:	f7ff ffe7 	bl	403da8 <__malloc_lock>
  403dda:	f855 ec04 	ldr.w	lr, [r5, #-4]
  403dde:	2f16      	cmp	r7, #22
  403de0:	f02e 0403 	bic.w	r4, lr, #3
  403de4:	f1a5 0908 	sub.w	r9, r5, #8
  403de8:	d83c      	bhi.n	403e64 <_realloc_r+0xa4>
  403dea:	2210      	movs	r2, #16
  403dec:	4617      	mov	r7, r2
  403dee:	42be      	cmp	r6, r7
  403df0:	d83d      	bhi.n	403e6e <_realloc_r+0xae>
  403df2:	4294      	cmp	r4, r2
  403df4:	da43      	bge.n	403e7e <_realloc_r+0xbe>
  403df6:	4bc4      	ldr	r3, [pc, #784]	; (404108 <_realloc_r+0x348>)
  403df8:	6899      	ldr	r1, [r3, #8]
  403dfa:	eb09 0004 	add.w	r0, r9, r4
  403dfe:	4288      	cmp	r0, r1
  403e00:	f000 80b4 	beq.w	403f6c <_realloc_r+0x1ac>
  403e04:	6843      	ldr	r3, [r0, #4]
  403e06:	f023 0101 	bic.w	r1, r3, #1
  403e0a:	4401      	add	r1, r0
  403e0c:	6849      	ldr	r1, [r1, #4]
  403e0e:	07c9      	lsls	r1, r1, #31
  403e10:	d54c      	bpl.n	403eac <_realloc_r+0xec>
  403e12:	f01e 0f01 	tst.w	lr, #1
  403e16:	f000 809b 	beq.w	403f50 <_realloc_r+0x190>
  403e1a:	4631      	mov	r1, r6
  403e1c:	4640      	mov	r0, r8
  403e1e:	f7ff fc45 	bl	4036ac <_malloc_r>
  403e22:	4606      	mov	r6, r0
  403e24:	2800      	cmp	r0, #0
  403e26:	d03a      	beq.n	403e9e <_realloc_r+0xde>
  403e28:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403e2c:	f023 0301 	bic.w	r3, r3, #1
  403e30:	444b      	add	r3, r9
  403e32:	f1a0 0208 	sub.w	r2, r0, #8
  403e36:	429a      	cmp	r2, r3
  403e38:	f000 8121 	beq.w	40407e <_realloc_r+0x2be>
  403e3c:	1f22      	subs	r2, r4, #4
  403e3e:	2a24      	cmp	r2, #36	; 0x24
  403e40:	f200 8107 	bhi.w	404052 <_realloc_r+0x292>
  403e44:	2a13      	cmp	r2, #19
  403e46:	f200 80db 	bhi.w	404000 <_realloc_r+0x240>
  403e4a:	4603      	mov	r3, r0
  403e4c:	462a      	mov	r2, r5
  403e4e:	6811      	ldr	r1, [r2, #0]
  403e50:	6019      	str	r1, [r3, #0]
  403e52:	6851      	ldr	r1, [r2, #4]
  403e54:	6059      	str	r1, [r3, #4]
  403e56:	6892      	ldr	r2, [r2, #8]
  403e58:	609a      	str	r2, [r3, #8]
  403e5a:	4629      	mov	r1, r5
  403e5c:	4640      	mov	r0, r8
  403e5e:	f7ff f907 	bl	403070 <_free_r>
  403e62:	e01c      	b.n	403e9e <_realloc_r+0xde>
  403e64:	f027 0707 	bic.w	r7, r7, #7
  403e68:	2f00      	cmp	r7, #0
  403e6a:	463a      	mov	r2, r7
  403e6c:	dabf      	bge.n	403dee <_realloc_r+0x2e>
  403e6e:	2600      	movs	r6, #0
  403e70:	230c      	movs	r3, #12
  403e72:	4630      	mov	r0, r6
  403e74:	f8c8 3000 	str.w	r3, [r8]
  403e78:	b003      	add	sp, #12
  403e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e7e:	462e      	mov	r6, r5
  403e80:	1be3      	subs	r3, r4, r7
  403e82:	2b0f      	cmp	r3, #15
  403e84:	d81e      	bhi.n	403ec4 <_realloc_r+0x104>
  403e86:	f8d9 3004 	ldr.w	r3, [r9, #4]
  403e8a:	f003 0301 	and.w	r3, r3, #1
  403e8e:	4323      	orrs	r3, r4
  403e90:	444c      	add	r4, r9
  403e92:	f8c9 3004 	str.w	r3, [r9, #4]
  403e96:	6863      	ldr	r3, [r4, #4]
  403e98:	f043 0301 	orr.w	r3, r3, #1
  403e9c:	6063      	str	r3, [r4, #4]
  403e9e:	4640      	mov	r0, r8
  403ea0:	f7ff ff88 	bl	403db4 <__malloc_unlock>
  403ea4:	4630      	mov	r0, r6
  403ea6:	b003      	add	sp, #12
  403ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403eac:	f023 0303 	bic.w	r3, r3, #3
  403eb0:	18e1      	adds	r1, r4, r3
  403eb2:	4291      	cmp	r1, r2
  403eb4:	db1f      	blt.n	403ef6 <_realloc_r+0x136>
  403eb6:	68c3      	ldr	r3, [r0, #12]
  403eb8:	6882      	ldr	r2, [r0, #8]
  403eba:	462e      	mov	r6, r5
  403ebc:	60d3      	str	r3, [r2, #12]
  403ebe:	460c      	mov	r4, r1
  403ec0:	609a      	str	r2, [r3, #8]
  403ec2:	e7dd      	b.n	403e80 <_realloc_r+0xc0>
  403ec4:	f8d9 2004 	ldr.w	r2, [r9, #4]
  403ec8:	eb09 0107 	add.w	r1, r9, r7
  403ecc:	f002 0201 	and.w	r2, r2, #1
  403ed0:	444c      	add	r4, r9
  403ed2:	f043 0301 	orr.w	r3, r3, #1
  403ed6:	4317      	orrs	r7, r2
  403ed8:	f8c9 7004 	str.w	r7, [r9, #4]
  403edc:	604b      	str	r3, [r1, #4]
  403ede:	6863      	ldr	r3, [r4, #4]
  403ee0:	f043 0301 	orr.w	r3, r3, #1
  403ee4:	3108      	adds	r1, #8
  403ee6:	6063      	str	r3, [r4, #4]
  403ee8:	4640      	mov	r0, r8
  403eea:	f7ff f8c1 	bl	403070 <_free_r>
  403eee:	e7d6      	b.n	403e9e <_realloc_r+0xde>
  403ef0:	4611      	mov	r1, r2
  403ef2:	f7ff bbdb 	b.w	4036ac <_malloc_r>
  403ef6:	f01e 0f01 	tst.w	lr, #1
  403efa:	d18e      	bne.n	403e1a <_realloc_r+0x5a>
  403efc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403f00:	eba9 0a01 	sub.w	sl, r9, r1
  403f04:	f8da 1004 	ldr.w	r1, [sl, #4]
  403f08:	f021 0103 	bic.w	r1, r1, #3
  403f0c:	440b      	add	r3, r1
  403f0e:	4423      	add	r3, r4
  403f10:	4293      	cmp	r3, r2
  403f12:	db25      	blt.n	403f60 <_realloc_r+0x1a0>
  403f14:	68c2      	ldr	r2, [r0, #12]
  403f16:	6881      	ldr	r1, [r0, #8]
  403f18:	4656      	mov	r6, sl
  403f1a:	60ca      	str	r2, [r1, #12]
  403f1c:	6091      	str	r1, [r2, #8]
  403f1e:	f8da 100c 	ldr.w	r1, [sl, #12]
  403f22:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403f26:	1f22      	subs	r2, r4, #4
  403f28:	2a24      	cmp	r2, #36	; 0x24
  403f2a:	60c1      	str	r1, [r0, #12]
  403f2c:	6088      	str	r0, [r1, #8]
  403f2e:	f200 8094 	bhi.w	40405a <_realloc_r+0x29a>
  403f32:	2a13      	cmp	r2, #19
  403f34:	d96f      	bls.n	404016 <_realloc_r+0x256>
  403f36:	6829      	ldr	r1, [r5, #0]
  403f38:	f8ca 1008 	str.w	r1, [sl, #8]
  403f3c:	6869      	ldr	r1, [r5, #4]
  403f3e:	f8ca 100c 	str.w	r1, [sl, #12]
  403f42:	2a1b      	cmp	r2, #27
  403f44:	f200 80a2 	bhi.w	40408c <_realloc_r+0x2cc>
  403f48:	3508      	adds	r5, #8
  403f4a:	f10a 0210 	add.w	r2, sl, #16
  403f4e:	e063      	b.n	404018 <_realloc_r+0x258>
  403f50:	f855 3c08 	ldr.w	r3, [r5, #-8]
  403f54:	eba9 0a03 	sub.w	sl, r9, r3
  403f58:	f8da 1004 	ldr.w	r1, [sl, #4]
  403f5c:	f021 0103 	bic.w	r1, r1, #3
  403f60:	1863      	adds	r3, r4, r1
  403f62:	4293      	cmp	r3, r2
  403f64:	f6ff af59 	blt.w	403e1a <_realloc_r+0x5a>
  403f68:	4656      	mov	r6, sl
  403f6a:	e7d8      	b.n	403f1e <_realloc_r+0x15e>
  403f6c:	6841      	ldr	r1, [r0, #4]
  403f6e:	f021 0b03 	bic.w	fp, r1, #3
  403f72:	44a3      	add	fp, r4
  403f74:	f107 0010 	add.w	r0, r7, #16
  403f78:	4583      	cmp	fp, r0
  403f7a:	da56      	bge.n	40402a <_realloc_r+0x26a>
  403f7c:	f01e 0f01 	tst.w	lr, #1
  403f80:	f47f af4b 	bne.w	403e1a <_realloc_r+0x5a>
  403f84:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403f88:	eba9 0a01 	sub.w	sl, r9, r1
  403f8c:	f8da 1004 	ldr.w	r1, [sl, #4]
  403f90:	f021 0103 	bic.w	r1, r1, #3
  403f94:	448b      	add	fp, r1
  403f96:	4558      	cmp	r0, fp
  403f98:	dce2      	bgt.n	403f60 <_realloc_r+0x1a0>
  403f9a:	4656      	mov	r6, sl
  403f9c:	f8da 100c 	ldr.w	r1, [sl, #12]
  403fa0:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403fa4:	1f22      	subs	r2, r4, #4
  403fa6:	2a24      	cmp	r2, #36	; 0x24
  403fa8:	60c1      	str	r1, [r0, #12]
  403faa:	6088      	str	r0, [r1, #8]
  403fac:	f200 808f 	bhi.w	4040ce <_realloc_r+0x30e>
  403fb0:	2a13      	cmp	r2, #19
  403fb2:	f240 808a 	bls.w	4040ca <_realloc_r+0x30a>
  403fb6:	6829      	ldr	r1, [r5, #0]
  403fb8:	f8ca 1008 	str.w	r1, [sl, #8]
  403fbc:	6869      	ldr	r1, [r5, #4]
  403fbe:	f8ca 100c 	str.w	r1, [sl, #12]
  403fc2:	2a1b      	cmp	r2, #27
  403fc4:	f200 808a 	bhi.w	4040dc <_realloc_r+0x31c>
  403fc8:	3508      	adds	r5, #8
  403fca:	f10a 0210 	add.w	r2, sl, #16
  403fce:	6829      	ldr	r1, [r5, #0]
  403fd0:	6011      	str	r1, [r2, #0]
  403fd2:	6869      	ldr	r1, [r5, #4]
  403fd4:	6051      	str	r1, [r2, #4]
  403fd6:	68a9      	ldr	r1, [r5, #8]
  403fd8:	6091      	str	r1, [r2, #8]
  403fda:	eb0a 0107 	add.w	r1, sl, r7
  403fde:	ebab 0207 	sub.w	r2, fp, r7
  403fe2:	f042 0201 	orr.w	r2, r2, #1
  403fe6:	6099      	str	r1, [r3, #8]
  403fe8:	604a      	str	r2, [r1, #4]
  403fea:	f8da 3004 	ldr.w	r3, [sl, #4]
  403fee:	f003 0301 	and.w	r3, r3, #1
  403ff2:	431f      	orrs	r7, r3
  403ff4:	4640      	mov	r0, r8
  403ff6:	f8ca 7004 	str.w	r7, [sl, #4]
  403ffa:	f7ff fedb 	bl	403db4 <__malloc_unlock>
  403ffe:	e751      	b.n	403ea4 <_realloc_r+0xe4>
  404000:	682b      	ldr	r3, [r5, #0]
  404002:	6003      	str	r3, [r0, #0]
  404004:	686b      	ldr	r3, [r5, #4]
  404006:	6043      	str	r3, [r0, #4]
  404008:	2a1b      	cmp	r2, #27
  40400a:	d82d      	bhi.n	404068 <_realloc_r+0x2a8>
  40400c:	f100 0308 	add.w	r3, r0, #8
  404010:	f105 0208 	add.w	r2, r5, #8
  404014:	e71b      	b.n	403e4e <_realloc_r+0x8e>
  404016:	4632      	mov	r2, r6
  404018:	6829      	ldr	r1, [r5, #0]
  40401a:	6011      	str	r1, [r2, #0]
  40401c:	6869      	ldr	r1, [r5, #4]
  40401e:	6051      	str	r1, [r2, #4]
  404020:	68a9      	ldr	r1, [r5, #8]
  404022:	6091      	str	r1, [r2, #8]
  404024:	461c      	mov	r4, r3
  404026:	46d1      	mov	r9, sl
  404028:	e72a      	b.n	403e80 <_realloc_r+0xc0>
  40402a:	eb09 0107 	add.w	r1, r9, r7
  40402e:	ebab 0b07 	sub.w	fp, fp, r7
  404032:	f04b 0201 	orr.w	r2, fp, #1
  404036:	6099      	str	r1, [r3, #8]
  404038:	604a      	str	r2, [r1, #4]
  40403a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40403e:	f003 0301 	and.w	r3, r3, #1
  404042:	431f      	orrs	r7, r3
  404044:	4640      	mov	r0, r8
  404046:	f845 7c04 	str.w	r7, [r5, #-4]
  40404a:	f7ff feb3 	bl	403db4 <__malloc_unlock>
  40404e:	462e      	mov	r6, r5
  404050:	e728      	b.n	403ea4 <_realloc_r+0xe4>
  404052:	4629      	mov	r1, r5
  404054:	f7ff fe44 	bl	403ce0 <memmove>
  404058:	e6ff      	b.n	403e5a <_realloc_r+0x9a>
  40405a:	4629      	mov	r1, r5
  40405c:	4630      	mov	r0, r6
  40405e:	461c      	mov	r4, r3
  404060:	46d1      	mov	r9, sl
  404062:	f7ff fe3d 	bl	403ce0 <memmove>
  404066:	e70b      	b.n	403e80 <_realloc_r+0xc0>
  404068:	68ab      	ldr	r3, [r5, #8]
  40406a:	6083      	str	r3, [r0, #8]
  40406c:	68eb      	ldr	r3, [r5, #12]
  40406e:	60c3      	str	r3, [r0, #12]
  404070:	2a24      	cmp	r2, #36	; 0x24
  404072:	d017      	beq.n	4040a4 <_realloc_r+0x2e4>
  404074:	f100 0310 	add.w	r3, r0, #16
  404078:	f105 0210 	add.w	r2, r5, #16
  40407c:	e6e7      	b.n	403e4e <_realloc_r+0x8e>
  40407e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404082:	f023 0303 	bic.w	r3, r3, #3
  404086:	441c      	add	r4, r3
  404088:	462e      	mov	r6, r5
  40408a:	e6f9      	b.n	403e80 <_realloc_r+0xc0>
  40408c:	68a9      	ldr	r1, [r5, #8]
  40408e:	f8ca 1010 	str.w	r1, [sl, #16]
  404092:	68e9      	ldr	r1, [r5, #12]
  404094:	f8ca 1014 	str.w	r1, [sl, #20]
  404098:	2a24      	cmp	r2, #36	; 0x24
  40409a:	d00c      	beq.n	4040b6 <_realloc_r+0x2f6>
  40409c:	3510      	adds	r5, #16
  40409e:	f10a 0218 	add.w	r2, sl, #24
  4040a2:	e7b9      	b.n	404018 <_realloc_r+0x258>
  4040a4:	692b      	ldr	r3, [r5, #16]
  4040a6:	6103      	str	r3, [r0, #16]
  4040a8:	696b      	ldr	r3, [r5, #20]
  4040aa:	6143      	str	r3, [r0, #20]
  4040ac:	f105 0218 	add.w	r2, r5, #24
  4040b0:	f100 0318 	add.w	r3, r0, #24
  4040b4:	e6cb      	b.n	403e4e <_realloc_r+0x8e>
  4040b6:	692a      	ldr	r2, [r5, #16]
  4040b8:	f8ca 2018 	str.w	r2, [sl, #24]
  4040bc:	696a      	ldr	r2, [r5, #20]
  4040be:	f8ca 201c 	str.w	r2, [sl, #28]
  4040c2:	3518      	adds	r5, #24
  4040c4:	f10a 0220 	add.w	r2, sl, #32
  4040c8:	e7a6      	b.n	404018 <_realloc_r+0x258>
  4040ca:	4632      	mov	r2, r6
  4040cc:	e77f      	b.n	403fce <_realloc_r+0x20e>
  4040ce:	4629      	mov	r1, r5
  4040d0:	4630      	mov	r0, r6
  4040d2:	9301      	str	r3, [sp, #4]
  4040d4:	f7ff fe04 	bl	403ce0 <memmove>
  4040d8:	9b01      	ldr	r3, [sp, #4]
  4040da:	e77e      	b.n	403fda <_realloc_r+0x21a>
  4040dc:	68a9      	ldr	r1, [r5, #8]
  4040de:	f8ca 1010 	str.w	r1, [sl, #16]
  4040e2:	68e9      	ldr	r1, [r5, #12]
  4040e4:	f8ca 1014 	str.w	r1, [sl, #20]
  4040e8:	2a24      	cmp	r2, #36	; 0x24
  4040ea:	d003      	beq.n	4040f4 <_realloc_r+0x334>
  4040ec:	3510      	adds	r5, #16
  4040ee:	f10a 0218 	add.w	r2, sl, #24
  4040f2:	e76c      	b.n	403fce <_realloc_r+0x20e>
  4040f4:	692a      	ldr	r2, [r5, #16]
  4040f6:	f8ca 2018 	str.w	r2, [sl, #24]
  4040fa:	696a      	ldr	r2, [r5, #20]
  4040fc:	f8ca 201c 	str.w	r2, [sl, #28]
  404100:	3518      	adds	r5, #24
  404102:	f10a 0220 	add.w	r2, sl, #32
  404106:	e762      	b.n	403fce <_realloc_r+0x20e>
  404108:	204005b0 	.word	0x204005b0

0040410c <_sbrk_r>:
  40410c:	b538      	push	{r3, r4, r5, lr}
  40410e:	4c07      	ldr	r4, [pc, #28]	; (40412c <_sbrk_r+0x20>)
  404110:	2300      	movs	r3, #0
  404112:	4605      	mov	r5, r0
  404114:	4608      	mov	r0, r1
  404116:	6023      	str	r3, [r4, #0]
  404118:	f7fd fbc2 	bl	4018a0 <_sbrk>
  40411c:	1c43      	adds	r3, r0, #1
  40411e:	d000      	beq.n	404122 <_sbrk_r+0x16>
  404120:	bd38      	pop	{r3, r4, r5, pc}
  404122:	6823      	ldr	r3, [r4, #0]
  404124:	2b00      	cmp	r3, #0
  404126:	d0fb      	beq.n	404120 <_sbrk_r+0x14>
  404128:	602b      	str	r3, [r5, #0]
  40412a:	bd38      	pop	{r3, r4, r5, pc}
  40412c:	204014d4 	.word	0x204014d4

00404130 <_raise_r>:
  404130:	291f      	cmp	r1, #31
  404132:	d828      	bhi.n	404186 <_raise_r+0x56>
  404134:	b520      	push	{r5, lr}
  404136:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
  40413a:	b082      	sub	sp, #8
  40413c:	4605      	mov	r5, r0
  40413e:	b1aa      	cbz	r2, 40416c <_raise_r+0x3c>
  404140:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  404144:	b193      	cbz	r3, 40416c <_raise_r+0x3c>
  404146:	2b01      	cmp	r3, #1
  404148:	d00e      	beq.n	404168 <_raise_r+0x38>
  40414a:	1c58      	adds	r0, r3, #1
  40414c:	d007      	beq.n	40415e <_raise_r+0x2e>
  40414e:	2500      	movs	r5, #0
  404150:	4608      	mov	r0, r1
  404152:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  404156:	4798      	blx	r3
  404158:	4628      	mov	r0, r5
  40415a:	b002      	add	sp, #8
  40415c:	bd20      	pop	{r5, pc}
  40415e:	2316      	movs	r3, #22
  404160:	2001      	movs	r0, #1
  404162:	602b      	str	r3, [r5, #0]
  404164:	b002      	add	sp, #8
  404166:	bd20      	pop	{r5, pc}
  404168:	2000      	movs	r0, #0
  40416a:	e7f6      	b.n	40415a <_raise_r+0x2a>
  40416c:	4628      	mov	r0, r5
  40416e:	9101      	str	r1, [sp, #4]
  404170:	f000 f82a 	bl	4041c8 <_getpid_r>
  404174:	9901      	ldr	r1, [sp, #4]
  404176:	460a      	mov	r2, r1
  404178:	4601      	mov	r1, r0
  40417a:	4628      	mov	r0, r5
  40417c:	b002      	add	sp, #8
  40417e:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
  404182:	f000 b80d 	b.w	4041a0 <_kill_r>
  404186:	2316      	movs	r3, #22
  404188:	6003      	str	r3, [r0, #0]
  40418a:	f04f 30ff 	mov.w	r0, #4294967295
  40418e:	4770      	bx	lr

00404190 <raise>:
  404190:	4b02      	ldr	r3, [pc, #8]	; (40419c <raise+0xc>)
  404192:	4601      	mov	r1, r0
  404194:	6818      	ldr	r0, [r3, #0]
  404196:	f7ff bfcb 	b.w	404130 <_raise_r>
  40419a:	bf00      	nop
  40419c:	20400010 	.word	0x20400010

004041a0 <_kill_r>:
  4041a0:	b538      	push	{r3, r4, r5, lr}
  4041a2:	460b      	mov	r3, r1
  4041a4:	4c07      	ldr	r4, [pc, #28]	; (4041c4 <_kill_r+0x24>)
  4041a6:	4605      	mov	r5, r0
  4041a8:	4611      	mov	r1, r2
  4041aa:	4618      	mov	r0, r3
  4041ac:	2300      	movs	r3, #0
  4041ae:	6023      	str	r3, [r4, #0]
  4041b0:	f7fd fba0 	bl	4018f4 <_kill>
  4041b4:	1c43      	adds	r3, r0, #1
  4041b6:	d000      	beq.n	4041ba <_kill_r+0x1a>
  4041b8:	bd38      	pop	{r3, r4, r5, pc}
  4041ba:	6823      	ldr	r3, [r4, #0]
  4041bc:	2b00      	cmp	r3, #0
  4041be:	d0fb      	beq.n	4041b8 <_kill_r+0x18>
  4041c0:	602b      	str	r3, [r5, #0]
  4041c2:	bd38      	pop	{r3, r4, r5, pc}
  4041c4:	204014d4 	.word	0x204014d4

004041c8 <_getpid_r>:
  4041c8:	f7fd bb95 	b.w	4018f6 <_getpid>

004041cc <__sread>:
  4041cc:	b510      	push	{r4, lr}
  4041ce:	460c      	mov	r4, r1
  4041d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4041d4:	f000 fa7a 	bl	4046cc <_read_r>
  4041d8:	2800      	cmp	r0, #0
  4041da:	db03      	blt.n	4041e4 <__sread+0x18>
  4041dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4041de:	4403      	add	r3, r0
  4041e0:	6523      	str	r3, [r4, #80]	; 0x50
  4041e2:	bd10      	pop	{r4, pc}
  4041e4:	89a3      	ldrh	r3, [r4, #12]
  4041e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4041ea:	81a3      	strh	r3, [r4, #12]
  4041ec:	bd10      	pop	{r4, pc}
  4041ee:	bf00      	nop

004041f0 <__swrite>:
  4041f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4041f4:	4616      	mov	r6, r2
  4041f6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4041fa:	461f      	mov	r7, r3
  4041fc:	05d3      	lsls	r3, r2, #23
  4041fe:	460c      	mov	r4, r1
  404200:	4605      	mov	r5, r0
  404202:	d507      	bpl.n	404214 <__swrite+0x24>
  404204:	2200      	movs	r2, #0
  404206:	2302      	movs	r3, #2
  404208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40420c:	f000 fa48 	bl	4046a0 <_lseek_r>
  404210:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404218:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40421c:	81a2      	strh	r2, [r4, #12]
  40421e:	463b      	mov	r3, r7
  404220:	4632      	mov	r2, r6
  404222:	4628      	mov	r0, r5
  404224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404228:	f000 b928 	b.w	40447c <_write_r>

0040422c <__sseek>:
  40422c:	b510      	push	{r4, lr}
  40422e:	460c      	mov	r4, r1
  404230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404234:	f000 fa34 	bl	4046a0 <_lseek_r>
  404238:	89a3      	ldrh	r3, [r4, #12]
  40423a:	1c42      	adds	r2, r0, #1
  40423c:	bf0e      	itee	eq
  40423e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404242:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404246:	6520      	strne	r0, [r4, #80]	; 0x50
  404248:	81a3      	strh	r3, [r4, #12]
  40424a:	bd10      	pop	{r4, pc}

0040424c <__sclose>:
  40424c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404250:	f000 b98c 	b.w	40456c <_close_r>
	...

00404280 <strlen>:
  404280:	f890 f000 	pld	[r0]
  404284:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404288:	f020 0107 	bic.w	r1, r0, #7
  40428c:	f06f 0c00 	mvn.w	ip, #0
  404290:	f010 0407 	ands.w	r4, r0, #7
  404294:	f891 f020 	pld	[r1, #32]
  404298:	f040 8049 	bne.w	40432e <strlen+0xae>
  40429c:	f04f 0400 	mov.w	r4, #0
  4042a0:	f06f 0007 	mvn.w	r0, #7
  4042a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4042a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4042ac:	f100 0008 	add.w	r0, r0, #8
  4042b0:	fa82 f24c 	uadd8	r2, r2, ip
  4042b4:	faa4 f28c 	sel	r2, r4, ip
  4042b8:	fa83 f34c 	uadd8	r3, r3, ip
  4042bc:	faa2 f38c 	sel	r3, r2, ip
  4042c0:	bb4b      	cbnz	r3, 404316 <strlen+0x96>
  4042c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4042c6:	fa82 f24c 	uadd8	r2, r2, ip
  4042ca:	f100 0008 	add.w	r0, r0, #8
  4042ce:	faa4 f28c 	sel	r2, r4, ip
  4042d2:	fa83 f34c 	uadd8	r3, r3, ip
  4042d6:	faa2 f38c 	sel	r3, r2, ip
  4042da:	b9e3      	cbnz	r3, 404316 <strlen+0x96>
  4042dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4042e0:	fa82 f24c 	uadd8	r2, r2, ip
  4042e4:	f100 0008 	add.w	r0, r0, #8
  4042e8:	faa4 f28c 	sel	r2, r4, ip
  4042ec:	fa83 f34c 	uadd8	r3, r3, ip
  4042f0:	faa2 f38c 	sel	r3, r2, ip
  4042f4:	b97b      	cbnz	r3, 404316 <strlen+0x96>
  4042f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4042fa:	f101 0120 	add.w	r1, r1, #32
  4042fe:	fa82 f24c 	uadd8	r2, r2, ip
  404302:	f100 0008 	add.w	r0, r0, #8
  404306:	faa4 f28c 	sel	r2, r4, ip
  40430a:	fa83 f34c 	uadd8	r3, r3, ip
  40430e:	faa2 f38c 	sel	r3, r2, ip
  404312:	2b00      	cmp	r3, #0
  404314:	d0c6      	beq.n	4042a4 <strlen+0x24>
  404316:	2a00      	cmp	r2, #0
  404318:	bf04      	itt	eq
  40431a:	3004      	addeq	r0, #4
  40431c:	461a      	moveq	r2, r3
  40431e:	ba12      	rev	r2, r2
  404320:	fab2 f282 	clz	r2, r2
  404324:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404328:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40432c:	4770      	bx	lr
  40432e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404332:	f004 0503 	and.w	r5, r4, #3
  404336:	f1c4 0000 	rsb	r0, r4, #0
  40433a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40433e:	f014 0f04 	tst.w	r4, #4
  404342:	f891 f040 	pld	[r1, #64]	; 0x40
  404346:	fa0c f505 	lsl.w	r5, ip, r5
  40434a:	ea62 0205 	orn	r2, r2, r5
  40434e:	bf1c      	itt	ne
  404350:	ea63 0305 	ornne	r3, r3, r5
  404354:	4662      	movne	r2, ip
  404356:	f04f 0400 	mov.w	r4, #0
  40435a:	e7a9      	b.n	4042b0 <strlen+0x30>

0040435c <__swbuf_r>:
  40435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40435e:	460d      	mov	r5, r1
  404360:	4614      	mov	r4, r2
  404362:	4606      	mov	r6, r0
  404364:	b110      	cbz	r0, 40436c <__swbuf_r+0x10>
  404366:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404368:	2b00      	cmp	r3, #0
  40436a:	d04b      	beq.n	404404 <__swbuf_r+0xa8>
  40436c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404370:	69a3      	ldr	r3, [r4, #24]
  404372:	60a3      	str	r3, [r4, #8]
  404374:	b291      	uxth	r1, r2
  404376:	0708      	lsls	r0, r1, #28
  404378:	d539      	bpl.n	4043ee <__swbuf_r+0x92>
  40437a:	6923      	ldr	r3, [r4, #16]
  40437c:	2b00      	cmp	r3, #0
  40437e:	d036      	beq.n	4043ee <__swbuf_r+0x92>
  404380:	b2ed      	uxtb	r5, r5
  404382:	0489      	lsls	r1, r1, #18
  404384:	462f      	mov	r7, r5
  404386:	d515      	bpl.n	4043b4 <__swbuf_r+0x58>
  404388:	6822      	ldr	r2, [r4, #0]
  40438a:	6961      	ldr	r1, [r4, #20]
  40438c:	1ad3      	subs	r3, r2, r3
  40438e:	428b      	cmp	r3, r1
  404390:	da1c      	bge.n	4043cc <__swbuf_r+0x70>
  404392:	3301      	adds	r3, #1
  404394:	68a1      	ldr	r1, [r4, #8]
  404396:	1c50      	adds	r0, r2, #1
  404398:	3901      	subs	r1, #1
  40439a:	60a1      	str	r1, [r4, #8]
  40439c:	6020      	str	r0, [r4, #0]
  40439e:	7015      	strb	r5, [r2, #0]
  4043a0:	6962      	ldr	r2, [r4, #20]
  4043a2:	429a      	cmp	r2, r3
  4043a4:	d01a      	beq.n	4043dc <__swbuf_r+0x80>
  4043a6:	89a3      	ldrh	r3, [r4, #12]
  4043a8:	07db      	lsls	r3, r3, #31
  4043aa:	d501      	bpl.n	4043b0 <__swbuf_r+0x54>
  4043ac:	2d0a      	cmp	r5, #10
  4043ae:	d015      	beq.n	4043dc <__swbuf_r+0x80>
  4043b0:	4638      	mov	r0, r7
  4043b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4043b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4043b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4043ba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4043be:	81a2      	strh	r2, [r4, #12]
  4043c0:	6822      	ldr	r2, [r4, #0]
  4043c2:	6661      	str	r1, [r4, #100]	; 0x64
  4043c4:	6961      	ldr	r1, [r4, #20]
  4043c6:	1ad3      	subs	r3, r2, r3
  4043c8:	428b      	cmp	r3, r1
  4043ca:	dbe2      	blt.n	404392 <__swbuf_r+0x36>
  4043cc:	4621      	mov	r1, r4
  4043ce:	4630      	mov	r0, r6
  4043d0:	f7fe fcd0 	bl	402d74 <_fflush_r>
  4043d4:	b940      	cbnz	r0, 4043e8 <__swbuf_r+0x8c>
  4043d6:	6822      	ldr	r2, [r4, #0]
  4043d8:	2301      	movs	r3, #1
  4043da:	e7db      	b.n	404394 <__swbuf_r+0x38>
  4043dc:	4621      	mov	r1, r4
  4043de:	4630      	mov	r0, r6
  4043e0:	f7fe fcc8 	bl	402d74 <_fflush_r>
  4043e4:	2800      	cmp	r0, #0
  4043e6:	d0e3      	beq.n	4043b0 <__swbuf_r+0x54>
  4043e8:	f04f 37ff 	mov.w	r7, #4294967295
  4043ec:	e7e0      	b.n	4043b0 <__swbuf_r+0x54>
  4043ee:	4621      	mov	r1, r4
  4043f0:	4630      	mov	r0, r6
  4043f2:	f7fe fba3 	bl	402b3c <__swsetup_r>
  4043f6:	2800      	cmp	r0, #0
  4043f8:	d1f6      	bne.n	4043e8 <__swbuf_r+0x8c>
  4043fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4043fe:	6923      	ldr	r3, [r4, #16]
  404400:	b291      	uxth	r1, r2
  404402:	e7bd      	b.n	404380 <__swbuf_r+0x24>
  404404:	f7fe fd0e 	bl	402e24 <__sinit>
  404408:	e7b0      	b.n	40436c <__swbuf_r+0x10>
  40440a:	bf00      	nop

0040440c <_wcrtomb_r>:
  40440c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40440e:	4606      	mov	r6, r0
  404410:	b085      	sub	sp, #20
  404412:	461f      	mov	r7, r3
  404414:	b189      	cbz	r1, 40443a <_wcrtomb_r+0x2e>
  404416:	4c10      	ldr	r4, [pc, #64]	; (404458 <_wcrtomb_r+0x4c>)
  404418:	4d10      	ldr	r5, [pc, #64]	; (40445c <_wcrtomb_r+0x50>)
  40441a:	6824      	ldr	r4, [r4, #0]
  40441c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40441e:	2c00      	cmp	r4, #0
  404420:	bf08      	it	eq
  404422:	462c      	moveq	r4, r5
  404424:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  404428:	47a0      	blx	r4
  40442a:	1c43      	adds	r3, r0, #1
  40442c:	d103      	bne.n	404436 <_wcrtomb_r+0x2a>
  40442e:	2200      	movs	r2, #0
  404430:	238a      	movs	r3, #138	; 0x8a
  404432:	603a      	str	r2, [r7, #0]
  404434:	6033      	str	r3, [r6, #0]
  404436:	b005      	add	sp, #20
  404438:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40443a:	460c      	mov	r4, r1
  40443c:	4906      	ldr	r1, [pc, #24]	; (404458 <_wcrtomb_r+0x4c>)
  40443e:	4a07      	ldr	r2, [pc, #28]	; (40445c <_wcrtomb_r+0x50>)
  404440:	6809      	ldr	r1, [r1, #0]
  404442:	6b49      	ldr	r1, [r1, #52]	; 0x34
  404444:	2900      	cmp	r1, #0
  404446:	bf08      	it	eq
  404448:	4611      	moveq	r1, r2
  40444a:	4622      	mov	r2, r4
  40444c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  404450:	a901      	add	r1, sp, #4
  404452:	47a0      	blx	r4
  404454:	e7e9      	b.n	40442a <_wcrtomb_r+0x1e>
  404456:	bf00      	nop
  404458:	20400010 	.word	0x20400010
  40445c:	20400444 	.word	0x20400444

00404460 <__ascii_wctomb>:
  404460:	b121      	cbz	r1, 40446c <__ascii_wctomb+0xc>
  404462:	2aff      	cmp	r2, #255	; 0xff
  404464:	d804      	bhi.n	404470 <__ascii_wctomb+0x10>
  404466:	700a      	strb	r2, [r1, #0]
  404468:	2001      	movs	r0, #1
  40446a:	4770      	bx	lr
  40446c:	4608      	mov	r0, r1
  40446e:	4770      	bx	lr
  404470:	238a      	movs	r3, #138	; 0x8a
  404472:	6003      	str	r3, [r0, #0]
  404474:	f04f 30ff 	mov.w	r0, #4294967295
  404478:	4770      	bx	lr
  40447a:	bf00      	nop

0040447c <_write_r>:
  40447c:	b570      	push	{r4, r5, r6, lr}
  40447e:	460d      	mov	r5, r1
  404480:	4c08      	ldr	r4, [pc, #32]	; (4044a4 <_write_r+0x28>)
  404482:	4611      	mov	r1, r2
  404484:	4606      	mov	r6, r0
  404486:	461a      	mov	r2, r3
  404488:	4628      	mov	r0, r5
  40448a:	2300      	movs	r3, #0
  40448c:	6023      	str	r3, [r4, #0]
  40448e:	f7fc fc39 	bl	400d04 <_write>
  404492:	1c43      	adds	r3, r0, #1
  404494:	d000      	beq.n	404498 <_write_r+0x1c>
  404496:	bd70      	pop	{r4, r5, r6, pc}
  404498:	6823      	ldr	r3, [r4, #0]
  40449a:	2b00      	cmp	r3, #0
  40449c:	d0fb      	beq.n	404496 <_write_r+0x1a>
  40449e:	6033      	str	r3, [r6, #0]
  4044a0:	bd70      	pop	{r4, r5, r6, pc}
  4044a2:	bf00      	nop
  4044a4:	204014d4 	.word	0x204014d4

004044a8 <__register_exitproc>:
  4044a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4044ac:	4d2c      	ldr	r5, [pc, #176]	; (404560 <__register_exitproc+0xb8>)
  4044ae:	4606      	mov	r6, r0
  4044b0:	6828      	ldr	r0, [r5, #0]
  4044b2:	4698      	mov	r8, r3
  4044b4:	460f      	mov	r7, r1
  4044b6:	4691      	mov	r9, r2
  4044b8:	f7ff f874 	bl	4035a4 <__retarget_lock_acquire_recursive>
  4044bc:	4b29      	ldr	r3, [pc, #164]	; (404564 <__register_exitproc+0xbc>)
  4044be:	681c      	ldr	r4, [r3, #0]
  4044c0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4044c4:	2b00      	cmp	r3, #0
  4044c6:	d03e      	beq.n	404546 <__register_exitproc+0x9e>
  4044c8:	685a      	ldr	r2, [r3, #4]
  4044ca:	2a1f      	cmp	r2, #31
  4044cc:	dc1c      	bgt.n	404508 <__register_exitproc+0x60>
  4044ce:	f102 0e01 	add.w	lr, r2, #1
  4044d2:	b176      	cbz	r6, 4044f2 <__register_exitproc+0x4a>
  4044d4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4044d8:	2401      	movs	r4, #1
  4044da:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4044de:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4044e2:	4094      	lsls	r4, r2
  4044e4:	4320      	orrs	r0, r4
  4044e6:	2e02      	cmp	r6, #2
  4044e8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4044ec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4044f0:	d023      	beq.n	40453a <__register_exitproc+0x92>
  4044f2:	3202      	adds	r2, #2
  4044f4:	f8c3 e004 	str.w	lr, [r3, #4]
  4044f8:	6828      	ldr	r0, [r5, #0]
  4044fa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4044fe:	f7ff f853 	bl	4035a8 <__retarget_lock_release_recursive>
  404502:	2000      	movs	r0, #0
  404504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404508:	4b17      	ldr	r3, [pc, #92]	; (404568 <__register_exitproc+0xc0>)
  40450a:	b30b      	cbz	r3, 404550 <__register_exitproc+0xa8>
  40450c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  404510:	f7ff f8c4 	bl	40369c <malloc>
  404514:	4603      	mov	r3, r0
  404516:	b1d8      	cbz	r0, 404550 <__register_exitproc+0xa8>
  404518:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40451c:	6002      	str	r2, [r0, #0]
  40451e:	2100      	movs	r1, #0
  404520:	6041      	str	r1, [r0, #4]
  404522:	460a      	mov	r2, r1
  404524:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  404528:	f04f 0e01 	mov.w	lr, #1
  40452c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  404530:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  404534:	2e00      	cmp	r6, #0
  404536:	d0dc      	beq.n	4044f2 <__register_exitproc+0x4a>
  404538:	e7cc      	b.n	4044d4 <__register_exitproc+0x2c>
  40453a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40453e:	430c      	orrs	r4, r1
  404540:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  404544:	e7d5      	b.n	4044f2 <__register_exitproc+0x4a>
  404546:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40454a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40454e:	e7bb      	b.n	4044c8 <__register_exitproc+0x20>
  404550:	6828      	ldr	r0, [r5, #0]
  404552:	f7ff f829 	bl	4035a8 <__retarget_lock_release_recursive>
  404556:	f04f 30ff 	mov.w	r0, #4294967295
  40455a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40455e:	bf00      	nop
  404560:	20400440 	.word	0x20400440
  404564:	00404ed4 	.word	0x00404ed4
  404568:	0040369d 	.word	0x0040369d

0040456c <_close_r>:
  40456c:	b538      	push	{r3, r4, r5, lr}
  40456e:	4c07      	ldr	r4, [pc, #28]	; (40458c <_close_r+0x20>)
  404570:	2300      	movs	r3, #0
  404572:	4605      	mov	r5, r0
  404574:	4608      	mov	r0, r1
  404576:	6023      	str	r3, [r4, #0]
  404578:	f7fd f9ae 	bl	4018d8 <_close>
  40457c:	1c43      	adds	r3, r0, #1
  40457e:	d000      	beq.n	404582 <_close_r+0x16>
  404580:	bd38      	pop	{r3, r4, r5, pc}
  404582:	6823      	ldr	r3, [r4, #0]
  404584:	2b00      	cmp	r3, #0
  404586:	d0fb      	beq.n	404580 <_close_r+0x14>
  404588:	602b      	str	r3, [r5, #0]
  40458a:	bd38      	pop	{r3, r4, r5, pc}
  40458c:	204014d4 	.word	0x204014d4

00404590 <_fclose_r>:
  404590:	b570      	push	{r4, r5, r6, lr}
  404592:	b159      	cbz	r1, 4045ac <_fclose_r+0x1c>
  404594:	4605      	mov	r5, r0
  404596:	460c      	mov	r4, r1
  404598:	b110      	cbz	r0, 4045a0 <_fclose_r+0x10>
  40459a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40459c:	2b00      	cmp	r3, #0
  40459e:	d03c      	beq.n	40461a <_fclose_r+0x8a>
  4045a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4045a2:	07d8      	lsls	r0, r3, #31
  4045a4:	d505      	bpl.n	4045b2 <_fclose_r+0x22>
  4045a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4045aa:	b92b      	cbnz	r3, 4045b8 <_fclose_r+0x28>
  4045ac:	2600      	movs	r6, #0
  4045ae:	4630      	mov	r0, r6
  4045b0:	bd70      	pop	{r4, r5, r6, pc}
  4045b2:	89a3      	ldrh	r3, [r4, #12]
  4045b4:	0599      	lsls	r1, r3, #22
  4045b6:	d53c      	bpl.n	404632 <_fclose_r+0xa2>
  4045b8:	4621      	mov	r1, r4
  4045ba:	4628      	mov	r0, r5
  4045bc:	f7fe fb3a 	bl	402c34 <__sflush_r>
  4045c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4045c2:	4606      	mov	r6, r0
  4045c4:	b133      	cbz	r3, 4045d4 <_fclose_r+0x44>
  4045c6:	69e1      	ldr	r1, [r4, #28]
  4045c8:	4628      	mov	r0, r5
  4045ca:	4798      	blx	r3
  4045cc:	2800      	cmp	r0, #0
  4045ce:	bfb8      	it	lt
  4045d0:	f04f 36ff 	movlt.w	r6, #4294967295
  4045d4:	89a3      	ldrh	r3, [r4, #12]
  4045d6:	061a      	lsls	r2, r3, #24
  4045d8:	d422      	bmi.n	404620 <_fclose_r+0x90>
  4045da:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4045dc:	b141      	cbz	r1, 4045f0 <_fclose_r+0x60>
  4045de:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4045e2:	4299      	cmp	r1, r3
  4045e4:	d002      	beq.n	4045ec <_fclose_r+0x5c>
  4045e6:	4628      	mov	r0, r5
  4045e8:	f7fe fd42 	bl	403070 <_free_r>
  4045ec:	2300      	movs	r3, #0
  4045ee:	6323      	str	r3, [r4, #48]	; 0x30
  4045f0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4045f2:	b121      	cbz	r1, 4045fe <_fclose_r+0x6e>
  4045f4:	4628      	mov	r0, r5
  4045f6:	f7fe fd3b 	bl	403070 <_free_r>
  4045fa:	2300      	movs	r3, #0
  4045fc:	6463      	str	r3, [r4, #68]	; 0x44
  4045fe:	f7fe fc3d 	bl	402e7c <__sfp_lock_acquire>
  404602:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404604:	2200      	movs	r2, #0
  404606:	07db      	lsls	r3, r3, #31
  404608:	81a2      	strh	r2, [r4, #12]
  40460a:	d50e      	bpl.n	40462a <_fclose_r+0x9a>
  40460c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40460e:	f7fe ffc7 	bl	4035a0 <__retarget_lock_close_recursive>
  404612:	f7fe fc39 	bl	402e88 <__sfp_lock_release>
  404616:	4630      	mov	r0, r6
  404618:	bd70      	pop	{r4, r5, r6, pc}
  40461a:	f7fe fc03 	bl	402e24 <__sinit>
  40461e:	e7bf      	b.n	4045a0 <_fclose_r+0x10>
  404620:	6921      	ldr	r1, [r4, #16]
  404622:	4628      	mov	r0, r5
  404624:	f7fe fd24 	bl	403070 <_free_r>
  404628:	e7d7      	b.n	4045da <_fclose_r+0x4a>
  40462a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40462c:	f7fe ffbc 	bl	4035a8 <__retarget_lock_release_recursive>
  404630:	e7ec      	b.n	40460c <_fclose_r+0x7c>
  404632:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404634:	f7fe ffb6 	bl	4035a4 <__retarget_lock_acquire_recursive>
  404638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40463c:	2b00      	cmp	r3, #0
  40463e:	d1bb      	bne.n	4045b8 <_fclose_r+0x28>
  404640:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404642:	f016 0601 	ands.w	r6, r6, #1
  404646:	d1b1      	bne.n	4045ac <_fclose_r+0x1c>
  404648:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40464a:	f7fe ffad 	bl	4035a8 <__retarget_lock_release_recursive>
  40464e:	4630      	mov	r0, r6
  404650:	bd70      	pop	{r4, r5, r6, pc}
  404652:	bf00      	nop

00404654 <_fstat_r>:
  404654:	b538      	push	{r3, r4, r5, lr}
  404656:	460b      	mov	r3, r1
  404658:	4c07      	ldr	r4, [pc, #28]	; (404678 <_fstat_r+0x24>)
  40465a:	4605      	mov	r5, r0
  40465c:	4611      	mov	r1, r2
  40465e:	4618      	mov	r0, r3
  404660:	2300      	movs	r3, #0
  404662:	6023      	str	r3, [r4, #0]
  404664:	f7fd f93b 	bl	4018de <_fstat>
  404668:	1c43      	adds	r3, r0, #1
  40466a:	d000      	beq.n	40466e <_fstat_r+0x1a>
  40466c:	bd38      	pop	{r3, r4, r5, pc}
  40466e:	6823      	ldr	r3, [r4, #0]
  404670:	2b00      	cmp	r3, #0
  404672:	d0fb      	beq.n	40466c <_fstat_r+0x18>
  404674:	602b      	str	r3, [r5, #0]
  404676:	bd38      	pop	{r3, r4, r5, pc}
  404678:	204014d4 	.word	0x204014d4

0040467c <_isatty_r>:
  40467c:	b538      	push	{r3, r4, r5, lr}
  40467e:	4c07      	ldr	r4, [pc, #28]	; (40469c <_isatty_r+0x20>)
  404680:	2300      	movs	r3, #0
  404682:	4605      	mov	r5, r0
  404684:	4608      	mov	r0, r1
  404686:	6023      	str	r3, [r4, #0]
  404688:	f7fd f92e 	bl	4018e8 <_isatty>
  40468c:	1c43      	adds	r3, r0, #1
  40468e:	d000      	beq.n	404692 <_isatty_r+0x16>
  404690:	bd38      	pop	{r3, r4, r5, pc}
  404692:	6823      	ldr	r3, [r4, #0]
  404694:	2b00      	cmp	r3, #0
  404696:	d0fb      	beq.n	404690 <_isatty_r+0x14>
  404698:	602b      	str	r3, [r5, #0]
  40469a:	bd38      	pop	{r3, r4, r5, pc}
  40469c:	204014d4 	.word	0x204014d4

004046a0 <_lseek_r>:
  4046a0:	b570      	push	{r4, r5, r6, lr}
  4046a2:	460d      	mov	r5, r1
  4046a4:	4c08      	ldr	r4, [pc, #32]	; (4046c8 <_lseek_r+0x28>)
  4046a6:	4611      	mov	r1, r2
  4046a8:	4606      	mov	r6, r0
  4046aa:	461a      	mov	r2, r3
  4046ac:	4628      	mov	r0, r5
  4046ae:	2300      	movs	r3, #0
  4046b0:	6023      	str	r3, [r4, #0]
  4046b2:	f7fd f91b 	bl	4018ec <_lseek>
  4046b6:	1c43      	adds	r3, r0, #1
  4046b8:	d000      	beq.n	4046bc <_lseek_r+0x1c>
  4046ba:	bd70      	pop	{r4, r5, r6, pc}
  4046bc:	6823      	ldr	r3, [r4, #0]
  4046be:	2b00      	cmp	r3, #0
  4046c0:	d0fb      	beq.n	4046ba <_lseek_r+0x1a>
  4046c2:	6033      	str	r3, [r6, #0]
  4046c4:	bd70      	pop	{r4, r5, r6, pc}
  4046c6:	bf00      	nop
  4046c8:	204014d4 	.word	0x204014d4

004046cc <_read_r>:
  4046cc:	b570      	push	{r4, r5, r6, lr}
  4046ce:	460d      	mov	r5, r1
  4046d0:	4c08      	ldr	r4, [pc, #32]	; (4046f4 <_read_r+0x28>)
  4046d2:	4611      	mov	r1, r2
  4046d4:	4606      	mov	r6, r0
  4046d6:	461a      	mov	r2, r3
  4046d8:	4628      	mov	r0, r5
  4046da:	2300      	movs	r3, #0
  4046dc:	6023      	str	r3, [r4, #0]
  4046de:	f7fc faf3 	bl	400cc8 <_read>
  4046e2:	1c43      	adds	r3, r0, #1
  4046e4:	d000      	beq.n	4046e8 <_read_r+0x1c>
  4046e6:	bd70      	pop	{r4, r5, r6, pc}
  4046e8:	6823      	ldr	r3, [r4, #0]
  4046ea:	2b00      	cmp	r3, #0
  4046ec:	d0fb      	beq.n	4046e6 <_read_r+0x1a>
  4046ee:	6033      	str	r3, [r6, #0]
  4046f0:	bd70      	pop	{r4, r5, r6, pc}
  4046f2:	bf00      	nop
  4046f4:	204014d4 	.word	0x204014d4

004046f8 <__aeabi_uldivmod>:
  4046f8:	b953      	cbnz	r3, 404710 <__aeabi_uldivmod+0x18>
  4046fa:	b94a      	cbnz	r2, 404710 <__aeabi_uldivmod+0x18>
  4046fc:	2900      	cmp	r1, #0
  4046fe:	bf08      	it	eq
  404700:	2800      	cmpeq	r0, #0
  404702:	bf1c      	itt	ne
  404704:	f04f 31ff 	movne.w	r1, #4294967295
  404708:	f04f 30ff 	movne.w	r0, #4294967295
  40470c:	f000 b97a 	b.w	404a04 <__aeabi_idiv0>
  404710:	f1ad 0c08 	sub.w	ip, sp, #8
  404714:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404718:	f000 f806 	bl	404728 <__udivmoddi4>
  40471c:	f8dd e004 	ldr.w	lr, [sp, #4]
  404720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404724:	b004      	add	sp, #16
  404726:	4770      	bx	lr

00404728 <__udivmoddi4>:
  404728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40472c:	468c      	mov	ip, r1
  40472e:	460d      	mov	r5, r1
  404730:	4604      	mov	r4, r0
  404732:	9e08      	ldr	r6, [sp, #32]
  404734:	2b00      	cmp	r3, #0
  404736:	d151      	bne.n	4047dc <__udivmoddi4+0xb4>
  404738:	428a      	cmp	r2, r1
  40473a:	4617      	mov	r7, r2
  40473c:	d96d      	bls.n	40481a <__udivmoddi4+0xf2>
  40473e:	fab2 fe82 	clz	lr, r2
  404742:	f1be 0f00 	cmp.w	lr, #0
  404746:	d00b      	beq.n	404760 <__udivmoddi4+0x38>
  404748:	f1ce 0c20 	rsb	ip, lr, #32
  40474c:	fa01 f50e 	lsl.w	r5, r1, lr
  404750:	fa20 fc0c 	lsr.w	ip, r0, ip
  404754:	fa02 f70e 	lsl.w	r7, r2, lr
  404758:	ea4c 0c05 	orr.w	ip, ip, r5
  40475c:	fa00 f40e 	lsl.w	r4, r0, lr
  404760:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  404764:	0c25      	lsrs	r5, r4, #16
  404766:	fbbc f8fa 	udiv	r8, ip, sl
  40476a:	fa1f f987 	uxth.w	r9, r7
  40476e:	fb0a cc18 	mls	ip, sl, r8, ip
  404772:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  404776:	fb08 f309 	mul.w	r3, r8, r9
  40477a:	42ab      	cmp	r3, r5
  40477c:	d90a      	bls.n	404794 <__udivmoddi4+0x6c>
  40477e:	19ed      	adds	r5, r5, r7
  404780:	f108 32ff 	add.w	r2, r8, #4294967295
  404784:	f080 8123 	bcs.w	4049ce <__udivmoddi4+0x2a6>
  404788:	42ab      	cmp	r3, r5
  40478a:	f240 8120 	bls.w	4049ce <__udivmoddi4+0x2a6>
  40478e:	f1a8 0802 	sub.w	r8, r8, #2
  404792:	443d      	add	r5, r7
  404794:	1aed      	subs	r5, r5, r3
  404796:	b2a4      	uxth	r4, r4
  404798:	fbb5 f0fa 	udiv	r0, r5, sl
  40479c:	fb0a 5510 	mls	r5, sl, r0, r5
  4047a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4047a4:	fb00 f909 	mul.w	r9, r0, r9
  4047a8:	45a1      	cmp	r9, r4
  4047aa:	d909      	bls.n	4047c0 <__udivmoddi4+0x98>
  4047ac:	19e4      	adds	r4, r4, r7
  4047ae:	f100 33ff 	add.w	r3, r0, #4294967295
  4047b2:	f080 810a 	bcs.w	4049ca <__udivmoddi4+0x2a2>
  4047b6:	45a1      	cmp	r9, r4
  4047b8:	f240 8107 	bls.w	4049ca <__udivmoddi4+0x2a2>
  4047bc:	3802      	subs	r0, #2
  4047be:	443c      	add	r4, r7
  4047c0:	eba4 0409 	sub.w	r4, r4, r9
  4047c4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4047c8:	2100      	movs	r1, #0
  4047ca:	2e00      	cmp	r6, #0
  4047cc:	d061      	beq.n	404892 <__udivmoddi4+0x16a>
  4047ce:	fa24 f40e 	lsr.w	r4, r4, lr
  4047d2:	2300      	movs	r3, #0
  4047d4:	6034      	str	r4, [r6, #0]
  4047d6:	6073      	str	r3, [r6, #4]
  4047d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4047dc:	428b      	cmp	r3, r1
  4047de:	d907      	bls.n	4047f0 <__udivmoddi4+0xc8>
  4047e0:	2e00      	cmp	r6, #0
  4047e2:	d054      	beq.n	40488e <__udivmoddi4+0x166>
  4047e4:	2100      	movs	r1, #0
  4047e6:	e886 0021 	stmia.w	r6, {r0, r5}
  4047ea:	4608      	mov	r0, r1
  4047ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4047f0:	fab3 f183 	clz	r1, r3
  4047f4:	2900      	cmp	r1, #0
  4047f6:	f040 808e 	bne.w	404916 <__udivmoddi4+0x1ee>
  4047fa:	42ab      	cmp	r3, r5
  4047fc:	d302      	bcc.n	404804 <__udivmoddi4+0xdc>
  4047fe:	4282      	cmp	r2, r0
  404800:	f200 80fa 	bhi.w	4049f8 <__udivmoddi4+0x2d0>
  404804:	1a84      	subs	r4, r0, r2
  404806:	eb65 0503 	sbc.w	r5, r5, r3
  40480a:	2001      	movs	r0, #1
  40480c:	46ac      	mov	ip, r5
  40480e:	2e00      	cmp	r6, #0
  404810:	d03f      	beq.n	404892 <__udivmoddi4+0x16a>
  404812:	e886 1010 	stmia.w	r6, {r4, ip}
  404816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40481a:	b912      	cbnz	r2, 404822 <__udivmoddi4+0xfa>
  40481c:	2701      	movs	r7, #1
  40481e:	fbb7 f7f2 	udiv	r7, r7, r2
  404822:	fab7 fe87 	clz	lr, r7
  404826:	f1be 0f00 	cmp.w	lr, #0
  40482a:	d134      	bne.n	404896 <__udivmoddi4+0x16e>
  40482c:	1beb      	subs	r3, r5, r7
  40482e:	0c3a      	lsrs	r2, r7, #16
  404830:	fa1f fc87 	uxth.w	ip, r7
  404834:	2101      	movs	r1, #1
  404836:	fbb3 f8f2 	udiv	r8, r3, r2
  40483a:	0c25      	lsrs	r5, r4, #16
  40483c:	fb02 3318 	mls	r3, r2, r8, r3
  404840:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404844:	fb0c f308 	mul.w	r3, ip, r8
  404848:	42ab      	cmp	r3, r5
  40484a:	d907      	bls.n	40485c <__udivmoddi4+0x134>
  40484c:	19ed      	adds	r5, r5, r7
  40484e:	f108 30ff 	add.w	r0, r8, #4294967295
  404852:	d202      	bcs.n	40485a <__udivmoddi4+0x132>
  404854:	42ab      	cmp	r3, r5
  404856:	f200 80d1 	bhi.w	4049fc <__udivmoddi4+0x2d4>
  40485a:	4680      	mov	r8, r0
  40485c:	1aed      	subs	r5, r5, r3
  40485e:	b2a3      	uxth	r3, r4
  404860:	fbb5 f0f2 	udiv	r0, r5, r2
  404864:	fb02 5510 	mls	r5, r2, r0, r5
  404868:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40486c:	fb0c fc00 	mul.w	ip, ip, r0
  404870:	45a4      	cmp	ip, r4
  404872:	d907      	bls.n	404884 <__udivmoddi4+0x15c>
  404874:	19e4      	adds	r4, r4, r7
  404876:	f100 33ff 	add.w	r3, r0, #4294967295
  40487a:	d202      	bcs.n	404882 <__udivmoddi4+0x15a>
  40487c:	45a4      	cmp	ip, r4
  40487e:	f200 80b8 	bhi.w	4049f2 <__udivmoddi4+0x2ca>
  404882:	4618      	mov	r0, r3
  404884:	eba4 040c 	sub.w	r4, r4, ip
  404888:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40488c:	e79d      	b.n	4047ca <__udivmoddi4+0xa2>
  40488e:	4631      	mov	r1, r6
  404890:	4630      	mov	r0, r6
  404892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404896:	f1ce 0420 	rsb	r4, lr, #32
  40489a:	fa05 f30e 	lsl.w	r3, r5, lr
  40489e:	fa07 f70e 	lsl.w	r7, r7, lr
  4048a2:	fa20 f804 	lsr.w	r8, r0, r4
  4048a6:	0c3a      	lsrs	r2, r7, #16
  4048a8:	fa25 f404 	lsr.w	r4, r5, r4
  4048ac:	ea48 0803 	orr.w	r8, r8, r3
  4048b0:	fbb4 f1f2 	udiv	r1, r4, r2
  4048b4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4048b8:	fb02 4411 	mls	r4, r2, r1, r4
  4048bc:	fa1f fc87 	uxth.w	ip, r7
  4048c0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4048c4:	fb01 f30c 	mul.w	r3, r1, ip
  4048c8:	42ab      	cmp	r3, r5
  4048ca:	fa00 f40e 	lsl.w	r4, r0, lr
  4048ce:	d909      	bls.n	4048e4 <__udivmoddi4+0x1bc>
  4048d0:	19ed      	adds	r5, r5, r7
  4048d2:	f101 30ff 	add.w	r0, r1, #4294967295
  4048d6:	f080 808a 	bcs.w	4049ee <__udivmoddi4+0x2c6>
  4048da:	42ab      	cmp	r3, r5
  4048dc:	f240 8087 	bls.w	4049ee <__udivmoddi4+0x2c6>
  4048e0:	3902      	subs	r1, #2
  4048e2:	443d      	add	r5, r7
  4048e4:	1aeb      	subs	r3, r5, r3
  4048e6:	fa1f f588 	uxth.w	r5, r8
  4048ea:	fbb3 f0f2 	udiv	r0, r3, r2
  4048ee:	fb02 3310 	mls	r3, r2, r0, r3
  4048f2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4048f6:	fb00 f30c 	mul.w	r3, r0, ip
  4048fa:	42ab      	cmp	r3, r5
  4048fc:	d907      	bls.n	40490e <__udivmoddi4+0x1e6>
  4048fe:	19ed      	adds	r5, r5, r7
  404900:	f100 38ff 	add.w	r8, r0, #4294967295
  404904:	d26f      	bcs.n	4049e6 <__udivmoddi4+0x2be>
  404906:	42ab      	cmp	r3, r5
  404908:	d96d      	bls.n	4049e6 <__udivmoddi4+0x2be>
  40490a:	3802      	subs	r0, #2
  40490c:	443d      	add	r5, r7
  40490e:	1aeb      	subs	r3, r5, r3
  404910:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  404914:	e78f      	b.n	404836 <__udivmoddi4+0x10e>
  404916:	f1c1 0720 	rsb	r7, r1, #32
  40491a:	fa22 f807 	lsr.w	r8, r2, r7
  40491e:	408b      	lsls	r3, r1
  404920:	fa05 f401 	lsl.w	r4, r5, r1
  404924:	ea48 0303 	orr.w	r3, r8, r3
  404928:	fa20 fe07 	lsr.w	lr, r0, r7
  40492c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  404930:	40fd      	lsrs	r5, r7
  404932:	ea4e 0e04 	orr.w	lr, lr, r4
  404936:	fbb5 f9fc 	udiv	r9, r5, ip
  40493a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40493e:	fb0c 5519 	mls	r5, ip, r9, r5
  404942:	fa1f f883 	uxth.w	r8, r3
  404946:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40494a:	fb09 f408 	mul.w	r4, r9, r8
  40494e:	42ac      	cmp	r4, r5
  404950:	fa02 f201 	lsl.w	r2, r2, r1
  404954:	fa00 fa01 	lsl.w	sl, r0, r1
  404958:	d908      	bls.n	40496c <__udivmoddi4+0x244>
  40495a:	18ed      	adds	r5, r5, r3
  40495c:	f109 30ff 	add.w	r0, r9, #4294967295
  404960:	d243      	bcs.n	4049ea <__udivmoddi4+0x2c2>
  404962:	42ac      	cmp	r4, r5
  404964:	d941      	bls.n	4049ea <__udivmoddi4+0x2c2>
  404966:	f1a9 0902 	sub.w	r9, r9, #2
  40496a:	441d      	add	r5, r3
  40496c:	1b2d      	subs	r5, r5, r4
  40496e:	fa1f fe8e 	uxth.w	lr, lr
  404972:	fbb5 f0fc 	udiv	r0, r5, ip
  404976:	fb0c 5510 	mls	r5, ip, r0, r5
  40497a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40497e:	fb00 f808 	mul.w	r8, r0, r8
  404982:	45a0      	cmp	r8, r4
  404984:	d907      	bls.n	404996 <__udivmoddi4+0x26e>
  404986:	18e4      	adds	r4, r4, r3
  404988:	f100 35ff 	add.w	r5, r0, #4294967295
  40498c:	d229      	bcs.n	4049e2 <__udivmoddi4+0x2ba>
  40498e:	45a0      	cmp	r8, r4
  404990:	d927      	bls.n	4049e2 <__udivmoddi4+0x2ba>
  404992:	3802      	subs	r0, #2
  404994:	441c      	add	r4, r3
  404996:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40499a:	eba4 0408 	sub.w	r4, r4, r8
  40499e:	fba0 8902 	umull	r8, r9, r0, r2
  4049a2:	454c      	cmp	r4, r9
  4049a4:	46c6      	mov	lr, r8
  4049a6:	464d      	mov	r5, r9
  4049a8:	d315      	bcc.n	4049d6 <__udivmoddi4+0x2ae>
  4049aa:	d012      	beq.n	4049d2 <__udivmoddi4+0x2aa>
  4049ac:	b156      	cbz	r6, 4049c4 <__udivmoddi4+0x29c>
  4049ae:	ebba 030e 	subs.w	r3, sl, lr
  4049b2:	eb64 0405 	sbc.w	r4, r4, r5
  4049b6:	fa04 f707 	lsl.w	r7, r4, r7
  4049ba:	40cb      	lsrs	r3, r1
  4049bc:	431f      	orrs	r7, r3
  4049be:	40cc      	lsrs	r4, r1
  4049c0:	6037      	str	r7, [r6, #0]
  4049c2:	6074      	str	r4, [r6, #4]
  4049c4:	2100      	movs	r1, #0
  4049c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4049ca:	4618      	mov	r0, r3
  4049cc:	e6f8      	b.n	4047c0 <__udivmoddi4+0x98>
  4049ce:	4690      	mov	r8, r2
  4049d0:	e6e0      	b.n	404794 <__udivmoddi4+0x6c>
  4049d2:	45c2      	cmp	sl, r8
  4049d4:	d2ea      	bcs.n	4049ac <__udivmoddi4+0x284>
  4049d6:	ebb8 0e02 	subs.w	lr, r8, r2
  4049da:	eb69 0503 	sbc.w	r5, r9, r3
  4049de:	3801      	subs	r0, #1
  4049e0:	e7e4      	b.n	4049ac <__udivmoddi4+0x284>
  4049e2:	4628      	mov	r0, r5
  4049e4:	e7d7      	b.n	404996 <__udivmoddi4+0x26e>
  4049e6:	4640      	mov	r0, r8
  4049e8:	e791      	b.n	40490e <__udivmoddi4+0x1e6>
  4049ea:	4681      	mov	r9, r0
  4049ec:	e7be      	b.n	40496c <__udivmoddi4+0x244>
  4049ee:	4601      	mov	r1, r0
  4049f0:	e778      	b.n	4048e4 <__udivmoddi4+0x1bc>
  4049f2:	3802      	subs	r0, #2
  4049f4:	443c      	add	r4, r7
  4049f6:	e745      	b.n	404884 <__udivmoddi4+0x15c>
  4049f8:	4608      	mov	r0, r1
  4049fa:	e708      	b.n	40480e <__udivmoddi4+0xe6>
  4049fc:	f1a8 0802 	sub.w	r8, r8, #2
  404a00:	443d      	add	r5, r7
  404a02:	e72b      	b.n	40485c <__udivmoddi4+0x134>

00404a04 <__aeabi_idiv0>:
  404a04:	4770      	bx	lr
  404a06:	bf00      	nop

00404a08 <__func__.5477>:
  404a08:	6163 5f6e 6c65 6d65 675f 7465 635f 6e61     can_elem_get_can
  404a18:	6d5f 6773 695f 666e 5f6f 736d 6967 0064     _msg_info_msgid.
  404a28:	6f66 6e75 4964 7864 2120 203d 2828 6f76     foundIdx != ((vo
  404a38:	6469 2a20 3029 0029 2e2e 622f 6362 726f     id *)0).../bbcor
  404a48:	2f65 6363 632f 6e61 655f 656c 2e6d 0063     e/cc/can_elem.c.

00404a58 <__func__.5838>:
  404a58:	6262 705f 726f 5f74 6573 5f74 6164 6174     bb_port_set_data
  404a68:	645f 7269 6365 3174 0036 0000               _direct16...

00404a74 <__func__.5847>:
  404a74:	6262 705f 726f 5f74 6573 5f74 6164 6174     bb_port_set_data
  404a84:	645f 7269 6365 3374 0032 0000               _direct32...

00404a90 <__func__.5870>:
  404a90:	6262 705f 726f 5f74 6567 5f74 6164 6174     bb_port_get_data
  404aa0:	645f 7269 6365 3374 0032 0000 6228 7479     _direct32...(byt
  404ab0:	4f65 6666 6573 4974 576e 726f 2064 2025     eOffsetInWord % 
  404ac0:	5532 2029 3d3d 3020 0000 0000 2e2e 622f     2U) == 0....../b
  404ad0:	616c 6b63 6f62 7261 2f64 6262 705f 726f     lackboard/bb_por
  404ae0:	2e74 0063 7962 6574 664f 7366 7465 6e49     t.c.byteOffsetIn
  404af0:	6f57 6472 3d20 203d 0030 0000               Word == 0...

00404afc <can_spec_can_element_list>:
  404afc:	0410 0000 4c64 0040 0064 0000 0008 0000     ....dL@.d.......
  404b0c:	4c78 0040 0001 0002 4c8c 0040 0201 0002     xL@......L@.....
  404b1c:	4ca0 0040 0401 0002 4cb0 0040 0601 0002     .L@......L@.....
	...
  404b34:	0001 0000 0460 0000 4cc0 0040 0064 0000     ....`....L@.d...
  404b44:	0001 0000 4cc4 0040 0001 0001 0000 0000     .....L@.........
	...
  404b70:	0001 0000 0470 0000 4cd4 0040 0064 0000     ....p....L@.d...
  404b80:	0001 0000 4cd8 0040 0001 0001 0000 0000     .....L@.........
	...
  404bac:	0001 0000 0480 0000 4ce8 0040 0064 0000     .........L@.d...
  404bbc:	0001 0000 4cec 0040 0001 0001 0000 0000     .....L@.........
	...
  404be8:	0001 0000 0630 0000 4cfc 0040 0064 0000     ....0....L@.d...
  404bf8:	0001 0000 4d08 0040 0001 0001 0000 0000     .....M@.........
	...
  404c1c:	06c5 0040 0002 0000 0100 0000 0631 0000     ..@.........1...
  404c2c:	4d14 0040 0064 0000 0008 0000 4d20 0040     .M@.d....... M@.
  404c3c:	0001 0002 4d30 0040 0201 0002 4d44 0040     ....0M@.....DM@.
  404c4c:	0401 0002 4d50 0040 0601 0002 0000 0000     ....PM@.........
  404c5c:	0000 0000 0100 0000 4353 5f4d 6f4d 6f74     ........SCM_Moto
  404c6c:	3172 6150 6172 736d 0031 0000 6f6d 6f74     r1Params1...moto
  404c7c:	3172 6341 6563 656c 6172 6974 6e6f 0000     r1Acceleration..
  404c8c:	6f6d 6f74 3172 6544 6563 656c 6172 6974     motor1Decelerati
  404c9c:	6e6f 0000 6f6d 6f74 3172 614d 5378 6570     on..motor1MaxSpe
  404cac:	6465 0000 6f6d 6f74 3172 694d 536e 6570     ed..motor1MinSpe
  404cbc:	6465 0000 4353 5f4d 6f4d 6f74 3172 6f43     ed..SCM_Motor1Co
  404ccc:	746e 6f72 006c 0000 4353 5f4d 6f4d 6f74     ntrol...SCM_Moto
  404cdc:	3272 6f43 746e 6f72 006c 0000 4353 5f4d     r2Control...SCM_
  404cec:	6f4d 6f74 3372 6f43 746e 6f72 006c 0000     Motor3Control...
  404cfc:	4352 5f4d 7953 7473 6d65 0000 6f4d 7564     RCM_System..Modu
  404d0c:	656c 6449 0000 0000 4352 5f4d 6553 736e     leId....RCM_Sens
  404d1c:	726f 0031 6553 736e 726f 5631 6c6f 6174     or1.Sensor1Volta
  404d2c:	6567 0000 6553 736e 726f 5431 6d65 6570     ge..Sensor1Tempe
  404d3c:	6172 7574 6572 0000 6553 736e 726f 4631     rature..Sensor1F
  404d4c:	6f6f 0000 6553 736e 726f 4231 7261 0000     oo..Sensor1Bar..
  404d5c:	6552 6563 7669 2065 253d 0a64 0000 0000     Receive =%d.....

00404d6c <__func__.6481>:
  404d6c:	6373 5f6d 6163 5f6e 7274 6e61 0073 0000     scm_can_trans...
  404d7c:	656c 676e 6874 3c20 203d 614d 4278 7479     length <= MaxByt
  404d8c:	7365 6550 4372 6e61 734d 0067 2e2e 622f     esPerCanMsg.../b
  404d9c:	616c 6b63 6f62 7261 2f64 6373 5f6d 6163     lackboard/scm_ca
  404dac:	5f6e 7274 6e61 2e73 0063 0000 7553 6363     n_trans.c...Succ
  404dbc:	7365 0d73 000a 0000 203a 434d 4e41 6220     ess.....: MCAN b
  404dcc:	7375 6f20 6666 6520 7272 726f 202c 6572     us off error, re
  404ddc:	692d 696e 6974 6c61 7a69 7461 6f69 2e6e     -initialization.
  404dec:	0d20 0d0a 000a 0000 7250 746f 636f 6c6f      .......Protocol
  404dfc:	4120 4b43 6520 7272 726f 202c 6c70 6165      ACK error, plea
  404e0c:	6573 6420 756f 6c62 2065 6863 6365 206b     se double check 
  404e1c:	6874 2065 6c63 636f 206b 6e69 7420 6f77     the clock in two
  404e2c:	6220 616f 6472 2e73 0d20 0d0a 000a 0000      boards. .......
  404e3c:	7250 746f 636f 6c6f 6620 726f 616d 2074     Protocol format 
  404e4c:	7265 6f72 2c72 7020 656c 7361 2065 6f64     error, please do
  404e5c:	6275 656c 6320 6568 6b63 7420 6568 6320     uble check the c
  404e6c:	6f6c 6b63 6920 206e 7774 206f 6f62 7261     lock in two boar
  404e7c:	7364 202e 0a0d 0a0d 0000 0000 2020 6425     ds. ........  %d
  404e8c:	0000 0000 0d20 000a 202c 7566 636e 6974     .... ..., functi
  404e9c:	6e6f 203a 0000 0000 7361 6573 7472 6f69     on: ....assertio
  404eac:	206e 2522 2273 6620 6961 656c 3a64 6620     n "%s" failed: f
  404ebc:	6c69 2065 2522 2273 202c 696c 656e 2520     ile "%s", line %
  404ecc:	2564 2573 0a73 0000                         d%s%s...

00404ed4 <_global_impure_ptr>:
  404ed4:	0018 2040 3130 3332 3534 3736 3938 4241     ..@ 0123456789AB
  404ee4:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  404ef4:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  404f04:	296c 0000                                   l)..

00404f08 <blanks.7217>:
  404f08:	2020 2020 2020 2020 2020 2020 2020 2020                     

00404f18 <zeroes.7218>:
  404f18:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  404f28:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

00404f38 <_ctype_>:
  404f38:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  404f48:	2020 2020 2020 2020 2020 2020 2020 2020                     
  404f58:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  404f68:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  404f78:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  404f88:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  404f98:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  404fa8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  404fb8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0040503c <_init>:
  40503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40503e:	bf00      	nop
  405040:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405042:	bc08      	pop	{r3}
  405044:	469e      	mov	lr, r3
  405046:	4770      	bx	lr

00405048 <__init_array_start>:
  405048:	00402c05 	.word	0x00402c05

0040504c <__frame_dummy_init_array_entry>:
  40504c:	0040018d                                ..@.

00405050 <_fini>:
  405050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405052:	bf00      	nop
  405054:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405056:	bc08      	pop	{r3}
  405058:	469e      	mov	lr, r3
  40505a:	4770      	bx	lr

0040505c <__fini_array_start>:
  40505c:	00400169 	.word	0x00400169
