
MCAN_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d6c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404d6c  00404d6c  00014d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00404d74  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000b10  204009c0  00405734  000209c0  2**2
                  ALLOC
  4 .stack        00002000  204014d0  00406244  000209c0  2**0
                  ALLOC
  5 .heap         00000200  204034d0  00408244  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001d730  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004135  00000000  00000000  0003e177  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006e88  00000000  00000000  000422ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000db8  00000000  00000000  00049134  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000df8  00000000  00000000  00049eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00023347  00000000  00000000  0004ace4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000fb9f  00000000  00000000  0006e02b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00097fa3  00000000  00000000  0007dbca  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002cfc  00000000  00000000  00115b70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d0 34 40 20 a5 13 40 00 a3 13 40 00 a3 13 40 00     .4@ ..@...@...@.
  400010:	a3 13 40 00 a3 13 40 00 a3 13 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	a3 13 40 00 a3 13 40 00 00 00 00 00 a3 13 40 00     ..@...@.......@.
  40003c:	a3 13 40 00 a3 13 40 00 a3 13 40 00 a3 13 40 00     ..@...@...@...@.
  40004c:	a3 13 40 00 a3 13 40 00 a3 13 40 00 a3 13 40 00     ..@...@...@...@.
  40005c:	a3 13 40 00 a3 13 40 00 00 00 00 00 65 10 40 00     ..@...@.....e.@.
  40006c:	79 10 40 00 8d 10 40 00 a3 13 40 00 a3 13 40 00     y.@...@...@...@.
  40007c:	a3 13 40 00 a1 10 40 00 b5 10 40 00 a3 13 40 00     ..@...@...@...@.
  40008c:	a3 13 40 00 a3 13 40 00 a3 13 40 00 a3 13 40 00     ..@...@...@...@.
  40009c:	a3 13 40 00 a3 13 40 00 a3 13 40 00 a3 13 40 00     ..@...@...@...@.
  4000ac:	a3 13 40 00 a3 13 40 00 a3 13 40 00 a3 13 40 00     ..@...@...@...@.
  4000bc:	a3 13 40 00 a3 13 40 00 a3 13 40 00 a3 13 40 00     ..@...@...@...@.
  4000cc:	a3 13 40 00 a3 13 40 00 29 09 40 00 a3 13 40 00     ..@...@.).@...@.
  4000dc:	a3 13 40 00 a3 13 40 00 a3 13 40 00 a3 13 40 00     ..@...@...@...@.
  4000ec:	a3 13 40 00 a3 13 40 00 a3 13 40 00 a3 13 40 00     ..@...@...@...@.
  4000fc:	a3 13 40 00 a3 13 40 00 a3 13 40 00 a3 13 40 00     ..@...@...@...@.
  40010c:	a3 13 40 00 a3 13 40 00 a3 13 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 a3 13 40 00 a3 13 40 00 a3 13 40 00     ......@...@...@.
  40012c:	a3 13 40 00 a3 13 40 00 a3 13 40 00 a3 13 40 00     ..@...@...@...@.
  40013c:	a3 13 40 00 a3 13 40 00 a3 13 40 00 a3 13 40 00     ..@...@...@...@.
  40014c:	a3 13 40 00 a3 13 40 00 a3 13 40 00 a3 13 40 00     ..@...@...@...@.
  40015c:	a3 13 40 00 a3 13 40 00 a3 13 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c0 	.word	0x204009c0
  400184:	00000000 	.word	0x00000000
  400188:	00404d74 	.word	0x00404d74

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00404d74 	.word	0x00404d74
  4001c8:	204009c4 	.word	0x204009c4
  4001cc:	00404d74 	.word	0x00404d74
  4001d0:	00000000 	.word	0x00000000

004001d4 <bb_elem_decrement_wakeup_offset>:
 * @return True if the wakeup offset was decremented, false if it was not
 */
bool_T bb_elem_decrement_wakeup_offset(BlackboardElement_T * bbElement, const uint32_t elapsedTicks)
{
    bool_T decremented = false;
    if (bbElement->wakeupOffset > elapsedTicks)
  4001d4:	68c3      	ldr	r3, [r0, #12]
  4001d6:	428b      	cmp	r3, r1
  4001d8:	d903      	bls.n	4001e2 <bb_elem_decrement_wakeup_offset+0xe>
    {
        bbElement->wakeupOffset = bbElement->wakeupOffset - elapsedTicks;
  4001da:	1a5b      	subs	r3, r3, r1
  4001dc:	60c3      	str	r3, [r0, #12]
        decremented = true;
  4001de:	2001      	movs	r0, #1
  4001e0:	4770      	bx	lr
    bool_T decremented = false;
  4001e2:	2000      	movs	r0, #0
    }
    return decremented;
}
  4001e4:	4770      	bx	lr
	...

004001e8 <bb_elem_get_data_for_can>:
 *
 * @param[out] data0 a pointer to a u32 that will be copied with the lower 4 bytes of data.
 * @param[out] data1 a pointer to a u32 that will be copied with the upper 4 bytes of data.
 */
void bb_elem_get_data_for_can(BlackboardElement_T const * bbElement, uint32_t * const data0, uint32_t * const data1)
{
  4001e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4001ea:	4606      	mov	r6, r0
  4001ec:	460f      	mov	r7, r1
  4001ee:	4615      	mov	r5, r2
    *data0 = bb_port_get_data_direct32(bbElement, 0U);
  4001f0:	2100      	movs	r1, #0
  4001f2:	4c04      	ldr	r4, [pc, #16]	; (400204 <bb_elem_get_data_for_can+0x1c>)
  4001f4:	47a0      	blx	r4
  4001f6:	6038      	str	r0, [r7, #0]
    *data1 = bb_port_get_data_direct32(bbElement, 4U);
  4001f8:	2104      	movs	r1, #4
  4001fa:	4630      	mov	r0, r6
  4001fc:	47a0      	blx	r4
  4001fe:	6028      	str	r0, [r5, #0]
  400200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400202:	bf00      	nop
  400204:	004003f9 	.word	0x004003f9

00400208 <bb_elem_update_last_tick_count>:
 * @brief updateLastTickCount updates last tick count to the current tick if the scheduler is running
 *
 * @return none
 */
void bb_elem_update_last_tick_count(BlackboardElement_T * bbElement)
{
  400208:	b510      	push	{r4, lr}
  40020a:	4604      	mov	r4, r0
    bbElement->lastUpdate_tick = bb_port_get_current_ticks();
  40020c:	4b01      	ldr	r3, [pc, #4]	; (400214 <bb_elem_update_last_tick_count+0xc>)
  40020e:	4798      	blx	r3
  400210:	60a0      	str	r0, [r4, #8]
  400212:	bd10      	pop	{r4, pc}
  400214:	004003b5 	.word	0x004003b5

00400218 <bb_elem_set_uint8_data>:
{
  400218:	b510      	push	{r4, lr}
  40021a:	4604      	mov	r4, r0
    bb_port_set_data_direct8(bbElement, data8, index);
  40021c:	4b02      	ldr	r3, [pc, #8]	; (400228 <bb_elem_set_uint8_data+0x10>)
  40021e:	4798      	blx	r3
    bb_elem_update_last_tick_count(bbElement);
  400220:	4620      	mov	r0, r4
  400222:	4b02      	ldr	r3, [pc, #8]	; (40022c <bb_elem_set_uint8_data+0x14>)
  400224:	4798      	blx	r3
  400226:	bd10      	pop	{r4, pc}
  400228:	004003c1 	.word	0x004003c1
  40022c:	00400209 	.word	0x00400209

00400230 <bb_elem_set_int8_data>:
{
  400230:	b508      	push	{r3, lr}
    bb_elem_set_uint8_data(bbElement, bb_utils_toUnsigned8(data8), index);
  400232:	b2c9      	uxtb	r1, r1
  400234:	4b01      	ldr	r3, [pc, #4]	; (40023c <bb_elem_set_int8_data+0xc>)
  400236:	4798      	blx	r3
  400238:	bd08      	pop	{r3, pc}
  40023a:	bf00      	nop
  40023c:	00400219 	.word	0x00400219

00400240 <bb_elem_set_uint16_data>:
{
  400240:	b510      	push	{r4, lr}
  400242:	4604      	mov	r4, r0
    bb_port_set_data_direct16(bbElement, data16, index);
  400244:	4b02      	ldr	r3, [pc, #8]	; (400250 <bb_elem_set_uint16_data+0x10>)
  400246:	4798      	blx	r3
    bb_elem_update_last_tick_count(bbElement);
  400248:	4620      	mov	r0, r4
  40024a:	4b02      	ldr	r3, [pc, #8]	; (400254 <bb_elem_set_uint16_data+0x14>)
  40024c:	4798      	blx	r3
  40024e:	bd10      	pop	{r4, pc}
  400250:	004003c5 	.word	0x004003c5
  400254:	00400209 	.word	0x00400209

00400258 <bb_elem_set_int16_data>:
{
  400258:	b508      	push	{r3, lr}
    bb_elem_set_uint16_data(bbElement, bb_utils_toUnsigned16(data16), index);
  40025a:	b289      	uxth	r1, r1
  40025c:	4b01      	ldr	r3, [pc, #4]	; (400264 <bb_elem_set_int16_data+0xc>)
  40025e:	4798      	blx	r3
  400260:	bd08      	pop	{r3, pc}
  400262:	bf00      	nop
  400264:	00400241 	.word	0x00400241

00400268 <bb_tx_proc_init>:
void bb_tx_proc_init(BlackboardTxProcessor_T * bbTxProc,
                     uint32_t maxDelay,
                     ICANTx_T* transmitters,
                     uint32_t numTransmitters,
                     uint32_t currTimestampTicks)
{
  400268:	b570      	push	{r4, r5, r6, lr}
  40026a:	9e04      	ldr	r6, [sp, #16]
    bbTxProc->maxDelay = maxDelay;
  40026c:	6001      	str	r1, [r0, #0]
    bbTxProc->transmitters = transmitters;
  40026e:	6042      	str	r2, [r0, #4]
    bbTxProc->numTransmitters = numTransmitters;
  400270:	6083      	str	r3, [r0, #8]

    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  400272:	2400      	movs	r4, #0
    {
        BlackboardElement_T * bbElement = bb_get_element((CANElementIndex_T)i);
  400274:	4d04      	ldr	r5, [pc, #16]	; (400288 <bb_tx_proc_init+0x20>)
  400276:	b2e0      	uxtb	r0, r4
  400278:	47a8      	blx	r5
        bb_elem_set_wakeup_offset(bbElement, currTimestampTicks + i);
  40027a:	1933      	adds	r3, r6, r4
 *
 * @param bbElement Pointer to the blackboard element struct to set the data of
 */
static inline void bb_elem_set_wakeup_offset(BlackboardElement_T * bbElement, const uint32_t wakeupOffset)
{
    bbElement->wakeupOffset = wakeupOffset;
  40027c:	60c3      	str	r3, [r0, #12]
    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  40027e:	3401      	adds	r4, #1
  400280:	2c07      	cmp	r4, #7
  400282:	d1f8      	bne.n	400276 <bb_tx_proc_init+0xe>
    }
}
  400284:	bd70      	pop	{r4, r5, r6, pc}
  400286:	bf00      	nop
  400288:	00400425 	.word	0x00400425

0040028c <bb_tx_proc_tx_message>:
                   const CANElement_T * canElement,
                   const BlackboardTxProcessor_T * const bbTxProc,
                   uint32_t canChannel,
                   uint32_t maskTxChannel,
                   uint32_t minimumOffsetTicks)
{
  40028c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40028e:	b083      	sub	sp, #12
  400290:	460f      	mov	r7, r1
  400292:	4615      	mov	r5, r2
  400294:	461e      	mov	r6, r3
    BlackboardElement_T * bbElement = bb_get_element((CANElementIndex_T)index);
  400296:	b2c0      	uxtb	r0, r0
  400298:	4b1c      	ldr	r3, [pc, #112]	; (40030c <bb_tx_proc_tx_message+0x80>)
  40029a:	4798      	blx	r3
  40029c:	4604      	mov	r4, r0
    if (!bb_elem_decrement_wakeup_offset(bbElement, elapsedTicks))
  40029e:	4639      	mov	r1, r7
  4002a0:	4b1b      	ldr	r3, [pc, #108]	; (400310 <bb_tx_proc_tx_message+0x84>)
  4002a2:	4798      	blx	r3
  4002a4:	b130      	cbz	r0, 4002b4 <bb_tx_proc_tx_message+0x28>
 *
 * @return The smaller of the current minimum offset and the blackboard element's wakeup offset
 */
static inline uint32_t bb_elem_compute_minimum_offset_ticks(BlackboardElement_T const * bbElement, const uint32_t minimumOffsetTicks)
{
    return (minimumOffsetTicks > bbElement->wakeupOffset) ? bbElement->wakeupOffset : minimumOffsetTicks;
  4002a6:	68e3      	ldr	r3, [r4, #12]
                                            CAN_NONE);                 // Rx Channel is N/A
        }
        // else Callback container is null, don't call
    }
    return bb_elem_compute_minimum_offset_ticks(bbElement, minimumOffsetTicks);
}
  4002a8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4002aa:	4298      	cmp	r0, r3
  4002ac:	bf28      	it	cs
  4002ae:	4618      	movcs	r0, r3
  4002b0:	b003      	add	sp, #12
  4002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        const uint32_t period_ticks = BB_PORT_MS_TO_TICKS(msgInfo->period_ms);
  4002b4:	68aa      	ldr	r2, [r5, #8]
  4002b6:	23c8      	movs	r3, #200	; 0xc8
  4002b8:	fb03 f302 	mul.w	r3, r3, r2
  4002bc:	4a15      	ldr	r2, [pc, #84]	; (400314 <bb_tx_proc_tx_message+0x88>)
  4002be:	fba2 2303 	umull	r2, r3, r2, r3
  4002c2:	099b      	lsrs	r3, r3, #6
    return elapsedTicks - bbElement->wakeupOffset;
  4002c4:	68e2      	ldr	r2, [r4, #12]
  4002c6:	1abf      	subs	r7, r7, r2
        bb_elem_set_wakeup_offset(bbElement, period_ticks - (overflow_ticks % period_ticks));
  4002c8:	fbb7 f2f3 	udiv	r2, r7, r3
  4002cc:	fb03 7712 	mls	r7, r3, r2, r7
  4002d0:	1bdb      	subs	r3, r3, r7
    bbElement->wakeupOffset = wakeupOffset;
  4002d2:	60e3      	str	r3, [r4, #12]
        uint32_t tx_data[2] = {0, 0};
  4002d4:	2300      	movs	r3, #0
  4002d6:	9300      	str	r3, [sp, #0]
  4002d8:	9301      	str	r3, [sp, #4]
        bb_elem_get_data_for_can(bbElement, &tx_data[0], &tx_data[1]);
  4002da:	aa01      	add	r2, sp, #4
  4002dc:	4669      	mov	r1, sp
  4002de:	4620      	mov	r0, r4
  4002e0:	4b0d      	ldr	r3, [pc, #52]	; (400318 <bb_tx_proc_tx_message+0x8c>)
  4002e2:	4798      	blx	r3
        const ICANTx_T * const transmitter = &bbTxProc->transmitters[canChannel];
  4002e4:	6873      	ldr	r3, [r6, #4]
  4002e6:	9a08      	ldr	r2, [sp, #32]
  4002e8:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
        transmitter->transmitFn(transmitter->context, msgInfo->id, (uint8_t *)(&tx_data[0]), (uint8_t)msgInfo->numBytes);
  4002ec:	f853 6032 	ldr.w	r6, [r3, r2, lsl #3]
  4002f0:	7b2b      	ldrb	r3, [r5, #12]
  4002f2:	466a      	mov	r2, sp
  4002f4:	6829      	ldr	r1, [r5, #0]
  4002f6:	6840      	ldr	r0, [r0, #4]
  4002f8:	47b0      	blx	r6
        if (canElement->callback.callbackFn != NULL)
  4002fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4002fc:	2b00      	cmp	r3, #0
  4002fe:	d0d2      	beq.n	4002a6 <bb_tx_proc_tx_message+0x1a>
            canElement->callback.callbackFn(canElement->callback.callbackCtx,
  400300:	2200      	movs	r2, #0
  400302:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
  400306:	6b68      	ldr	r0, [r5, #52]	; 0x34
  400308:	4798      	blx	r3
  40030a:	e7cc      	b.n	4002a6 <bb_tx_proc_tx_message+0x1a>
  40030c:	00400425 	.word	0x00400425
  400310:	004001d5 	.word	0x004001d5
  400314:	10624dd3 	.word	0x10624dd3
  400318:	004001e9 	.word	0x004001e9

0040031c <bb_tx_proc_process_tx>:
{
  40031c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400320:	b087      	sub	sp, #28
  400322:	4606      	mov	r6, r0
    const uint32_t elapsedTicks = currTimestampTicks - prevTimestampTicks;
  400324:	1a8b      	subs	r3, r1, r2
  400326:	9305      	str	r3, [sp, #20]
    uint32_t minimumOffsetTicks = bbTxProc->maxDelay;
  400328:	f8d0 9000 	ldr.w	r9, [r0]
    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  40032c:	2700      	movs	r7, #0
        const CANElement_T * canElement = can_elem_get_can_elem_idx((CANElementIndex_T)i);
  40032e:	f8df b05c 	ldr.w	fp, [pc, #92]	; 40038c <bb_tx_proc_process_tx+0x70>
                    minimumOffsetTicks = bb_tx_proc_tx_message(i, elapsedTicks, canElement, bbTxProc, canChannel, maskTxChannel, minimumOffsetTicks);
  400332:	f8df a05c 	ldr.w	sl, [pc, #92]	; 400390 <bb_tx_proc_process_tx+0x74>
  400336:	e017      	b.n	400368 <bb_tx_proc_process_tx+0x4c>
            for(uint32_t canChannel = 0U; canChannel < bbTxProc->numTransmitters; canChannel++)
  400338:	3401      	adds	r4, #1
  40033a:	68b3      	ldr	r3, [r6, #8]
  40033c:	42a3      	cmp	r3, r4
  40033e:	d910      	bls.n	400362 <bb_tx_proc_process_tx+0x46>
                const uint32_t maskTxChannel = (uint32_t)1U << canChannel;
  400340:	fa08 f304 	lsl.w	r3, r8, r4
                if (((uint32_t)canElement->txChan & maskTxChannel) > 0UL)
  400344:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
  400348:	421a      	tst	r2, r3
  40034a:	d0f5      	beq.n	400338 <bb_tx_proc_process_tx+0x1c>
                    minimumOffsetTicks = bb_tx_proc_tx_message(i, elapsedTicks, canElement, bbTxProc, canChannel, maskTxChannel, minimumOffsetTicks);
  40034c:	f8cd 9008 	str.w	r9, [sp, #8]
  400350:	9301      	str	r3, [sp, #4]
  400352:	9400      	str	r4, [sp, #0]
  400354:	4633      	mov	r3, r6
  400356:	462a      	mov	r2, r5
  400358:	9905      	ldr	r1, [sp, #20]
  40035a:	4638      	mov	r0, r7
  40035c:	47d0      	blx	sl
  40035e:	4681      	mov	r9, r0
  400360:	e7ea      	b.n	400338 <bb_tx_proc_process_tx+0x1c>
    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  400362:	3701      	adds	r7, #1
  400364:	2f07      	cmp	r7, #7
  400366:	d00d      	beq.n	400384 <bb_tx_proc_process_tx+0x68>
        const CANElement_T * canElement = can_elem_get_can_elem_idx((CANElementIndex_T)i);
  400368:	b2f8      	uxtb	r0, r7
  40036a:	47d8      	blx	fp
  40036c:	4605      	mov	r5, r0
        if ((uint32_t)canElement->txChan > 0UL)
  40036e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  400372:	2b00      	cmp	r3, #0
  400374:	d0f5      	beq.n	400362 <bb_tx_proc_process_tx+0x46>
            for(uint32_t canChannel = 0U; canChannel < bbTxProc->numTransmitters; canChannel++)
  400376:	68b3      	ldr	r3, [r6, #8]
  400378:	2b00      	cmp	r3, #0
  40037a:	d0f2      	beq.n	400362 <bb_tx_proc_process_tx+0x46>
  40037c:	2400      	movs	r4, #0
                const uint32_t maskTxChannel = (uint32_t)1U << canChannel;
  40037e:	f04f 0801 	mov.w	r8, #1
  400382:	e7dd      	b.n	400340 <bb_tx_proc_process_tx+0x24>
}
  400384:	4648      	mov	r0, r9
  400386:	b007      	add	sp, #28
  400388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40038c:	00400395 	.word	0x00400395
  400390:	0040028d 	.word	0x0040028d

00400394 <can_elem_get_can_elem_idx>:
 *
 * @return A pointer to the can element struct with the given index
 */
const CANElement_T * can_elem_get_can_elem_idx(const CANElementIndex_T idx)
{
    return &can_spec_can_element_list[idx];
  400394:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
}
  400398:	4b01      	ldr	r3, [pc, #4]	; (4003a0 <can_elem_get_can_elem_idx+0xc>)
  40039a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40039e:	4770      	bx	lr
  4003a0:	004047d0 	.word	0x004047d0

004003a4 <can_elem_get_can_msg_info_idx>:
 *
 * @return A pointer to the can msg info struct with the given index
 */
const CANMsgInfo_T * can_elem_get_can_msg_info_idx(const CANElementIndex_T idx)
{
    return &can_spec_can_element_list[idx].canMsgInfo;
  4003a4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
}
  4003a8:	4b01      	ldr	r3, [pc, #4]	; (4003b0 <can_elem_get_can_msg_info_idx+0xc>)
  4003aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4003ae:	4770      	bx	lr
  4003b0:	004047d0 	.word	0x004047d0

004003b4 <bb_port_get_current_ticks>:
 * g_tx_tick_count_ms.
 * @return the current time in ticks
 */
uint32_t bb_port_get_current_ticks(void)
{
  return g_tx_tick_count_ms;
  4003b4:	4b01      	ldr	r3, [pc, #4]	; (4003bc <bb_port_get_current_ticks+0x8>)
  4003b6:	6818      	ldr	r0, [r3, #0]
}
  4003b8:	4770      	bx	lr
  4003ba:	bf00      	nop
  4003bc:	20401464 	.word	0x20401464

004003c0 <bb_port_set_data_direct8>:
    const uint32_t byteOffsetInWord = (uint32_t)(byteIndexInElement) % 4U;
    const uint32_t wordIndex = (uint32_t)(byteIndexInElement) / 4U;

    volatile uint8_t * const dest8Ptr = (volatile uint8_t *)(&element->dataWords[wordIndex]) + byteOffsetInWord;

    *dest8Ptr = data8;
  4003c0:	5481      	strb	r1, [r0, r2]
  4003c2:	4770      	bx	lr

004003c4 <bb_port_set_data_direct16>:
 * perform an atomic write to the internal blackboard element storage.
 *
 * @see BlackboardPort.h for details on this method.
 */
void bb_port_set_data_direct16(BlackboardElement_T * element, const uint16_t data16, const uint8_t byteIndexInElement)
{
  4003c4:	b510      	push	{r4, lr}
    const uint32_t byteOffsetInWord = (uint32_t)(byteIndexInElement) % 4U;
    const uint32_t wordIndex = (uint32_t)(byteIndexInElement) / 4U;

    // Dereferencing a u16 pointer with a byte offset.  Make sure it is u16-aligned within the
    // element.
    SLI_ASSERT((byteOffsetInWord % 2U) == 0);
  4003c6:	f012 0f01 	tst.w	r2, #1
  4003ca:	d106      	bne.n	4003da <bb_port_set_data_direct16+0x16>
  4003cc:	f002 0303 	and.w	r3, r2, #3
  4003d0:	0894      	lsrs	r4, r2, #2
    volatile uint16_t * const dest16Ptr = (volatile uint16_t *)(((volatile uint8_t *)&element->dataWords[wordIndex]) + byteOffsetInWord);
  4003d2:	eb03 0384 	add.w	r3, r3, r4, lsl #2

    *dest16Ptr = data16;
  4003d6:	52c1      	strh	r1, [r0, r3]
  4003d8:	bd10      	pop	{r4, pc}
    SLI_ASSERT((byteOffsetInWord % 2U) == 0);
  4003da:	4b03      	ldr	r3, [pc, #12]	; (4003e8 <bb_port_set_data_direct16+0x24>)
  4003dc:	4a03      	ldr	r2, [pc, #12]	; (4003ec <bb_port_set_data_direct16+0x28>)
  4003de:	2176      	movs	r1, #118	; 0x76
  4003e0:	4803      	ldr	r0, [pc, #12]	; (4003f0 <bb_port_set_data_direct16+0x2c>)
  4003e2:	4c04      	ldr	r4, [pc, #16]	; (4003f4 <bb_port_set_data_direct16+0x30>)
  4003e4:	47a0      	blx	r4
  4003e6:	bf00      	nop
  4003e8:	00404780 	.word	0x00404780
  4003ec:	00404748 	.word	0x00404748
  4003f0:	004047a0 	.word	0x004047a0
  4003f4:	004016b1 	.word	0x004016b1

004003f8 <bb_port_get_data_direct32>:
    const uint32_t byteOffsetInWord = (uint32_t)(byteIndexInElement) % 4U;
    const uint32_t wordIndex = (uint32_t)(byteIndexInElement) / 4U;

    // Dereferencing a u32 pointer with a byte offset.  Make sure it is u32-aligned within the
    // element.
    SLI_ASSERT(byteOffsetInWord == 0);
  4003f8:	f011 0f03 	tst.w	r1, #3
  4003fc:	d103      	bne.n	400406 <bb_port_get_data_direct32+0xe>
  4003fe:	088b      	lsrs	r3, r1, #2
    volatile uint32_t * const src32Ptr = (volatile uint32_t *)(&element->dataWords[wordIndex]);

    return *src32Ptr;
  400400:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
  400404:	4770      	bx	lr
{
  400406:	b510      	push	{r4, lr}
    SLI_ASSERT(byteOffsetInWord == 0);
  400408:	4b02      	ldr	r3, [pc, #8]	; (400414 <bb_port_get_data_direct32+0x1c>)
  40040a:	4a03      	ldr	r2, [pc, #12]	; (400418 <bb_port_get_data_direct32+0x20>)
  40040c:	21c3      	movs	r1, #195	; 0xc3
  40040e:	4803      	ldr	r0, [pc, #12]	; (40041c <bb_port_get_data_direct32+0x24>)
  400410:	4c03      	ldr	r4, [pc, #12]	; (400420 <bb_port_get_data_direct32+0x28>)
  400412:	47a0      	blx	r4
  400414:	004047b8 	.word	0x004047b8
  400418:	00404764 	.word	0x00404764
  40041c:	004047a0 	.word	0x004047a0
  400420:	004016b1 	.word	0x004016b1

00400424 <bb_get_element>:
 */
BlackboardElement_T * bb_get_element(const CANElementIndex_T idx)
{
    static Blackboard_T theBB;
    return &theBB.elements[idx];
}
  400424:	4b01      	ldr	r3, [pc, #4]	; (40042c <bb_get_element+0x8>)
  400426:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  40042a:	4770      	bx	lr
  40042c:	204009dc 	.word	0x204009dc

00400430 <bb_set_SCM_motor1MaxSpeed>:
 * @brief Sets the SCM_motor1MaxSpeed value within the blackboard.
 * @see bb_get_SCM_motor1MaxSpeed for a description of this property.
 * @param value int16_t in step/s
 */
void bb_set_SCM_motor1MaxSpeed(const float32_T value)
{
  400430:	b500      	push	{lr}
  400432:	ed2d 8b02 	vpush	{d8}
  400436:	b083      	sub	sp, #12
  400438:	ee08 0a10 	vmov	s16, r0
    const CANMsgInfo_T * canMsgInfo = can_elem_get_can_msg_info_idx(CAN_ELEM_SCM_Motor1Params1);
  40043c:	2001      	movs	r0, #1
  40043e:	4b0a      	ldr	r3, [pc, #40]	; (400468 <bb_set_SCM_motor1MaxSpeed+0x38>)
  400440:	4798      	blx	r3
static inline int16_t bb_utils_floatToFixed16(const float32_T fvalue, const uint16_t bits)
{
    const uint32_t shift = 1UL << bits;
    const float32_T fshift = (float32_T)(shift);
    const float32_T fproduct = fvalue * fshift;
    return (int16_t)(fproduct);
  400442:	eef0 7a48 	vmov.f32	s15, s16
  400446:	eefe 7acf 	vcvt.s32.f32	s15, s15, #2
  40044a:	edcd 7a01 	vstr	s15, [sp, #4]
    BlackboardElement_T * bbElem = bb_get_element(CAN_ELEM_SCM_Motor1Params1);
    const CANDataInfo_T * dataInfo = &canMsgInfo->data_info[2];
    bb_elem_set_int16_data(bbElem, bb_utils_floatToFixed16(value, 2U), dataInfo->start_byte);
  40044e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
  400452:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
  400456:	4805      	ldr	r0, [pc, #20]	; (40046c <bb_set_SCM_motor1MaxSpeed+0x3c>)
  400458:	4b05      	ldr	r3, [pc, #20]	; (400470 <bb_set_SCM_motor1MaxSpeed+0x40>)
  40045a:	4798      	blx	r3
}
  40045c:	b003      	add	sp, #12
  40045e:	ecbd 8b02 	vpop	{d8}
  400462:	f85d fb04 	ldr.w	pc, [sp], #4
  400466:	bf00      	nop
  400468:	004003a5 	.word	0x004003a5
  40046c:	204009ec 	.word	0x204009ec
  400470:	00400259 	.word	0x00400259

00400474 <bb_set_SCM_motor1MinSpeed>:
 * @brief Sets the SCM_motor1MinSpeed value within the blackboard.
 * @see bb_get_SCM_motor1MinSpeed for a description of this property.
 * @param value int16_t in step/s
 */
void bb_set_SCM_motor1MinSpeed(const float32_T value)
{
  400474:	b500      	push	{lr}
  400476:	ed2d 8b02 	vpush	{d8}
  40047a:	b083      	sub	sp, #12
  40047c:	ee08 0a10 	vmov	s16, r0
    const CANMsgInfo_T * canMsgInfo = can_elem_get_can_msg_info_idx(CAN_ELEM_SCM_Motor1Params1);
  400480:	2001      	movs	r0, #1
  400482:	4b0a      	ldr	r3, [pc, #40]	; (4004ac <bb_set_SCM_motor1MinSpeed+0x38>)
  400484:	4798      	blx	r3
  400486:	eef0 7a48 	vmov.f32	s15, s16
  40048a:	eefe 7acf 	vcvt.s32.f32	s15, s15, #2
  40048e:	edcd 7a01 	vstr	s15, [sp, #4]
    BlackboardElement_T * bbElem = bb_get_element(CAN_ELEM_SCM_Motor1Params1);
    const CANDataInfo_T * dataInfo = &canMsgInfo->data_info[3];
    bb_elem_set_int16_data(bbElem, bb_utils_floatToFixed16(value, 2U), dataInfo->start_byte);
  400492:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
  400496:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
  40049a:	4805      	ldr	r0, [pc, #20]	; (4004b0 <bb_set_SCM_motor1MinSpeed+0x3c>)
  40049c:	4b05      	ldr	r3, [pc, #20]	; (4004b4 <bb_set_SCM_motor1MinSpeed+0x40>)
  40049e:	4798      	blx	r3
}
  4004a0:	b003      	add	sp, #12
  4004a2:	ecbd 8b02 	vpop	{d8}
  4004a6:	f85d fb04 	ldr.w	pc, [sp], #4
  4004aa:	bf00      	nop
  4004ac:	004003a5 	.word	0x004003a5
  4004b0:	204009ec 	.word	0x204009ec
  4004b4:	00400259 	.word	0x00400259

004004b8 <bb_set_SCM_Motor1Control>:
 * @brief Sets the SCM_Motor1Control value within the blackboard.
 * @see bb_get_SCM_Motor1Control for a description of this property.
 * @param value int8_t in steps
 */
void bb_set_SCM_Motor1Control(const int8_t value)
{
  4004b8:	b510      	push	{r4, lr}
  4004ba:	4604      	mov	r4, r0
    const CANMsgInfo_T * canMsgInfo = can_elem_get_can_msg_info_idx(CAN_ELEM_SCM_Motor1Control);
  4004bc:	2002      	movs	r0, #2
  4004be:	4b04      	ldr	r3, [pc, #16]	; (4004d0 <bb_set_SCM_Motor1Control+0x18>)
  4004c0:	4798      	blx	r3
    BlackboardElement_T * bbElem = bb_get_element(CAN_ELEM_SCM_Motor1Control);
    const CANDataInfo_T * dataInfo = &canMsgInfo->data_info[0];
    bb_elem_set_int8_data(bbElem, value, dataInfo->start_byte);
  4004c2:	7d42      	ldrb	r2, [r0, #21]
  4004c4:	4621      	mov	r1, r4
  4004c6:	4803      	ldr	r0, [pc, #12]	; (4004d4 <bb_set_SCM_Motor1Control+0x1c>)
  4004c8:	4b03      	ldr	r3, [pc, #12]	; (4004d8 <bb_set_SCM_Motor1Control+0x20>)
  4004ca:	4798      	blx	r3
  4004cc:	bd10      	pop	{r4, pc}
  4004ce:	bf00      	nop
  4004d0:	004003a5 	.word	0x004003a5
  4004d4:	204009fc 	.word	0x204009fc
  4004d8:	00400231 	.word	0x00400231

004004dc <bb_set_SCM_Motor3Control>:
 * @brief Sets the SCM_Motor3Control value within the blackboard.
 * @see bb_get_SCM_Motor3Control for a description of this property.
 * @param value int8_t in steps
 */
void bb_set_SCM_Motor3Control(const int8_t value)
{
  4004dc:	b510      	push	{r4, lr}
  4004de:	4604      	mov	r4, r0
    const CANMsgInfo_T * canMsgInfo = can_elem_get_can_msg_info_idx(CAN_ELEM_SCM_Motor3Control);
  4004e0:	2004      	movs	r0, #4
  4004e2:	4b04      	ldr	r3, [pc, #16]	; (4004f4 <bb_set_SCM_Motor3Control+0x18>)
  4004e4:	4798      	blx	r3
    BlackboardElement_T * bbElem = bb_get_element(CAN_ELEM_SCM_Motor3Control);
    const CANDataInfo_T * dataInfo = &canMsgInfo->data_info[0];
    bb_elem_set_int8_data(bbElem, value, dataInfo->start_byte);
  4004e6:	7d42      	ldrb	r2, [r0, #21]
  4004e8:	4621      	mov	r1, r4
  4004ea:	4803      	ldr	r0, [pc, #12]	; (4004f8 <bb_set_SCM_Motor3Control+0x1c>)
  4004ec:	4b03      	ldr	r3, [pc, #12]	; (4004fc <bb_set_SCM_Motor3Control+0x20>)
  4004ee:	4798      	blx	r3
  4004f0:	bd10      	pop	{r4, pc}
  4004f2:	bf00      	nop
  4004f4:	004003a5 	.word	0x004003a5
  4004f8:	20400a1c 	.word	0x20400a1c
  4004fc:	00400231 	.word	0x00400231

00400500 <CANTxTaskInit>:

static uint32_t prevTicks;
static uint32_t sleepTicks;

void CANTxTaskInit(void)
{
  400500:	b510      	push	{r4, lr}
  400502:	b082      	sub	sp, #8
	{
		{ &scm_can_trans, NULL }
	};

	const uint32_t MaxCanTxProcDelay = 10000UL;
	sleepTicks = 0U;
  400504:	2300      	movs	r3, #0
  400506:	4a07      	ldr	r2, [pc, #28]	; (400524 <CANTxTaskInit+0x24>)
  400508:	6013      	str	r3, [r2, #0]
	prevTicks = 0U;
  40050a:	4a07      	ldr	r2, [pc, #28]	; (400528 <CANTxTaskInit+0x28>)
  40050c:	6013      	str	r3, [r2, #0]
	bb_tx_proc_init(&bbtxProc, MaxCanTxProcDelay, icanHazTxers, (uint32_t)(sizeof(icanHazTxers)/sizeof(icanHazTxers[0])), 0U);
  40050e:	9300      	str	r3, [sp, #0]
  400510:	2301      	movs	r3, #1
  400512:	4a06      	ldr	r2, [pc, #24]	; (40052c <CANTxTaskInit+0x2c>)
  400514:	f242 7110 	movw	r1, #10000	; 0x2710
  400518:	4805      	ldr	r0, [pc, #20]	; (400530 <CANTxTaskInit+0x30>)
  40051a:	4c06      	ldr	r4, [pc, #24]	; (400534 <CANTxTaskInit+0x34>)
  40051c:	47a0      	blx	r4
}
  40051e:	b002      	add	sp, #8
  400520:	bd10      	pop	{r4, pc}
  400522:	bf00      	nop
  400524:	20400a5c 	.word	0x20400a5c
  400528:	20400a58 	.word	0x20400a58
  40052c:	20400000 	.word	0x20400000
  400530:	20400a4c 	.word	0x20400a4c
  400534:	00400269 	.word	0x00400269

00400538 <CANTxTask>:

void CANTxTask(uint32_t curr_tick_ms)
{
	if (curr_tick_ms >= (prevTicks + sleepTicks))
  400538:	4b0b      	ldr	r3, [pc, #44]	; (400568 <CANTxTask+0x30>)
  40053a:	681a      	ldr	r2, [r3, #0]
  40053c:	4b0b      	ldr	r3, [pc, #44]	; (40056c <CANTxTask+0x34>)
  40053e:	681b      	ldr	r3, [r3, #0]
  400540:	4413      	add	r3, r2
  400542:	4283      	cmp	r3, r0
  400544:	d900      	bls.n	400548 <CANTxTask+0x10>
  400546:	4770      	bx	lr
{
  400548:	b510      	push	{r4, lr}
  40054a:	4604      	mov	r4, r0
	{
		sleepTicks = bb_tx_proc_process_tx(&bbtxProc, curr_tick_ms, prevTicks);
  40054c:	4601      	mov	r1, r0
  40054e:	4808      	ldr	r0, [pc, #32]	; (400570 <CANTxTask+0x38>)
  400550:	4b08      	ldr	r3, [pc, #32]	; (400574 <CANTxTask+0x3c>)
  400552:	4798      	blx	r3
  400554:	4b05      	ldr	r3, [pc, #20]	; (40056c <CANTxTask+0x34>)
  400556:	6018      	str	r0, [r3, #0]
		prevTicks = curr_tick_ms;
  400558:	4b03      	ldr	r3, [pc, #12]	; (400568 <CANTxTask+0x30>)
  40055a:	601c      	str	r4, [r3, #0]
		if (sleepTicks > 50)
  40055c:	2832      	cmp	r0, #50	; 0x32
  40055e:	d902      	bls.n	400566 <CANTxTask+0x2e>
		{
			sleepTicks = 50;
  400560:	2232      	movs	r2, #50	; 0x32
  400562:	4b02      	ldr	r3, [pc, #8]	; (40056c <CANTxTask+0x34>)
  400564:	601a      	str	r2, [r3, #0]
  400566:	bd10      	pop	{r4, pc}
  400568:	20400a58 	.word	0x20400a58
  40056c:	20400a5c 	.word	0x20400a5c
  400570:	20400a4c 	.word	0x20400a4c
  400574:	0040031d 	.word	0x0040031d

00400578 <testSCMCallback>:
#include <stdio.h>

static int hackyStickyCounter = 37;

void testSCMCallback(void * SCM_EVENT_FOO, CanChannel_T rxChan, CanChannel_T txChan)
{
  400578:	b530      	push	{r4, r5, lr}
  40057a:	b083      	sub	sp, #12
    SCMEvent_T scmEvent = (SCMEvent_T)(uint32_t)(uint64_t)(SCM_EVENT_FOO);
    printf("testCallback: SCM_EVENT_FOO=%d, rxChan=%d, txChan=%d, counter=%d\n", scmEvent, rxChan, txChan, hackyStickyCounter++);
  40057c:	4c06      	ldr	r4, [pc, #24]	; (400598 <testSCMCallback+0x20>)
  40057e:	6823      	ldr	r3, [r4, #0]
  400580:	1c5d      	adds	r5, r3, #1
  400582:	6025      	str	r5, [r4, #0]
  400584:	9300      	str	r3, [sp, #0]
  400586:	4613      	mov	r3, r2
  400588:	460a      	mov	r2, r1
  40058a:	b2c1      	uxtb	r1, r0
  40058c:	4803      	ldr	r0, [pc, #12]	; (40059c <testSCMCallback+0x24>)
  40058e:	4c04      	ldr	r4, [pc, #16]	; (4005a0 <testSCMCallback+0x28>)
  400590:	47a0      	blx	r4
}
  400592:	b003      	add	sp, #12
  400594:	bd30      	pop	{r4, r5, pc}
  400596:	bf00      	nop
  400598:	20400008 	.word	0x20400008
  40059c:	00404a98 	.word	0x00404a98
  4005a0:	00401765 	.word	0x00401765

004005a4 <CanMessageControl_Task>:



#include "blackboard.h"

void CanMessageControl_Task(void){
  4005a4:	b508      	push	{r3, lr}

    #ifndef TEST
  static uint16_t currentCount = (uint16_t)0;
  #endif

  if ((uint16_t)0 == currentCount)
  4005a6:	4b11      	ldr	r3, [pc, #68]	; (4005ec <CanMessageControl_Task+0x48>)
  4005a8:	881b      	ldrh	r3, [r3, #0]
  4005aa:	b1a3      	cbz	r3, 4005d6 <CanMessageControl_Task+0x32>
  { // 20Hz (req >= 10Hz)
    bb_set_SCM_motor1MaxSpeed(4095.5);
  }
  if ((currentCount & (uint16_t)1) == (uint16_t)1)
  4005ac:	4b0f      	ldr	r3, [pc, #60]	; (4005ec <CanMessageControl_Task+0x48>)
  4005ae:	881b      	ldrh	r3, [r3, #0]
  4005b0:	f013 0f01 	tst.w	r3, #1
  4005b4:	d113      	bne.n	4005de <CanMessageControl_Task+0x3a>
  { // 100Hz (req >= 50Hz)
    bb_set_SCM_motor1MinSpeed(5072);
  }
  // 200Hz (req >= 100Hz)

	bb_set_SCM_Motor1Control(42);
  4005b6:	202a      	movs	r0, #42	; 0x2a
  4005b8:	4b0d      	ldr	r3, [pc, #52]	; (4005f0 <CanMessageControl_Task+0x4c>)
  4005ba:	4798      	blx	r3
	bb_set_SCM_Motor3Control(90);
  4005bc:	205a      	movs	r0, #90	; 0x5a
  4005be:	4b0d      	ldr	r3, [pc, #52]	; (4005f4 <CanMessageControl_Task+0x50>)
  4005c0:	4798      	blx	r3

  ++currentCount;
  4005c2:	4b0a      	ldr	r3, [pc, #40]	; (4005ec <CanMessageControl_Task+0x48>)
  4005c4:	881b      	ldrh	r3, [r3, #0]
  4005c6:	3301      	adds	r3, #1
  4005c8:	b29b      	uxth	r3, r3
  if ((uint16_t)10 <= currentCount)
  4005ca:	2b09      	cmp	r3, #9
  4005cc:	d90b      	bls.n	4005e6 <CanMessageControl_Task+0x42>
  {
    currentCount = (uint16_t)0;
  4005ce:	2200      	movs	r2, #0
  4005d0:	4b06      	ldr	r3, [pc, #24]	; (4005ec <CanMessageControl_Task+0x48>)
  4005d2:	801a      	strh	r2, [r3, #0]
  4005d4:	bd08      	pop	{r3, pc}
    bb_set_SCM_motor1MaxSpeed(4095.5);
  4005d6:	4808      	ldr	r0, [pc, #32]	; (4005f8 <CanMessageControl_Task+0x54>)
  4005d8:	4b08      	ldr	r3, [pc, #32]	; (4005fc <CanMessageControl_Task+0x58>)
  4005da:	4798      	blx	r3
  4005dc:	e7e6      	b.n	4005ac <CanMessageControl_Task+0x8>
    bb_set_SCM_motor1MinSpeed(5072);
  4005de:	4808      	ldr	r0, [pc, #32]	; (400600 <CanMessageControl_Task+0x5c>)
  4005e0:	4b08      	ldr	r3, [pc, #32]	; (400604 <CanMessageControl_Task+0x60>)
  4005e2:	4798      	blx	r3
  4005e4:	e7e7      	b.n	4005b6 <CanMessageControl_Task+0x12>
  ++currentCount;
  4005e6:	4a01      	ldr	r2, [pc, #4]	; (4005ec <CanMessageControl_Task+0x48>)
  4005e8:	8013      	strh	r3, [r2, #0]
  4005ea:	bd08      	pop	{r3, pc}
  4005ec:	20400a60 	.word	0x20400a60
  4005f0:	004004b9 	.word	0x004004b9
  4005f4:	004004dd 	.word	0x004004dd
  4005f8:	457ff800 	.word	0x457ff800
  4005fc:	00400431 	.word	0x00400431
  400600:	459e8000 	.word	0x459e8000
  400604:	00400475 	.word	0x00400475

00400608 <scm_can_trans>:
* @param data CAN payload data, update to 8 bytes
* @param length Number of CAN data payload bytes to send
*/

void scm_can_trans(ICANTxCtx_T context, uint32_t msgID, uint8_t * data, uint8_t length)
{
  400608:	b508      	push	{r3, lr}
  40060a:	4608      	mov	r0, r1
  40060c:	4611      	mov	r1, r2
	// SLI_ASSERT(length <= MaxBytesPerCanMsg);
	
	(void)context;    // Unused
	
	// CANDriver can track its own error counter
    (void)candriver_send(msgID, data, length);
  40060e:	461a      	mov	r2, r3
  400610:	4b01      	ldr	r3, [pc, #4]	; (400618 <scm_can_trans+0x10>)
  400612:	4798      	blx	r3
  400614:	bd08      	pop	{r3, pc}
  400616:	bf00      	nop
  400618:	004009ad 	.word	0x004009ad

0040061c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  40061c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40061e:	b083      	sub	sp, #12
  400620:	4605      	mov	r5, r0
  400622:	460c      	mov	r4, r1
	uint32_t val = 0;
  400624:	2300      	movs	r3, #0
  400626:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400628:	4b2a      	ldr	r3, [pc, #168]	; (4006d4 <usart_serial_getchar+0xb8>)
  40062a:	4298      	cmp	r0, r3
  40062c:	d013      	beq.n	400656 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40062e:	4b2a      	ldr	r3, [pc, #168]	; (4006d8 <usart_serial_getchar+0xbc>)
  400630:	4298      	cmp	r0, r3
  400632:	d018      	beq.n	400666 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400634:	4b29      	ldr	r3, [pc, #164]	; (4006dc <usart_serial_getchar+0xc0>)
  400636:	4298      	cmp	r0, r3
  400638:	d01d      	beq.n	400676 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40063a:	4b29      	ldr	r3, [pc, #164]	; (4006e0 <usart_serial_getchar+0xc4>)
  40063c:	429d      	cmp	r5, r3
  40063e:	d022      	beq.n	400686 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400640:	4b28      	ldr	r3, [pc, #160]	; (4006e4 <usart_serial_getchar+0xc8>)
  400642:	429d      	cmp	r5, r3
  400644:	d027      	beq.n	400696 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400646:	4b28      	ldr	r3, [pc, #160]	; (4006e8 <usart_serial_getchar+0xcc>)
  400648:	429d      	cmp	r5, r3
  40064a:	d02e      	beq.n	4006aa <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40064c:	4b27      	ldr	r3, [pc, #156]	; (4006ec <usart_serial_getchar+0xd0>)
  40064e:	429d      	cmp	r5, r3
  400650:	d035      	beq.n	4006be <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400652:	b003      	add	sp, #12
  400654:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400656:	461f      	mov	r7, r3
  400658:	4e25      	ldr	r6, [pc, #148]	; (4006f0 <usart_serial_getchar+0xd4>)
  40065a:	4621      	mov	r1, r4
  40065c:	4638      	mov	r0, r7
  40065e:	47b0      	blx	r6
  400660:	2800      	cmp	r0, #0
  400662:	d1fa      	bne.n	40065a <usart_serial_getchar+0x3e>
  400664:	e7e9      	b.n	40063a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400666:	461f      	mov	r7, r3
  400668:	4e21      	ldr	r6, [pc, #132]	; (4006f0 <usart_serial_getchar+0xd4>)
  40066a:	4621      	mov	r1, r4
  40066c:	4638      	mov	r0, r7
  40066e:	47b0      	blx	r6
  400670:	2800      	cmp	r0, #0
  400672:	d1fa      	bne.n	40066a <usart_serial_getchar+0x4e>
  400674:	e7e4      	b.n	400640 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  400676:	461f      	mov	r7, r3
  400678:	4e1d      	ldr	r6, [pc, #116]	; (4006f0 <usart_serial_getchar+0xd4>)
  40067a:	4621      	mov	r1, r4
  40067c:	4638      	mov	r0, r7
  40067e:	47b0      	blx	r6
  400680:	2800      	cmp	r0, #0
  400682:	d1fa      	bne.n	40067a <usart_serial_getchar+0x5e>
  400684:	e7df      	b.n	400646 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  400686:	461f      	mov	r7, r3
  400688:	4e19      	ldr	r6, [pc, #100]	; (4006f0 <usart_serial_getchar+0xd4>)
  40068a:	4621      	mov	r1, r4
  40068c:	4638      	mov	r0, r7
  40068e:	47b0      	blx	r6
  400690:	2800      	cmp	r0, #0
  400692:	d1fa      	bne.n	40068a <usart_serial_getchar+0x6e>
  400694:	e7da      	b.n	40064c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  400696:	461e      	mov	r6, r3
  400698:	4d16      	ldr	r5, [pc, #88]	; (4006f4 <usart_serial_getchar+0xd8>)
  40069a:	a901      	add	r1, sp, #4
  40069c:	4630      	mov	r0, r6
  40069e:	47a8      	blx	r5
  4006a0:	2800      	cmp	r0, #0
  4006a2:	d1fa      	bne.n	40069a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4006a4:	9b01      	ldr	r3, [sp, #4]
  4006a6:	7023      	strb	r3, [r4, #0]
  4006a8:	e7d3      	b.n	400652 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4006aa:	461e      	mov	r6, r3
  4006ac:	4d11      	ldr	r5, [pc, #68]	; (4006f4 <usart_serial_getchar+0xd8>)
  4006ae:	a901      	add	r1, sp, #4
  4006b0:	4630      	mov	r0, r6
  4006b2:	47a8      	blx	r5
  4006b4:	2800      	cmp	r0, #0
  4006b6:	d1fa      	bne.n	4006ae <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4006b8:	9b01      	ldr	r3, [sp, #4]
  4006ba:	7023      	strb	r3, [r4, #0]
  4006bc:	e7c9      	b.n	400652 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4006be:	461e      	mov	r6, r3
  4006c0:	4d0c      	ldr	r5, [pc, #48]	; (4006f4 <usart_serial_getchar+0xd8>)
  4006c2:	a901      	add	r1, sp, #4
  4006c4:	4630      	mov	r0, r6
  4006c6:	47a8      	blx	r5
  4006c8:	2800      	cmp	r0, #0
  4006ca:	d1fa      	bne.n	4006c2 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4006cc:	9b01      	ldr	r3, [sp, #4]
  4006ce:	7023      	strb	r3, [r4, #0]
}
  4006d0:	e7bf      	b.n	400652 <usart_serial_getchar+0x36>
  4006d2:	bf00      	nop
  4006d4:	400e0800 	.word	0x400e0800
  4006d8:	400e0a00 	.word	0x400e0a00
  4006dc:	400e1a00 	.word	0x400e1a00
  4006e0:	400e1c00 	.word	0x400e1c00
  4006e4:	40024000 	.word	0x40024000
  4006e8:	40028000 	.word	0x40028000
  4006ec:	4002c000 	.word	0x4002c000
  4006f0:	0040127f 	.word	0x0040127f
  4006f4:	0040138b 	.word	0x0040138b

004006f8 <usart_serial_putchar>:
{
  4006f8:	b570      	push	{r4, r5, r6, lr}
  4006fa:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4006fc:	4b2a      	ldr	r3, [pc, #168]	; (4007a8 <usart_serial_putchar+0xb0>)
  4006fe:	4298      	cmp	r0, r3
  400700:	d013      	beq.n	40072a <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  400702:	4b2a      	ldr	r3, [pc, #168]	; (4007ac <usart_serial_putchar+0xb4>)
  400704:	4298      	cmp	r0, r3
  400706:	d019      	beq.n	40073c <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  400708:	4b29      	ldr	r3, [pc, #164]	; (4007b0 <usart_serial_putchar+0xb8>)
  40070a:	4298      	cmp	r0, r3
  40070c:	d01f      	beq.n	40074e <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40070e:	4b29      	ldr	r3, [pc, #164]	; (4007b4 <usart_serial_putchar+0xbc>)
  400710:	4298      	cmp	r0, r3
  400712:	d025      	beq.n	400760 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  400714:	4b28      	ldr	r3, [pc, #160]	; (4007b8 <usart_serial_putchar+0xc0>)
  400716:	4298      	cmp	r0, r3
  400718:	d02b      	beq.n	400772 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  40071a:	4b28      	ldr	r3, [pc, #160]	; (4007bc <usart_serial_putchar+0xc4>)
  40071c:	4298      	cmp	r0, r3
  40071e:	d031      	beq.n	400784 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  400720:	4b27      	ldr	r3, [pc, #156]	; (4007c0 <usart_serial_putchar+0xc8>)
  400722:	4298      	cmp	r0, r3
  400724:	d037      	beq.n	400796 <usart_serial_putchar+0x9e>
	return 0;
  400726:	2000      	movs	r0, #0
}
  400728:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40072a:	461e      	mov	r6, r3
  40072c:	4d25      	ldr	r5, [pc, #148]	; (4007c4 <usart_serial_putchar+0xcc>)
  40072e:	4621      	mov	r1, r4
  400730:	4630      	mov	r0, r6
  400732:	47a8      	blx	r5
  400734:	2800      	cmp	r0, #0
  400736:	d1fa      	bne.n	40072e <usart_serial_putchar+0x36>
		return 1;
  400738:	2001      	movs	r0, #1
  40073a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40073c:	461e      	mov	r6, r3
  40073e:	4d21      	ldr	r5, [pc, #132]	; (4007c4 <usart_serial_putchar+0xcc>)
  400740:	4621      	mov	r1, r4
  400742:	4630      	mov	r0, r6
  400744:	47a8      	blx	r5
  400746:	2800      	cmp	r0, #0
  400748:	d1fa      	bne.n	400740 <usart_serial_putchar+0x48>
		return 1;
  40074a:	2001      	movs	r0, #1
  40074c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40074e:	461e      	mov	r6, r3
  400750:	4d1c      	ldr	r5, [pc, #112]	; (4007c4 <usart_serial_putchar+0xcc>)
  400752:	4621      	mov	r1, r4
  400754:	4630      	mov	r0, r6
  400756:	47a8      	blx	r5
  400758:	2800      	cmp	r0, #0
  40075a:	d1fa      	bne.n	400752 <usart_serial_putchar+0x5a>
		return 1;
  40075c:	2001      	movs	r0, #1
  40075e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400760:	461e      	mov	r6, r3
  400762:	4d18      	ldr	r5, [pc, #96]	; (4007c4 <usart_serial_putchar+0xcc>)
  400764:	4621      	mov	r1, r4
  400766:	4630      	mov	r0, r6
  400768:	47a8      	blx	r5
  40076a:	2800      	cmp	r0, #0
  40076c:	d1fa      	bne.n	400764 <usart_serial_putchar+0x6c>
		return 1;
  40076e:	2001      	movs	r0, #1
  400770:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400772:	461e      	mov	r6, r3
  400774:	4d14      	ldr	r5, [pc, #80]	; (4007c8 <usart_serial_putchar+0xd0>)
  400776:	4621      	mov	r1, r4
  400778:	4630      	mov	r0, r6
  40077a:	47a8      	blx	r5
  40077c:	2800      	cmp	r0, #0
  40077e:	d1fa      	bne.n	400776 <usart_serial_putchar+0x7e>
		return 1;
  400780:	2001      	movs	r0, #1
  400782:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400784:	461e      	mov	r6, r3
  400786:	4d10      	ldr	r5, [pc, #64]	; (4007c8 <usart_serial_putchar+0xd0>)
  400788:	4621      	mov	r1, r4
  40078a:	4630      	mov	r0, r6
  40078c:	47a8      	blx	r5
  40078e:	2800      	cmp	r0, #0
  400790:	d1fa      	bne.n	400788 <usart_serial_putchar+0x90>
		return 1;
  400792:	2001      	movs	r0, #1
  400794:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400796:	461e      	mov	r6, r3
  400798:	4d0b      	ldr	r5, [pc, #44]	; (4007c8 <usart_serial_putchar+0xd0>)
  40079a:	4621      	mov	r1, r4
  40079c:	4630      	mov	r0, r6
  40079e:	47a8      	blx	r5
  4007a0:	2800      	cmp	r0, #0
  4007a2:	d1fa      	bne.n	40079a <usart_serial_putchar+0xa2>
		return 1;
  4007a4:	2001      	movs	r0, #1
  4007a6:	bd70      	pop	{r4, r5, r6, pc}
  4007a8:	400e0800 	.word	0x400e0800
  4007ac:	400e0a00 	.word	0x400e0a00
  4007b0:	400e1a00 	.word	0x400e1a00
  4007b4:	400e1c00 	.word	0x400e1c00
  4007b8:	40024000 	.word	0x40024000
  4007bc:	40028000 	.word	0x40028000
  4007c0:	4002c000 	.word	0x4002c000
  4007c4:	0040126d 	.word	0x0040126d
  4007c8:	00401375 	.word	0x00401375

004007cc <configure_mcan>:
/**
 * \brief MCAN module initialization.
 *
 */
static void configure_mcan(void)
{
  4007cc:	b510      	push	{r4, lr}
  4007ce:	b08a      	sub	sp, #40	; 0x28
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->run_in_standby = false;
  4007d0:	2300      	movs	r3, #0
  4007d2:	f88d 3004 	strb.w	r3, [sp, #4]
	config->watchdog_configuration = 0x00;
  4007d6:	f88d 3005 	strb.w	r3, [sp, #5]
	config->transmit_pause = true;
  4007da:	2201      	movs	r2, #1
  4007dc:	f88d 2006 	strb.w	r2, [sp, #6]
	config->edge_filtering = true;
  4007e0:	f88d 2007 	strb.w	r2, [sp, #7]
	config->protocol_exception_handling = true;
  4007e4:	f88d 2008 	strb.w	r2, [sp, #8]
	config->automatic_retransmission = true;
  4007e8:	f88d 2009 	strb.w	r2, [sp, #9]
	config->clock_stop_request = false;
  4007ec:	f88d 300a 	strb.w	r3, [sp, #10]
	config->clock_stop_acknowledge = false;
  4007f0:	f88d 300b 	strb.w	r3, [sp, #11]
	config->timestamp_prescaler = 0;
  4007f4:	f88d 300c 	strb.w	r3, [sp, #12]
	config->timeout_period = 0xFFFF;
  4007f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4007fc:	f8ad 100e 	strh.w	r1, [sp, #14]
	config->timeout_mode = MCAN_TIMEOUT_CONTINUES;
  400800:	f88d 3010 	strb.w	r3, [sp, #16]
	config->timeout_enable = false;
  400804:	f88d 3011 	strb.w	r3, [sp, #17]
	config->tdc_enable = false;
  400808:	f88d 3012 	strb.w	r3, [sp, #18]
	config->delay_compensation_offset = 0;
  40080c:	f88d 3013 	strb.w	r3, [sp, #19]
#if (SAMV71B || SAME70B || SAMV70B)
	config->delay_compensation_filter_window_length = 0;
  400810:	f88d 3014 	strb.w	r3, [sp, #20]
#endif
	config->nonmatching_frames_action_standard = MCAN_NONMATCHING_FRAMES_REJECT;
  400814:	2102      	movs	r1, #2
  400816:	f88d 1015 	strb.w	r1, [sp, #21]
	config->nonmatching_frames_action_extended = MCAN_NONMATCHING_FRAMES_REJECT;
  40081a:	f88d 1016 	strb.w	r1, [sp, #22]
	config->remote_frames_standard_reject = true;
  40081e:	f88d 2017 	strb.w	r2, [sp, #23]
	config->remote_frames_extended_reject = true;
  400822:	f88d 2018 	strb.w	r2, [sp, #24]
	config->extended_id_mask = 0x1FFFFFFF;
  400826:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
  40082a:	9107      	str	r1, [sp, #28]
	config->rx_fifo_0_overwrite = true;
  40082c:	f88d 2020 	strb.w	r2, [sp, #32]
	config->rx_fifo_0_watermark = 0;
  400830:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	config->rx_fifo_1_overwrite = true;
  400834:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
	config->rx_fifo_1_watermark = 0;
  400838:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	config->tx_queue_mode = false;
  40083c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	config->tx_event_fifo_watermark = 0;
  400840:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	}

	/* Initialize the module. */
	struct mcan_config config_mcan;
	mcan_get_config_defaults(&config_mcan);
	mcan_init(&mcan_instance, MCAN_MODULE, &config_mcan);
  400844:	4c0b      	ldr	r4, [pc, #44]	; (400874 <configure_mcan+0xa8>)
  400846:	aa01      	add	r2, sp, #4
  400848:	490b      	ldr	r1, [pc, #44]	; (400878 <configure_mcan+0xac>)
  40084a:	4620      	mov	r0, r4
  40084c:	4b0b      	ldr	r3, [pc, #44]	; (40087c <configure_mcan+0xb0>)
  40084e:	4798      	blx	r3


	mcan_start(&mcan_instance);
  400850:	4620      	mov	r0, r4
  400852:	4b0b      	ldr	r3, [pc, #44]	; (400880 <configure_mcan+0xb4>)
  400854:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400856:	4b0b      	ldr	r3, [pc, #44]	; (400884 <configure_mcan+0xb8>)
  400858:	2220      	movs	r2, #32
  40085a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40085e:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400862:	605a      	str	r2, [r3, #4]
 * \param[in] source  Interrupt source type
 */
static inline void mcan_enable_interrupt(struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
	module_inst->hw->MCAN_IE |= source;
  400864:	6822      	ldr	r2, [r4, #0]
  400866:	6d53      	ldr	r3, [r2, #84]	; 0x54
  400868:	f043 43c4 	orr.w	r3, r3, #1644167168	; 0x62000000
  40086c:	6553      	str	r3, [r2, #84]	; 0x54
	/* Enable interrupts for this MCAN module */
	irq_register_handler(MCAN1_INT0_IRQn, 1);
	mcan_enable_interrupt(&mcan_instance, MCAN_FORMAT_ERROR | MCAN_ACKNOWLEDGE_ERROR | MCAN_BUS_OFF);
}
  40086e:	b00a      	add	sp, #40	; 0x28
  400870:	bd10      	pop	{r4, pc}
  400872:	bf00      	nop
  400874:	20400a64 	.word	0x20400a64
  400878:	40034000 	.word	0x40034000
  40087c:	00400cf1 	.word	0x00400cf1
  400880:	00400f65 	.word	0x00400f65
  400884:	e000e100 	.word	0xe000e100

00400888 <can_init>:

void can_init()
{
  400888:	b570      	push	{r4, r5, r6, lr}
  40088a:	b086      	sub	sp, #24
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40088c:	200e      	movs	r0, #14
  40088e:	4e18      	ldr	r6, [pc, #96]	; (4008f0 <can_init+0x68>)
  400890:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400892:	4d18      	ldr	r5, [pc, #96]	; (4008f4 <can_init+0x6c>)
  400894:	4b18      	ldr	r3, [pc, #96]	; (4008f8 <can_init+0x70>)
  400896:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400898:	4a18      	ldr	r2, [pc, #96]	; (4008fc <can_init+0x74>)
  40089a:	4b19      	ldr	r3, [pc, #100]	; (400900 <can_init+0x78>)
  40089c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40089e:	4a19      	ldr	r2, [pc, #100]	; (400904 <can_init+0x7c>)
  4008a0:	4b19      	ldr	r3, [pc, #100]	; (400908 <can_init+0x80>)
  4008a2:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4008a4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4008a8:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  4008aa:	23c0      	movs	r3, #192	; 0xc0
  4008ac:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  4008ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4008b2:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  4008b4:	2400      	movs	r4, #0
  4008b6:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4008b8:	9404      	str	r4, [sp, #16]
  4008ba:	200e      	movs	r0, #14
  4008bc:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  4008be:	4a13      	ldr	r2, [pc, #76]	; (40090c <can_init+0x84>)
  4008c0:	4669      	mov	r1, sp
  4008c2:	4628      	mov	r0, r5
  4008c4:	4b12      	ldr	r3, [pc, #72]	; (400910 <can_init+0x88>)
  4008c6:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4008c8:	4628      	mov	r0, r5
  4008ca:	4b12      	ldr	r3, [pc, #72]	; (400914 <can_init+0x8c>)
  4008cc:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4008ce:	4628      	mov	r0, r5
  4008d0:	4b11      	ldr	r3, [pc, #68]	; (400918 <can_init+0x90>)
  4008d2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4008d4:	4e11      	ldr	r6, [pc, #68]	; (40091c <can_init+0x94>)
  4008d6:	6833      	ldr	r3, [r6, #0]
  4008d8:	4621      	mov	r1, r4
  4008da:	6898      	ldr	r0, [r3, #8]
  4008dc:	4d10      	ldr	r5, [pc, #64]	; (400920 <can_init+0x98>)
  4008de:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4008e0:	6833      	ldr	r3, [r6, #0]
  4008e2:	4621      	mov	r1, r4
  4008e4:	6858      	ldr	r0, [r3, #4]
  4008e6:	47a8      	blx	r5
	configure_console();
	configure_mcan();
  4008e8:	4b0e      	ldr	r3, [pc, #56]	; (400924 <can_init+0x9c>)
  4008ea:	4798      	blx	r3
}
  4008ec:	b006      	add	sp, #24
  4008ee:	bd70      	pop	{r4, r5, r6, pc}
  4008f0:	004011e9 	.word	0x004011e9
  4008f4:	40028000 	.word	0x40028000
  4008f8:	204014a4 	.word	0x204014a4
  4008fc:	004006f9 	.word	0x004006f9
  400900:	204014a0 	.word	0x204014a0
  400904:	0040061d 	.word	0x0040061d
  400908:	2040149c 	.word	0x2040149c
  40090c:	08f0d180 	.word	0x08f0d180
  400910:	00401315 	.word	0x00401315
  400914:	00401369 	.word	0x00401369
  400918:	0040136f 	.word	0x0040136f
  40091c:	20400014 	.word	0x20400014
  400920:	0040195d 	.word	0x0040195d
  400924:	004007cd 	.word	0x004007cd

00400928 <MCAN1_INT0_Handler>:
/**
 * \brief Interrupt handler for MCAN,
 *   inlcuding RX,TX,ERROR and so on processes.
 */
void MCAN1_INT0_Handler(void)
{
  400928:	b500      	push	{lr}
  40092a:	b083      	sub	sp, #12
 * \param[in] module_inst  Pointer to the MCAN software instance struct
 */
static inline uint32_t mcan_read_interrupt_status(
		struct mcan_module *const module_inst)
{
	return module_inst->hw->MCAN_IR;
  40092c:	4b18      	ldr	r3, [pc, #96]	; (400990 <MCAN1_INT0_Handler+0x68>)
  40092e:	681b      	ldr	r3, [r3, #0]
  400930:	6d1a      	ldr	r2, [r3, #80]	; 0x50
	volatile uint32_t status, i, rx_buffer_index;
	status = mcan_read_interrupt_status(&mcan_instance);
  400932:	9201      	str	r2, [sp, #4]


	if (status & MCAN_BUS_OFF) {
  400934:	9a01      	ldr	r2, [sp, #4]
  400936:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
  40093a:	d10a      	bne.n	400952 <MCAN1_INT0_Handler+0x2a>
		mcan_stop(&mcan_instance);
		printf(": MCAN bus off error, re-initialization. \r\n\r\n");
		configure_mcan();
	}

	if (status & MCAN_ACKNOWLEDGE_ERROR) {
  40093c:	9b01      	ldr	r3, [sp, #4]
  40093e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  400942:	d112      	bne.n	40096a <MCAN1_INT0_Handler+0x42>
		mcan_clear_interrupt_status(&mcan_instance, MCAN_ACKNOWLEDGE_ERROR);
		printf("Protocol ACK error, please double check the clock in two boards. \r\n\r\n");
	}

	if (status & MCAN_FORMAT_ERROR) {
  400944:	9b01      	ldr	r3, [sp, #4]
  400946:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  40094a:	d117      	bne.n	40097c <MCAN1_INT0_Handler+0x54>
		mcan_clear_interrupt_status(&mcan_instance, MCAN_FORMAT_ERROR);
		printf("Protocol format error, please double check the clock in two boards. \r\n\r\n");
	}
}
  40094c:	b003      	add	sp, #12
  40094e:	f85d fb04 	ldr.w	pc, [sp], #4
 */
static inline void mcan_clear_interrupt_status(
		struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
	module_inst->hw->MCAN_IR = source;
  400952:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400956:	651a      	str	r2, [r3, #80]	; 0x50
		mcan_stop(&mcan_instance);
  400958:	480d      	ldr	r0, [pc, #52]	; (400990 <MCAN1_INT0_Handler+0x68>)
  40095a:	4b0e      	ldr	r3, [pc, #56]	; (400994 <MCAN1_INT0_Handler+0x6c>)
  40095c:	4798      	blx	r3
		printf(": MCAN bus off error, re-initialization. \r\n\r\n");
  40095e:	480e      	ldr	r0, [pc, #56]	; (400998 <MCAN1_INT0_Handler+0x70>)
  400960:	4b0e      	ldr	r3, [pc, #56]	; (40099c <MCAN1_INT0_Handler+0x74>)
  400962:	4798      	blx	r3
		configure_mcan();
  400964:	4b0e      	ldr	r3, [pc, #56]	; (4009a0 <MCAN1_INT0_Handler+0x78>)
  400966:	4798      	blx	r3
  400968:	e7e8      	b.n	40093c <MCAN1_INT0_Handler+0x14>
  40096a:	4b09      	ldr	r3, [pc, #36]	; (400990 <MCAN1_INT0_Handler+0x68>)
  40096c:	681b      	ldr	r3, [r3, #0]
  40096e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400972:	651a      	str	r2, [r3, #80]	; 0x50
		printf("Protocol ACK error, please double check the clock in two boards. \r\n\r\n");
  400974:	480b      	ldr	r0, [pc, #44]	; (4009a4 <MCAN1_INT0_Handler+0x7c>)
  400976:	4b09      	ldr	r3, [pc, #36]	; (40099c <MCAN1_INT0_Handler+0x74>)
  400978:	4798      	blx	r3
  40097a:	e7e3      	b.n	400944 <MCAN1_INT0_Handler+0x1c>
  40097c:	4b04      	ldr	r3, [pc, #16]	; (400990 <MCAN1_INT0_Handler+0x68>)
  40097e:	681b      	ldr	r3, [r3, #0]
  400980:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400984:	651a      	str	r2, [r3, #80]	; 0x50
		printf("Protocol format error, please double check the clock in two boards. \r\n\r\n");
  400986:	4808      	ldr	r0, [pc, #32]	; (4009a8 <MCAN1_INT0_Handler+0x80>)
  400988:	4b04      	ldr	r3, [pc, #16]	; (40099c <MCAN1_INT0_Handler+0x74>)
  40098a:	4798      	blx	r3
}
  40098c:	e7de      	b.n	40094c <MCAN1_INT0_Handler+0x24>
  40098e:	bf00      	nop
  400990:	20400a64 	.word	0x20400a64
  400994:	00400f7b 	.word	0x00400f7b
  400998:	00404adc 	.word	0x00404adc
  40099c:	00401765 	.word	0x00401765
  4009a0:	004007cd 	.word	0x004007cd
  4009a4:	00404b0c 	.word	0x00404b0c
  4009a8:	00404b54 	.word	0x00404b54

004009ac <candriver_send>:
 *  @param data_byte_length - the number of bytes sending
 *
 *  @post A message is sent if the CAN was not busy at the time of sending.
 */
bool candriver_send(uint32_t msg_id, uint8_t *msg_data, uint32_t data_byte_length)
{
  4009ac:	b510      	push	{r4, lr}
  4009ae:	b084      	sub	sp, #16
	tx_element->T0.reg = 0;
  4009b0:	2300      	movs	r3, #0
  4009b2:	9300      	str	r3, [sp, #0]
	tx_element->T1.reg = MCAN_TX_ELEMENT_T1_EFC |
  4009b4:	f44f 0308 	mov.w	r3, #8912896	; 0x880000
  4009b8:	9301      	str	r3, [sp, #4]
	tx_element.T0.reg |= MCAN_TX_ELEMENT_T0_STANDARD_ID(id_value);
  4009ba:	9c00      	ldr	r4, [sp, #0]
  4009bc:	4b11      	ldr	r3, [pc, #68]	; (400a04 <candriver_send+0x58>)
  4009be:	ea03 4080 	and.w	r0, r3, r0, lsl #18
  4009c2:	4320      	orrs	r0, r4
  4009c4:	9000      	str	r0, [sp, #0]
	tx_element.T1.bit.DLC = data_length;
  4009c6:	9b01      	ldr	r3, [sp, #4]
  4009c8:	f362 4313 	bfi	r3, r2, #16, #4
  4009cc:	9301      	str	r3, [sp, #4]
	for (i = 0; i < data_length; i++) {
  4009ce:	b142      	cbz	r2, 4009e2 <candriver_send+0x36>
  4009d0:	460b      	mov	r3, r1
  4009d2:	a802      	add	r0, sp, #8
  4009d4:	4411      	add	r1, r2
		tx_element.data[i] = *data;
  4009d6:	f813 4b01 	ldrb.w	r4, [r3], #1
  4009da:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < data_length; i++) {
  4009de:	428b      	cmp	r3, r1
  4009e0:	d1f9      	bne.n	4009d6 <candriver_send+0x2a>
	mcan_set_tx_buffer_element(&mcan_instance, &tx_element,
  4009e2:	4c09      	ldr	r4, [pc, #36]	; (400a08 <candriver_send+0x5c>)
  4009e4:	2200      	movs	r2, #0
  4009e6:	4669      	mov	r1, sp
  4009e8:	4620      	mov	r0, r4
  4009ea:	4b08      	ldr	r3, [pc, #32]	; (400a0c <candriver_send+0x60>)
  4009ec:	4798      	blx	r3
	if (module_inst->hw->MCAN_CCCR & MCAN_CCCR_CCE) {
  4009ee:	6823      	ldr	r3, [r4, #0]
  4009f0:	699a      	ldr	r2, [r3, #24]
  4009f2:	f012 0f02 	tst.w	r2, #2
  4009f6:	d102      	bne.n	4009fe <candriver_send+0x52>
	module_inst->hw->MCAN_TXBAR = trig_mask;
  4009f8:	2201      	movs	r2, #1
  4009fa:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  mcan_send_standard_message(msg_id, msg_data,
					data_byte_length); 
  // return result;
  4009fe:	b004      	add	sp, #16
  400a00:	bd10      	pop	{r4, pc}
  400a02:	bf00      	nop
  400a04:	1ffc0000 	.word	0x1ffc0000
  400a08:	20400a64 	.word	0x20400a64
  400a0c:	00400f91 	.word	0x00400f91

00400a10 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400a10:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  400a12:	4810      	ldr	r0, [pc, #64]	; (400a54 <sysclk_init+0x44>)
  400a14:	4b10      	ldr	r3, [pc, #64]	; (400a58 <sysclk_init+0x48>)
  400a16:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400a18:	213e      	movs	r1, #62	; 0x3e
  400a1a:	2000      	movs	r0, #0
  400a1c:	4b0f      	ldr	r3, [pc, #60]	; (400a5c <sysclk_init+0x4c>)
  400a1e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400a20:	4c0f      	ldr	r4, [pc, #60]	; (400a60 <sysclk_init+0x50>)
  400a22:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400a24:	2800      	cmp	r0, #0
  400a26:	d0fc      	beq.n	400a22 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400a28:	4b0e      	ldr	r3, [pc, #56]	; (400a64 <sysclk_init+0x54>)
  400a2a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400a2c:	4a0e      	ldr	r2, [pc, #56]	; (400a68 <sysclk_init+0x58>)
  400a2e:	4b0f      	ldr	r3, [pc, #60]	; (400a6c <sysclk_init+0x5c>)
  400a30:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400a32:	4c0f      	ldr	r4, [pc, #60]	; (400a70 <sysclk_init+0x60>)
  400a34:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400a36:	2800      	cmp	r0, #0
  400a38:	d0fc      	beq.n	400a34 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400a3a:	2002      	movs	r0, #2
  400a3c:	4b0d      	ldr	r3, [pc, #52]	; (400a74 <sysclk_init+0x64>)
  400a3e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400a40:	2000      	movs	r0, #0
  400a42:	4b0d      	ldr	r3, [pc, #52]	; (400a78 <sysclk_init+0x68>)
  400a44:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400a46:	4b0d      	ldr	r3, [pc, #52]	; (400a7c <sysclk_init+0x6c>)
  400a48:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  400a4a:	4802      	ldr	r0, [pc, #8]	; (400a54 <sysclk_init+0x44>)
  400a4c:	4b02      	ldr	r3, [pc, #8]	; (400a58 <sysclk_init+0x48>)
  400a4e:	4798      	blx	r3
  400a50:	bd10      	pop	{r4, pc}
  400a52:	bf00      	nop
  400a54:	08f0d180 	.word	0x08f0d180
  400a58:	00401579 	.word	0x00401579
  400a5c:	00401165 	.word	0x00401165
  400a60:	004011b9 	.word	0x004011b9
  400a64:	004011c9 	.word	0x004011c9
  400a68:	20183f01 	.word	0x20183f01
  400a6c:	400e0600 	.word	0x400e0600
  400a70:	004011d9 	.word	0x004011d9
  400a74:	004010c9 	.word	0x004010c9
  400a78:	00401101 	.word	0x00401101
  400a7c:	0040146d 	.word	0x0040146d

00400a80 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400a84:	b980      	cbnz	r0, 400aa8 <_read+0x28>
  400a86:	460c      	mov	r4, r1
  400a88:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400a8a:	2a00      	cmp	r2, #0
  400a8c:	dd0f      	ble.n	400aae <_read+0x2e>
  400a8e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400a90:	4e08      	ldr	r6, [pc, #32]	; (400ab4 <_read+0x34>)
  400a92:	4d09      	ldr	r5, [pc, #36]	; (400ab8 <_read+0x38>)
  400a94:	6830      	ldr	r0, [r6, #0]
  400a96:	4621      	mov	r1, r4
  400a98:	682b      	ldr	r3, [r5, #0]
  400a9a:	4798      	blx	r3
		ptr++;
  400a9c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400a9e:	42bc      	cmp	r4, r7
  400aa0:	d1f8      	bne.n	400a94 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400aa2:	4640      	mov	r0, r8
  400aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400aa8:	f04f 38ff 	mov.w	r8, #4294967295
  400aac:	e7f9      	b.n	400aa2 <_read+0x22>
	for (; len > 0; --len) {
  400aae:	4680      	mov	r8, r0
  400ab0:	e7f7      	b.n	400aa2 <_read+0x22>
  400ab2:	bf00      	nop
  400ab4:	204014a4 	.word	0x204014a4
  400ab8:	2040149c 	.word	0x2040149c

00400abc <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400abc:	3801      	subs	r0, #1
  400abe:	2802      	cmp	r0, #2
  400ac0:	d815      	bhi.n	400aee <_write+0x32>
{
  400ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400ac6:	460e      	mov	r6, r1
  400ac8:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400aca:	b19a      	cbz	r2, 400af4 <_write+0x38>
  400acc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400ace:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400b08 <_write+0x4c>
  400ad2:	4f0c      	ldr	r7, [pc, #48]	; (400b04 <_write+0x48>)
  400ad4:	f8d8 0000 	ldr.w	r0, [r8]
  400ad8:	f815 1b01 	ldrb.w	r1, [r5], #1
  400adc:	683b      	ldr	r3, [r7, #0]
  400ade:	4798      	blx	r3
  400ae0:	2800      	cmp	r0, #0
  400ae2:	db0a      	blt.n	400afa <_write+0x3e>
  400ae4:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400ae6:	3c01      	subs	r4, #1
  400ae8:	d1f4      	bne.n	400ad4 <_write+0x18>
  400aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400aee:	f04f 30ff 	mov.w	r0, #4294967295
  400af2:	4770      	bx	lr
	for (; len != 0; --len) {
  400af4:	4610      	mov	r0, r2
  400af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400afa:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400b02:	bf00      	nop
  400b04:	204014a0 	.word	0x204014a0
  400b08:	204014a4 	.word	0x204014a4

00400b0c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400b0c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400b0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400b12:	4b63      	ldr	r3, [pc, #396]	; (400ca0 <board_init+0x194>)
  400b14:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400b16:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
  400b1a:	4a62      	ldr	r2, [pc, #392]	; (400ca4 <board_init+0x198>)
  400b1c:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400b1e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  400b22:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  400b24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400b28:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400b2c:	4b5e      	ldr	r3, [pc, #376]	; (400ca8 <board_init+0x19c>)
  400b2e:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400b32:	f022 0201 	bic.w	r2, r2, #1
  400b36:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400b3a:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400b3e:	f022 0201 	bic.w	r2, r2, #1
  400b42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  400b46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400b4a:	f3bf 8f6f 	isb	sy
  400b4e:	200a      	movs	r0, #10
  400b50:	4c56      	ldr	r4, [pc, #344]	; (400cac <board_init+0x1a0>)
  400b52:	47a0      	blx	r4
  400b54:	200b      	movs	r0, #11
  400b56:	47a0      	blx	r4
  400b58:	200c      	movs	r0, #12
  400b5a:	47a0      	blx	r4
  400b5c:	2010      	movs	r0, #16
  400b5e:	47a0      	blx	r4
  400b60:	2011      	movs	r0, #17
  400b62:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400b64:	4b52      	ldr	r3, [pc, #328]	; (400cb0 <board_init+0x1a4>)
  400b66:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400b6a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b6c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400b70:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400b72:	4a50      	ldr	r2, [pc, #320]	; (400cb4 <board_init+0x1a8>)
  400b74:	f44f 7100 	mov.w	r1, #512	; 0x200
  400b78:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b7a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400b7e:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400b80:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b82:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400b86:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400b88:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b8c:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400b8e:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  400b90:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400b94:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400b96:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  400b9a:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b9c:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400b9e:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  400ba2:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400ba4:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400ba8:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400bac:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400bb0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  400bb4:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400bb6:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400bba:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400bbc:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400bbe:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400bc2:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400bc4:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  400bc8:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400bca:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400bcc:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  400bd0:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400bd2:	6059      	str	r1, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400bd4:	4938      	ldr	r1, [pc, #224]	; (400cb8 <board_init+0x1ac>)
  400bd6:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
  400bda:	f043 0310 	orr.w	r3, r3, #16
  400bde:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
		base->PIO_PUDR = mask;
  400be2:	4b36      	ldr	r3, [pc, #216]	; (400cbc <board_init+0x1b0>)
  400be4:	2110      	movs	r1, #16
  400be6:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400be8:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400bec:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400bee:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400bf0:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400bf4:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400bf6:	4308      	orrs	r0, r1
  400bf8:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400bfa:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400bfc:	4308      	orrs	r0, r1
  400bfe:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c00:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  400c02:	2108      	movs	r1, #8
  400c04:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c06:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c0a:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c0c:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c0e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c12:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400c14:	f020 0008 	bic.w	r0, r0, #8
  400c18:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c1a:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400c1c:	f020 0008 	bic.w	r0, r0, #8
  400c20:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c22:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  400c24:	2104      	movs	r1, #4
  400c26:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c28:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c2c:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c2e:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c30:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c34:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400c36:	f020 0004 	bic.w	r0, r0, #4
  400c3a:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c3c:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400c3e:	f020 0004 	bic.w	r0, r0, #4
  400c42:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c44:	6059      	str	r1, [r3, #4]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400c46:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400c4a:	2101      	movs	r1, #1
  400c4c:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400c4e:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400c52:	2102      	movs	r1, #2
  400c54:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400c56:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  400c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400c5e:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c64:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c66:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c6c:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400c6e:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  400c72:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400c74:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400c76:	4319      	orrs	r1, r3
  400c78:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c7a:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  400c7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  400c80:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c86:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c88:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c8a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c8e:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400c90:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  400c94:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400c96:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400c98:	4319      	orrs	r1, r3
  400c9a:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c9c:	6053      	str	r3, [r2, #4]
  400c9e:	bd10      	pop	{r4, pc}
  400ca0:	400e1850 	.word	0x400e1850
  400ca4:	5a00080c 	.word	0x5a00080c
  400ca8:	e000ed00 	.word	0xe000ed00
  400cac:	004011e9 	.word	0x004011e9
  400cb0:	400e0e00 	.word	0x400e0e00
  400cb4:	400e1200 	.word	0x400e1200
  400cb8:	40088000 	.word	0x40088000
  400cbc:	400e1000 	.word	0x400e1000

00400cc0 <_mcan_enable_peripheral_clock>:
 *
 * \param module_inst  MCAN instance
 *
 */
static void _mcan_enable_peripheral_clock(struct mcan_module *const module_inst)
{
  400cc0:	b508      	push	{r3, lr}
	if (module_inst->hw == MCAN0) {
  400cc2:	6803      	ldr	r3, [r0, #0]
  400cc4:	4a07      	ldr	r2, [pc, #28]	; (400ce4 <_mcan_enable_peripheral_clock+0x24>)
  400cc6:	4293      	cmp	r3, r2
  400cc8:	d003      	beq.n	400cd2 <_mcan_enable_peripheral_clock+0x12>
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN0);
	} else if (module_inst->hw == MCAN1) {
  400cca:	4a07      	ldr	r2, [pc, #28]	; (400ce8 <_mcan_enable_peripheral_clock+0x28>)
  400ccc:	4293      	cmp	r3, r2
  400cce:	d004      	beq.n	400cda <_mcan_enable_peripheral_clock+0x1a>
  400cd0:	bd08      	pop	{r3, pc}
		pmc_enable_periph_clk(ID_MCAN0);
  400cd2:	2023      	movs	r0, #35	; 0x23
  400cd4:	4b05      	ldr	r3, [pc, #20]	; (400cec <_mcan_enable_peripheral_clock+0x2c>)
  400cd6:	4798      	blx	r3
  400cd8:	bd08      	pop	{r3, pc}
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN1);
  400cda:	2025      	movs	r0, #37	; 0x25
  400cdc:	4b03      	ldr	r3, [pc, #12]	; (400cec <_mcan_enable_peripheral_clock+0x2c>)
  400cde:	4798      	blx	r3
	}
}
  400ce0:	e7f6      	b.n	400cd0 <_mcan_enable_peripheral_clock+0x10>
  400ce2:	bf00      	nop
  400ce4:	40030000 	.word	0x40030000
  400ce8:	40034000 	.word	0x40034000
  400cec:	004011e9 	.word	0x004011e9

00400cf0 <mcan_init>:
 * \param hw  Base address of MCAN.
 * \param config default configuration .
 */
void mcan_init(struct mcan_module *const module_inst, Mcan *hw,
		struct mcan_config *config)
{
  400cf0:	b570      	push	{r4, r5, r6, lr}
  400cf2:	4606      	mov	r6, r0
  400cf4:	460c      	mov	r4, r1
  400cf6:	4615      	mov	r5, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
  400cf8:	6001      	str	r1, [r0, #0]

	pmc_disable_pck(PMC_PCK_5);
  400cfa:	2005      	movs	r0, #5
  400cfc:	4b82      	ldr	r3, [pc, #520]	; (400f08 <mcan_init+0x218>)
  400cfe:	4798      	blx	r3

	pmc_switch_pck_to_pllack(PMC_PCK_5, PMC_PCK_PRES(9));
  400d00:	2190      	movs	r1, #144	; 0x90
  400d02:	2005      	movs	r0, #5
  400d04:	4b81      	ldr	r3, [pc, #516]	; (400f0c <mcan_init+0x21c>)
  400d06:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_5);
  400d08:	2005      	movs	r0, #5
  400d0a:	4b81      	ldr	r3, [pc, #516]	; (400f10 <mcan_init+0x220>)
  400d0c:	4798      	blx	r3

	/* Enable peripheral clock */
	_mcan_enable_peripheral_clock(module_inst);
  400d0e:	4630      	mov	r0, r6
  400d10:	4b80      	ldr	r3, [pc, #512]	; (400f14 <mcan_init+0x224>)
  400d12:	4798      	blx	r3


	/* Configuration Change Enable. */
	hw->MCAN_CCCR |= MCAN_CCCR_CCE;
  400d14:	69a3      	ldr	r3, [r4, #24]
  400d16:	f043 0302 	orr.w	r3, r3, #2
  400d1a:	61a3      	str	r3, [r4, #24]
	if (hw == MCAN0) {
  400d1c:	4b7e      	ldr	r3, [pc, #504]	; (400f18 <mcan_init+0x228>)
  400d1e:	429c      	cmp	r4, r3
  400d20:	f000 809c 	beq.w	400e5c <mcan_init+0x16c>
	} else if (hw == MCAN1) {
  400d24:	4b7d      	ldr	r3, [pc, #500]	; (400f1c <mcan_init+0x22c>)
  400d26:	429c      	cmp	r4, r3
  400d28:	f000 80c3 	beq.w	400eb2 <mcan_init+0x1c2>
		hw->MCAN_RXESC = MCAN_RXESC_RBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4) |
  400d2c:	2300      	movs	r3, #0
  400d2e:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		hw->MCAN_TXESC = MCAN_TXESC_TBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4);
  400d32:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	hw->MCAN_NBTP = MCAN_NBTP_NBRP(CONF_MCAN_NBTP_NBRP_VALUE) |
  400d36:	4b7a      	ldr	r3, [pc, #488]	; (400f20 <mcan_init+0x230>)
  400d38:	61e3      	str	r3, [r4, #28]
	hw->MCAN_DBTP = MCAN_DBTP_DBRP(CONF_MCAN_FBTP_FBRP_VALUE) |
  400d3a:	4b7a      	ldr	r3, [pc, #488]	; (400f24 <mcan_init+0x234>)
  400d3c:	60e3      	str	r3, [r4, #12]
	hw->MCAN_TDCR = MCAN_TDCR_TDCO(config->delay_compensation_offset) |
  400d3e:	7beb      	ldrb	r3, [r5, #15]
  400d40:	021b      	lsls	r3, r3, #8
  400d42:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
		    MCAN_TDCR_TDCF(config->delay_compensation_filter_window_length);
  400d46:	7c2a      	ldrb	r2, [r5, #16]
  400d48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	hw->MCAN_TDCR = MCAN_TDCR_TDCO(config->delay_compensation_offset) |
  400d4c:	4313      	orrs	r3, r2
  400d4e:	64a3      	str	r3, [r4, #72]	; 0x48
	if (config->tdc_enable) {
  400d50:	7bab      	ldrb	r3, [r5, #14]
  400d52:	b11b      	cbz	r3, 400d5c <mcan_init+0x6c>
		hw->MCAN_DBTP |= MCAN_DBTP_TDC_ENABLED;
  400d54:	68e3      	ldr	r3, [r4, #12]
  400d56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  400d5a:	60e3      	str	r3, [r4, #12]
	hw->MCAN_RWD |= MCAN_RWD_WDC(config->watchdog_configuration);
  400d5c:	6962      	ldr	r2, [r4, #20]
  400d5e:	786b      	ldrb	r3, [r5, #1]
  400d60:	4313      	orrs	r3, r2
  400d62:	6163      	str	r3, [r4, #20]
	if (config->transmit_pause) {
  400d64:	78ab      	ldrb	r3, [r5, #2]
  400d66:	b11b      	cbz	r3, 400d70 <mcan_init+0x80>
		hw->MCAN_CCCR |= MCAN_CCCR_TXP;
  400d68:	69a3      	ldr	r3, [r4, #24]
  400d6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  400d6e:	61a3      	str	r3, [r4, #24]
	if (!config->automatic_retransmission) {
  400d70:	796b      	ldrb	r3, [r5, #5]
  400d72:	b91b      	cbnz	r3, 400d7c <mcan_init+0x8c>
		hw->MCAN_CCCR |= MCAN_CCCR_DAR;
  400d74:	69a3      	ldr	r3, [r4, #24]
  400d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400d7a:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_request) {
  400d7c:	79ab      	ldrb	r3, [r5, #6]
  400d7e:	b11b      	cbz	r3, 400d88 <mcan_init+0x98>
		hw->MCAN_CCCR |= MCAN_CCCR_CSR;
  400d80:	69a3      	ldr	r3, [r4, #24]
  400d82:	f043 0310 	orr.w	r3, r3, #16
  400d86:	61a3      	str	r3, [r4, #24]
	hw->MCAN_TSCC = MCAN_TSCC_TCP(config->timestamp_prescaler) |
  400d88:	7a2b      	ldrb	r3, [r5, #8]
  400d8a:	041b      	lsls	r3, r3, #16
  400d8c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  400d90:	f043 0301 	orr.w	r3, r3, #1
  400d94:	6223      	str	r3, [r4, #32]
			config->timeout_mode | config->timeout_enable;
  400d96:	7b2b      	ldrb	r3, [r5, #12]
  400d98:	7b6a      	ldrb	r2, [r5, #13]
  400d9a:	4313      	orrs	r3, r2
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  400d9c:	896a      	ldrh	r2, [r5, #10]
			config->timeout_mode | config->timeout_enable;
  400d9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  400da2:	62a3      	str	r3, [r4, #40]	; 0x28
	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  400da4:	7c6b      	ldrb	r3, [r5, #17]
  400da6:	011b      	lsls	r3, r3, #4
  400da8:	f003 0330 	and.w	r3, r3, #48	; 0x30
			MCAN_GFC_ANFE(config->nonmatching_frames_action_extended);
  400dac:	7caa      	ldrb	r2, [r5, #18]
  400dae:	0092      	lsls	r2, r2, #2
  400db0:	f002 020c 	and.w	r2, r2, #12
	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  400db4:	4313      	orrs	r3, r2
  400db6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if (config->remote_frames_standard_reject) {
  400dba:	7ceb      	ldrb	r3, [r5, #19]
  400dbc:	b12b      	cbz	r3, 400dca <mcan_init+0xda>
		hw->MCAN_GFC |= MCAN_GFC_RRFS;
  400dbe:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  400dc2:	f043 0302 	orr.w	r3, r3, #2
  400dc6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if (config->remote_frames_extended_reject) {
  400dca:	7d2b      	ldrb	r3, [r5, #20]
  400dcc:	b12b      	cbz	r3, 400dda <mcan_init+0xea>
		hw->MCAN_GFC|= MCAN_GFC_RRFE;
  400dce:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  400dd2:	f043 0301 	orr.w	r3, r3, #1
  400dd6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hw->MCAN_XIDAM = config->extended_id_mask;
  400dda:	69ab      	ldr	r3, [r5, #24]
  400ddc:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	if (config->rx_fifo_0_overwrite) {
  400de0:	7f2b      	ldrb	r3, [r5, #28]
  400de2:	b12b      	cbz	r3, 400df0 <mcan_init+0x100>
		hw->MCAN_RXF0C |= MCAN_RXF0C_F0OM;
  400de4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
  400de8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  400dec:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	hw->MCAN_RXF0C |= MCAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
  400df0:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
  400df4:	7f6b      	ldrb	r3, [r5, #29]
  400df6:	061b      	lsls	r3, r3, #24
  400df8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  400dfc:	4313      	orrs	r3, r2
  400dfe:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	if (config->rx_fifo_1_overwrite) {
  400e02:	7fab      	ldrb	r3, [r5, #30]
  400e04:	b12b      	cbz	r3, 400e12 <mcan_init+0x122>
		hw->MCAN_RXF1C |= MCAN_RXF1C_F1OM;
  400e06:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
  400e0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  400e0e:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	hw->MCAN_RXF1C |= MCAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
  400e12:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
  400e16:	7feb      	ldrb	r3, [r5, #31]
  400e18:	061b      	lsls	r3, r3, #24
  400e1a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  400e1e:	4313      	orrs	r3, r2
  400e20:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	if (config->tx_queue_mode) {
  400e24:	f895 3020 	ldrb.w	r3, [r5, #32]
  400e28:	b12b      	cbz	r3, 400e36 <mcan_init+0x146>
		hw->MCAN_TXBC |= MCAN_TXBC_TFQM;
  400e2a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
  400e2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  400e32:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hw->MCAN_TXEFC |= MCAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
  400e36:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
  400e3a:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
  400e3e:	061b      	lsls	r3, r3, #24
  400e40:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  400e44:	4313      	orrs	r3, r2
  400e46:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0

	/* Set the configuration. */
	_mcan_set_configuration(hw, config);

	/* Enable the interrupt setting which no need change. */
	hw->MCAN_ILE = MCAN_ILE_EINT0 | MCAN_ILE_EINT1;
  400e4a:	2303      	movs	r3, #3
  400e4c:	65e3      	str	r3, [r4, #92]	; 0x5c
	hw->MCAN_TXBTIE = 0xFFFFFFFFul;
  400e4e:	f04f 33ff 	mov.w	r3, #4294967295
  400e52:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	hw->MCAN_TXBCIE = 0xFFFFFFFFul;
  400e56:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
  400e5a:	bd70      	pop	{r4, r5, r6, pc}
		hw->MCAN_SIDFC = ((uint32_t)mcan0_rx_standard_filter & BIT_2_TO_15_MASK) |
  400e5c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  400e60:	4931      	ldr	r1, [pc, #196]	; (400f28 <mcan_init+0x238>)
  400e62:	4011      	ands	r1, r2
  400e64:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  400e68:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		hw->MCAN_XIDFC = ((uint32_t)mcan0_rx_extended_filter & BIT_2_TO_15_MASK) |
  400e6c:	492f      	ldr	r1, [pc, #188]	; (400f2c <mcan_init+0x23c>)
  400e6e:	4011      	ands	r1, r2
  400e70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400e74:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		hw->MCAN_RXF0C = ((uint32_t)mcan0_rx_fifo_0 & BIT_2_TO_15_MASK) |
  400e78:	492d      	ldr	r1, [pc, #180]	; (400f30 <mcan_init+0x240>)
  400e7a:	4011      	ands	r1, r2
  400e7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400e80:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		hw->MCAN_RXF1C = ((uint32_t)mcan0_rx_fifo_1 & BIT_2_TO_15_MASK) |
  400e84:	492b      	ldr	r1, [pc, #172]	; (400f34 <mcan_init+0x244>)
  400e86:	4011      	ands	r1, r2
  400e88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400e8c:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		hw->MCAN_RXBC = ((uint32_t)mcan0_rx_buffer & BIT_2_TO_15_MASK);
  400e90:	4929      	ldr	r1, [pc, #164]	; (400f38 <mcan_init+0x248>)
  400e92:	4011      	ands	r1, r2
  400e94:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  400e98:	4828      	ldr	r0, [pc, #160]	; (400f3c <mcan_init+0x24c>)
  400e9a:	4010      	ands	r0, r2
				MCAN_TXBC_NDTB(CONF_MCAN0_TX_BUFFER_NUM) |
  400e9c:	4928      	ldr	r1, [pc, #160]	; (400f40 <mcan_init+0x250>)
  400e9e:	4301      	orrs	r1, r0
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  400ea0:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		hw->MCAN_TXEFC = ((uint32_t)mcan0_tx_event_fifo & BIT_2_TO_15_MASK) |
  400ea4:	4927      	ldr	r1, [pc, #156]	; (400f44 <mcan_init+0x254>)
  400ea6:	400a      	ands	r2, r1
  400ea8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  400eac:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  400eb0:	e73c      	b.n	400d2c <mcan_init+0x3c>
		hw->MCAN_SIDFC = ((uint32_t)mcan1_rx_standard_filter & BIT_2_TO_15_MASK) |
  400eb2:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  400eb6:	4924      	ldr	r1, [pc, #144]	; (400f48 <mcan_init+0x258>)
  400eb8:	4011      	ands	r1, r2
  400eba:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  400ebe:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		hw->MCAN_XIDFC = ((uint32_t)mcan1_rx_extended_filter & BIT_2_TO_15_MASK) |
  400ec2:	4922      	ldr	r1, [pc, #136]	; (400f4c <mcan_init+0x25c>)
  400ec4:	4011      	ands	r1, r2
  400ec6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400eca:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		hw->MCAN_RXF0C = ((uint32_t)mcan1_rx_fifo_0 & BIT_2_TO_15_MASK) |
  400ece:	4920      	ldr	r1, [pc, #128]	; (400f50 <mcan_init+0x260>)
  400ed0:	4011      	ands	r1, r2
  400ed2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400ed6:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		hw->MCAN_RXF1C = ((uint32_t)mcan1_rx_fifo_1 & BIT_2_TO_15_MASK) |
  400eda:	491e      	ldr	r1, [pc, #120]	; (400f54 <mcan_init+0x264>)
  400edc:	4011      	ands	r1, r2
  400ede:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400ee2:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		hw->MCAN_RXBC = ((uint32_t)mcan1_rx_buffer & BIT_2_TO_15_MASK);
  400ee6:	491c      	ldr	r1, [pc, #112]	; (400f58 <mcan_init+0x268>)
  400ee8:	4011      	ands	r1, r2
  400eea:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  400eee:	481b      	ldr	r0, [pc, #108]	; (400f5c <mcan_init+0x26c>)
  400ef0:	4010      	ands	r0, r2
				MCAN_TXBC_NDTB(CONF_MCAN1_TX_BUFFER_NUM) |
  400ef2:	4913      	ldr	r1, [pc, #76]	; (400f40 <mcan_init+0x250>)
  400ef4:	4301      	orrs	r1, r0
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  400ef6:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		hw->MCAN_TXEFC = ((uint32_t)mcan1_tx_event_fifo & BIT_2_TO_15_MASK) |
  400efa:	4919      	ldr	r1, [pc, #100]	; (400f60 <mcan_init+0x270>)
  400efc:	400a      	ands	r2, r1
  400efe:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  400f02:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  400f06:	e711      	b.n	400d2c <mcan_init+0x3c>
  400f08:	00401259 	.word	0x00401259
  400f0c:	00401209 	.word	0x00401209
  400f10:	00401245 	.word	0x00401245
  400f14:	00400cc1 	.word	0x00400cc1
  400f18:	40030000 	.word	0x40030000
  400f1c:	40034000 	.word	0x40034000
  400f20:	06010507 	.word	0x06010507
  400f24:	00050a33 	.word	0x00050a33
  400f28:	20400de8 	.word	0x20400de8
  400f2c:	20400b68 	.word	0x20400b68
  400f30:	20400be8 	.word	0x20400be8
  400f34:	20400ce8 	.word	0x20400ce8
  400f38:	20400a68 	.word	0x20400a68
  400f3c:	20400e68 	.word	0x20400e68
  400f40:	04040000 	.word	0x04040000
  400f44:	20400ee8 	.word	0x20400ee8
  400f48:	204012a8 	.word	0x204012a8
  400f4c:	20401028 	.word	0x20401028
  400f50:	204010a8 	.word	0x204010a8
  400f54:	204011a8 	.word	0x204011a8
  400f58:	20400f28 	.word	0x20400f28
  400f5c:	20401328 	.word	0x20401328
  400f60:	204013a8 	.word	0x204013a8

00400f64 <mcan_start>:
 * \param module_inst  MCAN instance
 *
 */
void mcan_start(struct mcan_module *const module_inst)
{
	module_inst->hw->MCAN_CCCR &= ~MCAN_CCCR_INIT;
  400f64:	6802      	ldr	r2, [r0, #0]
  400f66:	6993      	ldr	r3, [r2, #24]
  400f68:	f023 0301 	bic.w	r3, r3, #1
  400f6c:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT);
  400f6e:	6802      	ldr	r2, [r0, #0]
  400f70:	6993      	ldr	r3, [r2, #24]
  400f72:	f013 0f01 	tst.w	r3, #1
  400f76:	d1fb      	bne.n	400f70 <mcan_start+0xc>
}
  400f78:	4770      	bx	lr

00400f7a <mcan_stop>:
 * \param module_inst  MCAN instance
 *
 */
void mcan_stop(struct mcan_module *const module_inst)
{
	module_inst->hw->MCAN_CCCR |= MCAN_CCCR_INIT;
  400f7a:	6802      	ldr	r2, [r0, #0]
  400f7c:	6993      	ldr	r3, [r2, #24]
  400f7e:	f043 0301 	orr.w	r3, r3, #1
  400f82:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (!(module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT));
  400f84:	6802      	ldr	r2, [r0, #0]
  400f86:	6993      	ldr	r3, [r2, #24]
  400f88:	f013 0f01 	tst.w	r3, #1
  400f8c:	d0fb      	beq.n	400f86 <mcan_stop+0xc>
}
  400f8e:	4770      	bx	lr

00400f90 <mcan_set_tx_buffer_element>:
 * \return status code.
 */
enum status_code mcan_set_tx_buffer_element(
		struct mcan_module *const module_inst,
		struct mcan_tx_element *tx_element, uint32_t index)
{
  400f90:	b410      	push	{r4}
	uint32_t i;
	if (module_inst->hw == MCAN0) {
  400f92:	6803      	ldr	r3, [r0, #0]
  400f94:	4819      	ldr	r0, [pc, #100]	; (400ffc <mcan_set_tx_buffer_element+0x6c>)
  400f96:	4283      	cmp	r3, r0
  400f98:	d018      	beq.n	400fcc <mcan_set_tx_buffer_element+0x3c>
		mcan0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
			mcan0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	} else if (module_inst->hw == MCAN1) {
  400f9a:	4819      	ldr	r0, [pc, #100]	; (401000 <mcan_set_tx_buffer_element+0x70>)
  400f9c:	4283      	cmp	r3, r0
  400f9e:	d129      	bne.n	400ff4 <mcan_set_tx_buffer_element+0x64>
		mcan1_tx_buffer[index].T0.reg = tx_element->T0.reg;
  400fa0:	680c      	ldr	r4, [r1, #0]
  400fa2:	4818      	ldr	r0, [pc, #96]	; (401004 <mcan_set_tx_buffer_element+0x74>)
  400fa4:	0112      	lsls	r2, r2, #4
  400fa6:	1883      	adds	r3, r0, r2
  400fa8:	5084      	str	r4, [r0, r2]
		mcan1_tx_buffer[index].T1.reg = tx_element->T1.reg;
  400faa:	684c      	ldr	r4, [r1, #4]
  400fac:	605c      	str	r4, [r3, #4]
  400fae:	f101 0308 	add.w	r3, r1, #8
  400fb2:	3207      	adds	r2, #7
  400fb4:	4402      	add	r2, r0
  400fb6:	3110      	adds	r1, #16
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
			mcan1_tx_buffer[index].data[i] = tx_element->data[i];
  400fb8:	f813 0b01 	ldrb.w	r0, [r3], #1
  400fbc:	f802 0f01 	strb.w	r0, [r2, #1]!
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  400fc0:	428b      	cmp	r3, r1
  400fc2:	d1f9      	bne.n	400fb8 <mcan_set_tx_buffer_element+0x28>
		}
		return STATUS_OK;
  400fc4:	2000      	movs	r0, #0
	}
	return ERR_INVALID_ARG;
}
  400fc6:	f85d 4b04 	ldr.w	r4, [sp], #4
  400fca:	4770      	bx	lr
		mcan0_tx_buffer[index].T0.reg = tx_element->T0.reg;
  400fcc:	680c      	ldr	r4, [r1, #0]
  400fce:	480e      	ldr	r0, [pc, #56]	; (401008 <mcan_set_tx_buffer_element+0x78>)
  400fd0:	0112      	lsls	r2, r2, #4
  400fd2:	1883      	adds	r3, r0, r2
  400fd4:	5084      	str	r4, [r0, r2]
		mcan0_tx_buffer[index].T1.reg = tx_element->T1.reg;
  400fd6:	684c      	ldr	r4, [r1, #4]
  400fd8:	605c      	str	r4, [r3, #4]
  400fda:	f101 0308 	add.w	r3, r1, #8
  400fde:	3207      	adds	r2, #7
  400fe0:	4402      	add	r2, r0
  400fe2:	3110      	adds	r1, #16
			mcan0_tx_buffer[index].data[i] = tx_element->data[i];
  400fe4:	f813 0b01 	ldrb.w	r0, [r3], #1
  400fe8:	f802 0f01 	strb.w	r0, [r2, #1]!
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  400fec:	428b      	cmp	r3, r1
  400fee:	d1f9      	bne.n	400fe4 <mcan_set_tx_buffer_element+0x54>
		return STATUS_OK;
  400ff0:	2000      	movs	r0, #0
  400ff2:	e7e8      	b.n	400fc6 <mcan_set_tx_buffer_element+0x36>
	return ERR_INVALID_ARG;
  400ff4:	f06f 0007 	mvn.w	r0, #7
  400ff8:	e7e5      	b.n	400fc6 <mcan_set_tx_buffer_element+0x36>
  400ffa:	bf00      	nop
  400ffc:	40030000 	.word	0x40030000
  401000:	40034000 	.word	0x40034000
  401004:	20401328 	.word	0x20401328
  401008:	20400e68 	.word	0x20400e68

0040100c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40100c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40100e:	4770      	bx	lr

00401010 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401010:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401012:	4770      	bx	lr

00401014 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401018:	4604      	mov	r4, r0
  40101a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40101c:	4b0e      	ldr	r3, [pc, #56]	; (401058 <pio_handler_process+0x44>)
  40101e:	4798      	blx	r3
  401020:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401022:	4620      	mov	r0, r4
  401024:	4b0d      	ldr	r3, [pc, #52]	; (40105c <pio_handler_process+0x48>)
  401026:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401028:	4005      	ands	r5, r0
  40102a:	d013      	beq.n	401054 <pio_handler_process+0x40>
  40102c:	4c0c      	ldr	r4, [pc, #48]	; (401060 <pio_handler_process+0x4c>)
  40102e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401032:	e003      	b.n	40103c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401034:	42b4      	cmp	r4, r6
  401036:	d00d      	beq.n	401054 <pio_handler_process+0x40>
  401038:	3410      	adds	r4, #16
		while (status != 0) {
  40103a:	b15d      	cbz	r5, 401054 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40103c:	6820      	ldr	r0, [r4, #0]
  40103e:	4540      	cmp	r0, r8
  401040:	d1f8      	bne.n	401034 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401042:	6861      	ldr	r1, [r4, #4]
  401044:	4229      	tst	r1, r5
  401046:	d0f5      	beq.n	401034 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401048:	68e3      	ldr	r3, [r4, #12]
  40104a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40104c:	6863      	ldr	r3, [r4, #4]
  40104e:	ea25 0503 	bic.w	r5, r5, r3
  401052:	e7ef      	b.n	401034 <pio_handler_process+0x20>
  401054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401058:	0040100d 	.word	0x0040100d
  40105c:	00401011 	.word	0x00401011
  401060:	204013e8 	.word	0x204013e8

00401064 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401064:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401066:	210a      	movs	r1, #10
  401068:	4801      	ldr	r0, [pc, #4]	; (401070 <PIOA_Handler+0xc>)
  40106a:	4b02      	ldr	r3, [pc, #8]	; (401074 <PIOA_Handler+0x10>)
  40106c:	4798      	blx	r3
  40106e:	bd08      	pop	{r3, pc}
  401070:	400e0e00 	.word	0x400e0e00
  401074:	00401015 	.word	0x00401015

00401078 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401078:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40107a:	210b      	movs	r1, #11
  40107c:	4801      	ldr	r0, [pc, #4]	; (401084 <PIOB_Handler+0xc>)
  40107e:	4b02      	ldr	r3, [pc, #8]	; (401088 <PIOB_Handler+0x10>)
  401080:	4798      	blx	r3
  401082:	bd08      	pop	{r3, pc}
  401084:	400e1000 	.word	0x400e1000
  401088:	00401015 	.word	0x00401015

0040108c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40108c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40108e:	210c      	movs	r1, #12
  401090:	4801      	ldr	r0, [pc, #4]	; (401098 <PIOC_Handler+0xc>)
  401092:	4b02      	ldr	r3, [pc, #8]	; (40109c <PIOC_Handler+0x10>)
  401094:	4798      	blx	r3
  401096:	bd08      	pop	{r3, pc}
  401098:	400e1200 	.word	0x400e1200
  40109c:	00401015 	.word	0x00401015

004010a0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4010a0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4010a2:	2110      	movs	r1, #16
  4010a4:	4801      	ldr	r0, [pc, #4]	; (4010ac <PIOD_Handler+0xc>)
  4010a6:	4b02      	ldr	r3, [pc, #8]	; (4010b0 <PIOD_Handler+0x10>)
  4010a8:	4798      	blx	r3
  4010aa:	bd08      	pop	{r3, pc}
  4010ac:	400e1400 	.word	0x400e1400
  4010b0:	00401015 	.word	0x00401015

004010b4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4010b4:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4010b6:	2111      	movs	r1, #17
  4010b8:	4801      	ldr	r0, [pc, #4]	; (4010c0 <PIOE_Handler+0xc>)
  4010ba:	4b02      	ldr	r3, [pc, #8]	; (4010c4 <PIOE_Handler+0x10>)
  4010bc:	4798      	blx	r3
  4010be:	bd08      	pop	{r3, pc}
  4010c0:	400e1600 	.word	0x400e1600
  4010c4:	00401015 	.word	0x00401015

004010c8 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4010c8:	2803      	cmp	r0, #3
  4010ca:	d011      	beq.n	4010f0 <pmc_mck_set_division+0x28>
  4010cc:	2804      	cmp	r0, #4
  4010ce:	d012      	beq.n	4010f6 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4010d0:	2802      	cmp	r0, #2
  4010d2:	bf0c      	ite	eq
  4010d4:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4010d8:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4010da:	4a08      	ldr	r2, [pc, #32]	; (4010fc <pmc_mck_set_division+0x34>)
  4010dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4010de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4010e2:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4010e4:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4010e6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4010e8:	f013 0f08 	tst.w	r3, #8
  4010ec:	d0fb      	beq.n	4010e6 <pmc_mck_set_division+0x1e>
}
  4010ee:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4010f0:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4010f4:	e7f1      	b.n	4010da <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4010f6:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4010fa:	e7ee      	b.n	4010da <pmc_mck_set_division+0x12>
  4010fc:	400e0600 	.word	0x400e0600

00401100 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401100:	4a17      	ldr	r2, [pc, #92]	; (401160 <pmc_switch_mck_to_pllack+0x60>)
  401102:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401108:	4318      	orrs	r0, r3
  40110a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40110c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40110e:	f013 0f08 	tst.w	r3, #8
  401112:	d10a      	bne.n	40112a <pmc_switch_mck_to_pllack+0x2a>
  401114:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401118:	4911      	ldr	r1, [pc, #68]	; (401160 <pmc_switch_mck_to_pllack+0x60>)
  40111a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40111c:	f012 0f08 	tst.w	r2, #8
  401120:	d103      	bne.n	40112a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401122:	3b01      	subs	r3, #1
  401124:	d1f9      	bne.n	40111a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401126:	2001      	movs	r0, #1
  401128:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40112a:	4a0d      	ldr	r2, [pc, #52]	; (401160 <pmc_switch_mck_to_pllack+0x60>)
  40112c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40112e:	f023 0303 	bic.w	r3, r3, #3
  401132:	f043 0302 	orr.w	r3, r3, #2
  401136:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401138:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40113a:	f013 0f08 	tst.w	r3, #8
  40113e:	d10a      	bne.n	401156 <pmc_switch_mck_to_pllack+0x56>
  401140:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401144:	4906      	ldr	r1, [pc, #24]	; (401160 <pmc_switch_mck_to_pllack+0x60>)
  401146:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401148:	f012 0f08 	tst.w	r2, #8
  40114c:	d105      	bne.n	40115a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40114e:	3b01      	subs	r3, #1
  401150:	d1f9      	bne.n	401146 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401152:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401154:	4770      	bx	lr
	return 0;
  401156:	2000      	movs	r0, #0
  401158:	4770      	bx	lr
  40115a:	2000      	movs	r0, #0
  40115c:	4770      	bx	lr
  40115e:	bf00      	nop
  401160:	400e0600 	.word	0x400e0600

00401164 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401164:	b9a0      	cbnz	r0, 401190 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401166:	480e      	ldr	r0, [pc, #56]	; (4011a0 <pmc_switch_mainck_to_xtal+0x3c>)
  401168:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40116a:	0209      	lsls	r1, r1, #8
  40116c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40116e:	4a0d      	ldr	r2, [pc, #52]	; (4011a4 <pmc_switch_mainck_to_xtal+0x40>)
  401170:	401a      	ands	r2, r3
  401172:	4b0d      	ldr	r3, [pc, #52]	; (4011a8 <pmc_switch_mainck_to_xtal+0x44>)
  401174:	4313      	orrs	r3, r2
  401176:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401178:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40117a:	4602      	mov	r2, r0
  40117c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40117e:	f013 0f01 	tst.w	r3, #1
  401182:	d0fb      	beq.n	40117c <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401184:	4a06      	ldr	r2, [pc, #24]	; (4011a0 <pmc_switch_mainck_to_xtal+0x3c>)
  401186:	6a11      	ldr	r1, [r2, #32]
  401188:	4b08      	ldr	r3, [pc, #32]	; (4011ac <pmc_switch_mainck_to_xtal+0x48>)
  40118a:	430b      	orrs	r3, r1
  40118c:	6213      	str	r3, [r2, #32]
  40118e:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401190:	4903      	ldr	r1, [pc, #12]	; (4011a0 <pmc_switch_mainck_to_xtal+0x3c>)
  401192:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401194:	4a06      	ldr	r2, [pc, #24]	; (4011b0 <pmc_switch_mainck_to_xtal+0x4c>)
  401196:	401a      	ands	r2, r3
  401198:	4b06      	ldr	r3, [pc, #24]	; (4011b4 <pmc_switch_mainck_to_xtal+0x50>)
  40119a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40119c:	620b      	str	r3, [r1, #32]
  40119e:	4770      	bx	lr
  4011a0:	400e0600 	.word	0x400e0600
  4011a4:	ffc8fffc 	.word	0xffc8fffc
  4011a8:	00370001 	.word	0x00370001
  4011ac:	01370000 	.word	0x01370000
  4011b0:	fec8fffc 	.word	0xfec8fffc
  4011b4:	01370002 	.word	0x01370002

004011b8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4011b8:	4b02      	ldr	r3, [pc, #8]	; (4011c4 <pmc_osc_is_ready_mainck+0xc>)
  4011ba:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4011bc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4011c0:	4770      	bx	lr
  4011c2:	bf00      	nop
  4011c4:	400e0600 	.word	0x400e0600

004011c8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4011c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4011cc:	4b01      	ldr	r3, [pc, #4]	; (4011d4 <pmc_disable_pllack+0xc>)
  4011ce:	629a      	str	r2, [r3, #40]	; 0x28
  4011d0:	4770      	bx	lr
  4011d2:	bf00      	nop
  4011d4:	400e0600 	.word	0x400e0600

004011d8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4011d8:	4b02      	ldr	r3, [pc, #8]	; (4011e4 <pmc_is_locked_pllack+0xc>)
  4011da:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4011dc:	f000 0002 	and.w	r0, r0, #2
  4011e0:	4770      	bx	lr
  4011e2:	bf00      	nop
  4011e4:	400e0600 	.word	0x400e0600

004011e8 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  4011e8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4011ec:	4b05      	ldr	r3, [pc, #20]	; (401204 <pmc_enable_periph_clk+0x1c>)
  4011ee:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  4011f2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4011f6:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  4011fa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4011fe:	2000      	movs	r0, #0
  401200:	4770      	bx	lr
  401202:	bf00      	nop
  401204:	400e0600 	.word	0x400e0600

00401208 <pmc_switch_pck_to_pllack>:
 */
uint32_t pmc_switch_pck_to_pllack(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLA_CLK | ul_pres;
  401208:	f041 0102 	orr.w	r1, r1, #2
  40120c:	4b0c      	ldr	r3, [pc, #48]	; (401240 <pmc_switch_pck_to_pllack+0x38>)
  40120e:	f100 0210 	add.w	r2, r0, #16
  401212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  401216:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  401218:	f44f 7380 	mov.w	r3, #256	; 0x100
  40121c:	fa03 f000 	lsl.w	r0, r3, r0
	for (ul_timeout = PMC_TIMEOUT;
  401220:	4202      	tst	r2, r0
  401222:	d109      	bne.n	401238 <pmc_switch_pck_to_pllack+0x30>
  401224:	f44f 6300 	mov.w	r3, #2048	; 0x800
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  401228:	4905      	ldr	r1, [pc, #20]	; (401240 <pmc_switch_pck_to_pllack+0x38>)
  40122a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	for (ul_timeout = PMC_TIMEOUT;
  40122c:	4202      	tst	r2, r0
  40122e:	d105      	bne.n	40123c <pmc_switch_pck_to_pllack+0x34>
		if (ul_timeout == 0) {
  401230:	3b01      	subs	r3, #1
  401232:	d1fa      	bne.n	40122a <pmc_switch_pck_to_pllack+0x22>
			return 1;
  401234:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401236:	4770      	bx	lr
	return 0;
  401238:	2000      	movs	r0, #0
  40123a:	4770      	bx	lr
  40123c:	2000      	movs	r0, #0
  40123e:	4770      	bx	lr
  401240:	400e0600 	.word	0x400e0600

00401244 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  401244:	f44f 7380 	mov.w	r3, #256	; 0x100
  401248:	fa03 f000 	lsl.w	r0, r3, r0
  40124c:	4b01      	ldr	r3, [pc, #4]	; (401254 <pmc_enable_pck+0x10>)
  40124e:	6018      	str	r0, [r3, #0]
  401250:	4770      	bx	lr
  401252:	bf00      	nop
  401254:	400e0600 	.word	0x400e0600

00401258 <pmc_disable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  401258:	f44f 7380 	mov.w	r3, #256	; 0x100
  40125c:	fa03 f000 	lsl.w	r0, r3, r0
  401260:	4b01      	ldr	r3, [pc, #4]	; (401268 <pmc_disable_pck+0x10>)
  401262:	6058      	str	r0, [r3, #4]
  401264:	4770      	bx	lr
  401266:	bf00      	nop
  401268:	400e0600 	.word	0x400e0600

0040126c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40126c:	6943      	ldr	r3, [r0, #20]
  40126e:	f013 0f02 	tst.w	r3, #2
  401272:	d002      	beq.n	40127a <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401274:	61c1      	str	r1, [r0, #28]
	return 0;
  401276:	2000      	movs	r0, #0
  401278:	4770      	bx	lr
		return 1;
  40127a:	2001      	movs	r0, #1
}
  40127c:	4770      	bx	lr

0040127e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40127e:	6943      	ldr	r3, [r0, #20]
  401280:	f013 0f01 	tst.w	r3, #1
  401284:	d003      	beq.n	40128e <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401286:	6983      	ldr	r3, [r0, #24]
  401288:	700b      	strb	r3, [r1, #0]
	return 0;
  40128a:	2000      	movs	r0, #0
  40128c:	4770      	bx	lr
		return 1;
  40128e:	2001      	movs	r0, #1
}
  401290:	4770      	bx	lr

00401292 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401292:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401294:	010b      	lsls	r3, r1, #4
  401296:	4293      	cmp	r3, r2
  401298:	d914      	bls.n	4012c4 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40129a:	00c9      	lsls	r1, r1, #3
  40129c:	084b      	lsrs	r3, r1, #1
  40129e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4012a2:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4012a6:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4012a8:	1e5c      	subs	r4, r3, #1
  4012aa:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4012ae:	428c      	cmp	r4, r1
  4012b0:	d901      	bls.n	4012b6 <usart_set_async_baudrate+0x24>
		return 1;
  4012b2:	2001      	movs	r0, #1
  4012b4:	e017      	b.n	4012e6 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4012b6:	6841      	ldr	r1, [r0, #4]
  4012b8:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4012bc:	6041      	str	r1, [r0, #4]
  4012be:	e00c      	b.n	4012da <usart_set_async_baudrate+0x48>
		return 1;
  4012c0:	2001      	movs	r0, #1
  4012c2:	e010      	b.n	4012e6 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4012c4:	0859      	lsrs	r1, r3, #1
  4012c6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4012ca:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4012ce:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4012d0:	1e5c      	subs	r4, r3, #1
  4012d2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4012d6:	428c      	cmp	r4, r1
  4012d8:	d8f2      	bhi.n	4012c0 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4012da:	0412      	lsls	r2, r2, #16
  4012dc:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4012e0:	431a      	orrs	r2, r3
  4012e2:	6202      	str	r2, [r0, #32]

	return 0;
  4012e4:	2000      	movs	r0, #0
}
  4012e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4012ea:	4770      	bx	lr

004012ec <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4012ec:	4b08      	ldr	r3, [pc, #32]	; (401310 <usart_reset+0x24>)
  4012ee:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  4012f2:	2300      	movs	r3, #0
  4012f4:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4012f6:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4012f8:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4012fa:	2388      	movs	r3, #136	; 0x88
  4012fc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4012fe:	2324      	movs	r3, #36	; 0x24
  401300:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401302:	f44f 7380 	mov.w	r3, #256	; 0x100
  401306:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401308:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40130c:	6003      	str	r3, [r0, #0]
  40130e:	4770      	bx	lr
  401310:	55534100 	.word	0x55534100

00401314 <usart_init_rs232>:
{
  401314:	b570      	push	{r4, r5, r6, lr}
  401316:	4605      	mov	r5, r0
  401318:	460c      	mov	r4, r1
  40131a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  40131c:	4b0f      	ldr	r3, [pc, #60]	; (40135c <usart_init_rs232+0x48>)
  40131e:	4798      	blx	r3
	ul_reg_val = 0;
  401320:	2200      	movs	r2, #0
  401322:	4b0f      	ldr	r3, [pc, #60]	; (401360 <usart_init_rs232+0x4c>)
  401324:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401326:	b1a4      	cbz	r4, 401352 <usart_init_rs232+0x3e>
  401328:	4632      	mov	r2, r6
  40132a:	6821      	ldr	r1, [r4, #0]
  40132c:	4628      	mov	r0, r5
  40132e:	4b0d      	ldr	r3, [pc, #52]	; (401364 <usart_init_rs232+0x50>)
  401330:	4798      	blx	r3
  401332:	4602      	mov	r2, r0
  401334:	b978      	cbnz	r0, 401356 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401336:	6863      	ldr	r3, [r4, #4]
  401338:	68a1      	ldr	r1, [r4, #8]
  40133a:	430b      	orrs	r3, r1
  40133c:	6921      	ldr	r1, [r4, #16]
  40133e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401340:	68e1      	ldr	r1, [r4, #12]
  401342:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401344:	4906      	ldr	r1, [pc, #24]	; (401360 <usart_init_rs232+0x4c>)
  401346:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401348:	6869      	ldr	r1, [r5, #4]
  40134a:	430b      	orrs	r3, r1
  40134c:	606b      	str	r3, [r5, #4]
}
  40134e:	4610      	mov	r0, r2
  401350:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401352:	2201      	movs	r2, #1
  401354:	e7fb      	b.n	40134e <usart_init_rs232+0x3a>
  401356:	2201      	movs	r2, #1
  401358:	e7f9      	b.n	40134e <usart_init_rs232+0x3a>
  40135a:	bf00      	nop
  40135c:	004012ed 	.word	0x004012ed
  401360:	20401458 	.word	0x20401458
  401364:	00401293 	.word	0x00401293

00401368 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401368:	2340      	movs	r3, #64	; 0x40
  40136a:	6003      	str	r3, [r0, #0]
  40136c:	4770      	bx	lr

0040136e <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40136e:	2310      	movs	r3, #16
  401370:	6003      	str	r3, [r0, #0]
  401372:	4770      	bx	lr

00401374 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401374:	6943      	ldr	r3, [r0, #20]
  401376:	f013 0f02 	tst.w	r3, #2
  40137a:	d004      	beq.n	401386 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  40137c:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401380:	61c1      	str	r1, [r0, #28]
	return 0;
  401382:	2000      	movs	r0, #0
  401384:	4770      	bx	lr
		return 1;
  401386:	2001      	movs	r0, #1
}
  401388:	4770      	bx	lr

0040138a <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40138a:	6943      	ldr	r3, [r0, #20]
  40138c:	f013 0f01 	tst.w	r3, #1
  401390:	d005      	beq.n	40139e <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401392:	6983      	ldr	r3, [r0, #24]
  401394:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401398:	600b      	str	r3, [r1, #0]
	return 0;
  40139a:	2000      	movs	r0, #0
  40139c:	4770      	bx	lr
		return 1;
  40139e:	2001      	movs	r0, #1
}
  4013a0:	4770      	bx	lr

004013a2 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4013a2:	e7fe      	b.n	4013a2 <Dummy_Handler>

004013a4 <Reset_Handler>:
{
  4013a4:	b500      	push	{lr}
  4013a6:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4013a8:	4b25      	ldr	r3, [pc, #148]	; (401440 <Reset_Handler+0x9c>)
  4013aa:	4a26      	ldr	r2, [pc, #152]	; (401444 <Reset_Handler+0xa0>)
  4013ac:	429a      	cmp	r2, r3
  4013ae:	d010      	beq.n	4013d2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4013b0:	4b25      	ldr	r3, [pc, #148]	; (401448 <Reset_Handler+0xa4>)
  4013b2:	4a23      	ldr	r2, [pc, #140]	; (401440 <Reset_Handler+0x9c>)
  4013b4:	429a      	cmp	r2, r3
  4013b6:	d20c      	bcs.n	4013d2 <Reset_Handler+0x2e>
  4013b8:	3b01      	subs	r3, #1
  4013ba:	1a9b      	subs	r3, r3, r2
  4013bc:	f023 0303 	bic.w	r3, r3, #3
  4013c0:	3304      	adds	r3, #4
  4013c2:	4413      	add	r3, r2
  4013c4:	491f      	ldr	r1, [pc, #124]	; (401444 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4013c6:	f851 0b04 	ldr.w	r0, [r1], #4
  4013ca:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4013ce:	429a      	cmp	r2, r3
  4013d0:	d1f9      	bne.n	4013c6 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4013d2:	4b1e      	ldr	r3, [pc, #120]	; (40144c <Reset_Handler+0xa8>)
  4013d4:	4a1e      	ldr	r2, [pc, #120]	; (401450 <Reset_Handler+0xac>)
  4013d6:	429a      	cmp	r2, r3
  4013d8:	d20a      	bcs.n	4013f0 <Reset_Handler+0x4c>
  4013da:	3b01      	subs	r3, #1
  4013dc:	1a9b      	subs	r3, r3, r2
  4013de:	f023 0303 	bic.w	r3, r3, #3
  4013e2:	3304      	adds	r3, #4
  4013e4:	4413      	add	r3, r2
                *pDest++ = 0;
  4013e6:	2100      	movs	r1, #0
  4013e8:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4013ec:	4293      	cmp	r3, r2
  4013ee:	d1fb      	bne.n	4013e8 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4013f0:	4a18      	ldr	r2, [pc, #96]	; (401454 <Reset_Handler+0xb0>)
  4013f2:	4b19      	ldr	r3, [pc, #100]	; (401458 <Reset_Handler+0xb4>)
  4013f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4013f8:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4013fa:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4013fe:	fab3 f383 	clz	r3, r3
  401402:	095b      	lsrs	r3, r3, #5
  401404:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401406:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  401408:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40140c:	2200      	movs	r2, #0
  40140e:	4b13      	ldr	r3, [pc, #76]	; (40145c <Reset_Handler+0xb8>)
  401410:	701a      	strb	r2, [r3, #0]
	return flags;
  401412:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401414:	4a12      	ldr	r2, [pc, #72]	; (401460 <Reset_Handler+0xbc>)
  401416:	6813      	ldr	r3, [r2, #0]
  401418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40141c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  40141e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401422:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401426:	b129      	cbz	r1, 401434 <Reset_Handler+0x90>
		cpu_irq_enable();
  401428:	2201      	movs	r2, #1
  40142a:	4b0c      	ldr	r3, [pc, #48]	; (40145c <Reset_Handler+0xb8>)
  40142c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  40142e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401432:	b662      	cpsie	i
        __libc_init_array();
  401434:	4b0b      	ldr	r3, [pc, #44]	; (401464 <Reset_Handler+0xc0>)
  401436:	4798      	blx	r3
        main();
  401438:	4b0b      	ldr	r3, [pc, #44]	; (401468 <Reset_Handler+0xc4>)
  40143a:	4798      	blx	r3
  40143c:	e7fe      	b.n	40143c <Reset_Handler+0x98>
  40143e:	bf00      	nop
  401440:	20400000 	.word	0x20400000
  401444:	00404d74 	.word	0x00404d74
  401448:	204009c0 	.word	0x204009c0
  40144c:	204014d0 	.word	0x204014d0
  401450:	204009c0 	.word	0x204009c0
  401454:	e000ed00 	.word	0xe000ed00
  401458:	00400000 	.word	0x00400000
  40145c:	2040000c 	.word	0x2040000c
  401460:	e000ed88 	.word	0xe000ed88
  401464:	00401715 	.word	0x00401715
  401468:	00401661 	.word	0x00401661

0040146c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40146c:	4b3b      	ldr	r3, [pc, #236]	; (40155c <SystemCoreClockUpdate+0xf0>)
  40146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401470:	f003 0303 	and.w	r3, r3, #3
  401474:	2b01      	cmp	r3, #1
  401476:	d01d      	beq.n	4014b4 <SystemCoreClockUpdate+0x48>
  401478:	b183      	cbz	r3, 40149c <SystemCoreClockUpdate+0x30>
  40147a:	2b02      	cmp	r3, #2
  40147c:	d036      	beq.n	4014ec <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40147e:	4b37      	ldr	r3, [pc, #220]	; (40155c <SystemCoreClockUpdate+0xf0>)
  401480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401482:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401486:	2b70      	cmp	r3, #112	; 0x70
  401488:	d05f      	beq.n	40154a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40148a:	4b34      	ldr	r3, [pc, #208]	; (40155c <SystemCoreClockUpdate+0xf0>)
  40148c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40148e:	4934      	ldr	r1, [pc, #208]	; (401560 <SystemCoreClockUpdate+0xf4>)
  401490:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401494:	680b      	ldr	r3, [r1, #0]
  401496:	40d3      	lsrs	r3, r2
  401498:	600b      	str	r3, [r1, #0]
  40149a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40149c:	4b31      	ldr	r3, [pc, #196]	; (401564 <SystemCoreClockUpdate+0xf8>)
  40149e:	695b      	ldr	r3, [r3, #20]
  4014a0:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4014a4:	bf14      	ite	ne
  4014a6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4014aa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4014ae:	4b2c      	ldr	r3, [pc, #176]	; (401560 <SystemCoreClockUpdate+0xf4>)
  4014b0:	601a      	str	r2, [r3, #0]
  4014b2:	e7e4      	b.n	40147e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4014b4:	4b29      	ldr	r3, [pc, #164]	; (40155c <SystemCoreClockUpdate+0xf0>)
  4014b6:	6a1b      	ldr	r3, [r3, #32]
  4014b8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4014bc:	d003      	beq.n	4014c6 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4014be:	4a2a      	ldr	r2, [pc, #168]	; (401568 <SystemCoreClockUpdate+0xfc>)
  4014c0:	4b27      	ldr	r3, [pc, #156]	; (401560 <SystemCoreClockUpdate+0xf4>)
  4014c2:	601a      	str	r2, [r3, #0]
  4014c4:	e7db      	b.n	40147e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4014c6:	4a29      	ldr	r2, [pc, #164]	; (40156c <SystemCoreClockUpdate+0x100>)
  4014c8:	4b25      	ldr	r3, [pc, #148]	; (401560 <SystemCoreClockUpdate+0xf4>)
  4014ca:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4014cc:	4b23      	ldr	r3, [pc, #140]	; (40155c <SystemCoreClockUpdate+0xf0>)
  4014ce:	6a1b      	ldr	r3, [r3, #32]
  4014d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4014d4:	2b10      	cmp	r3, #16
  4014d6:	d005      	beq.n	4014e4 <SystemCoreClockUpdate+0x78>
  4014d8:	2b20      	cmp	r3, #32
  4014da:	d1d0      	bne.n	40147e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4014dc:	4a22      	ldr	r2, [pc, #136]	; (401568 <SystemCoreClockUpdate+0xfc>)
  4014de:	4b20      	ldr	r3, [pc, #128]	; (401560 <SystemCoreClockUpdate+0xf4>)
  4014e0:	601a      	str	r2, [r3, #0]
          break;
  4014e2:	e7cc      	b.n	40147e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4014e4:	4a22      	ldr	r2, [pc, #136]	; (401570 <SystemCoreClockUpdate+0x104>)
  4014e6:	4b1e      	ldr	r3, [pc, #120]	; (401560 <SystemCoreClockUpdate+0xf4>)
  4014e8:	601a      	str	r2, [r3, #0]
          break;
  4014ea:	e7c8      	b.n	40147e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4014ec:	4b1b      	ldr	r3, [pc, #108]	; (40155c <SystemCoreClockUpdate+0xf0>)
  4014ee:	6a1b      	ldr	r3, [r3, #32]
  4014f0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4014f4:	d016      	beq.n	401524 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4014f6:	4a1c      	ldr	r2, [pc, #112]	; (401568 <SystemCoreClockUpdate+0xfc>)
  4014f8:	4b19      	ldr	r3, [pc, #100]	; (401560 <SystemCoreClockUpdate+0xf4>)
  4014fa:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4014fc:	4b17      	ldr	r3, [pc, #92]	; (40155c <SystemCoreClockUpdate+0xf0>)
  4014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401500:	f003 0303 	and.w	r3, r3, #3
  401504:	2b02      	cmp	r3, #2
  401506:	d1ba      	bne.n	40147e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401508:	4a14      	ldr	r2, [pc, #80]	; (40155c <SystemCoreClockUpdate+0xf0>)
  40150a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40150c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40150e:	4814      	ldr	r0, [pc, #80]	; (401560 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401510:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401514:	6803      	ldr	r3, [r0, #0]
  401516:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40151a:	b2d2      	uxtb	r2, r2
  40151c:	fbb3 f3f2 	udiv	r3, r3, r2
  401520:	6003      	str	r3, [r0, #0]
  401522:	e7ac      	b.n	40147e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401524:	4a11      	ldr	r2, [pc, #68]	; (40156c <SystemCoreClockUpdate+0x100>)
  401526:	4b0e      	ldr	r3, [pc, #56]	; (401560 <SystemCoreClockUpdate+0xf4>)
  401528:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40152a:	4b0c      	ldr	r3, [pc, #48]	; (40155c <SystemCoreClockUpdate+0xf0>)
  40152c:	6a1b      	ldr	r3, [r3, #32]
  40152e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401532:	2b10      	cmp	r3, #16
  401534:	d005      	beq.n	401542 <SystemCoreClockUpdate+0xd6>
  401536:	2b20      	cmp	r3, #32
  401538:	d1e0      	bne.n	4014fc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40153a:	4a0b      	ldr	r2, [pc, #44]	; (401568 <SystemCoreClockUpdate+0xfc>)
  40153c:	4b08      	ldr	r3, [pc, #32]	; (401560 <SystemCoreClockUpdate+0xf4>)
  40153e:	601a      	str	r2, [r3, #0]
          break;
  401540:	e7dc      	b.n	4014fc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401542:	4a0b      	ldr	r2, [pc, #44]	; (401570 <SystemCoreClockUpdate+0x104>)
  401544:	4b06      	ldr	r3, [pc, #24]	; (401560 <SystemCoreClockUpdate+0xf4>)
  401546:	601a      	str	r2, [r3, #0]
          break;
  401548:	e7d8      	b.n	4014fc <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40154a:	4a05      	ldr	r2, [pc, #20]	; (401560 <SystemCoreClockUpdate+0xf4>)
  40154c:	6813      	ldr	r3, [r2, #0]
  40154e:	4909      	ldr	r1, [pc, #36]	; (401574 <SystemCoreClockUpdate+0x108>)
  401550:	fba1 1303 	umull	r1, r3, r1, r3
  401554:	085b      	lsrs	r3, r3, #1
  401556:	6013      	str	r3, [r2, #0]
  401558:	4770      	bx	lr
  40155a:	bf00      	nop
  40155c:	400e0600 	.word	0x400e0600
  401560:	20400010 	.word	0x20400010
  401564:	400e1810 	.word	0x400e1810
  401568:	00b71b00 	.word	0x00b71b00
  40156c:	003d0900 	.word	0x003d0900
  401570:	007a1200 	.word	0x007a1200
  401574:	aaaaaaab 	.word	0xaaaaaaab

00401578 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401578:	4b16      	ldr	r3, [pc, #88]	; (4015d4 <system_init_flash+0x5c>)
  40157a:	4298      	cmp	r0, r3
  40157c:	d913      	bls.n	4015a6 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40157e:	4b16      	ldr	r3, [pc, #88]	; (4015d8 <system_init_flash+0x60>)
  401580:	4298      	cmp	r0, r3
  401582:	d915      	bls.n	4015b0 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401584:	4b15      	ldr	r3, [pc, #84]	; (4015dc <system_init_flash+0x64>)
  401586:	4298      	cmp	r0, r3
  401588:	d916      	bls.n	4015b8 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40158a:	4b15      	ldr	r3, [pc, #84]	; (4015e0 <system_init_flash+0x68>)
  40158c:	4298      	cmp	r0, r3
  40158e:	d917      	bls.n	4015c0 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401590:	4b14      	ldr	r3, [pc, #80]	; (4015e4 <system_init_flash+0x6c>)
  401592:	4298      	cmp	r0, r3
  401594:	d918      	bls.n	4015c8 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401596:	4b14      	ldr	r3, [pc, #80]	; (4015e8 <system_init_flash+0x70>)
  401598:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40159a:	bf94      	ite	ls
  40159c:	4a13      	ldrls	r2, [pc, #76]	; (4015ec <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40159e:	4a14      	ldrhi	r2, [pc, #80]	; (4015f0 <system_init_flash+0x78>)
  4015a0:	4b14      	ldr	r3, [pc, #80]	; (4015f4 <system_init_flash+0x7c>)
  4015a2:	601a      	str	r2, [r3, #0]
  4015a4:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4015a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4015aa:	4b12      	ldr	r3, [pc, #72]	; (4015f4 <system_init_flash+0x7c>)
  4015ac:	601a      	str	r2, [r3, #0]
  4015ae:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4015b0:	4a11      	ldr	r2, [pc, #68]	; (4015f8 <system_init_flash+0x80>)
  4015b2:	4b10      	ldr	r3, [pc, #64]	; (4015f4 <system_init_flash+0x7c>)
  4015b4:	601a      	str	r2, [r3, #0]
  4015b6:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4015b8:	4a10      	ldr	r2, [pc, #64]	; (4015fc <system_init_flash+0x84>)
  4015ba:	4b0e      	ldr	r3, [pc, #56]	; (4015f4 <system_init_flash+0x7c>)
  4015bc:	601a      	str	r2, [r3, #0]
  4015be:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4015c0:	4a0f      	ldr	r2, [pc, #60]	; (401600 <system_init_flash+0x88>)
  4015c2:	4b0c      	ldr	r3, [pc, #48]	; (4015f4 <system_init_flash+0x7c>)
  4015c4:	601a      	str	r2, [r3, #0]
  4015c6:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4015c8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4015cc:	4b09      	ldr	r3, [pc, #36]	; (4015f4 <system_init_flash+0x7c>)
  4015ce:	601a      	str	r2, [r3, #0]
  4015d0:	4770      	bx	lr
  4015d2:	bf00      	nop
  4015d4:	015ef3bf 	.word	0x015ef3bf
  4015d8:	02bde77f 	.word	0x02bde77f
  4015dc:	041cdb3f 	.word	0x041cdb3f
  4015e0:	057bceff 	.word	0x057bceff
  4015e4:	06dac2bf 	.word	0x06dac2bf
  4015e8:	0839b67f 	.word	0x0839b67f
  4015ec:	04000500 	.word	0x04000500
  4015f0:	04000600 	.word	0x04000600
  4015f4:	400e0c00 	.word	0x400e0c00
  4015f8:	04000100 	.word	0x04000100
  4015fc:	04000200 	.word	0x04000200
  401600:	04000300 	.word	0x04000300

00401604 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401604:	4b0a      	ldr	r3, [pc, #40]	; (401630 <_sbrk+0x2c>)
  401606:	681b      	ldr	r3, [r3, #0]
  401608:	b153      	cbz	r3, 401620 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40160a:	4b09      	ldr	r3, [pc, #36]	; (401630 <_sbrk+0x2c>)
  40160c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40160e:	181a      	adds	r2, r3, r0
  401610:	4908      	ldr	r1, [pc, #32]	; (401634 <_sbrk+0x30>)
  401612:	4291      	cmp	r1, r2
  401614:	db08      	blt.n	401628 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401616:	4610      	mov	r0, r2
  401618:	4a05      	ldr	r2, [pc, #20]	; (401630 <_sbrk+0x2c>)
  40161a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40161c:	4618      	mov	r0, r3
  40161e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401620:	4a05      	ldr	r2, [pc, #20]	; (401638 <_sbrk+0x34>)
  401622:	4b03      	ldr	r3, [pc, #12]	; (401630 <_sbrk+0x2c>)
  401624:	601a      	str	r2, [r3, #0]
  401626:	e7f0      	b.n	40160a <_sbrk+0x6>
		return (caddr_t) -1;	
  401628:	f04f 30ff 	mov.w	r0, #4294967295
}
  40162c:	4770      	bx	lr
  40162e:	bf00      	nop
  401630:	2040145c 	.word	0x2040145c
  401634:	2045fffc 	.word	0x2045fffc
  401638:	204036d0 	.word	0x204036d0

0040163c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40163c:	f04f 30ff 	mov.w	r0, #4294967295
  401640:	4770      	bx	lr

00401642 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401642:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401646:	604b      	str	r3, [r1, #4]

	return 0;
}
  401648:	2000      	movs	r0, #0
  40164a:	4770      	bx	lr

0040164c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  40164c:	2001      	movs	r0, #1
  40164e:	4770      	bx	lr

00401650 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401650:	2000      	movs	r0, #0
  401652:	4770      	bx	lr

00401654 <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
  401654:	be00      	bkpt	0x0000
  401656:	e7fe      	b.n	401656 <_exit+0x2>

00401658 <_kill>:
	for (;;);
}

extern void _kill(int pid, int sig)
{
  401658:	4770      	bx	lr

0040165a <_getpid>:
}

extern int _getpid(void)
{
	return -1;
}
  40165a:	f04f 30ff 	mov.w	r0, #4294967295
  40165e:	4770      	bx	lr

00401660 <main>:
volatile uint64_t    g_tickTime_ms      = 0UL;
volatile uint32_t    g_tx_tick_count_ms = 0U;


 int main(void)
 {
  401660:	b508      	push	{r3, lr}
 	uint8_t key;

 	sysclk_init();
  401662:	4b0b      	ldr	r3, [pc, #44]	; (401690 <main+0x30>)
  401664:	4798      	blx	r3
 	board_init();
  401666:	4b0b      	ldr	r3, [pc, #44]	; (401694 <main+0x34>)
  401668:	4798      	blx	r3

	// sample_init();
	
	g_tickCount = 0;
  40166a:	2300      	movs	r3, #0
  40166c:	4a0a      	ldr	r2, [pc, #40]	; (401698 <main+0x38>)
  40166e:	6013      	str	r3, [r2, #0]
	g_tx_tick_count_ms = 0;
  401670:	4a0a      	ldr	r2, [pc, #40]	; (40169c <main+0x3c>)
  401672:	6013      	str	r3, [r2, #0]

 	can_init();    // CAN1_Initialize();
  401674:	4b0a      	ldr	r3, [pc, #40]	; (4016a0 <main+0x40>)
  401676:	4798      	blx	r3
 	CANTxTaskInit();
  401678:	4b0a      	ldr	r3, [pc, #40]	; (4016a4 <main+0x44>)
  40167a:	4798      	blx	r3
  {
	// sample();
    // CANRxTask();
	// bb_set_SCM_Motor1Control(42);
	// bb_set_SCM_Motor3Control(90);
    CANTxTask(g_tx_tick_count_ms);
  40167c:	4c07      	ldr	r4, [pc, #28]	; (40169c <main+0x3c>)
  40167e:	4e0a      	ldr	r6, [pc, #40]	; (4016a8 <main+0x48>)
    g_tx_tick_count_ms++;
    CanMessageControl_Task();
  401680:	4d0a      	ldr	r5, [pc, #40]	; (4016ac <main+0x4c>)
    CANTxTask(g_tx_tick_count_ms);
  401682:	6820      	ldr	r0, [r4, #0]
  401684:	47b0      	blx	r6
    g_tx_tick_count_ms++;
  401686:	6823      	ldr	r3, [r4, #0]
  401688:	3301      	adds	r3, #1
  40168a:	6023      	str	r3, [r4, #0]
    CanMessageControl_Task();
  40168c:	47a8      	blx	r5
  40168e:	e7f8      	b.n	401682 <main+0x22>
  401690:	00400a11 	.word	0x00400a11
  401694:	00400b0d 	.word	0x00400b0d
  401698:	20401460 	.word	0x20401460
  40169c:	20401464 	.word	0x20401464
  4016a0:	00400889 	.word	0x00400889
  4016a4:	00400501 	.word	0x00400501
  4016a8:	00400539 	.word	0x00400539
  4016ac:	004005a5 	.word	0x004005a5

004016b0 <__assert_func>:
  4016b0:	b500      	push	{lr}
  4016b2:	4c0a      	ldr	r4, [pc, #40]	; (4016dc <__assert_func+0x2c>)
  4016b4:	6826      	ldr	r6, [r4, #0]
  4016b6:	4605      	mov	r5, r0
  4016b8:	b085      	sub	sp, #20
  4016ba:	461c      	mov	r4, r3
  4016bc:	68f0      	ldr	r0, [r6, #12]
  4016be:	b152      	cbz	r2, 4016d6 <__assert_func+0x26>
  4016c0:	4b07      	ldr	r3, [pc, #28]	; (4016e0 <__assert_func+0x30>)
  4016c2:	9202      	str	r2, [sp, #8]
  4016c4:	e88d 000a 	stmia.w	sp, {r1, r3}
  4016c8:	4622      	mov	r2, r4
  4016ca:	462b      	mov	r3, r5
  4016cc:	4905      	ldr	r1, [pc, #20]	; (4016e4 <__assert_func+0x34>)
  4016ce:	f000 f80d 	bl	4016ec <fiprintf>
  4016d2:	f001 f94b 	bl	40296c <abort>
  4016d6:	4b04      	ldr	r3, [pc, #16]	; (4016e8 <__assert_func+0x38>)
  4016d8:	461a      	mov	r2, r3
  4016da:	e7f2      	b.n	4016c2 <__assert_func+0x12>
  4016dc:	20400014 	.word	0x20400014
  4016e0:	00404ba0 	.word	0x00404ba0
  4016e4:	00404bb0 	.word	0x00404bb0
  4016e8:	00404b9c 	.word	0x00404b9c

004016ec <fiprintf>:
  4016ec:	b40e      	push	{r1, r2, r3}
  4016ee:	b510      	push	{r4, lr}
  4016f0:	b083      	sub	sp, #12
  4016f2:	ab05      	add	r3, sp, #20
  4016f4:	4c06      	ldr	r4, [pc, #24]	; (401710 <fiprintf+0x24>)
  4016f6:	f853 2b04 	ldr.w	r2, [r3], #4
  4016fa:	9301      	str	r3, [sp, #4]
  4016fc:	4601      	mov	r1, r0
  4016fe:	6820      	ldr	r0, [r4, #0]
  401700:	f000 fa3c 	bl	401b7c <_vfiprintf_r>
  401704:	b003      	add	sp, #12
  401706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40170a:	b003      	add	sp, #12
  40170c:	4770      	bx	lr
  40170e:	bf00      	nop
  401710:	20400014 	.word	0x20400014

00401714 <__libc_init_array>:
  401714:	b570      	push	{r4, r5, r6, lr}
  401716:	4e0f      	ldr	r6, [pc, #60]	; (401754 <__libc_init_array+0x40>)
  401718:	4d0f      	ldr	r5, [pc, #60]	; (401758 <__libc_init_array+0x44>)
  40171a:	1b76      	subs	r6, r6, r5
  40171c:	10b6      	asrs	r6, r6, #2
  40171e:	bf18      	it	ne
  401720:	2400      	movne	r4, #0
  401722:	d005      	beq.n	401730 <__libc_init_array+0x1c>
  401724:	3401      	adds	r4, #1
  401726:	f855 3b04 	ldr.w	r3, [r5], #4
  40172a:	4798      	blx	r3
  40172c:	42a6      	cmp	r6, r4
  40172e:	d1f9      	bne.n	401724 <__libc_init_array+0x10>
  401730:	4e0a      	ldr	r6, [pc, #40]	; (40175c <__libc_init_array+0x48>)
  401732:	4d0b      	ldr	r5, [pc, #44]	; (401760 <__libc_init_array+0x4c>)
  401734:	1b76      	subs	r6, r6, r5
  401736:	f003 fb07 	bl	404d48 <_init>
  40173a:	10b6      	asrs	r6, r6, #2
  40173c:	bf18      	it	ne
  40173e:	2400      	movne	r4, #0
  401740:	d006      	beq.n	401750 <__libc_init_array+0x3c>
  401742:	3401      	adds	r4, #1
  401744:	f855 3b04 	ldr.w	r3, [r5], #4
  401748:	4798      	blx	r3
  40174a:	42a6      	cmp	r6, r4
  40174c:	d1f9      	bne.n	401742 <__libc_init_array+0x2e>
  40174e:	bd70      	pop	{r4, r5, r6, pc}
  401750:	bd70      	pop	{r4, r5, r6, pc}
  401752:	bf00      	nop
  401754:	00404d54 	.word	0x00404d54
  401758:	00404d54 	.word	0x00404d54
  40175c:	00404d5c 	.word	0x00404d5c
  401760:	00404d54 	.word	0x00404d54

00401764 <iprintf>:
  401764:	b40f      	push	{r0, r1, r2, r3}
  401766:	b500      	push	{lr}
  401768:	4907      	ldr	r1, [pc, #28]	; (401788 <iprintf+0x24>)
  40176a:	b083      	sub	sp, #12
  40176c:	ab04      	add	r3, sp, #16
  40176e:	6808      	ldr	r0, [r1, #0]
  401770:	f853 2b04 	ldr.w	r2, [r3], #4
  401774:	6881      	ldr	r1, [r0, #8]
  401776:	9301      	str	r3, [sp, #4]
  401778:	f000 fa00 	bl	401b7c <_vfiprintf_r>
  40177c:	b003      	add	sp, #12
  40177e:	f85d eb04 	ldr.w	lr, [sp], #4
  401782:	b004      	add	sp, #16
  401784:	4770      	bx	lr
  401786:	bf00      	nop
  401788:	20400014 	.word	0x20400014

0040178c <memcpy>:
  40178c:	4684      	mov	ip, r0
  40178e:	ea41 0300 	orr.w	r3, r1, r0
  401792:	f013 0303 	ands.w	r3, r3, #3
  401796:	d16d      	bne.n	401874 <memcpy+0xe8>
  401798:	3a40      	subs	r2, #64	; 0x40
  40179a:	d341      	bcc.n	401820 <memcpy+0x94>
  40179c:	f851 3b04 	ldr.w	r3, [r1], #4
  4017a0:	f840 3b04 	str.w	r3, [r0], #4
  4017a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4017a8:	f840 3b04 	str.w	r3, [r0], #4
  4017ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4017b0:	f840 3b04 	str.w	r3, [r0], #4
  4017b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4017b8:	f840 3b04 	str.w	r3, [r0], #4
  4017bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4017c0:	f840 3b04 	str.w	r3, [r0], #4
  4017c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4017c8:	f840 3b04 	str.w	r3, [r0], #4
  4017cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4017d0:	f840 3b04 	str.w	r3, [r0], #4
  4017d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4017d8:	f840 3b04 	str.w	r3, [r0], #4
  4017dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4017e0:	f840 3b04 	str.w	r3, [r0], #4
  4017e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4017e8:	f840 3b04 	str.w	r3, [r0], #4
  4017ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4017f0:	f840 3b04 	str.w	r3, [r0], #4
  4017f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4017f8:	f840 3b04 	str.w	r3, [r0], #4
  4017fc:	f851 3b04 	ldr.w	r3, [r1], #4
  401800:	f840 3b04 	str.w	r3, [r0], #4
  401804:	f851 3b04 	ldr.w	r3, [r1], #4
  401808:	f840 3b04 	str.w	r3, [r0], #4
  40180c:	f851 3b04 	ldr.w	r3, [r1], #4
  401810:	f840 3b04 	str.w	r3, [r0], #4
  401814:	f851 3b04 	ldr.w	r3, [r1], #4
  401818:	f840 3b04 	str.w	r3, [r0], #4
  40181c:	3a40      	subs	r2, #64	; 0x40
  40181e:	d2bd      	bcs.n	40179c <memcpy+0x10>
  401820:	3230      	adds	r2, #48	; 0x30
  401822:	d311      	bcc.n	401848 <memcpy+0xbc>
  401824:	f851 3b04 	ldr.w	r3, [r1], #4
  401828:	f840 3b04 	str.w	r3, [r0], #4
  40182c:	f851 3b04 	ldr.w	r3, [r1], #4
  401830:	f840 3b04 	str.w	r3, [r0], #4
  401834:	f851 3b04 	ldr.w	r3, [r1], #4
  401838:	f840 3b04 	str.w	r3, [r0], #4
  40183c:	f851 3b04 	ldr.w	r3, [r1], #4
  401840:	f840 3b04 	str.w	r3, [r0], #4
  401844:	3a10      	subs	r2, #16
  401846:	d2ed      	bcs.n	401824 <memcpy+0x98>
  401848:	320c      	adds	r2, #12
  40184a:	d305      	bcc.n	401858 <memcpy+0xcc>
  40184c:	f851 3b04 	ldr.w	r3, [r1], #4
  401850:	f840 3b04 	str.w	r3, [r0], #4
  401854:	3a04      	subs	r2, #4
  401856:	d2f9      	bcs.n	40184c <memcpy+0xc0>
  401858:	3204      	adds	r2, #4
  40185a:	d008      	beq.n	40186e <memcpy+0xe2>
  40185c:	07d2      	lsls	r2, r2, #31
  40185e:	bf1c      	itt	ne
  401860:	f811 3b01 	ldrbne.w	r3, [r1], #1
  401864:	f800 3b01 	strbne.w	r3, [r0], #1
  401868:	d301      	bcc.n	40186e <memcpy+0xe2>
  40186a:	880b      	ldrh	r3, [r1, #0]
  40186c:	8003      	strh	r3, [r0, #0]
  40186e:	4660      	mov	r0, ip
  401870:	4770      	bx	lr
  401872:	bf00      	nop
  401874:	2a08      	cmp	r2, #8
  401876:	d313      	bcc.n	4018a0 <memcpy+0x114>
  401878:	078b      	lsls	r3, r1, #30
  40187a:	d08d      	beq.n	401798 <memcpy+0xc>
  40187c:	f010 0303 	ands.w	r3, r0, #3
  401880:	d08a      	beq.n	401798 <memcpy+0xc>
  401882:	f1c3 0304 	rsb	r3, r3, #4
  401886:	1ad2      	subs	r2, r2, r3
  401888:	07db      	lsls	r3, r3, #31
  40188a:	bf1c      	itt	ne
  40188c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  401890:	f800 3b01 	strbne.w	r3, [r0], #1
  401894:	d380      	bcc.n	401798 <memcpy+0xc>
  401896:	f831 3b02 	ldrh.w	r3, [r1], #2
  40189a:	f820 3b02 	strh.w	r3, [r0], #2
  40189e:	e77b      	b.n	401798 <memcpy+0xc>
  4018a0:	3a04      	subs	r2, #4
  4018a2:	d3d9      	bcc.n	401858 <memcpy+0xcc>
  4018a4:	3a01      	subs	r2, #1
  4018a6:	f811 3b01 	ldrb.w	r3, [r1], #1
  4018aa:	f800 3b01 	strb.w	r3, [r0], #1
  4018ae:	d2f9      	bcs.n	4018a4 <memcpy+0x118>
  4018b0:	780b      	ldrb	r3, [r1, #0]
  4018b2:	7003      	strb	r3, [r0, #0]
  4018b4:	784b      	ldrb	r3, [r1, #1]
  4018b6:	7043      	strb	r3, [r0, #1]
  4018b8:	788b      	ldrb	r3, [r1, #2]
  4018ba:	7083      	strb	r3, [r0, #2]
  4018bc:	4660      	mov	r0, ip
  4018be:	4770      	bx	lr

004018c0 <memset>:
  4018c0:	b470      	push	{r4, r5, r6}
  4018c2:	0786      	lsls	r6, r0, #30
  4018c4:	d046      	beq.n	401954 <memset+0x94>
  4018c6:	1e54      	subs	r4, r2, #1
  4018c8:	2a00      	cmp	r2, #0
  4018ca:	d041      	beq.n	401950 <memset+0x90>
  4018cc:	b2ca      	uxtb	r2, r1
  4018ce:	4603      	mov	r3, r0
  4018d0:	e002      	b.n	4018d8 <memset+0x18>
  4018d2:	f114 34ff 	adds.w	r4, r4, #4294967295
  4018d6:	d33b      	bcc.n	401950 <memset+0x90>
  4018d8:	f803 2b01 	strb.w	r2, [r3], #1
  4018dc:	079d      	lsls	r5, r3, #30
  4018de:	d1f8      	bne.n	4018d2 <memset+0x12>
  4018e0:	2c03      	cmp	r4, #3
  4018e2:	d92e      	bls.n	401942 <memset+0x82>
  4018e4:	b2cd      	uxtb	r5, r1
  4018e6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4018ea:	2c0f      	cmp	r4, #15
  4018ec:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4018f0:	d919      	bls.n	401926 <memset+0x66>
  4018f2:	f103 0210 	add.w	r2, r3, #16
  4018f6:	4626      	mov	r6, r4
  4018f8:	3e10      	subs	r6, #16
  4018fa:	2e0f      	cmp	r6, #15
  4018fc:	f842 5c10 	str.w	r5, [r2, #-16]
  401900:	f842 5c0c 	str.w	r5, [r2, #-12]
  401904:	f842 5c08 	str.w	r5, [r2, #-8]
  401908:	f842 5c04 	str.w	r5, [r2, #-4]
  40190c:	f102 0210 	add.w	r2, r2, #16
  401910:	d8f2      	bhi.n	4018f8 <memset+0x38>
  401912:	f1a4 0210 	sub.w	r2, r4, #16
  401916:	f022 020f 	bic.w	r2, r2, #15
  40191a:	f004 040f 	and.w	r4, r4, #15
  40191e:	3210      	adds	r2, #16
  401920:	2c03      	cmp	r4, #3
  401922:	4413      	add	r3, r2
  401924:	d90d      	bls.n	401942 <memset+0x82>
  401926:	461e      	mov	r6, r3
  401928:	4622      	mov	r2, r4
  40192a:	3a04      	subs	r2, #4
  40192c:	2a03      	cmp	r2, #3
  40192e:	f846 5b04 	str.w	r5, [r6], #4
  401932:	d8fa      	bhi.n	40192a <memset+0x6a>
  401934:	1f22      	subs	r2, r4, #4
  401936:	f022 0203 	bic.w	r2, r2, #3
  40193a:	3204      	adds	r2, #4
  40193c:	4413      	add	r3, r2
  40193e:	f004 0403 	and.w	r4, r4, #3
  401942:	b12c      	cbz	r4, 401950 <memset+0x90>
  401944:	b2c9      	uxtb	r1, r1
  401946:	441c      	add	r4, r3
  401948:	f803 1b01 	strb.w	r1, [r3], #1
  40194c:	429c      	cmp	r4, r3
  40194e:	d1fb      	bne.n	401948 <memset+0x88>
  401950:	bc70      	pop	{r4, r5, r6}
  401952:	4770      	bx	lr
  401954:	4614      	mov	r4, r2
  401956:	4603      	mov	r3, r0
  401958:	e7c2      	b.n	4018e0 <memset+0x20>
  40195a:	bf00      	nop

0040195c <setbuf>:
  40195c:	2900      	cmp	r1, #0
  40195e:	bf0c      	ite	eq
  401960:	2202      	moveq	r2, #2
  401962:	2200      	movne	r2, #0
  401964:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401968:	f000 b800 	b.w	40196c <setvbuf>

0040196c <setvbuf>:
  40196c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401970:	4c61      	ldr	r4, [pc, #388]	; (401af8 <setvbuf+0x18c>)
  401972:	6825      	ldr	r5, [r4, #0]
  401974:	b083      	sub	sp, #12
  401976:	4604      	mov	r4, r0
  401978:	460f      	mov	r7, r1
  40197a:	4690      	mov	r8, r2
  40197c:	461e      	mov	r6, r3
  40197e:	b115      	cbz	r5, 401986 <setvbuf+0x1a>
  401980:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401982:	2b00      	cmp	r3, #0
  401984:	d064      	beq.n	401a50 <setvbuf+0xe4>
  401986:	f1b8 0f02 	cmp.w	r8, #2
  40198a:	d006      	beq.n	40199a <setvbuf+0x2e>
  40198c:	f1b8 0f01 	cmp.w	r8, #1
  401990:	f200 809f 	bhi.w	401ad2 <setvbuf+0x166>
  401994:	2e00      	cmp	r6, #0
  401996:	f2c0 809c 	blt.w	401ad2 <setvbuf+0x166>
  40199a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40199c:	07d8      	lsls	r0, r3, #31
  40199e:	d534      	bpl.n	401a0a <setvbuf+0x9e>
  4019a0:	4621      	mov	r1, r4
  4019a2:	4628      	mov	r0, r5
  4019a4:	f001 f890 	bl	402ac8 <_fflush_r>
  4019a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4019aa:	b141      	cbz	r1, 4019be <setvbuf+0x52>
  4019ac:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4019b0:	4299      	cmp	r1, r3
  4019b2:	d002      	beq.n	4019ba <setvbuf+0x4e>
  4019b4:	4628      	mov	r0, r5
  4019b6:	f001 fa05 	bl	402dc4 <_free_r>
  4019ba:	2300      	movs	r3, #0
  4019bc:	6323      	str	r3, [r4, #48]	; 0x30
  4019be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4019c2:	2200      	movs	r2, #0
  4019c4:	61a2      	str	r2, [r4, #24]
  4019c6:	6062      	str	r2, [r4, #4]
  4019c8:	061a      	lsls	r2, r3, #24
  4019ca:	d43a      	bmi.n	401a42 <setvbuf+0xd6>
  4019cc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4019d0:	f023 0303 	bic.w	r3, r3, #3
  4019d4:	f1b8 0f02 	cmp.w	r8, #2
  4019d8:	81a3      	strh	r3, [r4, #12]
  4019da:	d01d      	beq.n	401a18 <setvbuf+0xac>
  4019dc:	ab01      	add	r3, sp, #4
  4019de:	466a      	mov	r2, sp
  4019e0:	4621      	mov	r1, r4
  4019e2:	4628      	mov	r0, r5
  4019e4:	f001 fc8c 	bl	403300 <__swhatbuf_r>
  4019e8:	89a3      	ldrh	r3, [r4, #12]
  4019ea:	4318      	orrs	r0, r3
  4019ec:	81a0      	strh	r0, [r4, #12]
  4019ee:	2e00      	cmp	r6, #0
  4019f0:	d132      	bne.n	401a58 <setvbuf+0xec>
  4019f2:	9e00      	ldr	r6, [sp, #0]
  4019f4:	4630      	mov	r0, r6
  4019f6:	f001 fcfb 	bl	4033f0 <malloc>
  4019fa:	4607      	mov	r7, r0
  4019fc:	2800      	cmp	r0, #0
  4019fe:	d06b      	beq.n	401ad8 <setvbuf+0x16c>
  401a00:	89a3      	ldrh	r3, [r4, #12]
  401a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401a06:	81a3      	strh	r3, [r4, #12]
  401a08:	e028      	b.n	401a5c <setvbuf+0xf0>
  401a0a:	89a3      	ldrh	r3, [r4, #12]
  401a0c:	0599      	lsls	r1, r3, #22
  401a0e:	d4c7      	bmi.n	4019a0 <setvbuf+0x34>
  401a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401a12:	f001 fc71 	bl	4032f8 <__retarget_lock_acquire_recursive>
  401a16:	e7c3      	b.n	4019a0 <setvbuf+0x34>
  401a18:	2500      	movs	r5, #0
  401a1a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401a1c:	2600      	movs	r6, #0
  401a1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401a22:	f043 0302 	orr.w	r3, r3, #2
  401a26:	2001      	movs	r0, #1
  401a28:	60a6      	str	r6, [r4, #8]
  401a2a:	07ce      	lsls	r6, r1, #31
  401a2c:	81a3      	strh	r3, [r4, #12]
  401a2e:	6022      	str	r2, [r4, #0]
  401a30:	6122      	str	r2, [r4, #16]
  401a32:	6160      	str	r0, [r4, #20]
  401a34:	d401      	bmi.n	401a3a <setvbuf+0xce>
  401a36:	0598      	lsls	r0, r3, #22
  401a38:	d53e      	bpl.n	401ab8 <setvbuf+0x14c>
  401a3a:	4628      	mov	r0, r5
  401a3c:	b003      	add	sp, #12
  401a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401a42:	6921      	ldr	r1, [r4, #16]
  401a44:	4628      	mov	r0, r5
  401a46:	f001 f9bd 	bl	402dc4 <_free_r>
  401a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401a4e:	e7bd      	b.n	4019cc <setvbuf+0x60>
  401a50:	4628      	mov	r0, r5
  401a52:	f001 f891 	bl	402b78 <__sinit>
  401a56:	e796      	b.n	401986 <setvbuf+0x1a>
  401a58:	2f00      	cmp	r7, #0
  401a5a:	d0cb      	beq.n	4019f4 <setvbuf+0x88>
  401a5c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401a5e:	2b00      	cmp	r3, #0
  401a60:	d033      	beq.n	401aca <setvbuf+0x15e>
  401a62:	9b00      	ldr	r3, [sp, #0]
  401a64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401a68:	6027      	str	r7, [r4, #0]
  401a6a:	429e      	cmp	r6, r3
  401a6c:	bf1c      	itt	ne
  401a6e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  401a72:	81a2      	strhne	r2, [r4, #12]
  401a74:	f1b8 0f01 	cmp.w	r8, #1
  401a78:	bf04      	itt	eq
  401a7a:	f042 0201 	orreq.w	r2, r2, #1
  401a7e:	81a2      	strheq	r2, [r4, #12]
  401a80:	b292      	uxth	r2, r2
  401a82:	f012 0308 	ands.w	r3, r2, #8
  401a86:	6127      	str	r7, [r4, #16]
  401a88:	6166      	str	r6, [r4, #20]
  401a8a:	d00e      	beq.n	401aaa <setvbuf+0x13e>
  401a8c:	07d1      	lsls	r1, r2, #31
  401a8e:	d51a      	bpl.n	401ac6 <setvbuf+0x15a>
  401a90:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401a92:	4276      	negs	r6, r6
  401a94:	2300      	movs	r3, #0
  401a96:	f015 0501 	ands.w	r5, r5, #1
  401a9a:	61a6      	str	r6, [r4, #24]
  401a9c:	60a3      	str	r3, [r4, #8]
  401a9e:	d009      	beq.n	401ab4 <setvbuf+0x148>
  401aa0:	2500      	movs	r5, #0
  401aa2:	4628      	mov	r0, r5
  401aa4:	b003      	add	sp, #12
  401aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401aaa:	60a3      	str	r3, [r4, #8]
  401aac:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401aae:	f015 0501 	ands.w	r5, r5, #1
  401ab2:	d1f5      	bne.n	401aa0 <setvbuf+0x134>
  401ab4:	0593      	lsls	r3, r2, #22
  401ab6:	d4c0      	bmi.n	401a3a <setvbuf+0xce>
  401ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401aba:	f001 fc1f 	bl	4032fc <__retarget_lock_release_recursive>
  401abe:	4628      	mov	r0, r5
  401ac0:	b003      	add	sp, #12
  401ac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401ac6:	60a6      	str	r6, [r4, #8]
  401ac8:	e7f0      	b.n	401aac <setvbuf+0x140>
  401aca:	4628      	mov	r0, r5
  401acc:	f001 f854 	bl	402b78 <__sinit>
  401ad0:	e7c7      	b.n	401a62 <setvbuf+0xf6>
  401ad2:	f04f 35ff 	mov.w	r5, #4294967295
  401ad6:	e7b0      	b.n	401a3a <setvbuf+0xce>
  401ad8:	f8dd 9000 	ldr.w	r9, [sp]
  401adc:	45b1      	cmp	r9, r6
  401ade:	d004      	beq.n	401aea <setvbuf+0x17e>
  401ae0:	4648      	mov	r0, r9
  401ae2:	f001 fc85 	bl	4033f0 <malloc>
  401ae6:	4607      	mov	r7, r0
  401ae8:	b920      	cbnz	r0, 401af4 <setvbuf+0x188>
  401aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401aee:	f04f 35ff 	mov.w	r5, #4294967295
  401af2:	e792      	b.n	401a1a <setvbuf+0xae>
  401af4:	464e      	mov	r6, r9
  401af6:	e783      	b.n	401a00 <setvbuf+0x94>
  401af8:	20400014 	.word	0x20400014

00401afc <__sprint_r.part.0>:
  401afc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b00:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401b02:	049c      	lsls	r4, r3, #18
  401b04:	4693      	mov	fp, r2
  401b06:	d52f      	bpl.n	401b68 <__sprint_r.part.0+0x6c>
  401b08:	6893      	ldr	r3, [r2, #8]
  401b0a:	6812      	ldr	r2, [r2, #0]
  401b0c:	b353      	cbz	r3, 401b64 <__sprint_r.part.0+0x68>
  401b0e:	460e      	mov	r6, r1
  401b10:	4607      	mov	r7, r0
  401b12:	f102 0908 	add.w	r9, r2, #8
  401b16:	e919 0420 	ldmdb	r9, {r5, sl}
  401b1a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  401b1e:	d017      	beq.n	401b50 <__sprint_r.part.0+0x54>
  401b20:	3d04      	subs	r5, #4
  401b22:	2400      	movs	r4, #0
  401b24:	e001      	b.n	401b2a <__sprint_r.part.0+0x2e>
  401b26:	45a0      	cmp	r8, r4
  401b28:	d010      	beq.n	401b4c <__sprint_r.part.0+0x50>
  401b2a:	4632      	mov	r2, r6
  401b2c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401b30:	4638      	mov	r0, r7
  401b32:	f001 f8c3 	bl	402cbc <_fputwc_r>
  401b36:	1c43      	adds	r3, r0, #1
  401b38:	f104 0401 	add.w	r4, r4, #1
  401b3c:	d1f3      	bne.n	401b26 <__sprint_r.part.0+0x2a>
  401b3e:	2300      	movs	r3, #0
  401b40:	f8cb 3008 	str.w	r3, [fp, #8]
  401b44:	f8cb 3004 	str.w	r3, [fp, #4]
  401b48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b4c:	f8db 3008 	ldr.w	r3, [fp, #8]
  401b50:	f02a 0a03 	bic.w	sl, sl, #3
  401b54:	eba3 030a 	sub.w	r3, r3, sl
  401b58:	f8cb 3008 	str.w	r3, [fp, #8]
  401b5c:	f109 0908 	add.w	r9, r9, #8
  401b60:	2b00      	cmp	r3, #0
  401b62:	d1d8      	bne.n	401b16 <__sprint_r.part.0+0x1a>
  401b64:	2000      	movs	r0, #0
  401b66:	e7ea      	b.n	401b3e <__sprint_r.part.0+0x42>
  401b68:	f001 fa12 	bl	402f90 <__sfvwrite_r>
  401b6c:	2300      	movs	r3, #0
  401b6e:	f8cb 3008 	str.w	r3, [fp, #8]
  401b72:	f8cb 3004 	str.w	r3, [fp, #4]
  401b76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b7a:	bf00      	nop

00401b7c <_vfiprintf_r>:
  401b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b80:	b0ad      	sub	sp, #180	; 0xb4
  401b82:	461d      	mov	r5, r3
  401b84:	468b      	mov	fp, r1
  401b86:	4690      	mov	r8, r2
  401b88:	9307      	str	r3, [sp, #28]
  401b8a:	9006      	str	r0, [sp, #24]
  401b8c:	b118      	cbz	r0, 401b96 <_vfiprintf_r+0x1a>
  401b8e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401b90:	2b00      	cmp	r3, #0
  401b92:	f000 80f3 	beq.w	401d7c <_vfiprintf_r+0x200>
  401b96:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401b9a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401b9e:	07df      	lsls	r7, r3, #31
  401ba0:	b281      	uxth	r1, r0
  401ba2:	d402      	bmi.n	401baa <_vfiprintf_r+0x2e>
  401ba4:	058e      	lsls	r6, r1, #22
  401ba6:	f140 80fc 	bpl.w	401da2 <_vfiprintf_r+0x226>
  401baa:	048c      	lsls	r4, r1, #18
  401bac:	d40a      	bmi.n	401bc4 <_vfiprintf_r+0x48>
  401bae:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401bb2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  401bb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401bba:	f8ab 100c 	strh.w	r1, [fp, #12]
  401bbe:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  401bc2:	b289      	uxth	r1, r1
  401bc4:	0708      	lsls	r0, r1, #28
  401bc6:	f140 80b3 	bpl.w	401d30 <_vfiprintf_r+0x1b4>
  401bca:	f8db 3010 	ldr.w	r3, [fp, #16]
  401bce:	2b00      	cmp	r3, #0
  401bd0:	f000 80ae 	beq.w	401d30 <_vfiprintf_r+0x1b4>
  401bd4:	f001 031a 	and.w	r3, r1, #26
  401bd8:	2b0a      	cmp	r3, #10
  401bda:	f000 80b5 	beq.w	401d48 <_vfiprintf_r+0x1cc>
  401bde:	2300      	movs	r3, #0
  401be0:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  401be4:	930b      	str	r3, [sp, #44]	; 0x2c
  401be6:	9311      	str	r3, [sp, #68]	; 0x44
  401be8:	9310      	str	r3, [sp, #64]	; 0x40
  401bea:	9303      	str	r3, [sp, #12]
  401bec:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401bf0:	46ca      	mov	sl, r9
  401bf2:	f8cd b010 	str.w	fp, [sp, #16]
  401bf6:	f898 3000 	ldrb.w	r3, [r8]
  401bfa:	4644      	mov	r4, r8
  401bfc:	b1fb      	cbz	r3, 401c3e <_vfiprintf_r+0xc2>
  401bfe:	2b25      	cmp	r3, #37	; 0x25
  401c00:	d102      	bne.n	401c08 <_vfiprintf_r+0x8c>
  401c02:	e01c      	b.n	401c3e <_vfiprintf_r+0xc2>
  401c04:	2b25      	cmp	r3, #37	; 0x25
  401c06:	d003      	beq.n	401c10 <_vfiprintf_r+0x94>
  401c08:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  401c0c:	2b00      	cmp	r3, #0
  401c0e:	d1f9      	bne.n	401c04 <_vfiprintf_r+0x88>
  401c10:	eba4 0508 	sub.w	r5, r4, r8
  401c14:	b19d      	cbz	r5, 401c3e <_vfiprintf_r+0xc2>
  401c16:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401c18:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401c1a:	f8ca 8000 	str.w	r8, [sl]
  401c1e:	3301      	adds	r3, #1
  401c20:	442a      	add	r2, r5
  401c22:	2b07      	cmp	r3, #7
  401c24:	f8ca 5004 	str.w	r5, [sl, #4]
  401c28:	9211      	str	r2, [sp, #68]	; 0x44
  401c2a:	9310      	str	r3, [sp, #64]	; 0x40
  401c2c:	dd7a      	ble.n	401d24 <_vfiprintf_r+0x1a8>
  401c2e:	2a00      	cmp	r2, #0
  401c30:	f040 84b0 	bne.w	402594 <_vfiprintf_r+0xa18>
  401c34:	9b03      	ldr	r3, [sp, #12]
  401c36:	9210      	str	r2, [sp, #64]	; 0x40
  401c38:	442b      	add	r3, r5
  401c3a:	46ca      	mov	sl, r9
  401c3c:	9303      	str	r3, [sp, #12]
  401c3e:	7823      	ldrb	r3, [r4, #0]
  401c40:	2b00      	cmp	r3, #0
  401c42:	f000 83e0 	beq.w	402406 <_vfiprintf_r+0x88a>
  401c46:	2000      	movs	r0, #0
  401c48:	f04f 0300 	mov.w	r3, #0
  401c4c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  401c50:	f104 0801 	add.w	r8, r4, #1
  401c54:	7862      	ldrb	r2, [r4, #1]
  401c56:	4605      	mov	r5, r0
  401c58:	4606      	mov	r6, r0
  401c5a:	4603      	mov	r3, r0
  401c5c:	f04f 34ff 	mov.w	r4, #4294967295
  401c60:	f108 0801 	add.w	r8, r8, #1
  401c64:	f1a2 0120 	sub.w	r1, r2, #32
  401c68:	2958      	cmp	r1, #88	; 0x58
  401c6a:	f200 82de 	bhi.w	40222a <_vfiprintf_r+0x6ae>
  401c6e:	e8df f011 	tbh	[pc, r1, lsl #1]
  401c72:	0221      	.short	0x0221
  401c74:	02dc02dc 	.word	0x02dc02dc
  401c78:	02dc0229 	.word	0x02dc0229
  401c7c:	02dc02dc 	.word	0x02dc02dc
  401c80:	02dc02dc 	.word	0x02dc02dc
  401c84:	028902dc 	.word	0x028902dc
  401c88:	02dc0295 	.word	0x02dc0295
  401c8c:	02bd00a2 	.word	0x02bd00a2
  401c90:	019f02dc 	.word	0x019f02dc
  401c94:	01a401a4 	.word	0x01a401a4
  401c98:	01a401a4 	.word	0x01a401a4
  401c9c:	01a401a4 	.word	0x01a401a4
  401ca0:	01a401a4 	.word	0x01a401a4
  401ca4:	02dc01a4 	.word	0x02dc01a4
  401ca8:	02dc02dc 	.word	0x02dc02dc
  401cac:	02dc02dc 	.word	0x02dc02dc
  401cb0:	02dc02dc 	.word	0x02dc02dc
  401cb4:	02dc02dc 	.word	0x02dc02dc
  401cb8:	01b202dc 	.word	0x01b202dc
  401cbc:	02dc02dc 	.word	0x02dc02dc
  401cc0:	02dc02dc 	.word	0x02dc02dc
  401cc4:	02dc02dc 	.word	0x02dc02dc
  401cc8:	02dc02dc 	.word	0x02dc02dc
  401ccc:	02dc02dc 	.word	0x02dc02dc
  401cd0:	02dc0197 	.word	0x02dc0197
  401cd4:	02dc02dc 	.word	0x02dc02dc
  401cd8:	02dc02dc 	.word	0x02dc02dc
  401cdc:	02dc019b 	.word	0x02dc019b
  401ce0:	025302dc 	.word	0x025302dc
  401ce4:	02dc02dc 	.word	0x02dc02dc
  401ce8:	02dc02dc 	.word	0x02dc02dc
  401cec:	02dc02dc 	.word	0x02dc02dc
  401cf0:	02dc02dc 	.word	0x02dc02dc
  401cf4:	02dc02dc 	.word	0x02dc02dc
  401cf8:	021b025a 	.word	0x021b025a
  401cfc:	02dc02dc 	.word	0x02dc02dc
  401d00:	026e02dc 	.word	0x026e02dc
  401d04:	02dc021b 	.word	0x02dc021b
  401d08:	027302dc 	.word	0x027302dc
  401d0c:	01f502dc 	.word	0x01f502dc
  401d10:	02090182 	.word	0x02090182
  401d14:	02dc02d7 	.word	0x02dc02d7
  401d18:	02dc029a 	.word	0x02dc029a
  401d1c:	02dc00a7 	.word	0x02dc00a7
  401d20:	022e02dc 	.word	0x022e02dc
  401d24:	f10a 0a08 	add.w	sl, sl, #8
  401d28:	9b03      	ldr	r3, [sp, #12]
  401d2a:	442b      	add	r3, r5
  401d2c:	9303      	str	r3, [sp, #12]
  401d2e:	e786      	b.n	401c3e <_vfiprintf_r+0xc2>
  401d30:	4659      	mov	r1, fp
  401d32:	9806      	ldr	r0, [sp, #24]
  401d34:	f000 fdac 	bl	402890 <__swsetup_r>
  401d38:	bb18      	cbnz	r0, 401d82 <_vfiprintf_r+0x206>
  401d3a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  401d3e:	f001 031a 	and.w	r3, r1, #26
  401d42:	2b0a      	cmp	r3, #10
  401d44:	f47f af4b 	bne.w	401bde <_vfiprintf_r+0x62>
  401d48:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  401d4c:	2b00      	cmp	r3, #0
  401d4e:	f6ff af46 	blt.w	401bde <_vfiprintf_r+0x62>
  401d52:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401d56:	07db      	lsls	r3, r3, #31
  401d58:	d405      	bmi.n	401d66 <_vfiprintf_r+0x1ea>
  401d5a:	058f      	lsls	r7, r1, #22
  401d5c:	d403      	bmi.n	401d66 <_vfiprintf_r+0x1ea>
  401d5e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401d62:	f001 facb 	bl	4032fc <__retarget_lock_release_recursive>
  401d66:	462b      	mov	r3, r5
  401d68:	4642      	mov	r2, r8
  401d6a:	4659      	mov	r1, fp
  401d6c:	9806      	ldr	r0, [sp, #24]
  401d6e:	f000 fd4d 	bl	40280c <__sbprintf>
  401d72:	9003      	str	r0, [sp, #12]
  401d74:	9803      	ldr	r0, [sp, #12]
  401d76:	b02d      	add	sp, #180	; 0xb4
  401d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d7c:	f000 fefc 	bl	402b78 <__sinit>
  401d80:	e709      	b.n	401b96 <_vfiprintf_r+0x1a>
  401d82:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401d86:	07d9      	lsls	r1, r3, #31
  401d88:	d404      	bmi.n	401d94 <_vfiprintf_r+0x218>
  401d8a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401d8e:	059a      	lsls	r2, r3, #22
  401d90:	f140 84aa 	bpl.w	4026e8 <_vfiprintf_r+0xb6c>
  401d94:	f04f 33ff 	mov.w	r3, #4294967295
  401d98:	9303      	str	r3, [sp, #12]
  401d9a:	9803      	ldr	r0, [sp, #12]
  401d9c:	b02d      	add	sp, #180	; 0xb4
  401d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401da2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401da6:	f001 faa7 	bl	4032f8 <__retarget_lock_acquire_recursive>
  401daa:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401dae:	b281      	uxth	r1, r0
  401db0:	e6fb      	b.n	401baa <_vfiprintf_r+0x2e>
  401db2:	4276      	negs	r6, r6
  401db4:	9207      	str	r2, [sp, #28]
  401db6:	f043 0304 	orr.w	r3, r3, #4
  401dba:	f898 2000 	ldrb.w	r2, [r8]
  401dbe:	e74f      	b.n	401c60 <_vfiprintf_r+0xe4>
  401dc0:	9608      	str	r6, [sp, #32]
  401dc2:	069e      	lsls	r6, r3, #26
  401dc4:	f100 8450 	bmi.w	402668 <_vfiprintf_r+0xaec>
  401dc8:	9907      	ldr	r1, [sp, #28]
  401dca:	06dd      	lsls	r5, r3, #27
  401dcc:	460a      	mov	r2, r1
  401dce:	f100 83ef 	bmi.w	4025b0 <_vfiprintf_r+0xa34>
  401dd2:	0658      	lsls	r0, r3, #25
  401dd4:	f140 83ec 	bpl.w	4025b0 <_vfiprintf_r+0xa34>
  401dd8:	880e      	ldrh	r6, [r1, #0]
  401dda:	3104      	adds	r1, #4
  401ddc:	2700      	movs	r7, #0
  401dde:	2201      	movs	r2, #1
  401de0:	9107      	str	r1, [sp, #28]
  401de2:	f04f 0100 	mov.w	r1, #0
  401de6:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  401dea:	2500      	movs	r5, #0
  401dec:	1c61      	adds	r1, r4, #1
  401dee:	f000 8116 	beq.w	40201e <_vfiprintf_r+0x4a2>
  401df2:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  401df6:	9102      	str	r1, [sp, #8]
  401df8:	ea56 0107 	orrs.w	r1, r6, r7
  401dfc:	f040 8114 	bne.w	402028 <_vfiprintf_r+0x4ac>
  401e00:	2c00      	cmp	r4, #0
  401e02:	f040 835c 	bne.w	4024be <_vfiprintf_r+0x942>
  401e06:	2a00      	cmp	r2, #0
  401e08:	f040 83b7 	bne.w	40257a <_vfiprintf_r+0x9fe>
  401e0c:	f013 0301 	ands.w	r3, r3, #1
  401e10:	9305      	str	r3, [sp, #20]
  401e12:	f000 8457 	beq.w	4026c4 <_vfiprintf_r+0xb48>
  401e16:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  401e1a:	2330      	movs	r3, #48	; 0x30
  401e1c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  401e20:	9b05      	ldr	r3, [sp, #20]
  401e22:	42a3      	cmp	r3, r4
  401e24:	bfb8      	it	lt
  401e26:	4623      	movlt	r3, r4
  401e28:	9301      	str	r3, [sp, #4]
  401e2a:	b10d      	cbz	r5, 401e30 <_vfiprintf_r+0x2b4>
  401e2c:	3301      	adds	r3, #1
  401e2e:	9301      	str	r3, [sp, #4]
  401e30:	9b02      	ldr	r3, [sp, #8]
  401e32:	f013 0302 	ands.w	r3, r3, #2
  401e36:	9309      	str	r3, [sp, #36]	; 0x24
  401e38:	d002      	beq.n	401e40 <_vfiprintf_r+0x2c4>
  401e3a:	9b01      	ldr	r3, [sp, #4]
  401e3c:	3302      	adds	r3, #2
  401e3e:	9301      	str	r3, [sp, #4]
  401e40:	9b02      	ldr	r3, [sp, #8]
  401e42:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  401e46:	930a      	str	r3, [sp, #40]	; 0x28
  401e48:	f040 8217 	bne.w	40227a <_vfiprintf_r+0x6fe>
  401e4c:	9b08      	ldr	r3, [sp, #32]
  401e4e:	9a01      	ldr	r2, [sp, #4]
  401e50:	1a9d      	subs	r5, r3, r2
  401e52:	2d00      	cmp	r5, #0
  401e54:	f340 8211 	ble.w	40227a <_vfiprintf_r+0x6fe>
  401e58:	2d10      	cmp	r5, #16
  401e5a:	f340 8490 	ble.w	40277e <_vfiprintf_r+0xc02>
  401e5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401e60:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401e62:	4ec4      	ldr	r6, [pc, #784]	; (402174 <_vfiprintf_r+0x5f8>)
  401e64:	46d6      	mov	lr, sl
  401e66:	2710      	movs	r7, #16
  401e68:	46a2      	mov	sl, r4
  401e6a:	4619      	mov	r1, r3
  401e6c:	9c06      	ldr	r4, [sp, #24]
  401e6e:	e007      	b.n	401e80 <_vfiprintf_r+0x304>
  401e70:	f101 0c02 	add.w	ip, r1, #2
  401e74:	f10e 0e08 	add.w	lr, lr, #8
  401e78:	4601      	mov	r1, r0
  401e7a:	3d10      	subs	r5, #16
  401e7c:	2d10      	cmp	r5, #16
  401e7e:	dd11      	ble.n	401ea4 <_vfiprintf_r+0x328>
  401e80:	1c48      	adds	r0, r1, #1
  401e82:	3210      	adds	r2, #16
  401e84:	2807      	cmp	r0, #7
  401e86:	9211      	str	r2, [sp, #68]	; 0x44
  401e88:	e88e 00c0 	stmia.w	lr, {r6, r7}
  401e8c:	9010      	str	r0, [sp, #64]	; 0x40
  401e8e:	ddef      	ble.n	401e70 <_vfiprintf_r+0x2f4>
  401e90:	2a00      	cmp	r2, #0
  401e92:	f040 81e4 	bne.w	40225e <_vfiprintf_r+0x6e2>
  401e96:	3d10      	subs	r5, #16
  401e98:	2d10      	cmp	r5, #16
  401e9a:	4611      	mov	r1, r2
  401e9c:	f04f 0c01 	mov.w	ip, #1
  401ea0:	46ce      	mov	lr, r9
  401ea2:	dced      	bgt.n	401e80 <_vfiprintf_r+0x304>
  401ea4:	4654      	mov	r4, sl
  401ea6:	4661      	mov	r1, ip
  401ea8:	46f2      	mov	sl, lr
  401eaa:	442a      	add	r2, r5
  401eac:	2907      	cmp	r1, #7
  401eae:	9211      	str	r2, [sp, #68]	; 0x44
  401eb0:	f8ca 6000 	str.w	r6, [sl]
  401eb4:	f8ca 5004 	str.w	r5, [sl, #4]
  401eb8:	9110      	str	r1, [sp, #64]	; 0x40
  401eba:	f300 82ec 	bgt.w	402496 <_vfiprintf_r+0x91a>
  401ebe:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401ec2:	f10a 0a08 	add.w	sl, sl, #8
  401ec6:	1c48      	adds	r0, r1, #1
  401ec8:	2d00      	cmp	r5, #0
  401eca:	f040 81de 	bne.w	40228a <_vfiprintf_r+0x70e>
  401ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401ed0:	2b00      	cmp	r3, #0
  401ed2:	f000 81f8 	beq.w	4022c6 <_vfiprintf_r+0x74a>
  401ed6:	3202      	adds	r2, #2
  401ed8:	a90e      	add	r1, sp, #56	; 0x38
  401eda:	2302      	movs	r3, #2
  401edc:	2807      	cmp	r0, #7
  401ede:	9211      	str	r2, [sp, #68]	; 0x44
  401ee0:	9010      	str	r0, [sp, #64]	; 0x40
  401ee2:	e88a 000a 	stmia.w	sl, {r1, r3}
  401ee6:	f340 81ea 	ble.w	4022be <_vfiprintf_r+0x742>
  401eea:	2a00      	cmp	r2, #0
  401eec:	f040 838c 	bne.w	402608 <_vfiprintf_r+0xa8c>
  401ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401ef2:	2b80      	cmp	r3, #128	; 0x80
  401ef4:	f04f 0001 	mov.w	r0, #1
  401ef8:	4611      	mov	r1, r2
  401efa:	46ca      	mov	sl, r9
  401efc:	f040 81e7 	bne.w	4022ce <_vfiprintf_r+0x752>
  401f00:	9b08      	ldr	r3, [sp, #32]
  401f02:	9d01      	ldr	r5, [sp, #4]
  401f04:	1b5e      	subs	r6, r3, r5
  401f06:	2e00      	cmp	r6, #0
  401f08:	f340 81e1 	ble.w	4022ce <_vfiprintf_r+0x752>
  401f0c:	2e10      	cmp	r6, #16
  401f0e:	4d9a      	ldr	r5, [pc, #616]	; (402178 <_vfiprintf_r+0x5fc>)
  401f10:	f340 8450 	ble.w	4027b4 <_vfiprintf_r+0xc38>
  401f14:	46d4      	mov	ip, sl
  401f16:	2710      	movs	r7, #16
  401f18:	46a2      	mov	sl, r4
  401f1a:	9c06      	ldr	r4, [sp, #24]
  401f1c:	e007      	b.n	401f2e <_vfiprintf_r+0x3b2>
  401f1e:	f101 0e02 	add.w	lr, r1, #2
  401f22:	f10c 0c08 	add.w	ip, ip, #8
  401f26:	4601      	mov	r1, r0
  401f28:	3e10      	subs	r6, #16
  401f2a:	2e10      	cmp	r6, #16
  401f2c:	dd11      	ble.n	401f52 <_vfiprintf_r+0x3d6>
  401f2e:	1c48      	adds	r0, r1, #1
  401f30:	3210      	adds	r2, #16
  401f32:	2807      	cmp	r0, #7
  401f34:	9211      	str	r2, [sp, #68]	; 0x44
  401f36:	e88c 00a0 	stmia.w	ip, {r5, r7}
  401f3a:	9010      	str	r0, [sp, #64]	; 0x40
  401f3c:	ddef      	ble.n	401f1e <_vfiprintf_r+0x3a2>
  401f3e:	2a00      	cmp	r2, #0
  401f40:	f040 829d 	bne.w	40247e <_vfiprintf_r+0x902>
  401f44:	3e10      	subs	r6, #16
  401f46:	2e10      	cmp	r6, #16
  401f48:	f04f 0e01 	mov.w	lr, #1
  401f4c:	4611      	mov	r1, r2
  401f4e:	46cc      	mov	ip, r9
  401f50:	dced      	bgt.n	401f2e <_vfiprintf_r+0x3b2>
  401f52:	4654      	mov	r4, sl
  401f54:	46e2      	mov	sl, ip
  401f56:	4432      	add	r2, r6
  401f58:	f1be 0f07 	cmp.w	lr, #7
  401f5c:	9211      	str	r2, [sp, #68]	; 0x44
  401f5e:	e88a 0060 	stmia.w	sl, {r5, r6}
  401f62:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  401f66:	f300 8369 	bgt.w	40263c <_vfiprintf_r+0xac0>
  401f6a:	f10a 0a08 	add.w	sl, sl, #8
  401f6e:	f10e 0001 	add.w	r0, lr, #1
  401f72:	4671      	mov	r1, lr
  401f74:	e1ab      	b.n	4022ce <_vfiprintf_r+0x752>
  401f76:	9608      	str	r6, [sp, #32]
  401f78:	f013 0220 	ands.w	r2, r3, #32
  401f7c:	f040 838c 	bne.w	402698 <_vfiprintf_r+0xb1c>
  401f80:	f013 0110 	ands.w	r1, r3, #16
  401f84:	f040 831a 	bne.w	4025bc <_vfiprintf_r+0xa40>
  401f88:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  401f8c:	f000 8316 	beq.w	4025bc <_vfiprintf_r+0xa40>
  401f90:	9807      	ldr	r0, [sp, #28]
  401f92:	460a      	mov	r2, r1
  401f94:	4601      	mov	r1, r0
  401f96:	3104      	adds	r1, #4
  401f98:	8806      	ldrh	r6, [r0, #0]
  401f9a:	9107      	str	r1, [sp, #28]
  401f9c:	2700      	movs	r7, #0
  401f9e:	e720      	b.n	401de2 <_vfiprintf_r+0x266>
  401fa0:	9608      	str	r6, [sp, #32]
  401fa2:	f043 0310 	orr.w	r3, r3, #16
  401fa6:	e7e7      	b.n	401f78 <_vfiprintf_r+0x3fc>
  401fa8:	9608      	str	r6, [sp, #32]
  401faa:	f043 0310 	orr.w	r3, r3, #16
  401fae:	e708      	b.n	401dc2 <_vfiprintf_r+0x246>
  401fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401fb4:	f898 2000 	ldrb.w	r2, [r8]
  401fb8:	e652      	b.n	401c60 <_vfiprintf_r+0xe4>
  401fba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401fbe:	2600      	movs	r6, #0
  401fc0:	f818 2b01 	ldrb.w	r2, [r8], #1
  401fc4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401fc8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  401fcc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401fd0:	2909      	cmp	r1, #9
  401fd2:	d9f5      	bls.n	401fc0 <_vfiprintf_r+0x444>
  401fd4:	e646      	b.n	401c64 <_vfiprintf_r+0xe8>
  401fd6:	9608      	str	r6, [sp, #32]
  401fd8:	2800      	cmp	r0, #0
  401fda:	f040 8408 	bne.w	4027ee <_vfiprintf_r+0xc72>
  401fde:	f043 0310 	orr.w	r3, r3, #16
  401fe2:	069e      	lsls	r6, r3, #26
  401fe4:	f100 834c 	bmi.w	402680 <_vfiprintf_r+0xb04>
  401fe8:	06dd      	lsls	r5, r3, #27
  401fea:	f100 82f3 	bmi.w	4025d4 <_vfiprintf_r+0xa58>
  401fee:	0658      	lsls	r0, r3, #25
  401ff0:	f140 82f0 	bpl.w	4025d4 <_vfiprintf_r+0xa58>
  401ff4:	9d07      	ldr	r5, [sp, #28]
  401ff6:	f9b5 6000 	ldrsh.w	r6, [r5]
  401ffa:	462a      	mov	r2, r5
  401ffc:	17f7      	asrs	r7, r6, #31
  401ffe:	3204      	adds	r2, #4
  402000:	4630      	mov	r0, r6
  402002:	4639      	mov	r1, r7
  402004:	9207      	str	r2, [sp, #28]
  402006:	2800      	cmp	r0, #0
  402008:	f171 0200 	sbcs.w	r2, r1, #0
  40200c:	f2c0 835d 	blt.w	4026ca <_vfiprintf_r+0xb4e>
  402010:	1c61      	adds	r1, r4, #1
  402012:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402016:	f04f 0201 	mov.w	r2, #1
  40201a:	f47f aeea 	bne.w	401df2 <_vfiprintf_r+0x276>
  40201e:	ea56 0107 	orrs.w	r1, r6, r7
  402022:	f000 824d 	beq.w	4024c0 <_vfiprintf_r+0x944>
  402026:	9302      	str	r3, [sp, #8]
  402028:	2a01      	cmp	r2, #1
  40202a:	f000 828c 	beq.w	402546 <_vfiprintf_r+0x9ca>
  40202e:	2a02      	cmp	r2, #2
  402030:	f040 825c 	bne.w	4024ec <_vfiprintf_r+0x970>
  402034:	980b      	ldr	r0, [sp, #44]	; 0x2c
  402036:	46cb      	mov	fp, r9
  402038:	0933      	lsrs	r3, r6, #4
  40203a:	f006 010f 	and.w	r1, r6, #15
  40203e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  402042:	093a      	lsrs	r2, r7, #4
  402044:	461e      	mov	r6, r3
  402046:	4617      	mov	r7, r2
  402048:	5c43      	ldrb	r3, [r0, r1]
  40204a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40204e:	ea56 0307 	orrs.w	r3, r6, r7
  402052:	d1f1      	bne.n	402038 <_vfiprintf_r+0x4bc>
  402054:	eba9 030b 	sub.w	r3, r9, fp
  402058:	9305      	str	r3, [sp, #20]
  40205a:	e6e1      	b.n	401e20 <_vfiprintf_r+0x2a4>
  40205c:	2800      	cmp	r0, #0
  40205e:	f040 83c0 	bne.w	4027e2 <_vfiprintf_r+0xc66>
  402062:	0699      	lsls	r1, r3, #26
  402064:	f100 8367 	bmi.w	402736 <_vfiprintf_r+0xbba>
  402068:	06da      	lsls	r2, r3, #27
  40206a:	f100 80f1 	bmi.w	402250 <_vfiprintf_r+0x6d4>
  40206e:	065b      	lsls	r3, r3, #25
  402070:	f140 80ee 	bpl.w	402250 <_vfiprintf_r+0x6d4>
  402074:	9a07      	ldr	r2, [sp, #28]
  402076:	6813      	ldr	r3, [r2, #0]
  402078:	3204      	adds	r2, #4
  40207a:	9207      	str	r2, [sp, #28]
  40207c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  402080:	801a      	strh	r2, [r3, #0]
  402082:	e5b8      	b.n	401bf6 <_vfiprintf_r+0x7a>
  402084:	9807      	ldr	r0, [sp, #28]
  402086:	4a3d      	ldr	r2, [pc, #244]	; (40217c <_vfiprintf_r+0x600>)
  402088:	9608      	str	r6, [sp, #32]
  40208a:	920b      	str	r2, [sp, #44]	; 0x2c
  40208c:	6806      	ldr	r6, [r0, #0]
  40208e:	2278      	movs	r2, #120	; 0x78
  402090:	2130      	movs	r1, #48	; 0x30
  402092:	3004      	adds	r0, #4
  402094:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  402098:	f043 0302 	orr.w	r3, r3, #2
  40209c:	9007      	str	r0, [sp, #28]
  40209e:	2700      	movs	r7, #0
  4020a0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4020a4:	2202      	movs	r2, #2
  4020a6:	e69c      	b.n	401de2 <_vfiprintf_r+0x266>
  4020a8:	9608      	str	r6, [sp, #32]
  4020aa:	2800      	cmp	r0, #0
  4020ac:	d099      	beq.n	401fe2 <_vfiprintf_r+0x466>
  4020ae:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4020b2:	e796      	b.n	401fe2 <_vfiprintf_r+0x466>
  4020b4:	f898 2000 	ldrb.w	r2, [r8]
  4020b8:	2d00      	cmp	r5, #0
  4020ba:	f47f add1 	bne.w	401c60 <_vfiprintf_r+0xe4>
  4020be:	2001      	movs	r0, #1
  4020c0:	2520      	movs	r5, #32
  4020c2:	e5cd      	b.n	401c60 <_vfiprintf_r+0xe4>
  4020c4:	f043 0301 	orr.w	r3, r3, #1
  4020c8:	f898 2000 	ldrb.w	r2, [r8]
  4020cc:	e5c8      	b.n	401c60 <_vfiprintf_r+0xe4>
  4020ce:	9608      	str	r6, [sp, #32]
  4020d0:	2800      	cmp	r0, #0
  4020d2:	f040 8393 	bne.w	4027fc <_vfiprintf_r+0xc80>
  4020d6:	4929      	ldr	r1, [pc, #164]	; (40217c <_vfiprintf_r+0x600>)
  4020d8:	910b      	str	r1, [sp, #44]	; 0x2c
  4020da:	069f      	lsls	r7, r3, #26
  4020dc:	f100 82e8 	bmi.w	4026b0 <_vfiprintf_r+0xb34>
  4020e0:	9807      	ldr	r0, [sp, #28]
  4020e2:	06de      	lsls	r6, r3, #27
  4020e4:	4601      	mov	r1, r0
  4020e6:	f100 8270 	bmi.w	4025ca <_vfiprintf_r+0xa4e>
  4020ea:	065d      	lsls	r5, r3, #25
  4020ec:	f140 826d 	bpl.w	4025ca <_vfiprintf_r+0xa4e>
  4020f0:	3104      	adds	r1, #4
  4020f2:	8806      	ldrh	r6, [r0, #0]
  4020f4:	9107      	str	r1, [sp, #28]
  4020f6:	2700      	movs	r7, #0
  4020f8:	07d8      	lsls	r0, r3, #31
  4020fa:	f140 8222 	bpl.w	402542 <_vfiprintf_r+0x9c6>
  4020fe:	ea56 0107 	orrs.w	r1, r6, r7
  402102:	f000 821e 	beq.w	402542 <_vfiprintf_r+0x9c6>
  402106:	2130      	movs	r1, #48	; 0x30
  402108:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40210c:	f043 0302 	orr.w	r3, r3, #2
  402110:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402114:	2202      	movs	r2, #2
  402116:	e664      	b.n	401de2 <_vfiprintf_r+0x266>
  402118:	9608      	str	r6, [sp, #32]
  40211a:	2800      	cmp	r0, #0
  40211c:	f040 836b 	bne.w	4027f6 <_vfiprintf_r+0xc7a>
  402120:	4917      	ldr	r1, [pc, #92]	; (402180 <_vfiprintf_r+0x604>)
  402122:	910b      	str	r1, [sp, #44]	; 0x2c
  402124:	e7d9      	b.n	4020da <_vfiprintf_r+0x55e>
  402126:	9907      	ldr	r1, [sp, #28]
  402128:	9608      	str	r6, [sp, #32]
  40212a:	680a      	ldr	r2, [r1, #0]
  40212c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  402130:	f04f 0000 	mov.w	r0, #0
  402134:	460a      	mov	r2, r1
  402136:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40213a:	3204      	adds	r2, #4
  40213c:	2001      	movs	r0, #1
  40213e:	9001      	str	r0, [sp, #4]
  402140:	9207      	str	r2, [sp, #28]
  402142:	9005      	str	r0, [sp, #20]
  402144:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  402148:	9302      	str	r3, [sp, #8]
  40214a:	2400      	movs	r4, #0
  40214c:	e670      	b.n	401e30 <_vfiprintf_r+0x2b4>
  40214e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402152:	f898 2000 	ldrb.w	r2, [r8]
  402156:	e583      	b.n	401c60 <_vfiprintf_r+0xe4>
  402158:	f898 2000 	ldrb.w	r2, [r8]
  40215c:	2a6c      	cmp	r2, #108	; 0x6c
  40215e:	bf03      	ittte	eq
  402160:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  402164:	f043 0320 	orreq.w	r3, r3, #32
  402168:	f108 0801 	addeq.w	r8, r8, #1
  40216c:	f043 0310 	orrne.w	r3, r3, #16
  402170:	e576      	b.n	401c60 <_vfiprintf_r+0xe4>
  402172:	bf00      	nop
  402174:	00404c14 	.word	0x00404c14
  402178:	00404c24 	.word	0x00404c24
  40217c:	00404bf8 	.word	0x00404bf8
  402180:	00404be4 	.word	0x00404be4
  402184:	9907      	ldr	r1, [sp, #28]
  402186:	680e      	ldr	r6, [r1, #0]
  402188:	460a      	mov	r2, r1
  40218a:	2e00      	cmp	r6, #0
  40218c:	f102 0204 	add.w	r2, r2, #4
  402190:	f6ff ae0f 	blt.w	401db2 <_vfiprintf_r+0x236>
  402194:	9207      	str	r2, [sp, #28]
  402196:	f898 2000 	ldrb.w	r2, [r8]
  40219a:	e561      	b.n	401c60 <_vfiprintf_r+0xe4>
  40219c:	f898 2000 	ldrb.w	r2, [r8]
  4021a0:	2001      	movs	r0, #1
  4021a2:	252b      	movs	r5, #43	; 0x2b
  4021a4:	e55c      	b.n	401c60 <_vfiprintf_r+0xe4>
  4021a6:	9907      	ldr	r1, [sp, #28]
  4021a8:	9608      	str	r6, [sp, #32]
  4021aa:	f8d1 b000 	ldr.w	fp, [r1]
  4021ae:	f04f 0200 	mov.w	r2, #0
  4021b2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4021b6:	1d0e      	adds	r6, r1, #4
  4021b8:	f1bb 0f00 	cmp.w	fp, #0
  4021bc:	f000 82e5 	beq.w	40278a <_vfiprintf_r+0xc0e>
  4021c0:	1c67      	adds	r7, r4, #1
  4021c2:	f000 82c4 	beq.w	40274e <_vfiprintf_r+0xbd2>
  4021c6:	4622      	mov	r2, r4
  4021c8:	2100      	movs	r1, #0
  4021ca:	4658      	mov	r0, fp
  4021cc:	9301      	str	r3, [sp, #4]
  4021ce:	f001 fbdf 	bl	403990 <memchr>
  4021d2:	9b01      	ldr	r3, [sp, #4]
  4021d4:	2800      	cmp	r0, #0
  4021d6:	f000 82e5 	beq.w	4027a4 <_vfiprintf_r+0xc28>
  4021da:	eba0 020b 	sub.w	r2, r0, fp
  4021de:	9205      	str	r2, [sp, #20]
  4021e0:	9607      	str	r6, [sp, #28]
  4021e2:	9302      	str	r3, [sp, #8]
  4021e4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4021e8:	2400      	movs	r4, #0
  4021ea:	e619      	b.n	401e20 <_vfiprintf_r+0x2a4>
  4021ec:	f898 2000 	ldrb.w	r2, [r8]
  4021f0:	2a2a      	cmp	r2, #42	; 0x2a
  4021f2:	f108 0701 	add.w	r7, r8, #1
  4021f6:	f000 82e9 	beq.w	4027cc <_vfiprintf_r+0xc50>
  4021fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4021fe:	2909      	cmp	r1, #9
  402200:	46b8      	mov	r8, r7
  402202:	f04f 0400 	mov.w	r4, #0
  402206:	f63f ad2d 	bhi.w	401c64 <_vfiprintf_r+0xe8>
  40220a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40220e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402212:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  402216:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40221a:	2909      	cmp	r1, #9
  40221c:	d9f5      	bls.n	40220a <_vfiprintf_r+0x68e>
  40221e:	e521      	b.n	401c64 <_vfiprintf_r+0xe8>
  402220:	f043 0320 	orr.w	r3, r3, #32
  402224:	f898 2000 	ldrb.w	r2, [r8]
  402228:	e51a      	b.n	401c60 <_vfiprintf_r+0xe4>
  40222a:	9608      	str	r6, [sp, #32]
  40222c:	2800      	cmp	r0, #0
  40222e:	f040 82db 	bne.w	4027e8 <_vfiprintf_r+0xc6c>
  402232:	2a00      	cmp	r2, #0
  402234:	f000 80e7 	beq.w	402406 <_vfiprintf_r+0x88a>
  402238:	2101      	movs	r1, #1
  40223a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40223e:	f04f 0200 	mov.w	r2, #0
  402242:	9101      	str	r1, [sp, #4]
  402244:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  402248:	9105      	str	r1, [sp, #20]
  40224a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40224e:	e77b      	b.n	402148 <_vfiprintf_r+0x5cc>
  402250:	9a07      	ldr	r2, [sp, #28]
  402252:	6813      	ldr	r3, [r2, #0]
  402254:	3204      	adds	r2, #4
  402256:	9207      	str	r2, [sp, #28]
  402258:	9a03      	ldr	r2, [sp, #12]
  40225a:	601a      	str	r2, [r3, #0]
  40225c:	e4cb      	b.n	401bf6 <_vfiprintf_r+0x7a>
  40225e:	aa0f      	add	r2, sp, #60	; 0x3c
  402260:	9904      	ldr	r1, [sp, #16]
  402262:	4620      	mov	r0, r4
  402264:	f7ff fc4a 	bl	401afc <__sprint_r.part.0>
  402268:	2800      	cmp	r0, #0
  40226a:	f040 8139 	bne.w	4024e0 <_vfiprintf_r+0x964>
  40226e:	9910      	ldr	r1, [sp, #64]	; 0x40
  402270:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402272:	f101 0c01 	add.w	ip, r1, #1
  402276:	46ce      	mov	lr, r9
  402278:	e5ff      	b.n	401e7a <_vfiprintf_r+0x2fe>
  40227a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40227c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40227e:	1c48      	adds	r0, r1, #1
  402280:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402284:	2d00      	cmp	r5, #0
  402286:	f43f ae22 	beq.w	401ece <_vfiprintf_r+0x352>
  40228a:	3201      	adds	r2, #1
  40228c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  402290:	2101      	movs	r1, #1
  402292:	2807      	cmp	r0, #7
  402294:	9211      	str	r2, [sp, #68]	; 0x44
  402296:	9010      	str	r0, [sp, #64]	; 0x40
  402298:	f8ca 5000 	str.w	r5, [sl]
  40229c:	f8ca 1004 	str.w	r1, [sl, #4]
  4022a0:	f340 8108 	ble.w	4024b4 <_vfiprintf_r+0x938>
  4022a4:	2a00      	cmp	r2, #0
  4022a6:	f040 81bc 	bne.w	402622 <_vfiprintf_r+0xaa6>
  4022aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4022ac:	2b00      	cmp	r3, #0
  4022ae:	f43f ae1f 	beq.w	401ef0 <_vfiprintf_r+0x374>
  4022b2:	ab0e      	add	r3, sp, #56	; 0x38
  4022b4:	2202      	movs	r2, #2
  4022b6:	4608      	mov	r0, r1
  4022b8:	931c      	str	r3, [sp, #112]	; 0x70
  4022ba:	921d      	str	r2, [sp, #116]	; 0x74
  4022bc:	46ca      	mov	sl, r9
  4022be:	4601      	mov	r1, r0
  4022c0:	f10a 0a08 	add.w	sl, sl, #8
  4022c4:	3001      	adds	r0, #1
  4022c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4022c8:	2b80      	cmp	r3, #128	; 0x80
  4022ca:	f43f ae19 	beq.w	401f00 <_vfiprintf_r+0x384>
  4022ce:	9b05      	ldr	r3, [sp, #20]
  4022d0:	1ae4      	subs	r4, r4, r3
  4022d2:	2c00      	cmp	r4, #0
  4022d4:	dd2e      	ble.n	402334 <_vfiprintf_r+0x7b8>
  4022d6:	2c10      	cmp	r4, #16
  4022d8:	4db3      	ldr	r5, [pc, #716]	; (4025a8 <_vfiprintf_r+0xa2c>)
  4022da:	dd1e      	ble.n	40231a <_vfiprintf_r+0x79e>
  4022dc:	46d6      	mov	lr, sl
  4022de:	2610      	movs	r6, #16
  4022e0:	9f06      	ldr	r7, [sp, #24]
  4022e2:	f8dd a010 	ldr.w	sl, [sp, #16]
  4022e6:	e006      	b.n	4022f6 <_vfiprintf_r+0x77a>
  4022e8:	1c88      	adds	r0, r1, #2
  4022ea:	f10e 0e08 	add.w	lr, lr, #8
  4022ee:	4619      	mov	r1, r3
  4022f0:	3c10      	subs	r4, #16
  4022f2:	2c10      	cmp	r4, #16
  4022f4:	dd10      	ble.n	402318 <_vfiprintf_r+0x79c>
  4022f6:	1c4b      	adds	r3, r1, #1
  4022f8:	3210      	adds	r2, #16
  4022fa:	2b07      	cmp	r3, #7
  4022fc:	9211      	str	r2, [sp, #68]	; 0x44
  4022fe:	e88e 0060 	stmia.w	lr, {r5, r6}
  402302:	9310      	str	r3, [sp, #64]	; 0x40
  402304:	ddf0      	ble.n	4022e8 <_vfiprintf_r+0x76c>
  402306:	2a00      	cmp	r2, #0
  402308:	d165      	bne.n	4023d6 <_vfiprintf_r+0x85a>
  40230a:	3c10      	subs	r4, #16
  40230c:	2c10      	cmp	r4, #16
  40230e:	f04f 0001 	mov.w	r0, #1
  402312:	4611      	mov	r1, r2
  402314:	46ce      	mov	lr, r9
  402316:	dcee      	bgt.n	4022f6 <_vfiprintf_r+0x77a>
  402318:	46f2      	mov	sl, lr
  40231a:	4422      	add	r2, r4
  40231c:	2807      	cmp	r0, #7
  40231e:	9211      	str	r2, [sp, #68]	; 0x44
  402320:	f8ca 5000 	str.w	r5, [sl]
  402324:	f8ca 4004 	str.w	r4, [sl, #4]
  402328:	9010      	str	r0, [sp, #64]	; 0x40
  40232a:	f300 8085 	bgt.w	402438 <_vfiprintf_r+0x8bc>
  40232e:	f10a 0a08 	add.w	sl, sl, #8
  402332:	3001      	adds	r0, #1
  402334:	9905      	ldr	r1, [sp, #20]
  402336:	f8ca b000 	str.w	fp, [sl]
  40233a:	440a      	add	r2, r1
  40233c:	2807      	cmp	r0, #7
  40233e:	9211      	str	r2, [sp, #68]	; 0x44
  402340:	f8ca 1004 	str.w	r1, [sl, #4]
  402344:	9010      	str	r0, [sp, #64]	; 0x40
  402346:	f340 8082 	ble.w	40244e <_vfiprintf_r+0x8d2>
  40234a:	2a00      	cmp	r2, #0
  40234c:	f040 8118 	bne.w	402580 <_vfiprintf_r+0xa04>
  402350:	9b02      	ldr	r3, [sp, #8]
  402352:	9210      	str	r2, [sp, #64]	; 0x40
  402354:	0758      	lsls	r0, r3, #29
  402356:	d535      	bpl.n	4023c4 <_vfiprintf_r+0x848>
  402358:	9b08      	ldr	r3, [sp, #32]
  40235a:	9901      	ldr	r1, [sp, #4]
  40235c:	1a5c      	subs	r4, r3, r1
  40235e:	2c00      	cmp	r4, #0
  402360:	f340 80e7 	ble.w	402532 <_vfiprintf_r+0x9b6>
  402364:	46ca      	mov	sl, r9
  402366:	2c10      	cmp	r4, #16
  402368:	f340 8218 	ble.w	40279c <_vfiprintf_r+0xc20>
  40236c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40236e:	4e8f      	ldr	r6, [pc, #572]	; (4025ac <_vfiprintf_r+0xa30>)
  402370:	9f06      	ldr	r7, [sp, #24]
  402372:	f8dd b010 	ldr.w	fp, [sp, #16]
  402376:	2510      	movs	r5, #16
  402378:	e006      	b.n	402388 <_vfiprintf_r+0x80c>
  40237a:	1c88      	adds	r0, r1, #2
  40237c:	f10a 0a08 	add.w	sl, sl, #8
  402380:	4619      	mov	r1, r3
  402382:	3c10      	subs	r4, #16
  402384:	2c10      	cmp	r4, #16
  402386:	dd11      	ble.n	4023ac <_vfiprintf_r+0x830>
  402388:	1c4b      	adds	r3, r1, #1
  40238a:	3210      	adds	r2, #16
  40238c:	2b07      	cmp	r3, #7
  40238e:	9211      	str	r2, [sp, #68]	; 0x44
  402390:	f8ca 6000 	str.w	r6, [sl]
  402394:	f8ca 5004 	str.w	r5, [sl, #4]
  402398:	9310      	str	r3, [sp, #64]	; 0x40
  40239a:	ddee      	ble.n	40237a <_vfiprintf_r+0x7fe>
  40239c:	bb42      	cbnz	r2, 4023f0 <_vfiprintf_r+0x874>
  40239e:	3c10      	subs	r4, #16
  4023a0:	2c10      	cmp	r4, #16
  4023a2:	f04f 0001 	mov.w	r0, #1
  4023a6:	4611      	mov	r1, r2
  4023a8:	46ca      	mov	sl, r9
  4023aa:	dced      	bgt.n	402388 <_vfiprintf_r+0x80c>
  4023ac:	4422      	add	r2, r4
  4023ae:	2807      	cmp	r0, #7
  4023b0:	9211      	str	r2, [sp, #68]	; 0x44
  4023b2:	f8ca 6000 	str.w	r6, [sl]
  4023b6:	f8ca 4004 	str.w	r4, [sl, #4]
  4023ba:	9010      	str	r0, [sp, #64]	; 0x40
  4023bc:	dd51      	ble.n	402462 <_vfiprintf_r+0x8e6>
  4023be:	2a00      	cmp	r2, #0
  4023c0:	f040 819b 	bne.w	4026fa <_vfiprintf_r+0xb7e>
  4023c4:	9b03      	ldr	r3, [sp, #12]
  4023c6:	9a08      	ldr	r2, [sp, #32]
  4023c8:	9901      	ldr	r1, [sp, #4]
  4023ca:	428a      	cmp	r2, r1
  4023cc:	bfac      	ite	ge
  4023ce:	189b      	addge	r3, r3, r2
  4023d0:	185b      	addlt	r3, r3, r1
  4023d2:	9303      	str	r3, [sp, #12]
  4023d4:	e04e      	b.n	402474 <_vfiprintf_r+0x8f8>
  4023d6:	aa0f      	add	r2, sp, #60	; 0x3c
  4023d8:	4651      	mov	r1, sl
  4023da:	4638      	mov	r0, r7
  4023dc:	f7ff fb8e 	bl	401afc <__sprint_r.part.0>
  4023e0:	2800      	cmp	r0, #0
  4023e2:	f040 813f 	bne.w	402664 <_vfiprintf_r+0xae8>
  4023e6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4023e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4023ea:	1c48      	adds	r0, r1, #1
  4023ec:	46ce      	mov	lr, r9
  4023ee:	e77f      	b.n	4022f0 <_vfiprintf_r+0x774>
  4023f0:	aa0f      	add	r2, sp, #60	; 0x3c
  4023f2:	4659      	mov	r1, fp
  4023f4:	4638      	mov	r0, r7
  4023f6:	f7ff fb81 	bl	401afc <__sprint_r.part.0>
  4023fa:	b960      	cbnz	r0, 402416 <_vfiprintf_r+0x89a>
  4023fc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4023fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402400:	1c48      	adds	r0, r1, #1
  402402:	46ca      	mov	sl, r9
  402404:	e7bd      	b.n	402382 <_vfiprintf_r+0x806>
  402406:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402408:	f8dd b010 	ldr.w	fp, [sp, #16]
  40240c:	2b00      	cmp	r3, #0
  40240e:	f040 81d4 	bne.w	4027ba <_vfiprintf_r+0xc3e>
  402412:	2300      	movs	r3, #0
  402414:	9310      	str	r3, [sp, #64]	; 0x40
  402416:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40241a:	f013 0f01 	tst.w	r3, #1
  40241e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402422:	d102      	bne.n	40242a <_vfiprintf_r+0x8ae>
  402424:	059a      	lsls	r2, r3, #22
  402426:	f140 80de 	bpl.w	4025e6 <_vfiprintf_r+0xa6a>
  40242a:	065b      	lsls	r3, r3, #25
  40242c:	f53f acb2 	bmi.w	401d94 <_vfiprintf_r+0x218>
  402430:	9803      	ldr	r0, [sp, #12]
  402432:	b02d      	add	sp, #180	; 0xb4
  402434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402438:	2a00      	cmp	r2, #0
  40243a:	f040 8106 	bne.w	40264a <_vfiprintf_r+0xace>
  40243e:	9a05      	ldr	r2, [sp, #20]
  402440:	921d      	str	r2, [sp, #116]	; 0x74
  402442:	2301      	movs	r3, #1
  402444:	9211      	str	r2, [sp, #68]	; 0x44
  402446:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40244a:	9310      	str	r3, [sp, #64]	; 0x40
  40244c:	46ca      	mov	sl, r9
  40244e:	f10a 0a08 	add.w	sl, sl, #8
  402452:	9b02      	ldr	r3, [sp, #8]
  402454:	0759      	lsls	r1, r3, #29
  402456:	d504      	bpl.n	402462 <_vfiprintf_r+0x8e6>
  402458:	9b08      	ldr	r3, [sp, #32]
  40245a:	9901      	ldr	r1, [sp, #4]
  40245c:	1a5c      	subs	r4, r3, r1
  40245e:	2c00      	cmp	r4, #0
  402460:	dc81      	bgt.n	402366 <_vfiprintf_r+0x7ea>
  402462:	9b03      	ldr	r3, [sp, #12]
  402464:	9908      	ldr	r1, [sp, #32]
  402466:	9801      	ldr	r0, [sp, #4]
  402468:	4281      	cmp	r1, r0
  40246a:	bfac      	ite	ge
  40246c:	185b      	addge	r3, r3, r1
  40246e:	181b      	addlt	r3, r3, r0
  402470:	9303      	str	r3, [sp, #12]
  402472:	bb72      	cbnz	r2, 4024d2 <_vfiprintf_r+0x956>
  402474:	2300      	movs	r3, #0
  402476:	9310      	str	r3, [sp, #64]	; 0x40
  402478:	46ca      	mov	sl, r9
  40247a:	f7ff bbbc 	b.w	401bf6 <_vfiprintf_r+0x7a>
  40247e:	aa0f      	add	r2, sp, #60	; 0x3c
  402480:	9904      	ldr	r1, [sp, #16]
  402482:	4620      	mov	r0, r4
  402484:	f7ff fb3a 	bl	401afc <__sprint_r.part.0>
  402488:	bb50      	cbnz	r0, 4024e0 <_vfiprintf_r+0x964>
  40248a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40248c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40248e:	f101 0e01 	add.w	lr, r1, #1
  402492:	46cc      	mov	ip, r9
  402494:	e548      	b.n	401f28 <_vfiprintf_r+0x3ac>
  402496:	2a00      	cmp	r2, #0
  402498:	f040 8140 	bne.w	40271c <_vfiprintf_r+0xba0>
  40249c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4024a0:	2900      	cmp	r1, #0
  4024a2:	f000 811b 	beq.w	4026dc <_vfiprintf_r+0xb60>
  4024a6:	2201      	movs	r2, #1
  4024a8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4024ac:	4610      	mov	r0, r2
  4024ae:	921d      	str	r2, [sp, #116]	; 0x74
  4024b0:	911c      	str	r1, [sp, #112]	; 0x70
  4024b2:	46ca      	mov	sl, r9
  4024b4:	4601      	mov	r1, r0
  4024b6:	f10a 0a08 	add.w	sl, sl, #8
  4024ba:	3001      	adds	r0, #1
  4024bc:	e507      	b.n	401ece <_vfiprintf_r+0x352>
  4024be:	9b02      	ldr	r3, [sp, #8]
  4024c0:	2a01      	cmp	r2, #1
  4024c2:	f000 8098 	beq.w	4025f6 <_vfiprintf_r+0xa7a>
  4024c6:	2a02      	cmp	r2, #2
  4024c8:	d10d      	bne.n	4024e6 <_vfiprintf_r+0x96a>
  4024ca:	9302      	str	r3, [sp, #8]
  4024cc:	2600      	movs	r6, #0
  4024ce:	2700      	movs	r7, #0
  4024d0:	e5b0      	b.n	402034 <_vfiprintf_r+0x4b8>
  4024d2:	aa0f      	add	r2, sp, #60	; 0x3c
  4024d4:	9904      	ldr	r1, [sp, #16]
  4024d6:	9806      	ldr	r0, [sp, #24]
  4024d8:	f7ff fb10 	bl	401afc <__sprint_r.part.0>
  4024dc:	2800      	cmp	r0, #0
  4024de:	d0c9      	beq.n	402474 <_vfiprintf_r+0x8f8>
  4024e0:	f8dd b010 	ldr.w	fp, [sp, #16]
  4024e4:	e797      	b.n	402416 <_vfiprintf_r+0x89a>
  4024e6:	9302      	str	r3, [sp, #8]
  4024e8:	2600      	movs	r6, #0
  4024ea:	2700      	movs	r7, #0
  4024ec:	4649      	mov	r1, r9
  4024ee:	e000      	b.n	4024f2 <_vfiprintf_r+0x976>
  4024f0:	4659      	mov	r1, fp
  4024f2:	08f2      	lsrs	r2, r6, #3
  4024f4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4024f8:	08f8      	lsrs	r0, r7, #3
  4024fa:	f006 0307 	and.w	r3, r6, #7
  4024fe:	4607      	mov	r7, r0
  402500:	4616      	mov	r6, r2
  402502:	3330      	adds	r3, #48	; 0x30
  402504:	ea56 0207 	orrs.w	r2, r6, r7
  402508:	f801 3c01 	strb.w	r3, [r1, #-1]
  40250c:	f101 3bff 	add.w	fp, r1, #4294967295
  402510:	d1ee      	bne.n	4024f0 <_vfiprintf_r+0x974>
  402512:	9a02      	ldr	r2, [sp, #8]
  402514:	07d6      	lsls	r6, r2, #31
  402516:	f57f ad9d 	bpl.w	402054 <_vfiprintf_r+0x4d8>
  40251a:	2b30      	cmp	r3, #48	; 0x30
  40251c:	f43f ad9a 	beq.w	402054 <_vfiprintf_r+0x4d8>
  402520:	3902      	subs	r1, #2
  402522:	2330      	movs	r3, #48	; 0x30
  402524:	f80b 3c01 	strb.w	r3, [fp, #-1]
  402528:	eba9 0301 	sub.w	r3, r9, r1
  40252c:	9305      	str	r3, [sp, #20]
  40252e:	468b      	mov	fp, r1
  402530:	e476      	b.n	401e20 <_vfiprintf_r+0x2a4>
  402532:	9b03      	ldr	r3, [sp, #12]
  402534:	9a08      	ldr	r2, [sp, #32]
  402536:	428a      	cmp	r2, r1
  402538:	bfac      	ite	ge
  40253a:	189b      	addge	r3, r3, r2
  40253c:	185b      	addlt	r3, r3, r1
  40253e:	9303      	str	r3, [sp, #12]
  402540:	e798      	b.n	402474 <_vfiprintf_r+0x8f8>
  402542:	2202      	movs	r2, #2
  402544:	e44d      	b.n	401de2 <_vfiprintf_r+0x266>
  402546:	2f00      	cmp	r7, #0
  402548:	bf08      	it	eq
  40254a:	2e0a      	cmpeq	r6, #10
  40254c:	d352      	bcc.n	4025f4 <_vfiprintf_r+0xa78>
  40254e:	46cb      	mov	fp, r9
  402550:	4630      	mov	r0, r6
  402552:	4639      	mov	r1, r7
  402554:	220a      	movs	r2, #10
  402556:	2300      	movs	r3, #0
  402558:	f001 ff6e 	bl	404438 <__aeabi_uldivmod>
  40255c:	3230      	adds	r2, #48	; 0x30
  40255e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  402562:	4630      	mov	r0, r6
  402564:	4639      	mov	r1, r7
  402566:	2300      	movs	r3, #0
  402568:	220a      	movs	r2, #10
  40256a:	f001 ff65 	bl	404438 <__aeabi_uldivmod>
  40256e:	4606      	mov	r6, r0
  402570:	460f      	mov	r7, r1
  402572:	ea56 0307 	orrs.w	r3, r6, r7
  402576:	d1eb      	bne.n	402550 <_vfiprintf_r+0x9d4>
  402578:	e56c      	b.n	402054 <_vfiprintf_r+0x4d8>
  40257a:	9405      	str	r4, [sp, #20]
  40257c:	46cb      	mov	fp, r9
  40257e:	e44f      	b.n	401e20 <_vfiprintf_r+0x2a4>
  402580:	aa0f      	add	r2, sp, #60	; 0x3c
  402582:	9904      	ldr	r1, [sp, #16]
  402584:	9806      	ldr	r0, [sp, #24]
  402586:	f7ff fab9 	bl	401afc <__sprint_r.part.0>
  40258a:	2800      	cmp	r0, #0
  40258c:	d1a8      	bne.n	4024e0 <_vfiprintf_r+0x964>
  40258e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402590:	46ca      	mov	sl, r9
  402592:	e75e      	b.n	402452 <_vfiprintf_r+0x8d6>
  402594:	aa0f      	add	r2, sp, #60	; 0x3c
  402596:	9904      	ldr	r1, [sp, #16]
  402598:	9806      	ldr	r0, [sp, #24]
  40259a:	f7ff faaf 	bl	401afc <__sprint_r.part.0>
  40259e:	2800      	cmp	r0, #0
  4025a0:	d19e      	bne.n	4024e0 <_vfiprintf_r+0x964>
  4025a2:	46ca      	mov	sl, r9
  4025a4:	f7ff bbc0 	b.w	401d28 <_vfiprintf_r+0x1ac>
  4025a8:	00404c24 	.word	0x00404c24
  4025ac:	00404c14 	.word	0x00404c14
  4025b0:	3104      	adds	r1, #4
  4025b2:	6816      	ldr	r6, [r2, #0]
  4025b4:	9107      	str	r1, [sp, #28]
  4025b6:	2201      	movs	r2, #1
  4025b8:	2700      	movs	r7, #0
  4025ba:	e412      	b.n	401de2 <_vfiprintf_r+0x266>
  4025bc:	9807      	ldr	r0, [sp, #28]
  4025be:	4601      	mov	r1, r0
  4025c0:	3104      	adds	r1, #4
  4025c2:	6806      	ldr	r6, [r0, #0]
  4025c4:	9107      	str	r1, [sp, #28]
  4025c6:	2700      	movs	r7, #0
  4025c8:	e40b      	b.n	401de2 <_vfiprintf_r+0x266>
  4025ca:	680e      	ldr	r6, [r1, #0]
  4025cc:	3104      	adds	r1, #4
  4025ce:	9107      	str	r1, [sp, #28]
  4025d0:	2700      	movs	r7, #0
  4025d2:	e591      	b.n	4020f8 <_vfiprintf_r+0x57c>
  4025d4:	9907      	ldr	r1, [sp, #28]
  4025d6:	680e      	ldr	r6, [r1, #0]
  4025d8:	460a      	mov	r2, r1
  4025da:	17f7      	asrs	r7, r6, #31
  4025dc:	3204      	adds	r2, #4
  4025de:	9207      	str	r2, [sp, #28]
  4025e0:	4630      	mov	r0, r6
  4025e2:	4639      	mov	r1, r7
  4025e4:	e50f      	b.n	402006 <_vfiprintf_r+0x48a>
  4025e6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4025ea:	f000 fe87 	bl	4032fc <__retarget_lock_release_recursive>
  4025ee:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4025f2:	e71a      	b.n	40242a <_vfiprintf_r+0x8ae>
  4025f4:	9b02      	ldr	r3, [sp, #8]
  4025f6:	9302      	str	r3, [sp, #8]
  4025f8:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4025fc:	3630      	adds	r6, #48	; 0x30
  4025fe:	2301      	movs	r3, #1
  402600:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  402604:	9305      	str	r3, [sp, #20]
  402606:	e40b      	b.n	401e20 <_vfiprintf_r+0x2a4>
  402608:	aa0f      	add	r2, sp, #60	; 0x3c
  40260a:	9904      	ldr	r1, [sp, #16]
  40260c:	9806      	ldr	r0, [sp, #24]
  40260e:	f7ff fa75 	bl	401afc <__sprint_r.part.0>
  402612:	2800      	cmp	r0, #0
  402614:	f47f af64 	bne.w	4024e0 <_vfiprintf_r+0x964>
  402618:	9910      	ldr	r1, [sp, #64]	; 0x40
  40261a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40261c:	1c48      	adds	r0, r1, #1
  40261e:	46ca      	mov	sl, r9
  402620:	e651      	b.n	4022c6 <_vfiprintf_r+0x74a>
  402622:	aa0f      	add	r2, sp, #60	; 0x3c
  402624:	9904      	ldr	r1, [sp, #16]
  402626:	9806      	ldr	r0, [sp, #24]
  402628:	f7ff fa68 	bl	401afc <__sprint_r.part.0>
  40262c:	2800      	cmp	r0, #0
  40262e:	f47f af57 	bne.w	4024e0 <_vfiprintf_r+0x964>
  402632:	9910      	ldr	r1, [sp, #64]	; 0x40
  402634:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402636:	1c48      	adds	r0, r1, #1
  402638:	46ca      	mov	sl, r9
  40263a:	e448      	b.n	401ece <_vfiprintf_r+0x352>
  40263c:	2a00      	cmp	r2, #0
  40263e:	f040 8091 	bne.w	402764 <_vfiprintf_r+0xbe8>
  402642:	2001      	movs	r0, #1
  402644:	4611      	mov	r1, r2
  402646:	46ca      	mov	sl, r9
  402648:	e641      	b.n	4022ce <_vfiprintf_r+0x752>
  40264a:	aa0f      	add	r2, sp, #60	; 0x3c
  40264c:	9904      	ldr	r1, [sp, #16]
  40264e:	9806      	ldr	r0, [sp, #24]
  402650:	f7ff fa54 	bl	401afc <__sprint_r.part.0>
  402654:	2800      	cmp	r0, #0
  402656:	f47f af43 	bne.w	4024e0 <_vfiprintf_r+0x964>
  40265a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40265c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40265e:	3001      	adds	r0, #1
  402660:	46ca      	mov	sl, r9
  402662:	e667      	b.n	402334 <_vfiprintf_r+0x7b8>
  402664:	46d3      	mov	fp, sl
  402666:	e6d6      	b.n	402416 <_vfiprintf_r+0x89a>
  402668:	9e07      	ldr	r6, [sp, #28]
  40266a:	3607      	adds	r6, #7
  40266c:	f026 0207 	bic.w	r2, r6, #7
  402670:	f102 0108 	add.w	r1, r2, #8
  402674:	e9d2 6700 	ldrd	r6, r7, [r2]
  402678:	9107      	str	r1, [sp, #28]
  40267a:	2201      	movs	r2, #1
  40267c:	f7ff bbb1 	b.w	401de2 <_vfiprintf_r+0x266>
  402680:	9e07      	ldr	r6, [sp, #28]
  402682:	3607      	adds	r6, #7
  402684:	f026 0607 	bic.w	r6, r6, #7
  402688:	e9d6 0100 	ldrd	r0, r1, [r6]
  40268c:	f106 0208 	add.w	r2, r6, #8
  402690:	9207      	str	r2, [sp, #28]
  402692:	4606      	mov	r6, r0
  402694:	460f      	mov	r7, r1
  402696:	e4b6      	b.n	402006 <_vfiprintf_r+0x48a>
  402698:	9e07      	ldr	r6, [sp, #28]
  40269a:	3607      	adds	r6, #7
  40269c:	f026 0207 	bic.w	r2, r6, #7
  4026a0:	f102 0108 	add.w	r1, r2, #8
  4026a4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4026a8:	9107      	str	r1, [sp, #28]
  4026aa:	2200      	movs	r2, #0
  4026ac:	f7ff bb99 	b.w	401de2 <_vfiprintf_r+0x266>
  4026b0:	9e07      	ldr	r6, [sp, #28]
  4026b2:	3607      	adds	r6, #7
  4026b4:	f026 0107 	bic.w	r1, r6, #7
  4026b8:	f101 0008 	add.w	r0, r1, #8
  4026bc:	9007      	str	r0, [sp, #28]
  4026be:	e9d1 6700 	ldrd	r6, r7, [r1]
  4026c2:	e519      	b.n	4020f8 <_vfiprintf_r+0x57c>
  4026c4:	46cb      	mov	fp, r9
  4026c6:	f7ff bbab 	b.w	401e20 <_vfiprintf_r+0x2a4>
  4026ca:	252d      	movs	r5, #45	; 0x2d
  4026cc:	4276      	negs	r6, r6
  4026ce:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4026d2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4026d6:	2201      	movs	r2, #1
  4026d8:	f7ff bb88 	b.w	401dec <_vfiprintf_r+0x270>
  4026dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4026de:	b9b3      	cbnz	r3, 40270e <_vfiprintf_r+0xb92>
  4026e0:	4611      	mov	r1, r2
  4026e2:	2001      	movs	r0, #1
  4026e4:	46ca      	mov	sl, r9
  4026e6:	e5f2      	b.n	4022ce <_vfiprintf_r+0x752>
  4026e8:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4026ec:	f000 fe06 	bl	4032fc <__retarget_lock_release_recursive>
  4026f0:	f04f 33ff 	mov.w	r3, #4294967295
  4026f4:	9303      	str	r3, [sp, #12]
  4026f6:	f7ff bb50 	b.w	401d9a <_vfiprintf_r+0x21e>
  4026fa:	aa0f      	add	r2, sp, #60	; 0x3c
  4026fc:	9904      	ldr	r1, [sp, #16]
  4026fe:	9806      	ldr	r0, [sp, #24]
  402700:	f7ff f9fc 	bl	401afc <__sprint_r.part.0>
  402704:	2800      	cmp	r0, #0
  402706:	f47f aeeb 	bne.w	4024e0 <_vfiprintf_r+0x964>
  40270a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40270c:	e6a9      	b.n	402462 <_vfiprintf_r+0x8e6>
  40270e:	ab0e      	add	r3, sp, #56	; 0x38
  402710:	2202      	movs	r2, #2
  402712:	931c      	str	r3, [sp, #112]	; 0x70
  402714:	921d      	str	r2, [sp, #116]	; 0x74
  402716:	2001      	movs	r0, #1
  402718:	46ca      	mov	sl, r9
  40271a:	e5d0      	b.n	4022be <_vfiprintf_r+0x742>
  40271c:	aa0f      	add	r2, sp, #60	; 0x3c
  40271e:	9904      	ldr	r1, [sp, #16]
  402720:	9806      	ldr	r0, [sp, #24]
  402722:	f7ff f9eb 	bl	401afc <__sprint_r.part.0>
  402726:	2800      	cmp	r0, #0
  402728:	f47f aeda 	bne.w	4024e0 <_vfiprintf_r+0x964>
  40272c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40272e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402730:	1c48      	adds	r0, r1, #1
  402732:	46ca      	mov	sl, r9
  402734:	e5a4      	b.n	402280 <_vfiprintf_r+0x704>
  402736:	9a07      	ldr	r2, [sp, #28]
  402738:	9903      	ldr	r1, [sp, #12]
  40273a:	6813      	ldr	r3, [r2, #0]
  40273c:	17cd      	asrs	r5, r1, #31
  40273e:	4608      	mov	r0, r1
  402740:	3204      	adds	r2, #4
  402742:	4629      	mov	r1, r5
  402744:	9207      	str	r2, [sp, #28]
  402746:	e9c3 0100 	strd	r0, r1, [r3]
  40274a:	f7ff ba54 	b.w	401bf6 <_vfiprintf_r+0x7a>
  40274e:	4658      	mov	r0, fp
  402750:	9607      	str	r6, [sp, #28]
  402752:	9302      	str	r3, [sp, #8]
  402754:	f001 fc34 	bl	403fc0 <strlen>
  402758:	2400      	movs	r4, #0
  40275a:	9005      	str	r0, [sp, #20]
  40275c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402760:	f7ff bb5e 	b.w	401e20 <_vfiprintf_r+0x2a4>
  402764:	aa0f      	add	r2, sp, #60	; 0x3c
  402766:	9904      	ldr	r1, [sp, #16]
  402768:	9806      	ldr	r0, [sp, #24]
  40276a:	f7ff f9c7 	bl	401afc <__sprint_r.part.0>
  40276e:	2800      	cmp	r0, #0
  402770:	f47f aeb6 	bne.w	4024e0 <_vfiprintf_r+0x964>
  402774:	9910      	ldr	r1, [sp, #64]	; 0x40
  402776:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402778:	1c48      	adds	r0, r1, #1
  40277a:	46ca      	mov	sl, r9
  40277c:	e5a7      	b.n	4022ce <_vfiprintf_r+0x752>
  40277e:	9910      	ldr	r1, [sp, #64]	; 0x40
  402780:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402782:	4e20      	ldr	r6, [pc, #128]	; (402804 <_vfiprintf_r+0xc88>)
  402784:	3101      	adds	r1, #1
  402786:	f7ff bb90 	b.w	401eaa <_vfiprintf_r+0x32e>
  40278a:	2c06      	cmp	r4, #6
  40278c:	bf28      	it	cs
  40278e:	2406      	movcs	r4, #6
  402790:	9405      	str	r4, [sp, #20]
  402792:	9607      	str	r6, [sp, #28]
  402794:	9401      	str	r4, [sp, #4]
  402796:	f8df b070 	ldr.w	fp, [pc, #112]	; 402808 <_vfiprintf_r+0xc8c>
  40279a:	e4d5      	b.n	402148 <_vfiprintf_r+0x5cc>
  40279c:	9810      	ldr	r0, [sp, #64]	; 0x40
  40279e:	4e19      	ldr	r6, [pc, #100]	; (402804 <_vfiprintf_r+0xc88>)
  4027a0:	3001      	adds	r0, #1
  4027a2:	e603      	b.n	4023ac <_vfiprintf_r+0x830>
  4027a4:	9405      	str	r4, [sp, #20]
  4027a6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4027aa:	9607      	str	r6, [sp, #28]
  4027ac:	9302      	str	r3, [sp, #8]
  4027ae:	4604      	mov	r4, r0
  4027b0:	f7ff bb36 	b.w	401e20 <_vfiprintf_r+0x2a4>
  4027b4:	4686      	mov	lr, r0
  4027b6:	f7ff bbce 	b.w	401f56 <_vfiprintf_r+0x3da>
  4027ba:	9806      	ldr	r0, [sp, #24]
  4027bc:	aa0f      	add	r2, sp, #60	; 0x3c
  4027be:	4659      	mov	r1, fp
  4027c0:	f7ff f99c 	bl	401afc <__sprint_r.part.0>
  4027c4:	2800      	cmp	r0, #0
  4027c6:	f43f ae24 	beq.w	402412 <_vfiprintf_r+0x896>
  4027ca:	e624      	b.n	402416 <_vfiprintf_r+0x89a>
  4027cc:	9907      	ldr	r1, [sp, #28]
  4027ce:	f898 2001 	ldrb.w	r2, [r8, #1]
  4027d2:	680c      	ldr	r4, [r1, #0]
  4027d4:	3104      	adds	r1, #4
  4027d6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4027da:	46b8      	mov	r8, r7
  4027dc:	9107      	str	r1, [sp, #28]
  4027de:	f7ff ba3f 	b.w	401c60 <_vfiprintf_r+0xe4>
  4027e2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4027e6:	e43c      	b.n	402062 <_vfiprintf_r+0x4e6>
  4027e8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4027ec:	e521      	b.n	402232 <_vfiprintf_r+0x6b6>
  4027ee:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4027f2:	f7ff bbf4 	b.w	401fde <_vfiprintf_r+0x462>
  4027f6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4027fa:	e491      	b.n	402120 <_vfiprintf_r+0x5a4>
  4027fc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402800:	e469      	b.n	4020d6 <_vfiprintf_r+0x55a>
  402802:	bf00      	nop
  402804:	00404c14 	.word	0x00404c14
  402808:	00404c0c 	.word	0x00404c0c

0040280c <__sbprintf>:
  40280c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402810:	460c      	mov	r4, r1
  402812:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  402816:	8989      	ldrh	r1, [r1, #12]
  402818:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40281a:	89e5      	ldrh	r5, [r4, #14]
  40281c:	9619      	str	r6, [sp, #100]	; 0x64
  40281e:	f021 0102 	bic.w	r1, r1, #2
  402822:	4606      	mov	r6, r0
  402824:	69e0      	ldr	r0, [r4, #28]
  402826:	f8ad 100c 	strh.w	r1, [sp, #12]
  40282a:	4617      	mov	r7, r2
  40282c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402830:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402832:	f8ad 500e 	strh.w	r5, [sp, #14]
  402836:	4698      	mov	r8, r3
  402838:	ad1a      	add	r5, sp, #104	; 0x68
  40283a:	2300      	movs	r3, #0
  40283c:	9007      	str	r0, [sp, #28]
  40283e:	a816      	add	r0, sp, #88	; 0x58
  402840:	9209      	str	r2, [sp, #36]	; 0x24
  402842:	9306      	str	r3, [sp, #24]
  402844:	9500      	str	r5, [sp, #0]
  402846:	9504      	str	r5, [sp, #16]
  402848:	9102      	str	r1, [sp, #8]
  40284a:	9105      	str	r1, [sp, #20]
  40284c:	f000 fd50 	bl	4032f0 <__retarget_lock_init_recursive>
  402850:	4643      	mov	r3, r8
  402852:	463a      	mov	r2, r7
  402854:	4669      	mov	r1, sp
  402856:	4630      	mov	r0, r6
  402858:	f7ff f990 	bl	401b7c <_vfiprintf_r>
  40285c:	1e05      	subs	r5, r0, #0
  40285e:	db07      	blt.n	402870 <__sbprintf+0x64>
  402860:	4630      	mov	r0, r6
  402862:	4669      	mov	r1, sp
  402864:	f000 f930 	bl	402ac8 <_fflush_r>
  402868:	2800      	cmp	r0, #0
  40286a:	bf18      	it	ne
  40286c:	f04f 35ff 	movne.w	r5, #4294967295
  402870:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402874:	065b      	lsls	r3, r3, #25
  402876:	d503      	bpl.n	402880 <__sbprintf+0x74>
  402878:	89a3      	ldrh	r3, [r4, #12]
  40287a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40287e:	81a3      	strh	r3, [r4, #12]
  402880:	9816      	ldr	r0, [sp, #88]	; 0x58
  402882:	f000 fd37 	bl	4032f4 <__retarget_lock_close_recursive>
  402886:	4628      	mov	r0, r5
  402888:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40288c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00402890 <__swsetup_r>:
  402890:	b538      	push	{r3, r4, r5, lr}
  402892:	4b30      	ldr	r3, [pc, #192]	; (402954 <__swsetup_r+0xc4>)
  402894:	681b      	ldr	r3, [r3, #0]
  402896:	4605      	mov	r5, r0
  402898:	460c      	mov	r4, r1
  40289a:	b113      	cbz	r3, 4028a2 <__swsetup_r+0x12>
  40289c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40289e:	2a00      	cmp	r2, #0
  4028a0:	d038      	beq.n	402914 <__swsetup_r+0x84>
  4028a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4028a6:	b293      	uxth	r3, r2
  4028a8:	0718      	lsls	r0, r3, #28
  4028aa:	d50c      	bpl.n	4028c6 <__swsetup_r+0x36>
  4028ac:	6920      	ldr	r0, [r4, #16]
  4028ae:	b1a8      	cbz	r0, 4028dc <__swsetup_r+0x4c>
  4028b0:	f013 0201 	ands.w	r2, r3, #1
  4028b4:	d01e      	beq.n	4028f4 <__swsetup_r+0x64>
  4028b6:	6963      	ldr	r3, [r4, #20]
  4028b8:	2200      	movs	r2, #0
  4028ba:	425b      	negs	r3, r3
  4028bc:	61a3      	str	r3, [r4, #24]
  4028be:	60a2      	str	r2, [r4, #8]
  4028c0:	b1f0      	cbz	r0, 402900 <__swsetup_r+0x70>
  4028c2:	2000      	movs	r0, #0
  4028c4:	bd38      	pop	{r3, r4, r5, pc}
  4028c6:	06d9      	lsls	r1, r3, #27
  4028c8:	d53c      	bpl.n	402944 <__swsetup_r+0xb4>
  4028ca:	0758      	lsls	r0, r3, #29
  4028cc:	d426      	bmi.n	40291c <__swsetup_r+0x8c>
  4028ce:	6920      	ldr	r0, [r4, #16]
  4028d0:	f042 0308 	orr.w	r3, r2, #8
  4028d4:	81a3      	strh	r3, [r4, #12]
  4028d6:	b29b      	uxth	r3, r3
  4028d8:	2800      	cmp	r0, #0
  4028da:	d1e9      	bne.n	4028b0 <__swsetup_r+0x20>
  4028dc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4028e0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4028e4:	d0e4      	beq.n	4028b0 <__swsetup_r+0x20>
  4028e6:	4628      	mov	r0, r5
  4028e8:	4621      	mov	r1, r4
  4028ea:	f000 fd37 	bl	40335c <__smakebuf_r>
  4028ee:	89a3      	ldrh	r3, [r4, #12]
  4028f0:	6920      	ldr	r0, [r4, #16]
  4028f2:	e7dd      	b.n	4028b0 <__swsetup_r+0x20>
  4028f4:	0799      	lsls	r1, r3, #30
  4028f6:	bf58      	it	pl
  4028f8:	6962      	ldrpl	r2, [r4, #20]
  4028fa:	60a2      	str	r2, [r4, #8]
  4028fc:	2800      	cmp	r0, #0
  4028fe:	d1e0      	bne.n	4028c2 <__swsetup_r+0x32>
  402900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402904:	061a      	lsls	r2, r3, #24
  402906:	d5dd      	bpl.n	4028c4 <__swsetup_r+0x34>
  402908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40290c:	81a3      	strh	r3, [r4, #12]
  40290e:	f04f 30ff 	mov.w	r0, #4294967295
  402912:	bd38      	pop	{r3, r4, r5, pc}
  402914:	4618      	mov	r0, r3
  402916:	f000 f92f 	bl	402b78 <__sinit>
  40291a:	e7c2      	b.n	4028a2 <__swsetup_r+0x12>
  40291c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40291e:	b151      	cbz	r1, 402936 <__swsetup_r+0xa6>
  402920:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402924:	4299      	cmp	r1, r3
  402926:	d004      	beq.n	402932 <__swsetup_r+0xa2>
  402928:	4628      	mov	r0, r5
  40292a:	f000 fa4b 	bl	402dc4 <_free_r>
  40292e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402932:	2300      	movs	r3, #0
  402934:	6323      	str	r3, [r4, #48]	; 0x30
  402936:	2300      	movs	r3, #0
  402938:	6920      	ldr	r0, [r4, #16]
  40293a:	6063      	str	r3, [r4, #4]
  40293c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402940:	6020      	str	r0, [r4, #0]
  402942:	e7c5      	b.n	4028d0 <__swsetup_r+0x40>
  402944:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402948:	2309      	movs	r3, #9
  40294a:	602b      	str	r3, [r5, #0]
  40294c:	f04f 30ff 	mov.w	r0, #4294967295
  402950:	81a2      	strh	r2, [r4, #12]
  402952:	bd38      	pop	{r3, r4, r5, pc}
  402954:	20400014 	.word	0x20400014

00402958 <register_fini>:
  402958:	4b02      	ldr	r3, [pc, #8]	; (402964 <register_fini+0xc>)
  40295a:	b113      	cbz	r3, 402962 <register_fini+0xa>
  40295c:	4802      	ldr	r0, [pc, #8]	; (402968 <register_fini+0x10>)
  40295e:	f000 b80d 	b.w	40297c <atexit>
  402962:	4770      	bx	lr
  402964:	00000000 	.word	0x00000000
  402968:	00402be9 	.word	0x00402be9

0040296c <abort>:
  40296c:	b508      	push	{r3, lr}
  40296e:	2006      	movs	r0, #6
  402970:	f001 fab6 	bl	403ee0 <raise>
  402974:	2001      	movs	r0, #1
  402976:	f7fe fe6d 	bl	401654 <_exit>
  40297a:	bf00      	nop

0040297c <atexit>:
  40297c:	2300      	movs	r3, #0
  40297e:	4601      	mov	r1, r0
  402980:	461a      	mov	r2, r3
  402982:	4618      	mov	r0, r3
  402984:	f001 bc30 	b.w	4041e8 <__register_exitproc>

00402988 <__sflush_r>:
  402988:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40298c:	b29a      	uxth	r2, r3
  40298e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402992:	460d      	mov	r5, r1
  402994:	0711      	lsls	r1, r2, #28
  402996:	4680      	mov	r8, r0
  402998:	d43a      	bmi.n	402a10 <__sflush_r+0x88>
  40299a:	686a      	ldr	r2, [r5, #4]
  40299c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4029a0:	2a00      	cmp	r2, #0
  4029a2:	81ab      	strh	r3, [r5, #12]
  4029a4:	dd6f      	ble.n	402a86 <__sflush_r+0xfe>
  4029a6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4029a8:	2c00      	cmp	r4, #0
  4029aa:	d049      	beq.n	402a40 <__sflush_r+0xb8>
  4029ac:	2200      	movs	r2, #0
  4029ae:	b29b      	uxth	r3, r3
  4029b0:	f8d8 6000 	ldr.w	r6, [r8]
  4029b4:	f8c8 2000 	str.w	r2, [r8]
  4029b8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4029bc:	d067      	beq.n	402a8e <__sflush_r+0x106>
  4029be:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4029c0:	075f      	lsls	r7, r3, #29
  4029c2:	d505      	bpl.n	4029d0 <__sflush_r+0x48>
  4029c4:	6869      	ldr	r1, [r5, #4]
  4029c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4029c8:	1a52      	subs	r2, r2, r1
  4029ca:	b10b      	cbz	r3, 4029d0 <__sflush_r+0x48>
  4029cc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4029ce:	1ad2      	subs	r2, r2, r3
  4029d0:	2300      	movs	r3, #0
  4029d2:	69e9      	ldr	r1, [r5, #28]
  4029d4:	4640      	mov	r0, r8
  4029d6:	47a0      	blx	r4
  4029d8:	1c44      	adds	r4, r0, #1
  4029da:	d03c      	beq.n	402a56 <__sflush_r+0xce>
  4029dc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4029e0:	692a      	ldr	r2, [r5, #16]
  4029e2:	602a      	str	r2, [r5, #0]
  4029e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4029e8:	2200      	movs	r2, #0
  4029ea:	81ab      	strh	r3, [r5, #12]
  4029ec:	04db      	lsls	r3, r3, #19
  4029ee:	606a      	str	r2, [r5, #4]
  4029f0:	d447      	bmi.n	402a82 <__sflush_r+0xfa>
  4029f2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4029f4:	f8c8 6000 	str.w	r6, [r8]
  4029f8:	b311      	cbz	r1, 402a40 <__sflush_r+0xb8>
  4029fa:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4029fe:	4299      	cmp	r1, r3
  402a00:	d002      	beq.n	402a08 <__sflush_r+0x80>
  402a02:	4640      	mov	r0, r8
  402a04:	f000 f9de 	bl	402dc4 <_free_r>
  402a08:	2000      	movs	r0, #0
  402a0a:	6328      	str	r0, [r5, #48]	; 0x30
  402a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402a10:	692e      	ldr	r6, [r5, #16]
  402a12:	b1ae      	cbz	r6, 402a40 <__sflush_r+0xb8>
  402a14:	682c      	ldr	r4, [r5, #0]
  402a16:	602e      	str	r6, [r5, #0]
  402a18:	0791      	lsls	r1, r2, #30
  402a1a:	bf0c      	ite	eq
  402a1c:	696b      	ldreq	r3, [r5, #20]
  402a1e:	2300      	movne	r3, #0
  402a20:	1ba4      	subs	r4, r4, r6
  402a22:	60ab      	str	r3, [r5, #8]
  402a24:	e00a      	b.n	402a3c <__sflush_r+0xb4>
  402a26:	4623      	mov	r3, r4
  402a28:	4632      	mov	r2, r6
  402a2a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402a2c:	69e9      	ldr	r1, [r5, #28]
  402a2e:	4640      	mov	r0, r8
  402a30:	47b8      	blx	r7
  402a32:	2800      	cmp	r0, #0
  402a34:	eba4 0400 	sub.w	r4, r4, r0
  402a38:	4406      	add	r6, r0
  402a3a:	dd04      	ble.n	402a46 <__sflush_r+0xbe>
  402a3c:	2c00      	cmp	r4, #0
  402a3e:	dcf2      	bgt.n	402a26 <__sflush_r+0x9e>
  402a40:	2000      	movs	r0, #0
  402a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402a46:	89ab      	ldrh	r3, [r5, #12]
  402a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402a4c:	81ab      	strh	r3, [r5, #12]
  402a4e:	f04f 30ff 	mov.w	r0, #4294967295
  402a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402a56:	f8d8 4000 	ldr.w	r4, [r8]
  402a5a:	2c1d      	cmp	r4, #29
  402a5c:	d8f3      	bhi.n	402a46 <__sflush_r+0xbe>
  402a5e:	4b19      	ldr	r3, [pc, #100]	; (402ac4 <__sflush_r+0x13c>)
  402a60:	40e3      	lsrs	r3, r4
  402a62:	43db      	mvns	r3, r3
  402a64:	f013 0301 	ands.w	r3, r3, #1
  402a68:	d1ed      	bne.n	402a46 <__sflush_r+0xbe>
  402a6a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  402a6e:	606b      	str	r3, [r5, #4]
  402a70:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402a74:	6929      	ldr	r1, [r5, #16]
  402a76:	81ab      	strh	r3, [r5, #12]
  402a78:	04da      	lsls	r2, r3, #19
  402a7a:	6029      	str	r1, [r5, #0]
  402a7c:	d5b9      	bpl.n	4029f2 <__sflush_r+0x6a>
  402a7e:	2c00      	cmp	r4, #0
  402a80:	d1b7      	bne.n	4029f2 <__sflush_r+0x6a>
  402a82:	6528      	str	r0, [r5, #80]	; 0x50
  402a84:	e7b5      	b.n	4029f2 <__sflush_r+0x6a>
  402a86:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402a88:	2a00      	cmp	r2, #0
  402a8a:	dc8c      	bgt.n	4029a6 <__sflush_r+0x1e>
  402a8c:	e7d8      	b.n	402a40 <__sflush_r+0xb8>
  402a8e:	2301      	movs	r3, #1
  402a90:	69e9      	ldr	r1, [r5, #28]
  402a92:	4640      	mov	r0, r8
  402a94:	47a0      	blx	r4
  402a96:	1c43      	adds	r3, r0, #1
  402a98:	4602      	mov	r2, r0
  402a9a:	d002      	beq.n	402aa2 <__sflush_r+0x11a>
  402a9c:	89ab      	ldrh	r3, [r5, #12]
  402a9e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402aa0:	e78e      	b.n	4029c0 <__sflush_r+0x38>
  402aa2:	f8d8 3000 	ldr.w	r3, [r8]
  402aa6:	2b00      	cmp	r3, #0
  402aa8:	d0f8      	beq.n	402a9c <__sflush_r+0x114>
  402aaa:	2b1d      	cmp	r3, #29
  402aac:	d001      	beq.n	402ab2 <__sflush_r+0x12a>
  402aae:	2b16      	cmp	r3, #22
  402ab0:	d102      	bne.n	402ab8 <__sflush_r+0x130>
  402ab2:	f8c8 6000 	str.w	r6, [r8]
  402ab6:	e7c3      	b.n	402a40 <__sflush_r+0xb8>
  402ab8:	89ab      	ldrh	r3, [r5, #12]
  402aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402abe:	81ab      	strh	r3, [r5, #12]
  402ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402ac4:	20400001 	.word	0x20400001

00402ac8 <_fflush_r>:
  402ac8:	b538      	push	{r3, r4, r5, lr}
  402aca:	460d      	mov	r5, r1
  402acc:	4604      	mov	r4, r0
  402ace:	b108      	cbz	r0, 402ad4 <_fflush_r+0xc>
  402ad0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402ad2:	b1bb      	cbz	r3, 402b04 <_fflush_r+0x3c>
  402ad4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402ad8:	b188      	cbz	r0, 402afe <_fflush_r+0x36>
  402ada:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402adc:	07db      	lsls	r3, r3, #31
  402ade:	d401      	bmi.n	402ae4 <_fflush_r+0x1c>
  402ae0:	0581      	lsls	r1, r0, #22
  402ae2:	d517      	bpl.n	402b14 <_fflush_r+0x4c>
  402ae4:	4620      	mov	r0, r4
  402ae6:	4629      	mov	r1, r5
  402ae8:	f7ff ff4e 	bl	402988 <__sflush_r>
  402aec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402aee:	07da      	lsls	r2, r3, #31
  402af0:	4604      	mov	r4, r0
  402af2:	d402      	bmi.n	402afa <_fflush_r+0x32>
  402af4:	89ab      	ldrh	r3, [r5, #12]
  402af6:	059b      	lsls	r3, r3, #22
  402af8:	d507      	bpl.n	402b0a <_fflush_r+0x42>
  402afa:	4620      	mov	r0, r4
  402afc:	bd38      	pop	{r3, r4, r5, pc}
  402afe:	4604      	mov	r4, r0
  402b00:	4620      	mov	r0, r4
  402b02:	bd38      	pop	{r3, r4, r5, pc}
  402b04:	f000 f838 	bl	402b78 <__sinit>
  402b08:	e7e4      	b.n	402ad4 <_fflush_r+0xc>
  402b0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402b0c:	f000 fbf6 	bl	4032fc <__retarget_lock_release_recursive>
  402b10:	4620      	mov	r0, r4
  402b12:	bd38      	pop	{r3, r4, r5, pc}
  402b14:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402b16:	f000 fbef 	bl	4032f8 <__retarget_lock_acquire_recursive>
  402b1a:	e7e3      	b.n	402ae4 <_fflush_r+0x1c>

00402b1c <_cleanup_r>:
  402b1c:	4901      	ldr	r1, [pc, #4]	; (402b24 <_cleanup_r+0x8>)
  402b1e:	f000 bbaf 	b.w	403280 <_fwalk_reent>
  402b22:	bf00      	nop
  402b24:	004042d1 	.word	0x004042d1

00402b28 <std.isra.0>:
  402b28:	b510      	push	{r4, lr}
  402b2a:	2300      	movs	r3, #0
  402b2c:	4604      	mov	r4, r0
  402b2e:	8181      	strh	r1, [r0, #12]
  402b30:	81c2      	strh	r2, [r0, #14]
  402b32:	6003      	str	r3, [r0, #0]
  402b34:	6043      	str	r3, [r0, #4]
  402b36:	6083      	str	r3, [r0, #8]
  402b38:	6643      	str	r3, [r0, #100]	; 0x64
  402b3a:	6103      	str	r3, [r0, #16]
  402b3c:	6143      	str	r3, [r0, #20]
  402b3e:	6183      	str	r3, [r0, #24]
  402b40:	4619      	mov	r1, r3
  402b42:	2208      	movs	r2, #8
  402b44:	305c      	adds	r0, #92	; 0x5c
  402b46:	f7fe febb 	bl	4018c0 <memset>
  402b4a:	4807      	ldr	r0, [pc, #28]	; (402b68 <std.isra.0+0x40>)
  402b4c:	4907      	ldr	r1, [pc, #28]	; (402b6c <std.isra.0+0x44>)
  402b4e:	4a08      	ldr	r2, [pc, #32]	; (402b70 <std.isra.0+0x48>)
  402b50:	4b08      	ldr	r3, [pc, #32]	; (402b74 <std.isra.0+0x4c>)
  402b52:	6220      	str	r0, [r4, #32]
  402b54:	61e4      	str	r4, [r4, #28]
  402b56:	6261      	str	r1, [r4, #36]	; 0x24
  402b58:	62a2      	str	r2, [r4, #40]	; 0x28
  402b5a:	62e3      	str	r3, [r4, #44]	; 0x2c
  402b5c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  402b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402b64:	f000 bbc4 	b.w	4032f0 <__retarget_lock_init_recursive>
  402b68:	00403f1d 	.word	0x00403f1d
  402b6c:	00403f41 	.word	0x00403f41
  402b70:	00403f7d 	.word	0x00403f7d
  402b74:	00403f9d 	.word	0x00403f9d

00402b78 <__sinit>:
  402b78:	b510      	push	{r4, lr}
  402b7a:	4604      	mov	r4, r0
  402b7c:	4812      	ldr	r0, [pc, #72]	; (402bc8 <__sinit+0x50>)
  402b7e:	f000 fbbb 	bl	4032f8 <__retarget_lock_acquire_recursive>
  402b82:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402b84:	b9d2      	cbnz	r2, 402bbc <__sinit+0x44>
  402b86:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  402b8a:	4810      	ldr	r0, [pc, #64]	; (402bcc <__sinit+0x54>)
  402b8c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  402b90:	2103      	movs	r1, #3
  402b92:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  402b96:	63e0      	str	r0, [r4, #60]	; 0x3c
  402b98:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  402b9c:	6860      	ldr	r0, [r4, #4]
  402b9e:	2104      	movs	r1, #4
  402ba0:	f7ff ffc2 	bl	402b28 <std.isra.0>
  402ba4:	2201      	movs	r2, #1
  402ba6:	2109      	movs	r1, #9
  402ba8:	68a0      	ldr	r0, [r4, #8]
  402baa:	f7ff ffbd 	bl	402b28 <std.isra.0>
  402bae:	2202      	movs	r2, #2
  402bb0:	2112      	movs	r1, #18
  402bb2:	68e0      	ldr	r0, [r4, #12]
  402bb4:	f7ff ffb8 	bl	402b28 <std.isra.0>
  402bb8:	2301      	movs	r3, #1
  402bba:	63a3      	str	r3, [r4, #56]	; 0x38
  402bbc:	4802      	ldr	r0, [pc, #8]	; (402bc8 <__sinit+0x50>)
  402bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402bc2:	f000 bb9b 	b.w	4032fc <__retarget_lock_release_recursive>
  402bc6:	bf00      	nop
  402bc8:	204014b4 	.word	0x204014b4
  402bcc:	00402b1d 	.word	0x00402b1d

00402bd0 <__sfp_lock_acquire>:
  402bd0:	4801      	ldr	r0, [pc, #4]	; (402bd8 <__sfp_lock_acquire+0x8>)
  402bd2:	f000 bb91 	b.w	4032f8 <__retarget_lock_acquire_recursive>
  402bd6:	bf00      	nop
  402bd8:	204014c8 	.word	0x204014c8

00402bdc <__sfp_lock_release>:
  402bdc:	4801      	ldr	r0, [pc, #4]	; (402be4 <__sfp_lock_release+0x8>)
  402bde:	f000 bb8d 	b.w	4032fc <__retarget_lock_release_recursive>
  402be2:	bf00      	nop
  402be4:	204014c8 	.word	0x204014c8

00402be8 <__libc_fini_array>:
  402be8:	b538      	push	{r3, r4, r5, lr}
  402bea:	4c0a      	ldr	r4, [pc, #40]	; (402c14 <__libc_fini_array+0x2c>)
  402bec:	4d0a      	ldr	r5, [pc, #40]	; (402c18 <__libc_fini_array+0x30>)
  402bee:	1b64      	subs	r4, r4, r5
  402bf0:	10a4      	asrs	r4, r4, #2
  402bf2:	d00a      	beq.n	402c0a <__libc_fini_array+0x22>
  402bf4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402bf8:	3b01      	subs	r3, #1
  402bfa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402bfe:	3c01      	subs	r4, #1
  402c00:	f855 3904 	ldr.w	r3, [r5], #-4
  402c04:	4798      	blx	r3
  402c06:	2c00      	cmp	r4, #0
  402c08:	d1f9      	bne.n	402bfe <__libc_fini_array+0x16>
  402c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402c0e:	f002 b8a5 	b.w	404d5c <_fini>
  402c12:	bf00      	nop
  402c14:	00404d6c 	.word	0x00404d6c
  402c18:	00404d68 	.word	0x00404d68

00402c1c <__fputwc>:
  402c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402c20:	b082      	sub	sp, #8
  402c22:	4680      	mov	r8, r0
  402c24:	4689      	mov	r9, r1
  402c26:	4614      	mov	r4, r2
  402c28:	f000 fb54 	bl	4032d4 <__locale_mb_cur_max>
  402c2c:	2801      	cmp	r0, #1
  402c2e:	d036      	beq.n	402c9e <__fputwc+0x82>
  402c30:	464a      	mov	r2, r9
  402c32:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402c36:	a901      	add	r1, sp, #4
  402c38:	4640      	mov	r0, r8
  402c3a:	f001 fa87 	bl	40414c <_wcrtomb_r>
  402c3e:	1c42      	adds	r2, r0, #1
  402c40:	4606      	mov	r6, r0
  402c42:	d025      	beq.n	402c90 <__fputwc+0x74>
  402c44:	b3a8      	cbz	r0, 402cb2 <__fputwc+0x96>
  402c46:	f89d e004 	ldrb.w	lr, [sp, #4]
  402c4a:	2500      	movs	r5, #0
  402c4c:	f10d 0a04 	add.w	sl, sp, #4
  402c50:	e009      	b.n	402c66 <__fputwc+0x4a>
  402c52:	6823      	ldr	r3, [r4, #0]
  402c54:	1c5a      	adds	r2, r3, #1
  402c56:	6022      	str	r2, [r4, #0]
  402c58:	f883 e000 	strb.w	lr, [r3]
  402c5c:	3501      	adds	r5, #1
  402c5e:	42b5      	cmp	r5, r6
  402c60:	d227      	bcs.n	402cb2 <__fputwc+0x96>
  402c62:	f815 e00a 	ldrb.w	lr, [r5, sl]
  402c66:	68a3      	ldr	r3, [r4, #8]
  402c68:	3b01      	subs	r3, #1
  402c6a:	2b00      	cmp	r3, #0
  402c6c:	60a3      	str	r3, [r4, #8]
  402c6e:	daf0      	bge.n	402c52 <__fputwc+0x36>
  402c70:	69a7      	ldr	r7, [r4, #24]
  402c72:	42bb      	cmp	r3, r7
  402c74:	4671      	mov	r1, lr
  402c76:	4622      	mov	r2, r4
  402c78:	4640      	mov	r0, r8
  402c7a:	db02      	blt.n	402c82 <__fputwc+0x66>
  402c7c:	f1be 0f0a 	cmp.w	lr, #10
  402c80:	d1e7      	bne.n	402c52 <__fputwc+0x36>
  402c82:	f001 fa0b 	bl	40409c <__swbuf_r>
  402c86:	1c43      	adds	r3, r0, #1
  402c88:	d1e8      	bne.n	402c5c <__fputwc+0x40>
  402c8a:	b002      	add	sp, #8
  402c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402c90:	89a3      	ldrh	r3, [r4, #12]
  402c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402c96:	81a3      	strh	r3, [r4, #12]
  402c98:	b002      	add	sp, #8
  402c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402c9e:	f109 33ff 	add.w	r3, r9, #4294967295
  402ca2:	2bfe      	cmp	r3, #254	; 0xfe
  402ca4:	d8c4      	bhi.n	402c30 <__fputwc+0x14>
  402ca6:	fa5f fe89 	uxtb.w	lr, r9
  402caa:	4606      	mov	r6, r0
  402cac:	f88d e004 	strb.w	lr, [sp, #4]
  402cb0:	e7cb      	b.n	402c4a <__fputwc+0x2e>
  402cb2:	4648      	mov	r0, r9
  402cb4:	b002      	add	sp, #8
  402cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402cba:	bf00      	nop

00402cbc <_fputwc_r>:
  402cbc:	b530      	push	{r4, r5, lr}
  402cbe:	6e53      	ldr	r3, [r2, #100]	; 0x64
  402cc0:	f013 0f01 	tst.w	r3, #1
  402cc4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402cc8:	4614      	mov	r4, r2
  402cca:	b083      	sub	sp, #12
  402ccc:	4605      	mov	r5, r0
  402cce:	b29a      	uxth	r2, r3
  402cd0:	d101      	bne.n	402cd6 <_fputwc_r+0x1a>
  402cd2:	0590      	lsls	r0, r2, #22
  402cd4:	d51c      	bpl.n	402d10 <_fputwc_r+0x54>
  402cd6:	0490      	lsls	r0, r2, #18
  402cd8:	d406      	bmi.n	402ce8 <_fputwc_r+0x2c>
  402cda:	6e62      	ldr	r2, [r4, #100]	; 0x64
  402cdc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402ce0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402ce4:	81a3      	strh	r3, [r4, #12]
  402ce6:	6662      	str	r2, [r4, #100]	; 0x64
  402ce8:	4628      	mov	r0, r5
  402cea:	4622      	mov	r2, r4
  402cec:	f7ff ff96 	bl	402c1c <__fputwc>
  402cf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402cf2:	07da      	lsls	r2, r3, #31
  402cf4:	4605      	mov	r5, r0
  402cf6:	d402      	bmi.n	402cfe <_fputwc_r+0x42>
  402cf8:	89a3      	ldrh	r3, [r4, #12]
  402cfa:	059b      	lsls	r3, r3, #22
  402cfc:	d502      	bpl.n	402d04 <_fputwc_r+0x48>
  402cfe:	4628      	mov	r0, r5
  402d00:	b003      	add	sp, #12
  402d02:	bd30      	pop	{r4, r5, pc}
  402d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402d06:	f000 faf9 	bl	4032fc <__retarget_lock_release_recursive>
  402d0a:	4628      	mov	r0, r5
  402d0c:	b003      	add	sp, #12
  402d0e:	bd30      	pop	{r4, r5, pc}
  402d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402d12:	9101      	str	r1, [sp, #4]
  402d14:	f000 faf0 	bl	4032f8 <__retarget_lock_acquire_recursive>
  402d18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402d1c:	9901      	ldr	r1, [sp, #4]
  402d1e:	b29a      	uxth	r2, r3
  402d20:	e7d9      	b.n	402cd6 <_fputwc_r+0x1a>
  402d22:	bf00      	nop

00402d24 <_malloc_trim_r>:
  402d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402d26:	4f24      	ldr	r7, [pc, #144]	; (402db8 <_malloc_trim_r+0x94>)
  402d28:	460c      	mov	r4, r1
  402d2a:	4606      	mov	r6, r0
  402d2c:	f000 fee4 	bl	403af8 <__malloc_lock>
  402d30:	68bb      	ldr	r3, [r7, #8]
  402d32:	685d      	ldr	r5, [r3, #4]
  402d34:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402d38:	310f      	adds	r1, #15
  402d3a:	f025 0503 	bic.w	r5, r5, #3
  402d3e:	4429      	add	r1, r5
  402d40:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402d44:	f021 010f 	bic.w	r1, r1, #15
  402d48:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  402d4c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402d50:	db07      	blt.n	402d62 <_malloc_trim_r+0x3e>
  402d52:	2100      	movs	r1, #0
  402d54:	4630      	mov	r0, r6
  402d56:	f001 f881 	bl	403e5c <_sbrk_r>
  402d5a:	68bb      	ldr	r3, [r7, #8]
  402d5c:	442b      	add	r3, r5
  402d5e:	4298      	cmp	r0, r3
  402d60:	d004      	beq.n	402d6c <_malloc_trim_r+0x48>
  402d62:	4630      	mov	r0, r6
  402d64:	f000 fece 	bl	403b04 <__malloc_unlock>
  402d68:	2000      	movs	r0, #0
  402d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402d6c:	4261      	negs	r1, r4
  402d6e:	4630      	mov	r0, r6
  402d70:	f001 f874 	bl	403e5c <_sbrk_r>
  402d74:	3001      	adds	r0, #1
  402d76:	d00d      	beq.n	402d94 <_malloc_trim_r+0x70>
  402d78:	4b10      	ldr	r3, [pc, #64]	; (402dbc <_malloc_trim_r+0x98>)
  402d7a:	68ba      	ldr	r2, [r7, #8]
  402d7c:	6819      	ldr	r1, [r3, #0]
  402d7e:	1b2d      	subs	r5, r5, r4
  402d80:	f045 0501 	orr.w	r5, r5, #1
  402d84:	4630      	mov	r0, r6
  402d86:	1b09      	subs	r1, r1, r4
  402d88:	6055      	str	r5, [r2, #4]
  402d8a:	6019      	str	r1, [r3, #0]
  402d8c:	f000 feba 	bl	403b04 <__malloc_unlock>
  402d90:	2001      	movs	r0, #1
  402d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402d94:	2100      	movs	r1, #0
  402d96:	4630      	mov	r0, r6
  402d98:	f001 f860 	bl	403e5c <_sbrk_r>
  402d9c:	68ba      	ldr	r2, [r7, #8]
  402d9e:	1a83      	subs	r3, r0, r2
  402da0:	2b0f      	cmp	r3, #15
  402da2:	ddde      	ble.n	402d62 <_malloc_trim_r+0x3e>
  402da4:	4c06      	ldr	r4, [pc, #24]	; (402dc0 <_malloc_trim_r+0x9c>)
  402da6:	4905      	ldr	r1, [pc, #20]	; (402dbc <_malloc_trim_r+0x98>)
  402da8:	6824      	ldr	r4, [r4, #0]
  402daa:	f043 0301 	orr.w	r3, r3, #1
  402dae:	1b00      	subs	r0, r0, r4
  402db0:	6053      	str	r3, [r2, #4]
  402db2:	6008      	str	r0, [r1, #0]
  402db4:	e7d5      	b.n	402d62 <_malloc_trim_r+0x3e>
  402db6:	bf00      	nop
  402db8:	204005b0 	.word	0x204005b0
  402dbc:	20401468 	.word	0x20401468
  402dc0:	204009b8 	.word	0x204009b8

00402dc4 <_free_r>:
  402dc4:	2900      	cmp	r1, #0
  402dc6:	d044      	beq.n	402e52 <_free_r+0x8e>
  402dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402dcc:	460d      	mov	r5, r1
  402dce:	4680      	mov	r8, r0
  402dd0:	f000 fe92 	bl	403af8 <__malloc_lock>
  402dd4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402dd8:	4969      	ldr	r1, [pc, #420]	; (402f80 <_free_r+0x1bc>)
  402dda:	f027 0301 	bic.w	r3, r7, #1
  402dde:	f1a5 0408 	sub.w	r4, r5, #8
  402de2:	18e2      	adds	r2, r4, r3
  402de4:	688e      	ldr	r6, [r1, #8]
  402de6:	6850      	ldr	r0, [r2, #4]
  402de8:	42b2      	cmp	r2, r6
  402dea:	f020 0003 	bic.w	r0, r0, #3
  402dee:	d05e      	beq.n	402eae <_free_r+0xea>
  402df0:	07fe      	lsls	r6, r7, #31
  402df2:	6050      	str	r0, [r2, #4]
  402df4:	d40b      	bmi.n	402e0e <_free_r+0x4a>
  402df6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  402dfa:	1be4      	subs	r4, r4, r7
  402dfc:	f101 0e08 	add.w	lr, r1, #8
  402e00:	68a5      	ldr	r5, [r4, #8]
  402e02:	4575      	cmp	r5, lr
  402e04:	443b      	add	r3, r7
  402e06:	d06d      	beq.n	402ee4 <_free_r+0x120>
  402e08:	68e7      	ldr	r7, [r4, #12]
  402e0a:	60ef      	str	r7, [r5, #12]
  402e0c:	60bd      	str	r5, [r7, #8]
  402e0e:	1815      	adds	r5, r2, r0
  402e10:	686d      	ldr	r5, [r5, #4]
  402e12:	07ed      	lsls	r5, r5, #31
  402e14:	d53e      	bpl.n	402e94 <_free_r+0xd0>
  402e16:	f043 0201 	orr.w	r2, r3, #1
  402e1a:	6062      	str	r2, [r4, #4]
  402e1c:	50e3      	str	r3, [r4, r3]
  402e1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402e22:	d217      	bcs.n	402e54 <_free_r+0x90>
  402e24:	08db      	lsrs	r3, r3, #3
  402e26:	1c58      	adds	r0, r3, #1
  402e28:	109a      	asrs	r2, r3, #2
  402e2a:	684d      	ldr	r5, [r1, #4]
  402e2c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  402e30:	60a7      	str	r7, [r4, #8]
  402e32:	2301      	movs	r3, #1
  402e34:	4093      	lsls	r3, r2
  402e36:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  402e3a:	432b      	orrs	r3, r5
  402e3c:	3a08      	subs	r2, #8
  402e3e:	60e2      	str	r2, [r4, #12]
  402e40:	604b      	str	r3, [r1, #4]
  402e42:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  402e46:	60fc      	str	r4, [r7, #12]
  402e48:	4640      	mov	r0, r8
  402e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402e4e:	f000 be59 	b.w	403b04 <__malloc_unlock>
  402e52:	4770      	bx	lr
  402e54:	0a5a      	lsrs	r2, r3, #9
  402e56:	2a04      	cmp	r2, #4
  402e58:	d852      	bhi.n	402f00 <_free_r+0x13c>
  402e5a:	099a      	lsrs	r2, r3, #6
  402e5c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  402e60:	00ff      	lsls	r7, r7, #3
  402e62:	f102 0538 	add.w	r5, r2, #56	; 0x38
  402e66:	19c8      	adds	r0, r1, r7
  402e68:	59ca      	ldr	r2, [r1, r7]
  402e6a:	3808      	subs	r0, #8
  402e6c:	4290      	cmp	r0, r2
  402e6e:	d04f      	beq.n	402f10 <_free_r+0x14c>
  402e70:	6851      	ldr	r1, [r2, #4]
  402e72:	f021 0103 	bic.w	r1, r1, #3
  402e76:	428b      	cmp	r3, r1
  402e78:	d232      	bcs.n	402ee0 <_free_r+0x11c>
  402e7a:	6892      	ldr	r2, [r2, #8]
  402e7c:	4290      	cmp	r0, r2
  402e7e:	d1f7      	bne.n	402e70 <_free_r+0xac>
  402e80:	68c3      	ldr	r3, [r0, #12]
  402e82:	60a0      	str	r0, [r4, #8]
  402e84:	60e3      	str	r3, [r4, #12]
  402e86:	609c      	str	r4, [r3, #8]
  402e88:	60c4      	str	r4, [r0, #12]
  402e8a:	4640      	mov	r0, r8
  402e8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402e90:	f000 be38 	b.w	403b04 <__malloc_unlock>
  402e94:	6895      	ldr	r5, [r2, #8]
  402e96:	4f3b      	ldr	r7, [pc, #236]	; (402f84 <_free_r+0x1c0>)
  402e98:	42bd      	cmp	r5, r7
  402e9a:	4403      	add	r3, r0
  402e9c:	d040      	beq.n	402f20 <_free_r+0x15c>
  402e9e:	68d0      	ldr	r0, [r2, #12]
  402ea0:	60e8      	str	r0, [r5, #12]
  402ea2:	f043 0201 	orr.w	r2, r3, #1
  402ea6:	6085      	str	r5, [r0, #8]
  402ea8:	6062      	str	r2, [r4, #4]
  402eaa:	50e3      	str	r3, [r4, r3]
  402eac:	e7b7      	b.n	402e1e <_free_r+0x5a>
  402eae:	07ff      	lsls	r7, r7, #31
  402eb0:	4403      	add	r3, r0
  402eb2:	d407      	bmi.n	402ec4 <_free_r+0x100>
  402eb4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402eb8:	1aa4      	subs	r4, r4, r2
  402eba:	4413      	add	r3, r2
  402ebc:	68a0      	ldr	r0, [r4, #8]
  402ebe:	68e2      	ldr	r2, [r4, #12]
  402ec0:	60c2      	str	r2, [r0, #12]
  402ec2:	6090      	str	r0, [r2, #8]
  402ec4:	4a30      	ldr	r2, [pc, #192]	; (402f88 <_free_r+0x1c4>)
  402ec6:	6812      	ldr	r2, [r2, #0]
  402ec8:	f043 0001 	orr.w	r0, r3, #1
  402ecc:	4293      	cmp	r3, r2
  402ece:	6060      	str	r0, [r4, #4]
  402ed0:	608c      	str	r4, [r1, #8]
  402ed2:	d3b9      	bcc.n	402e48 <_free_r+0x84>
  402ed4:	4b2d      	ldr	r3, [pc, #180]	; (402f8c <_free_r+0x1c8>)
  402ed6:	4640      	mov	r0, r8
  402ed8:	6819      	ldr	r1, [r3, #0]
  402eda:	f7ff ff23 	bl	402d24 <_malloc_trim_r>
  402ede:	e7b3      	b.n	402e48 <_free_r+0x84>
  402ee0:	4610      	mov	r0, r2
  402ee2:	e7cd      	b.n	402e80 <_free_r+0xbc>
  402ee4:	1811      	adds	r1, r2, r0
  402ee6:	6849      	ldr	r1, [r1, #4]
  402ee8:	07c9      	lsls	r1, r1, #31
  402eea:	d444      	bmi.n	402f76 <_free_r+0x1b2>
  402eec:	6891      	ldr	r1, [r2, #8]
  402eee:	68d2      	ldr	r2, [r2, #12]
  402ef0:	60ca      	str	r2, [r1, #12]
  402ef2:	4403      	add	r3, r0
  402ef4:	f043 0001 	orr.w	r0, r3, #1
  402ef8:	6091      	str	r1, [r2, #8]
  402efa:	6060      	str	r0, [r4, #4]
  402efc:	50e3      	str	r3, [r4, r3]
  402efe:	e7a3      	b.n	402e48 <_free_r+0x84>
  402f00:	2a14      	cmp	r2, #20
  402f02:	d816      	bhi.n	402f32 <_free_r+0x16e>
  402f04:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402f08:	00ff      	lsls	r7, r7, #3
  402f0a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  402f0e:	e7aa      	b.n	402e66 <_free_r+0xa2>
  402f10:	10aa      	asrs	r2, r5, #2
  402f12:	2301      	movs	r3, #1
  402f14:	684d      	ldr	r5, [r1, #4]
  402f16:	4093      	lsls	r3, r2
  402f18:	432b      	orrs	r3, r5
  402f1a:	604b      	str	r3, [r1, #4]
  402f1c:	4603      	mov	r3, r0
  402f1e:	e7b0      	b.n	402e82 <_free_r+0xbe>
  402f20:	f043 0201 	orr.w	r2, r3, #1
  402f24:	614c      	str	r4, [r1, #20]
  402f26:	610c      	str	r4, [r1, #16]
  402f28:	60e5      	str	r5, [r4, #12]
  402f2a:	60a5      	str	r5, [r4, #8]
  402f2c:	6062      	str	r2, [r4, #4]
  402f2e:	50e3      	str	r3, [r4, r3]
  402f30:	e78a      	b.n	402e48 <_free_r+0x84>
  402f32:	2a54      	cmp	r2, #84	; 0x54
  402f34:	d806      	bhi.n	402f44 <_free_r+0x180>
  402f36:	0b1a      	lsrs	r2, r3, #12
  402f38:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  402f3c:	00ff      	lsls	r7, r7, #3
  402f3e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  402f42:	e790      	b.n	402e66 <_free_r+0xa2>
  402f44:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402f48:	d806      	bhi.n	402f58 <_free_r+0x194>
  402f4a:	0bda      	lsrs	r2, r3, #15
  402f4c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  402f50:	00ff      	lsls	r7, r7, #3
  402f52:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402f56:	e786      	b.n	402e66 <_free_r+0xa2>
  402f58:	f240 5054 	movw	r0, #1364	; 0x554
  402f5c:	4282      	cmp	r2, r0
  402f5e:	d806      	bhi.n	402f6e <_free_r+0x1aa>
  402f60:	0c9a      	lsrs	r2, r3, #18
  402f62:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  402f66:	00ff      	lsls	r7, r7, #3
  402f68:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  402f6c:	e77b      	b.n	402e66 <_free_r+0xa2>
  402f6e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  402f72:	257e      	movs	r5, #126	; 0x7e
  402f74:	e777      	b.n	402e66 <_free_r+0xa2>
  402f76:	f043 0101 	orr.w	r1, r3, #1
  402f7a:	6061      	str	r1, [r4, #4]
  402f7c:	6013      	str	r3, [r2, #0]
  402f7e:	e763      	b.n	402e48 <_free_r+0x84>
  402f80:	204005b0 	.word	0x204005b0
  402f84:	204005b8 	.word	0x204005b8
  402f88:	204009bc 	.word	0x204009bc
  402f8c:	20401498 	.word	0x20401498

00402f90 <__sfvwrite_r>:
  402f90:	6893      	ldr	r3, [r2, #8]
  402f92:	2b00      	cmp	r3, #0
  402f94:	d073      	beq.n	40307e <__sfvwrite_r+0xee>
  402f96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402f9a:	898b      	ldrh	r3, [r1, #12]
  402f9c:	b083      	sub	sp, #12
  402f9e:	460c      	mov	r4, r1
  402fa0:	0719      	lsls	r1, r3, #28
  402fa2:	9000      	str	r0, [sp, #0]
  402fa4:	4616      	mov	r6, r2
  402fa6:	d526      	bpl.n	402ff6 <__sfvwrite_r+0x66>
  402fa8:	6922      	ldr	r2, [r4, #16]
  402faa:	b322      	cbz	r2, 402ff6 <__sfvwrite_r+0x66>
  402fac:	f013 0002 	ands.w	r0, r3, #2
  402fb0:	6835      	ldr	r5, [r6, #0]
  402fb2:	d02c      	beq.n	40300e <__sfvwrite_r+0x7e>
  402fb4:	f04f 0900 	mov.w	r9, #0
  402fb8:	4fb0      	ldr	r7, [pc, #704]	; (40327c <__sfvwrite_r+0x2ec>)
  402fba:	46c8      	mov	r8, r9
  402fbc:	46b2      	mov	sl, r6
  402fbe:	45b8      	cmp	r8, r7
  402fc0:	4643      	mov	r3, r8
  402fc2:	464a      	mov	r2, r9
  402fc4:	bf28      	it	cs
  402fc6:	463b      	movcs	r3, r7
  402fc8:	9800      	ldr	r0, [sp, #0]
  402fca:	f1b8 0f00 	cmp.w	r8, #0
  402fce:	d050      	beq.n	403072 <__sfvwrite_r+0xe2>
  402fd0:	69e1      	ldr	r1, [r4, #28]
  402fd2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402fd4:	47b0      	blx	r6
  402fd6:	2800      	cmp	r0, #0
  402fd8:	dd58      	ble.n	40308c <__sfvwrite_r+0xfc>
  402fda:	f8da 3008 	ldr.w	r3, [sl, #8]
  402fde:	1a1b      	subs	r3, r3, r0
  402fe0:	4481      	add	r9, r0
  402fe2:	eba8 0800 	sub.w	r8, r8, r0
  402fe6:	f8ca 3008 	str.w	r3, [sl, #8]
  402fea:	2b00      	cmp	r3, #0
  402fec:	d1e7      	bne.n	402fbe <__sfvwrite_r+0x2e>
  402fee:	2000      	movs	r0, #0
  402ff0:	b003      	add	sp, #12
  402ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ff6:	4621      	mov	r1, r4
  402ff8:	9800      	ldr	r0, [sp, #0]
  402ffa:	f7ff fc49 	bl	402890 <__swsetup_r>
  402ffe:	2800      	cmp	r0, #0
  403000:	f040 8133 	bne.w	40326a <__sfvwrite_r+0x2da>
  403004:	89a3      	ldrh	r3, [r4, #12]
  403006:	6835      	ldr	r5, [r6, #0]
  403008:	f013 0002 	ands.w	r0, r3, #2
  40300c:	d1d2      	bne.n	402fb4 <__sfvwrite_r+0x24>
  40300e:	f013 0901 	ands.w	r9, r3, #1
  403012:	d145      	bne.n	4030a0 <__sfvwrite_r+0x110>
  403014:	464f      	mov	r7, r9
  403016:	9601      	str	r6, [sp, #4]
  403018:	b337      	cbz	r7, 403068 <__sfvwrite_r+0xd8>
  40301a:	059a      	lsls	r2, r3, #22
  40301c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  403020:	f140 8083 	bpl.w	40312a <__sfvwrite_r+0x19a>
  403024:	4547      	cmp	r7, r8
  403026:	46c3      	mov	fp, r8
  403028:	f0c0 80ab 	bcc.w	403182 <__sfvwrite_r+0x1f2>
  40302c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  403030:	f040 80ac 	bne.w	40318c <__sfvwrite_r+0x1fc>
  403034:	6820      	ldr	r0, [r4, #0]
  403036:	46ba      	mov	sl, r7
  403038:	465a      	mov	r2, fp
  40303a:	4649      	mov	r1, r9
  40303c:	f000 fcf8 	bl	403a30 <memmove>
  403040:	68a2      	ldr	r2, [r4, #8]
  403042:	6823      	ldr	r3, [r4, #0]
  403044:	eba2 0208 	sub.w	r2, r2, r8
  403048:	445b      	add	r3, fp
  40304a:	60a2      	str	r2, [r4, #8]
  40304c:	6023      	str	r3, [r4, #0]
  40304e:	9a01      	ldr	r2, [sp, #4]
  403050:	6893      	ldr	r3, [r2, #8]
  403052:	eba3 030a 	sub.w	r3, r3, sl
  403056:	44d1      	add	r9, sl
  403058:	eba7 070a 	sub.w	r7, r7, sl
  40305c:	6093      	str	r3, [r2, #8]
  40305e:	2b00      	cmp	r3, #0
  403060:	d0c5      	beq.n	402fee <__sfvwrite_r+0x5e>
  403062:	89a3      	ldrh	r3, [r4, #12]
  403064:	2f00      	cmp	r7, #0
  403066:	d1d8      	bne.n	40301a <__sfvwrite_r+0x8a>
  403068:	f8d5 9000 	ldr.w	r9, [r5]
  40306c:	686f      	ldr	r7, [r5, #4]
  40306e:	3508      	adds	r5, #8
  403070:	e7d2      	b.n	403018 <__sfvwrite_r+0x88>
  403072:	f8d5 9000 	ldr.w	r9, [r5]
  403076:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40307a:	3508      	adds	r5, #8
  40307c:	e79f      	b.n	402fbe <__sfvwrite_r+0x2e>
  40307e:	2000      	movs	r0, #0
  403080:	4770      	bx	lr
  403082:	4621      	mov	r1, r4
  403084:	9800      	ldr	r0, [sp, #0]
  403086:	f7ff fd1f 	bl	402ac8 <_fflush_r>
  40308a:	b370      	cbz	r0, 4030ea <__sfvwrite_r+0x15a>
  40308c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403094:	f04f 30ff 	mov.w	r0, #4294967295
  403098:	81a3      	strh	r3, [r4, #12]
  40309a:	b003      	add	sp, #12
  40309c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4030a0:	4681      	mov	r9, r0
  4030a2:	4633      	mov	r3, r6
  4030a4:	464e      	mov	r6, r9
  4030a6:	46a8      	mov	r8, r5
  4030a8:	469a      	mov	sl, r3
  4030aa:	464d      	mov	r5, r9
  4030ac:	b34e      	cbz	r6, 403102 <__sfvwrite_r+0x172>
  4030ae:	b380      	cbz	r0, 403112 <__sfvwrite_r+0x182>
  4030b0:	6820      	ldr	r0, [r4, #0]
  4030b2:	6923      	ldr	r3, [r4, #16]
  4030b4:	6962      	ldr	r2, [r4, #20]
  4030b6:	45b1      	cmp	r9, r6
  4030b8:	46cb      	mov	fp, r9
  4030ba:	bf28      	it	cs
  4030bc:	46b3      	movcs	fp, r6
  4030be:	4298      	cmp	r0, r3
  4030c0:	465f      	mov	r7, fp
  4030c2:	d904      	bls.n	4030ce <__sfvwrite_r+0x13e>
  4030c4:	68a3      	ldr	r3, [r4, #8]
  4030c6:	4413      	add	r3, r2
  4030c8:	459b      	cmp	fp, r3
  4030ca:	f300 80a6 	bgt.w	40321a <__sfvwrite_r+0x28a>
  4030ce:	4593      	cmp	fp, r2
  4030d0:	db4b      	blt.n	40316a <__sfvwrite_r+0x1da>
  4030d2:	4613      	mov	r3, r2
  4030d4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4030d6:	69e1      	ldr	r1, [r4, #28]
  4030d8:	9800      	ldr	r0, [sp, #0]
  4030da:	462a      	mov	r2, r5
  4030dc:	47b8      	blx	r7
  4030de:	1e07      	subs	r7, r0, #0
  4030e0:	ddd4      	ble.n	40308c <__sfvwrite_r+0xfc>
  4030e2:	ebb9 0907 	subs.w	r9, r9, r7
  4030e6:	d0cc      	beq.n	403082 <__sfvwrite_r+0xf2>
  4030e8:	2001      	movs	r0, #1
  4030ea:	f8da 3008 	ldr.w	r3, [sl, #8]
  4030ee:	1bdb      	subs	r3, r3, r7
  4030f0:	443d      	add	r5, r7
  4030f2:	1bf6      	subs	r6, r6, r7
  4030f4:	f8ca 3008 	str.w	r3, [sl, #8]
  4030f8:	2b00      	cmp	r3, #0
  4030fa:	f43f af78 	beq.w	402fee <__sfvwrite_r+0x5e>
  4030fe:	2e00      	cmp	r6, #0
  403100:	d1d5      	bne.n	4030ae <__sfvwrite_r+0x11e>
  403102:	f108 0308 	add.w	r3, r8, #8
  403106:	e913 0060 	ldmdb	r3, {r5, r6}
  40310a:	4698      	mov	r8, r3
  40310c:	3308      	adds	r3, #8
  40310e:	2e00      	cmp	r6, #0
  403110:	d0f9      	beq.n	403106 <__sfvwrite_r+0x176>
  403112:	4632      	mov	r2, r6
  403114:	210a      	movs	r1, #10
  403116:	4628      	mov	r0, r5
  403118:	f000 fc3a 	bl	403990 <memchr>
  40311c:	2800      	cmp	r0, #0
  40311e:	f000 80a1 	beq.w	403264 <__sfvwrite_r+0x2d4>
  403122:	3001      	adds	r0, #1
  403124:	eba0 0905 	sub.w	r9, r0, r5
  403128:	e7c2      	b.n	4030b0 <__sfvwrite_r+0x120>
  40312a:	6820      	ldr	r0, [r4, #0]
  40312c:	6923      	ldr	r3, [r4, #16]
  40312e:	4298      	cmp	r0, r3
  403130:	d802      	bhi.n	403138 <__sfvwrite_r+0x1a8>
  403132:	6963      	ldr	r3, [r4, #20]
  403134:	429f      	cmp	r7, r3
  403136:	d25d      	bcs.n	4031f4 <__sfvwrite_r+0x264>
  403138:	45b8      	cmp	r8, r7
  40313a:	bf28      	it	cs
  40313c:	46b8      	movcs	r8, r7
  40313e:	4642      	mov	r2, r8
  403140:	4649      	mov	r1, r9
  403142:	f000 fc75 	bl	403a30 <memmove>
  403146:	68a3      	ldr	r3, [r4, #8]
  403148:	6822      	ldr	r2, [r4, #0]
  40314a:	eba3 0308 	sub.w	r3, r3, r8
  40314e:	4442      	add	r2, r8
  403150:	60a3      	str	r3, [r4, #8]
  403152:	6022      	str	r2, [r4, #0]
  403154:	b10b      	cbz	r3, 40315a <__sfvwrite_r+0x1ca>
  403156:	46c2      	mov	sl, r8
  403158:	e779      	b.n	40304e <__sfvwrite_r+0xbe>
  40315a:	4621      	mov	r1, r4
  40315c:	9800      	ldr	r0, [sp, #0]
  40315e:	f7ff fcb3 	bl	402ac8 <_fflush_r>
  403162:	2800      	cmp	r0, #0
  403164:	d192      	bne.n	40308c <__sfvwrite_r+0xfc>
  403166:	46c2      	mov	sl, r8
  403168:	e771      	b.n	40304e <__sfvwrite_r+0xbe>
  40316a:	465a      	mov	r2, fp
  40316c:	4629      	mov	r1, r5
  40316e:	f000 fc5f 	bl	403a30 <memmove>
  403172:	68a2      	ldr	r2, [r4, #8]
  403174:	6823      	ldr	r3, [r4, #0]
  403176:	eba2 020b 	sub.w	r2, r2, fp
  40317a:	445b      	add	r3, fp
  40317c:	60a2      	str	r2, [r4, #8]
  40317e:	6023      	str	r3, [r4, #0]
  403180:	e7af      	b.n	4030e2 <__sfvwrite_r+0x152>
  403182:	6820      	ldr	r0, [r4, #0]
  403184:	46b8      	mov	r8, r7
  403186:	46ba      	mov	sl, r7
  403188:	46bb      	mov	fp, r7
  40318a:	e755      	b.n	403038 <__sfvwrite_r+0xa8>
  40318c:	6962      	ldr	r2, [r4, #20]
  40318e:	6820      	ldr	r0, [r4, #0]
  403190:	6921      	ldr	r1, [r4, #16]
  403192:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  403196:	eba0 0a01 	sub.w	sl, r0, r1
  40319a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40319e:	f10a 0001 	add.w	r0, sl, #1
  4031a2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4031a6:	4438      	add	r0, r7
  4031a8:	4540      	cmp	r0, r8
  4031aa:	4642      	mov	r2, r8
  4031ac:	bf84      	itt	hi
  4031ae:	4680      	movhi	r8, r0
  4031b0:	4642      	movhi	r2, r8
  4031b2:	055b      	lsls	r3, r3, #21
  4031b4:	d544      	bpl.n	403240 <__sfvwrite_r+0x2b0>
  4031b6:	4611      	mov	r1, r2
  4031b8:	9800      	ldr	r0, [sp, #0]
  4031ba:	f000 f921 	bl	403400 <_malloc_r>
  4031be:	4683      	mov	fp, r0
  4031c0:	2800      	cmp	r0, #0
  4031c2:	d055      	beq.n	403270 <__sfvwrite_r+0x2e0>
  4031c4:	4652      	mov	r2, sl
  4031c6:	6921      	ldr	r1, [r4, #16]
  4031c8:	f7fe fae0 	bl	40178c <memcpy>
  4031cc:	89a3      	ldrh	r3, [r4, #12]
  4031ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4031d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4031d6:	81a3      	strh	r3, [r4, #12]
  4031d8:	eb0b 000a 	add.w	r0, fp, sl
  4031dc:	eba8 030a 	sub.w	r3, r8, sl
  4031e0:	f8c4 b010 	str.w	fp, [r4, #16]
  4031e4:	f8c4 8014 	str.w	r8, [r4, #20]
  4031e8:	6020      	str	r0, [r4, #0]
  4031ea:	60a3      	str	r3, [r4, #8]
  4031ec:	46b8      	mov	r8, r7
  4031ee:	46ba      	mov	sl, r7
  4031f0:	46bb      	mov	fp, r7
  4031f2:	e721      	b.n	403038 <__sfvwrite_r+0xa8>
  4031f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4031f8:	42b9      	cmp	r1, r7
  4031fa:	bf28      	it	cs
  4031fc:	4639      	movcs	r1, r7
  4031fe:	464a      	mov	r2, r9
  403200:	fb91 f1f3 	sdiv	r1, r1, r3
  403204:	9800      	ldr	r0, [sp, #0]
  403206:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403208:	fb03 f301 	mul.w	r3, r3, r1
  40320c:	69e1      	ldr	r1, [r4, #28]
  40320e:	47b0      	blx	r6
  403210:	f1b0 0a00 	subs.w	sl, r0, #0
  403214:	f73f af1b 	bgt.w	40304e <__sfvwrite_r+0xbe>
  403218:	e738      	b.n	40308c <__sfvwrite_r+0xfc>
  40321a:	461a      	mov	r2, r3
  40321c:	4629      	mov	r1, r5
  40321e:	9301      	str	r3, [sp, #4]
  403220:	f000 fc06 	bl	403a30 <memmove>
  403224:	6822      	ldr	r2, [r4, #0]
  403226:	9b01      	ldr	r3, [sp, #4]
  403228:	9800      	ldr	r0, [sp, #0]
  40322a:	441a      	add	r2, r3
  40322c:	6022      	str	r2, [r4, #0]
  40322e:	4621      	mov	r1, r4
  403230:	f7ff fc4a 	bl	402ac8 <_fflush_r>
  403234:	9b01      	ldr	r3, [sp, #4]
  403236:	2800      	cmp	r0, #0
  403238:	f47f af28 	bne.w	40308c <__sfvwrite_r+0xfc>
  40323c:	461f      	mov	r7, r3
  40323e:	e750      	b.n	4030e2 <__sfvwrite_r+0x152>
  403240:	9800      	ldr	r0, [sp, #0]
  403242:	f000 fc65 	bl	403b10 <_realloc_r>
  403246:	4683      	mov	fp, r0
  403248:	2800      	cmp	r0, #0
  40324a:	d1c5      	bne.n	4031d8 <__sfvwrite_r+0x248>
  40324c:	9d00      	ldr	r5, [sp, #0]
  40324e:	6921      	ldr	r1, [r4, #16]
  403250:	4628      	mov	r0, r5
  403252:	f7ff fdb7 	bl	402dc4 <_free_r>
  403256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40325a:	220c      	movs	r2, #12
  40325c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  403260:	602a      	str	r2, [r5, #0]
  403262:	e715      	b.n	403090 <__sfvwrite_r+0x100>
  403264:	f106 0901 	add.w	r9, r6, #1
  403268:	e722      	b.n	4030b0 <__sfvwrite_r+0x120>
  40326a:	f04f 30ff 	mov.w	r0, #4294967295
  40326e:	e6bf      	b.n	402ff0 <__sfvwrite_r+0x60>
  403270:	9a00      	ldr	r2, [sp, #0]
  403272:	230c      	movs	r3, #12
  403274:	6013      	str	r3, [r2, #0]
  403276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40327a:	e709      	b.n	403090 <__sfvwrite_r+0x100>
  40327c:	7ffffc00 	.word	0x7ffffc00

00403280 <_fwalk_reent>:
  403280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403284:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  403288:	d01f      	beq.n	4032ca <_fwalk_reent+0x4a>
  40328a:	4688      	mov	r8, r1
  40328c:	4606      	mov	r6, r0
  40328e:	f04f 0900 	mov.w	r9, #0
  403292:	687d      	ldr	r5, [r7, #4]
  403294:	68bc      	ldr	r4, [r7, #8]
  403296:	3d01      	subs	r5, #1
  403298:	d411      	bmi.n	4032be <_fwalk_reent+0x3e>
  40329a:	89a3      	ldrh	r3, [r4, #12]
  40329c:	2b01      	cmp	r3, #1
  40329e:	f105 35ff 	add.w	r5, r5, #4294967295
  4032a2:	d908      	bls.n	4032b6 <_fwalk_reent+0x36>
  4032a4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4032a8:	3301      	adds	r3, #1
  4032aa:	4621      	mov	r1, r4
  4032ac:	4630      	mov	r0, r6
  4032ae:	d002      	beq.n	4032b6 <_fwalk_reent+0x36>
  4032b0:	47c0      	blx	r8
  4032b2:	ea49 0900 	orr.w	r9, r9, r0
  4032b6:	1c6b      	adds	r3, r5, #1
  4032b8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4032bc:	d1ed      	bne.n	40329a <_fwalk_reent+0x1a>
  4032be:	683f      	ldr	r7, [r7, #0]
  4032c0:	2f00      	cmp	r7, #0
  4032c2:	d1e6      	bne.n	403292 <_fwalk_reent+0x12>
  4032c4:	4648      	mov	r0, r9
  4032c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4032ca:	46b9      	mov	r9, r7
  4032cc:	4648      	mov	r0, r9
  4032ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4032d2:	bf00      	nop

004032d4 <__locale_mb_cur_max>:
  4032d4:	4b04      	ldr	r3, [pc, #16]	; (4032e8 <__locale_mb_cur_max+0x14>)
  4032d6:	4a05      	ldr	r2, [pc, #20]	; (4032ec <__locale_mb_cur_max+0x18>)
  4032d8:	681b      	ldr	r3, [r3, #0]
  4032da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4032dc:	2b00      	cmp	r3, #0
  4032de:	bf08      	it	eq
  4032e0:	4613      	moveq	r3, r2
  4032e2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4032e6:	4770      	bx	lr
  4032e8:	20400014 	.word	0x20400014
  4032ec:	20400444 	.word	0x20400444

004032f0 <__retarget_lock_init_recursive>:
  4032f0:	4770      	bx	lr
  4032f2:	bf00      	nop

004032f4 <__retarget_lock_close_recursive>:
  4032f4:	4770      	bx	lr
  4032f6:	bf00      	nop

004032f8 <__retarget_lock_acquire_recursive>:
  4032f8:	4770      	bx	lr
  4032fa:	bf00      	nop

004032fc <__retarget_lock_release_recursive>:
  4032fc:	4770      	bx	lr
  4032fe:	bf00      	nop

00403300 <__swhatbuf_r>:
  403300:	b570      	push	{r4, r5, r6, lr}
  403302:	460c      	mov	r4, r1
  403304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403308:	2900      	cmp	r1, #0
  40330a:	b090      	sub	sp, #64	; 0x40
  40330c:	4615      	mov	r5, r2
  40330e:	461e      	mov	r6, r3
  403310:	db14      	blt.n	40333c <__swhatbuf_r+0x3c>
  403312:	aa01      	add	r2, sp, #4
  403314:	f001 f83e 	bl	404394 <_fstat_r>
  403318:	2800      	cmp	r0, #0
  40331a:	db0f      	blt.n	40333c <__swhatbuf_r+0x3c>
  40331c:	9a02      	ldr	r2, [sp, #8]
  40331e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403322:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  403326:	fab2 f282 	clz	r2, r2
  40332a:	0952      	lsrs	r2, r2, #5
  40332c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403330:	f44f 6000 	mov.w	r0, #2048	; 0x800
  403334:	6032      	str	r2, [r6, #0]
  403336:	602b      	str	r3, [r5, #0]
  403338:	b010      	add	sp, #64	; 0x40
  40333a:	bd70      	pop	{r4, r5, r6, pc}
  40333c:	89a2      	ldrh	r2, [r4, #12]
  40333e:	2300      	movs	r3, #0
  403340:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  403344:	6033      	str	r3, [r6, #0]
  403346:	d004      	beq.n	403352 <__swhatbuf_r+0x52>
  403348:	2240      	movs	r2, #64	; 0x40
  40334a:	4618      	mov	r0, r3
  40334c:	602a      	str	r2, [r5, #0]
  40334e:	b010      	add	sp, #64	; 0x40
  403350:	bd70      	pop	{r4, r5, r6, pc}
  403352:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403356:	602b      	str	r3, [r5, #0]
  403358:	b010      	add	sp, #64	; 0x40
  40335a:	bd70      	pop	{r4, r5, r6, pc}

0040335c <__smakebuf_r>:
  40335c:	898a      	ldrh	r2, [r1, #12]
  40335e:	0792      	lsls	r2, r2, #30
  403360:	460b      	mov	r3, r1
  403362:	d506      	bpl.n	403372 <__smakebuf_r+0x16>
  403364:	f101 0243 	add.w	r2, r1, #67	; 0x43
  403368:	2101      	movs	r1, #1
  40336a:	601a      	str	r2, [r3, #0]
  40336c:	611a      	str	r2, [r3, #16]
  40336e:	6159      	str	r1, [r3, #20]
  403370:	4770      	bx	lr
  403372:	b5f0      	push	{r4, r5, r6, r7, lr}
  403374:	b083      	sub	sp, #12
  403376:	ab01      	add	r3, sp, #4
  403378:	466a      	mov	r2, sp
  40337a:	460c      	mov	r4, r1
  40337c:	4606      	mov	r6, r0
  40337e:	f7ff ffbf 	bl	403300 <__swhatbuf_r>
  403382:	9900      	ldr	r1, [sp, #0]
  403384:	4605      	mov	r5, r0
  403386:	4630      	mov	r0, r6
  403388:	f000 f83a 	bl	403400 <_malloc_r>
  40338c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403390:	b1d8      	cbz	r0, 4033ca <__smakebuf_r+0x6e>
  403392:	9a01      	ldr	r2, [sp, #4]
  403394:	4f15      	ldr	r7, [pc, #84]	; (4033ec <__smakebuf_r+0x90>)
  403396:	9900      	ldr	r1, [sp, #0]
  403398:	63f7      	str	r7, [r6, #60]	; 0x3c
  40339a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40339e:	81a3      	strh	r3, [r4, #12]
  4033a0:	6020      	str	r0, [r4, #0]
  4033a2:	6120      	str	r0, [r4, #16]
  4033a4:	6161      	str	r1, [r4, #20]
  4033a6:	b91a      	cbnz	r2, 4033b0 <__smakebuf_r+0x54>
  4033a8:	432b      	orrs	r3, r5
  4033aa:	81a3      	strh	r3, [r4, #12]
  4033ac:	b003      	add	sp, #12
  4033ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4033b0:	4630      	mov	r0, r6
  4033b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4033b6:	f001 f801 	bl	4043bc <_isatty_r>
  4033ba:	b1a0      	cbz	r0, 4033e6 <__smakebuf_r+0x8a>
  4033bc:	89a3      	ldrh	r3, [r4, #12]
  4033be:	f023 0303 	bic.w	r3, r3, #3
  4033c2:	f043 0301 	orr.w	r3, r3, #1
  4033c6:	b21b      	sxth	r3, r3
  4033c8:	e7ee      	b.n	4033a8 <__smakebuf_r+0x4c>
  4033ca:	059a      	lsls	r2, r3, #22
  4033cc:	d4ee      	bmi.n	4033ac <__smakebuf_r+0x50>
  4033ce:	f023 0303 	bic.w	r3, r3, #3
  4033d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4033d6:	f043 0302 	orr.w	r3, r3, #2
  4033da:	2101      	movs	r1, #1
  4033dc:	81a3      	strh	r3, [r4, #12]
  4033de:	6022      	str	r2, [r4, #0]
  4033e0:	6122      	str	r2, [r4, #16]
  4033e2:	6161      	str	r1, [r4, #20]
  4033e4:	e7e2      	b.n	4033ac <__smakebuf_r+0x50>
  4033e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4033ea:	e7dd      	b.n	4033a8 <__smakebuf_r+0x4c>
  4033ec:	00402b1d 	.word	0x00402b1d

004033f0 <malloc>:
  4033f0:	4b02      	ldr	r3, [pc, #8]	; (4033fc <malloc+0xc>)
  4033f2:	4601      	mov	r1, r0
  4033f4:	6818      	ldr	r0, [r3, #0]
  4033f6:	f000 b803 	b.w	403400 <_malloc_r>
  4033fa:	bf00      	nop
  4033fc:	20400014 	.word	0x20400014

00403400 <_malloc_r>:
  403400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403404:	f101 060b 	add.w	r6, r1, #11
  403408:	2e16      	cmp	r6, #22
  40340a:	b083      	sub	sp, #12
  40340c:	4605      	mov	r5, r0
  40340e:	f240 809e 	bls.w	40354e <_malloc_r+0x14e>
  403412:	f036 0607 	bics.w	r6, r6, #7
  403416:	f100 80bd 	bmi.w	403594 <_malloc_r+0x194>
  40341a:	42b1      	cmp	r1, r6
  40341c:	f200 80ba 	bhi.w	403594 <_malloc_r+0x194>
  403420:	f000 fb6a 	bl	403af8 <__malloc_lock>
  403424:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403428:	f0c0 8293 	bcc.w	403952 <_malloc_r+0x552>
  40342c:	0a73      	lsrs	r3, r6, #9
  40342e:	f000 80b8 	beq.w	4035a2 <_malloc_r+0x1a2>
  403432:	2b04      	cmp	r3, #4
  403434:	f200 8179 	bhi.w	40372a <_malloc_r+0x32a>
  403438:	09b3      	lsrs	r3, r6, #6
  40343a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40343e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403442:	00c3      	lsls	r3, r0, #3
  403444:	4fbf      	ldr	r7, [pc, #764]	; (403744 <_malloc_r+0x344>)
  403446:	443b      	add	r3, r7
  403448:	f1a3 0108 	sub.w	r1, r3, #8
  40344c:	685c      	ldr	r4, [r3, #4]
  40344e:	42a1      	cmp	r1, r4
  403450:	d106      	bne.n	403460 <_malloc_r+0x60>
  403452:	e00c      	b.n	40346e <_malloc_r+0x6e>
  403454:	2a00      	cmp	r2, #0
  403456:	f280 80aa 	bge.w	4035ae <_malloc_r+0x1ae>
  40345a:	68e4      	ldr	r4, [r4, #12]
  40345c:	42a1      	cmp	r1, r4
  40345e:	d006      	beq.n	40346e <_malloc_r+0x6e>
  403460:	6863      	ldr	r3, [r4, #4]
  403462:	f023 0303 	bic.w	r3, r3, #3
  403466:	1b9a      	subs	r2, r3, r6
  403468:	2a0f      	cmp	r2, #15
  40346a:	ddf3      	ble.n	403454 <_malloc_r+0x54>
  40346c:	4670      	mov	r0, lr
  40346e:	693c      	ldr	r4, [r7, #16]
  403470:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403758 <_malloc_r+0x358>
  403474:	4574      	cmp	r4, lr
  403476:	f000 81ab 	beq.w	4037d0 <_malloc_r+0x3d0>
  40347a:	6863      	ldr	r3, [r4, #4]
  40347c:	f023 0303 	bic.w	r3, r3, #3
  403480:	1b9a      	subs	r2, r3, r6
  403482:	2a0f      	cmp	r2, #15
  403484:	f300 8190 	bgt.w	4037a8 <_malloc_r+0x3a8>
  403488:	2a00      	cmp	r2, #0
  40348a:	f8c7 e014 	str.w	lr, [r7, #20]
  40348e:	f8c7 e010 	str.w	lr, [r7, #16]
  403492:	f280 809d 	bge.w	4035d0 <_malloc_r+0x1d0>
  403496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40349a:	f080 8161 	bcs.w	403760 <_malloc_r+0x360>
  40349e:	08db      	lsrs	r3, r3, #3
  4034a0:	f103 0c01 	add.w	ip, r3, #1
  4034a4:	1099      	asrs	r1, r3, #2
  4034a6:	687a      	ldr	r2, [r7, #4]
  4034a8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4034ac:	f8c4 8008 	str.w	r8, [r4, #8]
  4034b0:	2301      	movs	r3, #1
  4034b2:	408b      	lsls	r3, r1
  4034b4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4034b8:	4313      	orrs	r3, r2
  4034ba:	3908      	subs	r1, #8
  4034bc:	60e1      	str	r1, [r4, #12]
  4034be:	607b      	str	r3, [r7, #4]
  4034c0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4034c4:	f8c8 400c 	str.w	r4, [r8, #12]
  4034c8:	1082      	asrs	r2, r0, #2
  4034ca:	2401      	movs	r4, #1
  4034cc:	4094      	lsls	r4, r2
  4034ce:	429c      	cmp	r4, r3
  4034d0:	f200 808b 	bhi.w	4035ea <_malloc_r+0x1ea>
  4034d4:	421c      	tst	r4, r3
  4034d6:	d106      	bne.n	4034e6 <_malloc_r+0xe6>
  4034d8:	f020 0003 	bic.w	r0, r0, #3
  4034dc:	0064      	lsls	r4, r4, #1
  4034de:	421c      	tst	r4, r3
  4034e0:	f100 0004 	add.w	r0, r0, #4
  4034e4:	d0fa      	beq.n	4034dc <_malloc_r+0xdc>
  4034e6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4034ea:	46cc      	mov	ip, r9
  4034ec:	4680      	mov	r8, r0
  4034ee:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4034f2:	459c      	cmp	ip, r3
  4034f4:	d107      	bne.n	403506 <_malloc_r+0x106>
  4034f6:	e16d      	b.n	4037d4 <_malloc_r+0x3d4>
  4034f8:	2a00      	cmp	r2, #0
  4034fa:	f280 817b 	bge.w	4037f4 <_malloc_r+0x3f4>
  4034fe:	68db      	ldr	r3, [r3, #12]
  403500:	459c      	cmp	ip, r3
  403502:	f000 8167 	beq.w	4037d4 <_malloc_r+0x3d4>
  403506:	6859      	ldr	r1, [r3, #4]
  403508:	f021 0103 	bic.w	r1, r1, #3
  40350c:	1b8a      	subs	r2, r1, r6
  40350e:	2a0f      	cmp	r2, #15
  403510:	ddf2      	ble.n	4034f8 <_malloc_r+0xf8>
  403512:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403516:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40351a:	9300      	str	r3, [sp, #0]
  40351c:	199c      	adds	r4, r3, r6
  40351e:	4628      	mov	r0, r5
  403520:	f046 0601 	orr.w	r6, r6, #1
  403524:	f042 0501 	orr.w	r5, r2, #1
  403528:	605e      	str	r6, [r3, #4]
  40352a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40352e:	f8cc 8008 	str.w	r8, [ip, #8]
  403532:	617c      	str	r4, [r7, #20]
  403534:	613c      	str	r4, [r7, #16]
  403536:	f8c4 e00c 	str.w	lr, [r4, #12]
  40353a:	f8c4 e008 	str.w	lr, [r4, #8]
  40353e:	6065      	str	r5, [r4, #4]
  403540:	505a      	str	r2, [r3, r1]
  403542:	f000 fadf 	bl	403b04 <__malloc_unlock>
  403546:	9b00      	ldr	r3, [sp, #0]
  403548:	f103 0408 	add.w	r4, r3, #8
  40354c:	e01e      	b.n	40358c <_malloc_r+0x18c>
  40354e:	2910      	cmp	r1, #16
  403550:	d820      	bhi.n	403594 <_malloc_r+0x194>
  403552:	f000 fad1 	bl	403af8 <__malloc_lock>
  403556:	2610      	movs	r6, #16
  403558:	2318      	movs	r3, #24
  40355a:	2002      	movs	r0, #2
  40355c:	4f79      	ldr	r7, [pc, #484]	; (403744 <_malloc_r+0x344>)
  40355e:	443b      	add	r3, r7
  403560:	f1a3 0208 	sub.w	r2, r3, #8
  403564:	685c      	ldr	r4, [r3, #4]
  403566:	4294      	cmp	r4, r2
  403568:	f000 813d 	beq.w	4037e6 <_malloc_r+0x3e6>
  40356c:	6863      	ldr	r3, [r4, #4]
  40356e:	68e1      	ldr	r1, [r4, #12]
  403570:	68a6      	ldr	r6, [r4, #8]
  403572:	f023 0303 	bic.w	r3, r3, #3
  403576:	4423      	add	r3, r4
  403578:	4628      	mov	r0, r5
  40357a:	685a      	ldr	r2, [r3, #4]
  40357c:	60f1      	str	r1, [r6, #12]
  40357e:	f042 0201 	orr.w	r2, r2, #1
  403582:	608e      	str	r6, [r1, #8]
  403584:	605a      	str	r2, [r3, #4]
  403586:	f000 fabd 	bl	403b04 <__malloc_unlock>
  40358a:	3408      	adds	r4, #8
  40358c:	4620      	mov	r0, r4
  40358e:	b003      	add	sp, #12
  403590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403594:	2400      	movs	r4, #0
  403596:	230c      	movs	r3, #12
  403598:	4620      	mov	r0, r4
  40359a:	602b      	str	r3, [r5, #0]
  40359c:	b003      	add	sp, #12
  40359e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035a2:	2040      	movs	r0, #64	; 0x40
  4035a4:	f44f 7300 	mov.w	r3, #512	; 0x200
  4035a8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4035ac:	e74a      	b.n	403444 <_malloc_r+0x44>
  4035ae:	4423      	add	r3, r4
  4035b0:	68e1      	ldr	r1, [r4, #12]
  4035b2:	685a      	ldr	r2, [r3, #4]
  4035b4:	68a6      	ldr	r6, [r4, #8]
  4035b6:	f042 0201 	orr.w	r2, r2, #1
  4035ba:	60f1      	str	r1, [r6, #12]
  4035bc:	4628      	mov	r0, r5
  4035be:	608e      	str	r6, [r1, #8]
  4035c0:	605a      	str	r2, [r3, #4]
  4035c2:	f000 fa9f 	bl	403b04 <__malloc_unlock>
  4035c6:	3408      	adds	r4, #8
  4035c8:	4620      	mov	r0, r4
  4035ca:	b003      	add	sp, #12
  4035cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035d0:	4423      	add	r3, r4
  4035d2:	4628      	mov	r0, r5
  4035d4:	685a      	ldr	r2, [r3, #4]
  4035d6:	f042 0201 	orr.w	r2, r2, #1
  4035da:	605a      	str	r2, [r3, #4]
  4035dc:	f000 fa92 	bl	403b04 <__malloc_unlock>
  4035e0:	3408      	adds	r4, #8
  4035e2:	4620      	mov	r0, r4
  4035e4:	b003      	add	sp, #12
  4035e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035ea:	68bc      	ldr	r4, [r7, #8]
  4035ec:	6863      	ldr	r3, [r4, #4]
  4035ee:	f023 0803 	bic.w	r8, r3, #3
  4035f2:	45b0      	cmp	r8, r6
  4035f4:	d304      	bcc.n	403600 <_malloc_r+0x200>
  4035f6:	eba8 0306 	sub.w	r3, r8, r6
  4035fa:	2b0f      	cmp	r3, #15
  4035fc:	f300 8085 	bgt.w	40370a <_malloc_r+0x30a>
  403600:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40375c <_malloc_r+0x35c>
  403604:	4b50      	ldr	r3, [pc, #320]	; (403748 <_malloc_r+0x348>)
  403606:	f8d9 2000 	ldr.w	r2, [r9]
  40360a:	681b      	ldr	r3, [r3, #0]
  40360c:	3201      	adds	r2, #1
  40360e:	4433      	add	r3, r6
  403610:	eb04 0a08 	add.w	sl, r4, r8
  403614:	f000 8155 	beq.w	4038c2 <_malloc_r+0x4c2>
  403618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40361c:	330f      	adds	r3, #15
  40361e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403622:	f02b 0b0f 	bic.w	fp, fp, #15
  403626:	4659      	mov	r1, fp
  403628:	4628      	mov	r0, r5
  40362a:	f000 fc17 	bl	403e5c <_sbrk_r>
  40362e:	1c41      	adds	r1, r0, #1
  403630:	4602      	mov	r2, r0
  403632:	f000 80fc 	beq.w	40382e <_malloc_r+0x42e>
  403636:	4582      	cmp	sl, r0
  403638:	f200 80f7 	bhi.w	40382a <_malloc_r+0x42a>
  40363c:	4b43      	ldr	r3, [pc, #268]	; (40374c <_malloc_r+0x34c>)
  40363e:	6819      	ldr	r1, [r3, #0]
  403640:	4459      	add	r1, fp
  403642:	6019      	str	r1, [r3, #0]
  403644:	f000 814d 	beq.w	4038e2 <_malloc_r+0x4e2>
  403648:	f8d9 0000 	ldr.w	r0, [r9]
  40364c:	3001      	adds	r0, #1
  40364e:	bf1b      	ittet	ne
  403650:	eba2 0a0a 	subne.w	sl, r2, sl
  403654:	4451      	addne	r1, sl
  403656:	f8c9 2000 	streq.w	r2, [r9]
  40365a:	6019      	strne	r1, [r3, #0]
  40365c:	f012 0107 	ands.w	r1, r2, #7
  403660:	f000 8115 	beq.w	40388e <_malloc_r+0x48e>
  403664:	f1c1 0008 	rsb	r0, r1, #8
  403668:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40366c:	4402      	add	r2, r0
  40366e:	3108      	adds	r1, #8
  403670:	eb02 090b 	add.w	r9, r2, fp
  403674:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403678:	eba1 0909 	sub.w	r9, r1, r9
  40367c:	4649      	mov	r1, r9
  40367e:	4628      	mov	r0, r5
  403680:	9301      	str	r3, [sp, #4]
  403682:	9200      	str	r2, [sp, #0]
  403684:	f000 fbea 	bl	403e5c <_sbrk_r>
  403688:	1c43      	adds	r3, r0, #1
  40368a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40368e:	f000 8143 	beq.w	403918 <_malloc_r+0x518>
  403692:	1a80      	subs	r0, r0, r2
  403694:	4448      	add	r0, r9
  403696:	f040 0001 	orr.w	r0, r0, #1
  40369a:	6819      	ldr	r1, [r3, #0]
  40369c:	60ba      	str	r2, [r7, #8]
  40369e:	4449      	add	r1, r9
  4036a0:	42bc      	cmp	r4, r7
  4036a2:	6050      	str	r0, [r2, #4]
  4036a4:	6019      	str	r1, [r3, #0]
  4036a6:	d017      	beq.n	4036d8 <_malloc_r+0x2d8>
  4036a8:	f1b8 0f0f 	cmp.w	r8, #15
  4036ac:	f240 80fb 	bls.w	4038a6 <_malloc_r+0x4a6>
  4036b0:	6860      	ldr	r0, [r4, #4]
  4036b2:	f1a8 020c 	sub.w	r2, r8, #12
  4036b6:	f022 0207 	bic.w	r2, r2, #7
  4036ba:	eb04 0e02 	add.w	lr, r4, r2
  4036be:	f000 0001 	and.w	r0, r0, #1
  4036c2:	f04f 0c05 	mov.w	ip, #5
  4036c6:	4310      	orrs	r0, r2
  4036c8:	2a0f      	cmp	r2, #15
  4036ca:	6060      	str	r0, [r4, #4]
  4036cc:	f8ce c004 	str.w	ip, [lr, #4]
  4036d0:	f8ce c008 	str.w	ip, [lr, #8]
  4036d4:	f200 8117 	bhi.w	403906 <_malloc_r+0x506>
  4036d8:	4b1d      	ldr	r3, [pc, #116]	; (403750 <_malloc_r+0x350>)
  4036da:	68bc      	ldr	r4, [r7, #8]
  4036dc:	681a      	ldr	r2, [r3, #0]
  4036de:	4291      	cmp	r1, r2
  4036e0:	bf88      	it	hi
  4036e2:	6019      	strhi	r1, [r3, #0]
  4036e4:	4b1b      	ldr	r3, [pc, #108]	; (403754 <_malloc_r+0x354>)
  4036e6:	681a      	ldr	r2, [r3, #0]
  4036e8:	4291      	cmp	r1, r2
  4036ea:	6862      	ldr	r2, [r4, #4]
  4036ec:	bf88      	it	hi
  4036ee:	6019      	strhi	r1, [r3, #0]
  4036f0:	f022 0203 	bic.w	r2, r2, #3
  4036f4:	4296      	cmp	r6, r2
  4036f6:	eba2 0306 	sub.w	r3, r2, r6
  4036fa:	d801      	bhi.n	403700 <_malloc_r+0x300>
  4036fc:	2b0f      	cmp	r3, #15
  4036fe:	dc04      	bgt.n	40370a <_malloc_r+0x30a>
  403700:	4628      	mov	r0, r5
  403702:	f000 f9ff 	bl	403b04 <__malloc_unlock>
  403706:	2400      	movs	r4, #0
  403708:	e740      	b.n	40358c <_malloc_r+0x18c>
  40370a:	19a2      	adds	r2, r4, r6
  40370c:	f043 0301 	orr.w	r3, r3, #1
  403710:	f046 0601 	orr.w	r6, r6, #1
  403714:	6066      	str	r6, [r4, #4]
  403716:	4628      	mov	r0, r5
  403718:	60ba      	str	r2, [r7, #8]
  40371a:	6053      	str	r3, [r2, #4]
  40371c:	f000 f9f2 	bl	403b04 <__malloc_unlock>
  403720:	3408      	adds	r4, #8
  403722:	4620      	mov	r0, r4
  403724:	b003      	add	sp, #12
  403726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40372a:	2b14      	cmp	r3, #20
  40372c:	d971      	bls.n	403812 <_malloc_r+0x412>
  40372e:	2b54      	cmp	r3, #84	; 0x54
  403730:	f200 80a3 	bhi.w	40387a <_malloc_r+0x47a>
  403734:	0b33      	lsrs	r3, r6, #12
  403736:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40373a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40373e:	00c3      	lsls	r3, r0, #3
  403740:	e680      	b.n	403444 <_malloc_r+0x44>
  403742:	bf00      	nop
  403744:	204005b0 	.word	0x204005b0
  403748:	20401498 	.word	0x20401498
  40374c:	20401468 	.word	0x20401468
  403750:	20401490 	.word	0x20401490
  403754:	20401494 	.word	0x20401494
  403758:	204005b8 	.word	0x204005b8
  40375c:	204009b8 	.word	0x204009b8
  403760:	0a5a      	lsrs	r2, r3, #9
  403762:	2a04      	cmp	r2, #4
  403764:	d95b      	bls.n	40381e <_malloc_r+0x41e>
  403766:	2a14      	cmp	r2, #20
  403768:	f200 80ae 	bhi.w	4038c8 <_malloc_r+0x4c8>
  40376c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403770:	00c9      	lsls	r1, r1, #3
  403772:	325b      	adds	r2, #91	; 0x5b
  403774:	eb07 0c01 	add.w	ip, r7, r1
  403778:	5879      	ldr	r1, [r7, r1]
  40377a:	f1ac 0c08 	sub.w	ip, ip, #8
  40377e:	458c      	cmp	ip, r1
  403780:	f000 8088 	beq.w	403894 <_malloc_r+0x494>
  403784:	684a      	ldr	r2, [r1, #4]
  403786:	f022 0203 	bic.w	r2, r2, #3
  40378a:	4293      	cmp	r3, r2
  40378c:	d273      	bcs.n	403876 <_malloc_r+0x476>
  40378e:	6889      	ldr	r1, [r1, #8]
  403790:	458c      	cmp	ip, r1
  403792:	d1f7      	bne.n	403784 <_malloc_r+0x384>
  403794:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403798:	687b      	ldr	r3, [r7, #4]
  40379a:	60e2      	str	r2, [r4, #12]
  40379c:	f8c4 c008 	str.w	ip, [r4, #8]
  4037a0:	6094      	str	r4, [r2, #8]
  4037a2:	f8cc 400c 	str.w	r4, [ip, #12]
  4037a6:	e68f      	b.n	4034c8 <_malloc_r+0xc8>
  4037a8:	19a1      	adds	r1, r4, r6
  4037aa:	f046 0c01 	orr.w	ip, r6, #1
  4037ae:	f042 0601 	orr.w	r6, r2, #1
  4037b2:	f8c4 c004 	str.w	ip, [r4, #4]
  4037b6:	4628      	mov	r0, r5
  4037b8:	6179      	str	r1, [r7, #20]
  4037ba:	6139      	str	r1, [r7, #16]
  4037bc:	f8c1 e00c 	str.w	lr, [r1, #12]
  4037c0:	f8c1 e008 	str.w	lr, [r1, #8]
  4037c4:	604e      	str	r6, [r1, #4]
  4037c6:	50e2      	str	r2, [r4, r3]
  4037c8:	f000 f99c 	bl	403b04 <__malloc_unlock>
  4037cc:	3408      	adds	r4, #8
  4037ce:	e6dd      	b.n	40358c <_malloc_r+0x18c>
  4037d0:	687b      	ldr	r3, [r7, #4]
  4037d2:	e679      	b.n	4034c8 <_malloc_r+0xc8>
  4037d4:	f108 0801 	add.w	r8, r8, #1
  4037d8:	f018 0f03 	tst.w	r8, #3
  4037dc:	f10c 0c08 	add.w	ip, ip, #8
  4037e0:	f47f ae85 	bne.w	4034ee <_malloc_r+0xee>
  4037e4:	e02d      	b.n	403842 <_malloc_r+0x442>
  4037e6:	68dc      	ldr	r4, [r3, #12]
  4037e8:	42a3      	cmp	r3, r4
  4037ea:	bf08      	it	eq
  4037ec:	3002      	addeq	r0, #2
  4037ee:	f43f ae3e 	beq.w	40346e <_malloc_r+0x6e>
  4037f2:	e6bb      	b.n	40356c <_malloc_r+0x16c>
  4037f4:	4419      	add	r1, r3
  4037f6:	461c      	mov	r4, r3
  4037f8:	684a      	ldr	r2, [r1, #4]
  4037fa:	68db      	ldr	r3, [r3, #12]
  4037fc:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403800:	f042 0201 	orr.w	r2, r2, #1
  403804:	604a      	str	r2, [r1, #4]
  403806:	4628      	mov	r0, r5
  403808:	60f3      	str	r3, [r6, #12]
  40380a:	609e      	str	r6, [r3, #8]
  40380c:	f000 f97a 	bl	403b04 <__malloc_unlock>
  403810:	e6bc      	b.n	40358c <_malloc_r+0x18c>
  403812:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403816:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40381a:	00c3      	lsls	r3, r0, #3
  40381c:	e612      	b.n	403444 <_malloc_r+0x44>
  40381e:	099a      	lsrs	r2, r3, #6
  403820:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403824:	00c9      	lsls	r1, r1, #3
  403826:	3238      	adds	r2, #56	; 0x38
  403828:	e7a4      	b.n	403774 <_malloc_r+0x374>
  40382a:	42bc      	cmp	r4, r7
  40382c:	d054      	beq.n	4038d8 <_malloc_r+0x4d8>
  40382e:	68bc      	ldr	r4, [r7, #8]
  403830:	6862      	ldr	r2, [r4, #4]
  403832:	f022 0203 	bic.w	r2, r2, #3
  403836:	e75d      	b.n	4036f4 <_malloc_r+0x2f4>
  403838:	f859 3908 	ldr.w	r3, [r9], #-8
  40383c:	4599      	cmp	r9, r3
  40383e:	f040 8086 	bne.w	40394e <_malloc_r+0x54e>
  403842:	f010 0f03 	tst.w	r0, #3
  403846:	f100 30ff 	add.w	r0, r0, #4294967295
  40384a:	d1f5      	bne.n	403838 <_malloc_r+0x438>
  40384c:	687b      	ldr	r3, [r7, #4]
  40384e:	ea23 0304 	bic.w	r3, r3, r4
  403852:	607b      	str	r3, [r7, #4]
  403854:	0064      	lsls	r4, r4, #1
  403856:	429c      	cmp	r4, r3
  403858:	f63f aec7 	bhi.w	4035ea <_malloc_r+0x1ea>
  40385c:	2c00      	cmp	r4, #0
  40385e:	f43f aec4 	beq.w	4035ea <_malloc_r+0x1ea>
  403862:	421c      	tst	r4, r3
  403864:	4640      	mov	r0, r8
  403866:	f47f ae3e 	bne.w	4034e6 <_malloc_r+0xe6>
  40386a:	0064      	lsls	r4, r4, #1
  40386c:	421c      	tst	r4, r3
  40386e:	f100 0004 	add.w	r0, r0, #4
  403872:	d0fa      	beq.n	40386a <_malloc_r+0x46a>
  403874:	e637      	b.n	4034e6 <_malloc_r+0xe6>
  403876:	468c      	mov	ip, r1
  403878:	e78c      	b.n	403794 <_malloc_r+0x394>
  40387a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40387e:	d815      	bhi.n	4038ac <_malloc_r+0x4ac>
  403880:	0bf3      	lsrs	r3, r6, #15
  403882:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403886:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40388a:	00c3      	lsls	r3, r0, #3
  40388c:	e5da      	b.n	403444 <_malloc_r+0x44>
  40388e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403892:	e6ed      	b.n	403670 <_malloc_r+0x270>
  403894:	687b      	ldr	r3, [r7, #4]
  403896:	1092      	asrs	r2, r2, #2
  403898:	2101      	movs	r1, #1
  40389a:	fa01 f202 	lsl.w	r2, r1, r2
  40389e:	4313      	orrs	r3, r2
  4038a0:	607b      	str	r3, [r7, #4]
  4038a2:	4662      	mov	r2, ip
  4038a4:	e779      	b.n	40379a <_malloc_r+0x39a>
  4038a6:	2301      	movs	r3, #1
  4038a8:	6053      	str	r3, [r2, #4]
  4038aa:	e729      	b.n	403700 <_malloc_r+0x300>
  4038ac:	f240 5254 	movw	r2, #1364	; 0x554
  4038b0:	4293      	cmp	r3, r2
  4038b2:	d822      	bhi.n	4038fa <_malloc_r+0x4fa>
  4038b4:	0cb3      	lsrs	r3, r6, #18
  4038b6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4038ba:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4038be:	00c3      	lsls	r3, r0, #3
  4038c0:	e5c0      	b.n	403444 <_malloc_r+0x44>
  4038c2:	f103 0b10 	add.w	fp, r3, #16
  4038c6:	e6ae      	b.n	403626 <_malloc_r+0x226>
  4038c8:	2a54      	cmp	r2, #84	; 0x54
  4038ca:	d829      	bhi.n	403920 <_malloc_r+0x520>
  4038cc:	0b1a      	lsrs	r2, r3, #12
  4038ce:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4038d2:	00c9      	lsls	r1, r1, #3
  4038d4:	326e      	adds	r2, #110	; 0x6e
  4038d6:	e74d      	b.n	403774 <_malloc_r+0x374>
  4038d8:	4b20      	ldr	r3, [pc, #128]	; (40395c <_malloc_r+0x55c>)
  4038da:	6819      	ldr	r1, [r3, #0]
  4038dc:	4459      	add	r1, fp
  4038de:	6019      	str	r1, [r3, #0]
  4038e0:	e6b2      	b.n	403648 <_malloc_r+0x248>
  4038e2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4038e6:	2800      	cmp	r0, #0
  4038e8:	f47f aeae 	bne.w	403648 <_malloc_r+0x248>
  4038ec:	eb08 030b 	add.w	r3, r8, fp
  4038f0:	68ba      	ldr	r2, [r7, #8]
  4038f2:	f043 0301 	orr.w	r3, r3, #1
  4038f6:	6053      	str	r3, [r2, #4]
  4038f8:	e6ee      	b.n	4036d8 <_malloc_r+0x2d8>
  4038fa:	207f      	movs	r0, #127	; 0x7f
  4038fc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403900:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403904:	e59e      	b.n	403444 <_malloc_r+0x44>
  403906:	f104 0108 	add.w	r1, r4, #8
  40390a:	4628      	mov	r0, r5
  40390c:	9300      	str	r3, [sp, #0]
  40390e:	f7ff fa59 	bl	402dc4 <_free_r>
  403912:	9b00      	ldr	r3, [sp, #0]
  403914:	6819      	ldr	r1, [r3, #0]
  403916:	e6df      	b.n	4036d8 <_malloc_r+0x2d8>
  403918:	2001      	movs	r0, #1
  40391a:	f04f 0900 	mov.w	r9, #0
  40391e:	e6bc      	b.n	40369a <_malloc_r+0x29a>
  403920:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403924:	d805      	bhi.n	403932 <_malloc_r+0x532>
  403926:	0bda      	lsrs	r2, r3, #15
  403928:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40392c:	00c9      	lsls	r1, r1, #3
  40392e:	3277      	adds	r2, #119	; 0x77
  403930:	e720      	b.n	403774 <_malloc_r+0x374>
  403932:	f240 5154 	movw	r1, #1364	; 0x554
  403936:	428a      	cmp	r2, r1
  403938:	d805      	bhi.n	403946 <_malloc_r+0x546>
  40393a:	0c9a      	lsrs	r2, r3, #18
  40393c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403940:	00c9      	lsls	r1, r1, #3
  403942:	327c      	adds	r2, #124	; 0x7c
  403944:	e716      	b.n	403774 <_malloc_r+0x374>
  403946:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40394a:	227e      	movs	r2, #126	; 0x7e
  40394c:	e712      	b.n	403774 <_malloc_r+0x374>
  40394e:	687b      	ldr	r3, [r7, #4]
  403950:	e780      	b.n	403854 <_malloc_r+0x454>
  403952:	08f0      	lsrs	r0, r6, #3
  403954:	f106 0308 	add.w	r3, r6, #8
  403958:	e600      	b.n	40355c <_malloc_r+0x15c>
  40395a:	bf00      	nop
  40395c:	20401468 	.word	0x20401468

00403960 <__ascii_mbtowc>:
  403960:	b082      	sub	sp, #8
  403962:	b149      	cbz	r1, 403978 <__ascii_mbtowc+0x18>
  403964:	b15a      	cbz	r2, 40397e <__ascii_mbtowc+0x1e>
  403966:	b16b      	cbz	r3, 403984 <__ascii_mbtowc+0x24>
  403968:	7813      	ldrb	r3, [r2, #0]
  40396a:	600b      	str	r3, [r1, #0]
  40396c:	7812      	ldrb	r2, [r2, #0]
  40396e:	1c10      	adds	r0, r2, #0
  403970:	bf18      	it	ne
  403972:	2001      	movne	r0, #1
  403974:	b002      	add	sp, #8
  403976:	4770      	bx	lr
  403978:	a901      	add	r1, sp, #4
  40397a:	2a00      	cmp	r2, #0
  40397c:	d1f3      	bne.n	403966 <__ascii_mbtowc+0x6>
  40397e:	4610      	mov	r0, r2
  403980:	b002      	add	sp, #8
  403982:	4770      	bx	lr
  403984:	f06f 0001 	mvn.w	r0, #1
  403988:	e7f4      	b.n	403974 <__ascii_mbtowc+0x14>
  40398a:	bf00      	nop
  40398c:	0000      	movs	r0, r0
	...

00403990 <memchr>:
  403990:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403994:	2a10      	cmp	r2, #16
  403996:	db2b      	blt.n	4039f0 <memchr+0x60>
  403998:	f010 0f07 	tst.w	r0, #7
  40399c:	d008      	beq.n	4039b0 <memchr+0x20>
  40399e:	f810 3b01 	ldrb.w	r3, [r0], #1
  4039a2:	3a01      	subs	r2, #1
  4039a4:	428b      	cmp	r3, r1
  4039a6:	d02d      	beq.n	403a04 <memchr+0x74>
  4039a8:	f010 0f07 	tst.w	r0, #7
  4039ac:	b342      	cbz	r2, 403a00 <memchr+0x70>
  4039ae:	d1f6      	bne.n	40399e <memchr+0xe>
  4039b0:	b4f0      	push	{r4, r5, r6, r7}
  4039b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4039b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4039ba:	f022 0407 	bic.w	r4, r2, #7
  4039be:	f07f 0700 	mvns.w	r7, #0
  4039c2:	2300      	movs	r3, #0
  4039c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4039c8:	3c08      	subs	r4, #8
  4039ca:	ea85 0501 	eor.w	r5, r5, r1
  4039ce:	ea86 0601 	eor.w	r6, r6, r1
  4039d2:	fa85 f547 	uadd8	r5, r5, r7
  4039d6:	faa3 f587 	sel	r5, r3, r7
  4039da:	fa86 f647 	uadd8	r6, r6, r7
  4039de:	faa5 f687 	sel	r6, r5, r7
  4039e2:	b98e      	cbnz	r6, 403a08 <memchr+0x78>
  4039e4:	d1ee      	bne.n	4039c4 <memchr+0x34>
  4039e6:	bcf0      	pop	{r4, r5, r6, r7}
  4039e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4039ec:	f002 0207 	and.w	r2, r2, #7
  4039f0:	b132      	cbz	r2, 403a00 <memchr+0x70>
  4039f2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4039f6:	3a01      	subs	r2, #1
  4039f8:	ea83 0301 	eor.w	r3, r3, r1
  4039fc:	b113      	cbz	r3, 403a04 <memchr+0x74>
  4039fe:	d1f8      	bne.n	4039f2 <memchr+0x62>
  403a00:	2000      	movs	r0, #0
  403a02:	4770      	bx	lr
  403a04:	3801      	subs	r0, #1
  403a06:	4770      	bx	lr
  403a08:	2d00      	cmp	r5, #0
  403a0a:	bf06      	itte	eq
  403a0c:	4635      	moveq	r5, r6
  403a0e:	3803      	subeq	r0, #3
  403a10:	3807      	subne	r0, #7
  403a12:	f015 0f01 	tst.w	r5, #1
  403a16:	d107      	bne.n	403a28 <memchr+0x98>
  403a18:	3001      	adds	r0, #1
  403a1a:	f415 7f80 	tst.w	r5, #256	; 0x100
  403a1e:	bf02      	ittt	eq
  403a20:	3001      	addeq	r0, #1
  403a22:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403a26:	3001      	addeq	r0, #1
  403a28:	bcf0      	pop	{r4, r5, r6, r7}
  403a2a:	3801      	subs	r0, #1
  403a2c:	4770      	bx	lr
  403a2e:	bf00      	nop

00403a30 <memmove>:
  403a30:	4288      	cmp	r0, r1
  403a32:	b5f0      	push	{r4, r5, r6, r7, lr}
  403a34:	d90d      	bls.n	403a52 <memmove+0x22>
  403a36:	188b      	adds	r3, r1, r2
  403a38:	4298      	cmp	r0, r3
  403a3a:	d20a      	bcs.n	403a52 <memmove+0x22>
  403a3c:	1884      	adds	r4, r0, r2
  403a3e:	2a00      	cmp	r2, #0
  403a40:	d051      	beq.n	403ae6 <memmove+0xb6>
  403a42:	4622      	mov	r2, r4
  403a44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  403a48:	f802 4d01 	strb.w	r4, [r2, #-1]!
  403a4c:	4299      	cmp	r1, r3
  403a4e:	d1f9      	bne.n	403a44 <memmove+0x14>
  403a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403a52:	2a0f      	cmp	r2, #15
  403a54:	d948      	bls.n	403ae8 <memmove+0xb8>
  403a56:	ea41 0300 	orr.w	r3, r1, r0
  403a5a:	079b      	lsls	r3, r3, #30
  403a5c:	d146      	bne.n	403aec <memmove+0xbc>
  403a5e:	f100 0410 	add.w	r4, r0, #16
  403a62:	f101 0310 	add.w	r3, r1, #16
  403a66:	4615      	mov	r5, r2
  403a68:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403a6c:	f844 6c10 	str.w	r6, [r4, #-16]
  403a70:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403a74:	f844 6c0c 	str.w	r6, [r4, #-12]
  403a78:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403a7c:	f844 6c08 	str.w	r6, [r4, #-8]
  403a80:	3d10      	subs	r5, #16
  403a82:	f853 6c04 	ldr.w	r6, [r3, #-4]
  403a86:	f844 6c04 	str.w	r6, [r4, #-4]
  403a8a:	2d0f      	cmp	r5, #15
  403a8c:	f103 0310 	add.w	r3, r3, #16
  403a90:	f104 0410 	add.w	r4, r4, #16
  403a94:	d8e8      	bhi.n	403a68 <memmove+0x38>
  403a96:	f1a2 0310 	sub.w	r3, r2, #16
  403a9a:	f023 030f 	bic.w	r3, r3, #15
  403a9e:	f002 0e0f 	and.w	lr, r2, #15
  403aa2:	3310      	adds	r3, #16
  403aa4:	f1be 0f03 	cmp.w	lr, #3
  403aa8:	4419      	add	r1, r3
  403aaa:	4403      	add	r3, r0
  403aac:	d921      	bls.n	403af2 <memmove+0xc2>
  403aae:	1f1e      	subs	r6, r3, #4
  403ab0:	460d      	mov	r5, r1
  403ab2:	4674      	mov	r4, lr
  403ab4:	3c04      	subs	r4, #4
  403ab6:	f855 7b04 	ldr.w	r7, [r5], #4
  403aba:	f846 7f04 	str.w	r7, [r6, #4]!
  403abe:	2c03      	cmp	r4, #3
  403ac0:	d8f8      	bhi.n	403ab4 <memmove+0x84>
  403ac2:	f1ae 0404 	sub.w	r4, lr, #4
  403ac6:	f024 0403 	bic.w	r4, r4, #3
  403aca:	3404      	adds	r4, #4
  403acc:	4421      	add	r1, r4
  403ace:	4423      	add	r3, r4
  403ad0:	f002 0203 	and.w	r2, r2, #3
  403ad4:	b162      	cbz	r2, 403af0 <memmove+0xc0>
  403ad6:	3b01      	subs	r3, #1
  403ad8:	440a      	add	r2, r1
  403ada:	f811 4b01 	ldrb.w	r4, [r1], #1
  403ade:	f803 4f01 	strb.w	r4, [r3, #1]!
  403ae2:	428a      	cmp	r2, r1
  403ae4:	d1f9      	bne.n	403ada <memmove+0xaa>
  403ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403ae8:	4603      	mov	r3, r0
  403aea:	e7f3      	b.n	403ad4 <memmove+0xa4>
  403aec:	4603      	mov	r3, r0
  403aee:	e7f2      	b.n	403ad6 <memmove+0xa6>
  403af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403af2:	4672      	mov	r2, lr
  403af4:	e7ee      	b.n	403ad4 <memmove+0xa4>
  403af6:	bf00      	nop

00403af8 <__malloc_lock>:
  403af8:	4801      	ldr	r0, [pc, #4]	; (403b00 <__malloc_lock+0x8>)
  403afa:	f7ff bbfd 	b.w	4032f8 <__retarget_lock_acquire_recursive>
  403afe:	bf00      	nop
  403b00:	204014b8 	.word	0x204014b8

00403b04 <__malloc_unlock>:
  403b04:	4801      	ldr	r0, [pc, #4]	; (403b0c <__malloc_unlock+0x8>)
  403b06:	f7ff bbf9 	b.w	4032fc <__retarget_lock_release_recursive>
  403b0a:	bf00      	nop
  403b0c:	204014b8 	.word	0x204014b8

00403b10 <_realloc_r>:
  403b10:	2900      	cmp	r1, #0
  403b12:	f000 8095 	beq.w	403c40 <_realloc_r+0x130>
  403b16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b1a:	460d      	mov	r5, r1
  403b1c:	4616      	mov	r6, r2
  403b1e:	b083      	sub	sp, #12
  403b20:	4680      	mov	r8, r0
  403b22:	f106 070b 	add.w	r7, r6, #11
  403b26:	f7ff ffe7 	bl	403af8 <__malloc_lock>
  403b2a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  403b2e:	2f16      	cmp	r7, #22
  403b30:	f02e 0403 	bic.w	r4, lr, #3
  403b34:	f1a5 0908 	sub.w	r9, r5, #8
  403b38:	d83c      	bhi.n	403bb4 <_realloc_r+0xa4>
  403b3a:	2210      	movs	r2, #16
  403b3c:	4617      	mov	r7, r2
  403b3e:	42be      	cmp	r6, r7
  403b40:	d83d      	bhi.n	403bbe <_realloc_r+0xae>
  403b42:	4294      	cmp	r4, r2
  403b44:	da43      	bge.n	403bce <_realloc_r+0xbe>
  403b46:	4bc4      	ldr	r3, [pc, #784]	; (403e58 <_realloc_r+0x348>)
  403b48:	6899      	ldr	r1, [r3, #8]
  403b4a:	eb09 0004 	add.w	r0, r9, r4
  403b4e:	4288      	cmp	r0, r1
  403b50:	f000 80b4 	beq.w	403cbc <_realloc_r+0x1ac>
  403b54:	6843      	ldr	r3, [r0, #4]
  403b56:	f023 0101 	bic.w	r1, r3, #1
  403b5a:	4401      	add	r1, r0
  403b5c:	6849      	ldr	r1, [r1, #4]
  403b5e:	07c9      	lsls	r1, r1, #31
  403b60:	d54c      	bpl.n	403bfc <_realloc_r+0xec>
  403b62:	f01e 0f01 	tst.w	lr, #1
  403b66:	f000 809b 	beq.w	403ca0 <_realloc_r+0x190>
  403b6a:	4631      	mov	r1, r6
  403b6c:	4640      	mov	r0, r8
  403b6e:	f7ff fc47 	bl	403400 <_malloc_r>
  403b72:	4606      	mov	r6, r0
  403b74:	2800      	cmp	r0, #0
  403b76:	d03a      	beq.n	403bee <_realloc_r+0xde>
  403b78:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403b7c:	f023 0301 	bic.w	r3, r3, #1
  403b80:	444b      	add	r3, r9
  403b82:	f1a0 0208 	sub.w	r2, r0, #8
  403b86:	429a      	cmp	r2, r3
  403b88:	f000 8121 	beq.w	403dce <_realloc_r+0x2be>
  403b8c:	1f22      	subs	r2, r4, #4
  403b8e:	2a24      	cmp	r2, #36	; 0x24
  403b90:	f200 8107 	bhi.w	403da2 <_realloc_r+0x292>
  403b94:	2a13      	cmp	r2, #19
  403b96:	f200 80db 	bhi.w	403d50 <_realloc_r+0x240>
  403b9a:	4603      	mov	r3, r0
  403b9c:	462a      	mov	r2, r5
  403b9e:	6811      	ldr	r1, [r2, #0]
  403ba0:	6019      	str	r1, [r3, #0]
  403ba2:	6851      	ldr	r1, [r2, #4]
  403ba4:	6059      	str	r1, [r3, #4]
  403ba6:	6892      	ldr	r2, [r2, #8]
  403ba8:	609a      	str	r2, [r3, #8]
  403baa:	4629      	mov	r1, r5
  403bac:	4640      	mov	r0, r8
  403bae:	f7ff f909 	bl	402dc4 <_free_r>
  403bb2:	e01c      	b.n	403bee <_realloc_r+0xde>
  403bb4:	f027 0707 	bic.w	r7, r7, #7
  403bb8:	2f00      	cmp	r7, #0
  403bba:	463a      	mov	r2, r7
  403bbc:	dabf      	bge.n	403b3e <_realloc_r+0x2e>
  403bbe:	2600      	movs	r6, #0
  403bc0:	230c      	movs	r3, #12
  403bc2:	4630      	mov	r0, r6
  403bc4:	f8c8 3000 	str.w	r3, [r8]
  403bc8:	b003      	add	sp, #12
  403bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403bce:	462e      	mov	r6, r5
  403bd0:	1be3      	subs	r3, r4, r7
  403bd2:	2b0f      	cmp	r3, #15
  403bd4:	d81e      	bhi.n	403c14 <_realloc_r+0x104>
  403bd6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  403bda:	f003 0301 	and.w	r3, r3, #1
  403bde:	4323      	orrs	r3, r4
  403be0:	444c      	add	r4, r9
  403be2:	f8c9 3004 	str.w	r3, [r9, #4]
  403be6:	6863      	ldr	r3, [r4, #4]
  403be8:	f043 0301 	orr.w	r3, r3, #1
  403bec:	6063      	str	r3, [r4, #4]
  403bee:	4640      	mov	r0, r8
  403bf0:	f7ff ff88 	bl	403b04 <__malloc_unlock>
  403bf4:	4630      	mov	r0, r6
  403bf6:	b003      	add	sp, #12
  403bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403bfc:	f023 0303 	bic.w	r3, r3, #3
  403c00:	18e1      	adds	r1, r4, r3
  403c02:	4291      	cmp	r1, r2
  403c04:	db1f      	blt.n	403c46 <_realloc_r+0x136>
  403c06:	68c3      	ldr	r3, [r0, #12]
  403c08:	6882      	ldr	r2, [r0, #8]
  403c0a:	462e      	mov	r6, r5
  403c0c:	60d3      	str	r3, [r2, #12]
  403c0e:	460c      	mov	r4, r1
  403c10:	609a      	str	r2, [r3, #8]
  403c12:	e7dd      	b.n	403bd0 <_realloc_r+0xc0>
  403c14:	f8d9 2004 	ldr.w	r2, [r9, #4]
  403c18:	eb09 0107 	add.w	r1, r9, r7
  403c1c:	f002 0201 	and.w	r2, r2, #1
  403c20:	444c      	add	r4, r9
  403c22:	f043 0301 	orr.w	r3, r3, #1
  403c26:	4317      	orrs	r7, r2
  403c28:	f8c9 7004 	str.w	r7, [r9, #4]
  403c2c:	604b      	str	r3, [r1, #4]
  403c2e:	6863      	ldr	r3, [r4, #4]
  403c30:	f043 0301 	orr.w	r3, r3, #1
  403c34:	3108      	adds	r1, #8
  403c36:	6063      	str	r3, [r4, #4]
  403c38:	4640      	mov	r0, r8
  403c3a:	f7ff f8c3 	bl	402dc4 <_free_r>
  403c3e:	e7d6      	b.n	403bee <_realloc_r+0xde>
  403c40:	4611      	mov	r1, r2
  403c42:	f7ff bbdd 	b.w	403400 <_malloc_r>
  403c46:	f01e 0f01 	tst.w	lr, #1
  403c4a:	d18e      	bne.n	403b6a <_realloc_r+0x5a>
  403c4c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403c50:	eba9 0a01 	sub.w	sl, r9, r1
  403c54:	f8da 1004 	ldr.w	r1, [sl, #4]
  403c58:	f021 0103 	bic.w	r1, r1, #3
  403c5c:	440b      	add	r3, r1
  403c5e:	4423      	add	r3, r4
  403c60:	4293      	cmp	r3, r2
  403c62:	db25      	blt.n	403cb0 <_realloc_r+0x1a0>
  403c64:	68c2      	ldr	r2, [r0, #12]
  403c66:	6881      	ldr	r1, [r0, #8]
  403c68:	4656      	mov	r6, sl
  403c6a:	60ca      	str	r2, [r1, #12]
  403c6c:	6091      	str	r1, [r2, #8]
  403c6e:	f8da 100c 	ldr.w	r1, [sl, #12]
  403c72:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403c76:	1f22      	subs	r2, r4, #4
  403c78:	2a24      	cmp	r2, #36	; 0x24
  403c7a:	60c1      	str	r1, [r0, #12]
  403c7c:	6088      	str	r0, [r1, #8]
  403c7e:	f200 8094 	bhi.w	403daa <_realloc_r+0x29a>
  403c82:	2a13      	cmp	r2, #19
  403c84:	d96f      	bls.n	403d66 <_realloc_r+0x256>
  403c86:	6829      	ldr	r1, [r5, #0]
  403c88:	f8ca 1008 	str.w	r1, [sl, #8]
  403c8c:	6869      	ldr	r1, [r5, #4]
  403c8e:	f8ca 100c 	str.w	r1, [sl, #12]
  403c92:	2a1b      	cmp	r2, #27
  403c94:	f200 80a2 	bhi.w	403ddc <_realloc_r+0x2cc>
  403c98:	3508      	adds	r5, #8
  403c9a:	f10a 0210 	add.w	r2, sl, #16
  403c9e:	e063      	b.n	403d68 <_realloc_r+0x258>
  403ca0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  403ca4:	eba9 0a03 	sub.w	sl, r9, r3
  403ca8:	f8da 1004 	ldr.w	r1, [sl, #4]
  403cac:	f021 0103 	bic.w	r1, r1, #3
  403cb0:	1863      	adds	r3, r4, r1
  403cb2:	4293      	cmp	r3, r2
  403cb4:	f6ff af59 	blt.w	403b6a <_realloc_r+0x5a>
  403cb8:	4656      	mov	r6, sl
  403cba:	e7d8      	b.n	403c6e <_realloc_r+0x15e>
  403cbc:	6841      	ldr	r1, [r0, #4]
  403cbe:	f021 0b03 	bic.w	fp, r1, #3
  403cc2:	44a3      	add	fp, r4
  403cc4:	f107 0010 	add.w	r0, r7, #16
  403cc8:	4583      	cmp	fp, r0
  403cca:	da56      	bge.n	403d7a <_realloc_r+0x26a>
  403ccc:	f01e 0f01 	tst.w	lr, #1
  403cd0:	f47f af4b 	bne.w	403b6a <_realloc_r+0x5a>
  403cd4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403cd8:	eba9 0a01 	sub.w	sl, r9, r1
  403cdc:	f8da 1004 	ldr.w	r1, [sl, #4]
  403ce0:	f021 0103 	bic.w	r1, r1, #3
  403ce4:	448b      	add	fp, r1
  403ce6:	4558      	cmp	r0, fp
  403ce8:	dce2      	bgt.n	403cb0 <_realloc_r+0x1a0>
  403cea:	4656      	mov	r6, sl
  403cec:	f8da 100c 	ldr.w	r1, [sl, #12]
  403cf0:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403cf4:	1f22      	subs	r2, r4, #4
  403cf6:	2a24      	cmp	r2, #36	; 0x24
  403cf8:	60c1      	str	r1, [r0, #12]
  403cfa:	6088      	str	r0, [r1, #8]
  403cfc:	f200 808f 	bhi.w	403e1e <_realloc_r+0x30e>
  403d00:	2a13      	cmp	r2, #19
  403d02:	f240 808a 	bls.w	403e1a <_realloc_r+0x30a>
  403d06:	6829      	ldr	r1, [r5, #0]
  403d08:	f8ca 1008 	str.w	r1, [sl, #8]
  403d0c:	6869      	ldr	r1, [r5, #4]
  403d0e:	f8ca 100c 	str.w	r1, [sl, #12]
  403d12:	2a1b      	cmp	r2, #27
  403d14:	f200 808a 	bhi.w	403e2c <_realloc_r+0x31c>
  403d18:	3508      	adds	r5, #8
  403d1a:	f10a 0210 	add.w	r2, sl, #16
  403d1e:	6829      	ldr	r1, [r5, #0]
  403d20:	6011      	str	r1, [r2, #0]
  403d22:	6869      	ldr	r1, [r5, #4]
  403d24:	6051      	str	r1, [r2, #4]
  403d26:	68a9      	ldr	r1, [r5, #8]
  403d28:	6091      	str	r1, [r2, #8]
  403d2a:	eb0a 0107 	add.w	r1, sl, r7
  403d2e:	ebab 0207 	sub.w	r2, fp, r7
  403d32:	f042 0201 	orr.w	r2, r2, #1
  403d36:	6099      	str	r1, [r3, #8]
  403d38:	604a      	str	r2, [r1, #4]
  403d3a:	f8da 3004 	ldr.w	r3, [sl, #4]
  403d3e:	f003 0301 	and.w	r3, r3, #1
  403d42:	431f      	orrs	r7, r3
  403d44:	4640      	mov	r0, r8
  403d46:	f8ca 7004 	str.w	r7, [sl, #4]
  403d4a:	f7ff fedb 	bl	403b04 <__malloc_unlock>
  403d4e:	e751      	b.n	403bf4 <_realloc_r+0xe4>
  403d50:	682b      	ldr	r3, [r5, #0]
  403d52:	6003      	str	r3, [r0, #0]
  403d54:	686b      	ldr	r3, [r5, #4]
  403d56:	6043      	str	r3, [r0, #4]
  403d58:	2a1b      	cmp	r2, #27
  403d5a:	d82d      	bhi.n	403db8 <_realloc_r+0x2a8>
  403d5c:	f100 0308 	add.w	r3, r0, #8
  403d60:	f105 0208 	add.w	r2, r5, #8
  403d64:	e71b      	b.n	403b9e <_realloc_r+0x8e>
  403d66:	4632      	mov	r2, r6
  403d68:	6829      	ldr	r1, [r5, #0]
  403d6a:	6011      	str	r1, [r2, #0]
  403d6c:	6869      	ldr	r1, [r5, #4]
  403d6e:	6051      	str	r1, [r2, #4]
  403d70:	68a9      	ldr	r1, [r5, #8]
  403d72:	6091      	str	r1, [r2, #8]
  403d74:	461c      	mov	r4, r3
  403d76:	46d1      	mov	r9, sl
  403d78:	e72a      	b.n	403bd0 <_realloc_r+0xc0>
  403d7a:	eb09 0107 	add.w	r1, r9, r7
  403d7e:	ebab 0b07 	sub.w	fp, fp, r7
  403d82:	f04b 0201 	orr.w	r2, fp, #1
  403d86:	6099      	str	r1, [r3, #8]
  403d88:	604a      	str	r2, [r1, #4]
  403d8a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403d8e:	f003 0301 	and.w	r3, r3, #1
  403d92:	431f      	orrs	r7, r3
  403d94:	4640      	mov	r0, r8
  403d96:	f845 7c04 	str.w	r7, [r5, #-4]
  403d9a:	f7ff feb3 	bl	403b04 <__malloc_unlock>
  403d9e:	462e      	mov	r6, r5
  403da0:	e728      	b.n	403bf4 <_realloc_r+0xe4>
  403da2:	4629      	mov	r1, r5
  403da4:	f7ff fe44 	bl	403a30 <memmove>
  403da8:	e6ff      	b.n	403baa <_realloc_r+0x9a>
  403daa:	4629      	mov	r1, r5
  403dac:	4630      	mov	r0, r6
  403dae:	461c      	mov	r4, r3
  403db0:	46d1      	mov	r9, sl
  403db2:	f7ff fe3d 	bl	403a30 <memmove>
  403db6:	e70b      	b.n	403bd0 <_realloc_r+0xc0>
  403db8:	68ab      	ldr	r3, [r5, #8]
  403dba:	6083      	str	r3, [r0, #8]
  403dbc:	68eb      	ldr	r3, [r5, #12]
  403dbe:	60c3      	str	r3, [r0, #12]
  403dc0:	2a24      	cmp	r2, #36	; 0x24
  403dc2:	d017      	beq.n	403df4 <_realloc_r+0x2e4>
  403dc4:	f100 0310 	add.w	r3, r0, #16
  403dc8:	f105 0210 	add.w	r2, r5, #16
  403dcc:	e6e7      	b.n	403b9e <_realloc_r+0x8e>
  403dce:	f850 3c04 	ldr.w	r3, [r0, #-4]
  403dd2:	f023 0303 	bic.w	r3, r3, #3
  403dd6:	441c      	add	r4, r3
  403dd8:	462e      	mov	r6, r5
  403dda:	e6f9      	b.n	403bd0 <_realloc_r+0xc0>
  403ddc:	68a9      	ldr	r1, [r5, #8]
  403dde:	f8ca 1010 	str.w	r1, [sl, #16]
  403de2:	68e9      	ldr	r1, [r5, #12]
  403de4:	f8ca 1014 	str.w	r1, [sl, #20]
  403de8:	2a24      	cmp	r2, #36	; 0x24
  403dea:	d00c      	beq.n	403e06 <_realloc_r+0x2f6>
  403dec:	3510      	adds	r5, #16
  403dee:	f10a 0218 	add.w	r2, sl, #24
  403df2:	e7b9      	b.n	403d68 <_realloc_r+0x258>
  403df4:	692b      	ldr	r3, [r5, #16]
  403df6:	6103      	str	r3, [r0, #16]
  403df8:	696b      	ldr	r3, [r5, #20]
  403dfa:	6143      	str	r3, [r0, #20]
  403dfc:	f105 0218 	add.w	r2, r5, #24
  403e00:	f100 0318 	add.w	r3, r0, #24
  403e04:	e6cb      	b.n	403b9e <_realloc_r+0x8e>
  403e06:	692a      	ldr	r2, [r5, #16]
  403e08:	f8ca 2018 	str.w	r2, [sl, #24]
  403e0c:	696a      	ldr	r2, [r5, #20]
  403e0e:	f8ca 201c 	str.w	r2, [sl, #28]
  403e12:	3518      	adds	r5, #24
  403e14:	f10a 0220 	add.w	r2, sl, #32
  403e18:	e7a6      	b.n	403d68 <_realloc_r+0x258>
  403e1a:	4632      	mov	r2, r6
  403e1c:	e77f      	b.n	403d1e <_realloc_r+0x20e>
  403e1e:	4629      	mov	r1, r5
  403e20:	4630      	mov	r0, r6
  403e22:	9301      	str	r3, [sp, #4]
  403e24:	f7ff fe04 	bl	403a30 <memmove>
  403e28:	9b01      	ldr	r3, [sp, #4]
  403e2a:	e77e      	b.n	403d2a <_realloc_r+0x21a>
  403e2c:	68a9      	ldr	r1, [r5, #8]
  403e2e:	f8ca 1010 	str.w	r1, [sl, #16]
  403e32:	68e9      	ldr	r1, [r5, #12]
  403e34:	f8ca 1014 	str.w	r1, [sl, #20]
  403e38:	2a24      	cmp	r2, #36	; 0x24
  403e3a:	d003      	beq.n	403e44 <_realloc_r+0x334>
  403e3c:	3510      	adds	r5, #16
  403e3e:	f10a 0218 	add.w	r2, sl, #24
  403e42:	e76c      	b.n	403d1e <_realloc_r+0x20e>
  403e44:	692a      	ldr	r2, [r5, #16]
  403e46:	f8ca 2018 	str.w	r2, [sl, #24]
  403e4a:	696a      	ldr	r2, [r5, #20]
  403e4c:	f8ca 201c 	str.w	r2, [sl, #28]
  403e50:	3518      	adds	r5, #24
  403e52:	f10a 0220 	add.w	r2, sl, #32
  403e56:	e762      	b.n	403d1e <_realloc_r+0x20e>
  403e58:	204005b0 	.word	0x204005b0

00403e5c <_sbrk_r>:
  403e5c:	b538      	push	{r3, r4, r5, lr}
  403e5e:	4c07      	ldr	r4, [pc, #28]	; (403e7c <_sbrk_r+0x20>)
  403e60:	2300      	movs	r3, #0
  403e62:	4605      	mov	r5, r0
  403e64:	4608      	mov	r0, r1
  403e66:	6023      	str	r3, [r4, #0]
  403e68:	f7fd fbcc 	bl	401604 <_sbrk>
  403e6c:	1c43      	adds	r3, r0, #1
  403e6e:	d000      	beq.n	403e72 <_sbrk_r+0x16>
  403e70:	bd38      	pop	{r3, r4, r5, pc}
  403e72:	6823      	ldr	r3, [r4, #0]
  403e74:	2b00      	cmp	r3, #0
  403e76:	d0fb      	beq.n	403e70 <_sbrk_r+0x14>
  403e78:	602b      	str	r3, [r5, #0]
  403e7a:	bd38      	pop	{r3, r4, r5, pc}
  403e7c:	204014cc 	.word	0x204014cc

00403e80 <_raise_r>:
  403e80:	291f      	cmp	r1, #31
  403e82:	d828      	bhi.n	403ed6 <_raise_r+0x56>
  403e84:	b520      	push	{r5, lr}
  403e86:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
  403e8a:	b082      	sub	sp, #8
  403e8c:	4605      	mov	r5, r0
  403e8e:	b1aa      	cbz	r2, 403ebc <_raise_r+0x3c>
  403e90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  403e94:	b193      	cbz	r3, 403ebc <_raise_r+0x3c>
  403e96:	2b01      	cmp	r3, #1
  403e98:	d00e      	beq.n	403eb8 <_raise_r+0x38>
  403e9a:	1c58      	adds	r0, r3, #1
  403e9c:	d007      	beq.n	403eae <_raise_r+0x2e>
  403e9e:	2500      	movs	r5, #0
  403ea0:	4608      	mov	r0, r1
  403ea2:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  403ea6:	4798      	blx	r3
  403ea8:	4628      	mov	r0, r5
  403eaa:	b002      	add	sp, #8
  403eac:	bd20      	pop	{r5, pc}
  403eae:	2316      	movs	r3, #22
  403eb0:	2001      	movs	r0, #1
  403eb2:	602b      	str	r3, [r5, #0]
  403eb4:	b002      	add	sp, #8
  403eb6:	bd20      	pop	{r5, pc}
  403eb8:	2000      	movs	r0, #0
  403eba:	e7f6      	b.n	403eaa <_raise_r+0x2a>
  403ebc:	4628      	mov	r0, r5
  403ebe:	9101      	str	r1, [sp, #4]
  403ec0:	f000 f82a 	bl	403f18 <_getpid_r>
  403ec4:	9901      	ldr	r1, [sp, #4]
  403ec6:	460a      	mov	r2, r1
  403ec8:	4601      	mov	r1, r0
  403eca:	4628      	mov	r0, r5
  403ecc:	b002      	add	sp, #8
  403ece:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
  403ed2:	f000 b80d 	b.w	403ef0 <_kill_r>
  403ed6:	2316      	movs	r3, #22
  403ed8:	6003      	str	r3, [r0, #0]
  403eda:	f04f 30ff 	mov.w	r0, #4294967295
  403ede:	4770      	bx	lr

00403ee0 <raise>:
  403ee0:	4b02      	ldr	r3, [pc, #8]	; (403eec <raise+0xc>)
  403ee2:	4601      	mov	r1, r0
  403ee4:	6818      	ldr	r0, [r3, #0]
  403ee6:	f7ff bfcb 	b.w	403e80 <_raise_r>
  403eea:	bf00      	nop
  403eec:	20400014 	.word	0x20400014

00403ef0 <_kill_r>:
  403ef0:	b538      	push	{r3, r4, r5, lr}
  403ef2:	460b      	mov	r3, r1
  403ef4:	4c07      	ldr	r4, [pc, #28]	; (403f14 <_kill_r+0x24>)
  403ef6:	4605      	mov	r5, r0
  403ef8:	4611      	mov	r1, r2
  403efa:	4618      	mov	r0, r3
  403efc:	2300      	movs	r3, #0
  403efe:	6023      	str	r3, [r4, #0]
  403f00:	f7fd fbaa 	bl	401658 <_kill>
  403f04:	1c43      	adds	r3, r0, #1
  403f06:	d000      	beq.n	403f0a <_kill_r+0x1a>
  403f08:	bd38      	pop	{r3, r4, r5, pc}
  403f0a:	6823      	ldr	r3, [r4, #0]
  403f0c:	2b00      	cmp	r3, #0
  403f0e:	d0fb      	beq.n	403f08 <_kill_r+0x18>
  403f10:	602b      	str	r3, [r5, #0]
  403f12:	bd38      	pop	{r3, r4, r5, pc}
  403f14:	204014cc 	.word	0x204014cc

00403f18 <_getpid_r>:
  403f18:	f7fd bb9f 	b.w	40165a <_getpid>

00403f1c <__sread>:
  403f1c:	b510      	push	{r4, lr}
  403f1e:	460c      	mov	r4, r1
  403f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403f24:	f000 fa72 	bl	40440c <_read_r>
  403f28:	2800      	cmp	r0, #0
  403f2a:	db03      	blt.n	403f34 <__sread+0x18>
  403f2c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403f2e:	4403      	add	r3, r0
  403f30:	6523      	str	r3, [r4, #80]	; 0x50
  403f32:	bd10      	pop	{r4, pc}
  403f34:	89a3      	ldrh	r3, [r4, #12]
  403f36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403f3a:	81a3      	strh	r3, [r4, #12]
  403f3c:	bd10      	pop	{r4, pc}
  403f3e:	bf00      	nop

00403f40 <__swrite>:
  403f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403f44:	4616      	mov	r6, r2
  403f46:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403f4a:	461f      	mov	r7, r3
  403f4c:	05d3      	lsls	r3, r2, #23
  403f4e:	460c      	mov	r4, r1
  403f50:	4605      	mov	r5, r0
  403f52:	d507      	bpl.n	403f64 <__swrite+0x24>
  403f54:	2200      	movs	r2, #0
  403f56:	2302      	movs	r3, #2
  403f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403f5c:	f000 fa40 	bl	4043e0 <_lseek_r>
  403f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403f64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403f68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403f6c:	81a2      	strh	r2, [r4, #12]
  403f6e:	463b      	mov	r3, r7
  403f70:	4632      	mov	r2, r6
  403f72:	4628      	mov	r0, r5
  403f74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403f78:	f000 b920 	b.w	4041bc <_write_r>

00403f7c <__sseek>:
  403f7c:	b510      	push	{r4, lr}
  403f7e:	460c      	mov	r4, r1
  403f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403f84:	f000 fa2c 	bl	4043e0 <_lseek_r>
  403f88:	89a3      	ldrh	r3, [r4, #12]
  403f8a:	1c42      	adds	r2, r0, #1
  403f8c:	bf0e      	itee	eq
  403f8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403f92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403f96:	6520      	strne	r0, [r4, #80]	; 0x50
  403f98:	81a3      	strh	r3, [r4, #12]
  403f9a:	bd10      	pop	{r4, pc}

00403f9c <__sclose>:
  403f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403fa0:	f000 b984 	b.w	4042ac <_close_r>
	...

00403fc0 <strlen>:
  403fc0:	f890 f000 	pld	[r0]
  403fc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403fc8:	f020 0107 	bic.w	r1, r0, #7
  403fcc:	f06f 0c00 	mvn.w	ip, #0
  403fd0:	f010 0407 	ands.w	r4, r0, #7
  403fd4:	f891 f020 	pld	[r1, #32]
  403fd8:	f040 8049 	bne.w	40406e <strlen+0xae>
  403fdc:	f04f 0400 	mov.w	r4, #0
  403fe0:	f06f 0007 	mvn.w	r0, #7
  403fe4:	e9d1 2300 	ldrd	r2, r3, [r1]
  403fe8:	f891 f040 	pld	[r1, #64]	; 0x40
  403fec:	f100 0008 	add.w	r0, r0, #8
  403ff0:	fa82 f24c 	uadd8	r2, r2, ip
  403ff4:	faa4 f28c 	sel	r2, r4, ip
  403ff8:	fa83 f34c 	uadd8	r3, r3, ip
  403ffc:	faa2 f38c 	sel	r3, r2, ip
  404000:	bb4b      	cbnz	r3, 404056 <strlen+0x96>
  404002:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404006:	fa82 f24c 	uadd8	r2, r2, ip
  40400a:	f100 0008 	add.w	r0, r0, #8
  40400e:	faa4 f28c 	sel	r2, r4, ip
  404012:	fa83 f34c 	uadd8	r3, r3, ip
  404016:	faa2 f38c 	sel	r3, r2, ip
  40401a:	b9e3      	cbnz	r3, 404056 <strlen+0x96>
  40401c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404020:	fa82 f24c 	uadd8	r2, r2, ip
  404024:	f100 0008 	add.w	r0, r0, #8
  404028:	faa4 f28c 	sel	r2, r4, ip
  40402c:	fa83 f34c 	uadd8	r3, r3, ip
  404030:	faa2 f38c 	sel	r3, r2, ip
  404034:	b97b      	cbnz	r3, 404056 <strlen+0x96>
  404036:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40403a:	f101 0120 	add.w	r1, r1, #32
  40403e:	fa82 f24c 	uadd8	r2, r2, ip
  404042:	f100 0008 	add.w	r0, r0, #8
  404046:	faa4 f28c 	sel	r2, r4, ip
  40404a:	fa83 f34c 	uadd8	r3, r3, ip
  40404e:	faa2 f38c 	sel	r3, r2, ip
  404052:	2b00      	cmp	r3, #0
  404054:	d0c6      	beq.n	403fe4 <strlen+0x24>
  404056:	2a00      	cmp	r2, #0
  404058:	bf04      	itt	eq
  40405a:	3004      	addeq	r0, #4
  40405c:	461a      	moveq	r2, r3
  40405e:	ba12      	rev	r2, r2
  404060:	fab2 f282 	clz	r2, r2
  404064:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404068:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40406c:	4770      	bx	lr
  40406e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404072:	f004 0503 	and.w	r5, r4, #3
  404076:	f1c4 0000 	rsb	r0, r4, #0
  40407a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40407e:	f014 0f04 	tst.w	r4, #4
  404082:	f891 f040 	pld	[r1, #64]	; 0x40
  404086:	fa0c f505 	lsl.w	r5, ip, r5
  40408a:	ea62 0205 	orn	r2, r2, r5
  40408e:	bf1c      	itt	ne
  404090:	ea63 0305 	ornne	r3, r3, r5
  404094:	4662      	movne	r2, ip
  404096:	f04f 0400 	mov.w	r4, #0
  40409a:	e7a9      	b.n	403ff0 <strlen+0x30>

0040409c <__swbuf_r>:
  40409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40409e:	460d      	mov	r5, r1
  4040a0:	4614      	mov	r4, r2
  4040a2:	4606      	mov	r6, r0
  4040a4:	b110      	cbz	r0, 4040ac <__swbuf_r+0x10>
  4040a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4040a8:	2b00      	cmp	r3, #0
  4040aa:	d04b      	beq.n	404144 <__swbuf_r+0xa8>
  4040ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4040b0:	69a3      	ldr	r3, [r4, #24]
  4040b2:	60a3      	str	r3, [r4, #8]
  4040b4:	b291      	uxth	r1, r2
  4040b6:	0708      	lsls	r0, r1, #28
  4040b8:	d539      	bpl.n	40412e <__swbuf_r+0x92>
  4040ba:	6923      	ldr	r3, [r4, #16]
  4040bc:	2b00      	cmp	r3, #0
  4040be:	d036      	beq.n	40412e <__swbuf_r+0x92>
  4040c0:	b2ed      	uxtb	r5, r5
  4040c2:	0489      	lsls	r1, r1, #18
  4040c4:	462f      	mov	r7, r5
  4040c6:	d515      	bpl.n	4040f4 <__swbuf_r+0x58>
  4040c8:	6822      	ldr	r2, [r4, #0]
  4040ca:	6961      	ldr	r1, [r4, #20]
  4040cc:	1ad3      	subs	r3, r2, r3
  4040ce:	428b      	cmp	r3, r1
  4040d0:	da1c      	bge.n	40410c <__swbuf_r+0x70>
  4040d2:	3301      	adds	r3, #1
  4040d4:	68a1      	ldr	r1, [r4, #8]
  4040d6:	1c50      	adds	r0, r2, #1
  4040d8:	3901      	subs	r1, #1
  4040da:	60a1      	str	r1, [r4, #8]
  4040dc:	6020      	str	r0, [r4, #0]
  4040de:	7015      	strb	r5, [r2, #0]
  4040e0:	6962      	ldr	r2, [r4, #20]
  4040e2:	429a      	cmp	r2, r3
  4040e4:	d01a      	beq.n	40411c <__swbuf_r+0x80>
  4040e6:	89a3      	ldrh	r3, [r4, #12]
  4040e8:	07db      	lsls	r3, r3, #31
  4040ea:	d501      	bpl.n	4040f0 <__swbuf_r+0x54>
  4040ec:	2d0a      	cmp	r5, #10
  4040ee:	d015      	beq.n	40411c <__swbuf_r+0x80>
  4040f0:	4638      	mov	r0, r7
  4040f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4040f4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4040f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4040fa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4040fe:	81a2      	strh	r2, [r4, #12]
  404100:	6822      	ldr	r2, [r4, #0]
  404102:	6661      	str	r1, [r4, #100]	; 0x64
  404104:	6961      	ldr	r1, [r4, #20]
  404106:	1ad3      	subs	r3, r2, r3
  404108:	428b      	cmp	r3, r1
  40410a:	dbe2      	blt.n	4040d2 <__swbuf_r+0x36>
  40410c:	4621      	mov	r1, r4
  40410e:	4630      	mov	r0, r6
  404110:	f7fe fcda 	bl	402ac8 <_fflush_r>
  404114:	b940      	cbnz	r0, 404128 <__swbuf_r+0x8c>
  404116:	6822      	ldr	r2, [r4, #0]
  404118:	2301      	movs	r3, #1
  40411a:	e7db      	b.n	4040d4 <__swbuf_r+0x38>
  40411c:	4621      	mov	r1, r4
  40411e:	4630      	mov	r0, r6
  404120:	f7fe fcd2 	bl	402ac8 <_fflush_r>
  404124:	2800      	cmp	r0, #0
  404126:	d0e3      	beq.n	4040f0 <__swbuf_r+0x54>
  404128:	f04f 37ff 	mov.w	r7, #4294967295
  40412c:	e7e0      	b.n	4040f0 <__swbuf_r+0x54>
  40412e:	4621      	mov	r1, r4
  404130:	4630      	mov	r0, r6
  404132:	f7fe fbad 	bl	402890 <__swsetup_r>
  404136:	2800      	cmp	r0, #0
  404138:	d1f6      	bne.n	404128 <__swbuf_r+0x8c>
  40413a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40413e:	6923      	ldr	r3, [r4, #16]
  404140:	b291      	uxth	r1, r2
  404142:	e7bd      	b.n	4040c0 <__swbuf_r+0x24>
  404144:	f7fe fd18 	bl	402b78 <__sinit>
  404148:	e7b0      	b.n	4040ac <__swbuf_r+0x10>
  40414a:	bf00      	nop

0040414c <_wcrtomb_r>:
  40414c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40414e:	4606      	mov	r6, r0
  404150:	b085      	sub	sp, #20
  404152:	461f      	mov	r7, r3
  404154:	b189      	cbz	r1, 40417a <_wcrtomb_r+0x2e>
  404156:	4c10      	ldr	r4, [pc, #64]	; (404198 <_wcrtomb_r+0x4c>)
  404158:	4d10      	ldr	r5, [pc, #64]	; (40419c <_wcrtomb_r+0x50>)
  40415a:	6824      	ldr	r4, [r4, #0]
  40415c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40415e:	2c00      	cmp	r4, #0
  404160:	bf08      	it	eq
  404162:	462c      	moveq	r4, r5
  404164:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  404168:	47a0      	blx	r4
  40416a:	1c43      	adds	r3, r0, #1
  40416c:	d103      	bne.n	404176 <_wcrtomb_r+0x2a>
  40416e:	2200      	movs	r2, #0
  404170:	238a      	movs	r3, #138	; 0x8a
  404172:	603a      	str	r2, [r7, #0]
  404174:	6033      	str	r3, [r6, #0]
  404176:	b005      	add	sp, #20
  404178:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40417a:	460c      	mov	r4, r1
  40417c:	4906      	ldr	r1, [pc, #24]	; (404198 <_wcrtomb_r+0x4c>)
  40417e:	4a07      	ldr	r2, [pc, #28]	; (40419c <_wcrtomb_r+0x50>)
  404180:	6809      	ldr	r1, [r1, #0]
  404182:	6b49      	ldr	r1, [r1, #52]	; 0x34
  404184:	2900      	cmp	r1, #0
  404186:	bf08      	it	eq
  404188:	4611      	moveq	r1, r2
  40418a:	4622      	mov	r2, r4
  40418c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  404190:	a901      	add	r1, sp, #4
  404192:	47a0      	blx	r4
  404194:	e7e9      	b.n	40416a <_wcrtomb_r+0x1e>
  404196:	bf00      	nop
  404198:	20400014 	.word	0x20400014
  40419c:	20400444 	.word	0x20400444

004041a0 <__ascii_wctomb>:
  4041a0:	b121      	cbz	r1, 4041ac <__ascii_wctomb+0xc>
  4041a2:	2aff      	cmp	r2, #255	; 0xff
  4041a4:	d804      	bhi.n	4041b0 <__ascii_wctomb+0x10>
  4041a6:	700a      	strb	r2, [r1, #0]
  4041a8:	2001      	movs	r0, #1
  4041aa:	4770      	bx	lr
  4041ac:	4608      	mov	r0, r1
  4041ae:	4770      	bx	lr
  4041b0:	238a      	movs	r3, #138	; 0x8a
  4041b2:	6003      	str	r3, [r0, #0]
  4041b4:	f04f 30ff 	mov.w	r0, #4294967295
  4041b8:	4770      	bx	lr
  4041ba:	bf00      	nop

004041bc <_write_r>:
  4041bc:	b570      	push	{r4, r5, r6, lr}
  4041be:	460d      	mov	r5, r1
  4041c0:	4c08      	ldr	r4, [pc, #32]	; (4041e4 <_write_r+0x28>)
  4041c2:	4611      	mov	r1, r2
  4041c4:	4606      	mov	r6, r0
  4041c6:	461a      	mov	r2, r3
  4041c8:	4628      	mov	r0, r5
  4041ca:	2300      	movs	r3, #0
  4041cc:	6023      	str	r3, [r4, #0]
  4041ce:	f7fc fc75 	bl	400abc <_write>
  4041d2:	1c43      	adds	r3, r0, #1
  4041d4:	d000      	beq.n	4041d8 <_write_r+0x1c>
  4041d6:	bd70      	pop	{r4, r5, r6, pc}
  4041d8:	6823      	ldr	r3, [r4, #0]
  4041da:	2b00      	cmp	r3, #0
  4041dc:	d0fb      	beq.n	4041d6 <_write_r+0x1a>
  4041de:	6033      	str	r3, [r6, #0]
  4041e0:	bd70      	pop	{r4, r5, r6, pc}
  4041e2:	bf00      	nop
  4041e4:	204014cc 	.word	0x204014cc

004041e8 <__register_exitproc>:
  4041e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4041ec:	4d2c      	ldr	r5, [pc, #176]	; (4042a0 <__register_exitproc+0xb8>)
  4041ee:	4606      	mov	r6, r0
  4041f0:	6828      	ldr	r0, [r5, #0]
  4041f2:	4698      	mov	r8, r3
  4041f4:	460f      	mov	r7, r1
  4041f6:	4691      	mov	r9, r2
  4041f8:	f7ff f87e 	bl	4032f8 <__retarget_lock_acquire_recursive>
  4041fc:	4b29      	ldr	r3, [pc, #164]	; (4042a4 <__register_exitproc+0xbc>)
  4041fe:	681c      	ldr	r4, [r3, #0]
  404200:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  404204:	2b00      	cmp	r3, #0
  404206:	d03e      	beq.n	404286 <__register_exitproc+0x9e>
  404208:	685a      	ldr	r2, [r3, #4]
  40420a:	2a1f      	cmp	r2, #31
  40420c:	dc1c      	bgt.n	404248 <__register_exitproc+0x60>
  40420e:	f102 0e01 	add.w	lr, r2, #1
  404212:	b176      	cbz	r6, 404232 <__register_exitproc+0x4a>
  404214:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  404218:	2401      	movs	r4, #1
  40421a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40421e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  404222:	4094      	lsls	r4, r2
  404224:	4320      	orrs	r0, r4
  404226:	2e02      	cmp	r6, #2
  404228:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40422c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  404230:	d023      	beq.n	40427a <__register_exitproc+0x92>
  404232:	3202      	adds	r2, #2
  404234:	f8c3 e004 	str.w	lr, [r3, #4]
  404238:	6828      	ldr	r0, [r5, #0]
  40423a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40423e:	f7ff f85d 	bl	4032fc <__retarget_lock_release_recursive>
  404242:	2000      	movs	r0, #0
  404244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404248:	4b17      	ldr	r3, [pc, #92]	; (4042a8 <__register_exitproc+0xc0>)
  40424a:	b30b      	cbz	r3, 404290 <__register_exitproc+0xa8>
  40424c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  404250:	f7ff f8ce 	bl	4033f0 <malloc>
  404254:	4603      	mov	r3, r0
  404256:	b1d8      	cbz	r0, 404290 <__register_exitproc+0xa8>
  404258:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40425c:	6002      	str	r2, [r0, #0]
  40425e:	2100      	movs	r1, #0
  404260:	6041      	str	r1, [r0, #4]
  404262:	460a      	mov	r2, r1
  404264:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  404268:	f04f 0e01 	mov.w	lr, #1
  40426c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  404270:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  404274:	2e00      	cmp	r6, #0
  404276:	d0dc      	beq.n	404232 <__register_exitproc+0x4a>
  404278:	e7cc      	b.n	404214 <__register_exitproc+0x2c>
  40427a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40427e:	430c      	orrs	r4, r1
  404280:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  404284:	e7d5      	b.n	404232 <__register_exitproc+0x4a>
  404286:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40428a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40428e:	e7bb      	b.n	404208 <__register_exitproc+0x20>
  404290:	6828      	ldr	r0, [r5, #0]
  404292:	f7ff f833 	bl	4032fc <__retarget_lock_release_recursive>
  404296:	f04f 30ff 	mov.w	r0, #4294967295
  40429a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40429e:	bf00      	nop
  4042a0:	20400440 	.word	0x20400440
  4042a4:	00404be0 	.word	0x00404be0
  4042a8:	004033f1 	.word	0x004033f1

004042ac <_close_r>:
  4042ac:	b538      	push	{r3, r4, r5, lr}
  4042ae:	4c07      	ldr	r4, [pc, #28]	; (4042cc <_close_r+0x20>)
  4042b0:	2300      	movs	r3, #0
  4042b2:	4605      	mov	r5, r0
  4042b4:	4608      	mov	r0, r1
  4042b6:	6023      	str	r3, [r4, #0]
  4042b8:	f7fd f9c0 	bl	40163c <_close>
  4042bc:	1c43      	adds	r3, r0, #1
  4042be:	d000      	beq.n	4042c2 <_close_r+0x16>
  4042c0:	bd38      	pop	{r3, r4, r5, pc}
  4042c2:	6823      	ldr	r3, [r4, #0]
  4042c4:	2b00      	cmp	r3, #0
  4042c6:	d0fb      	beq.n	4042c0 <_close_r+0x14>
  4042c8:	602b      	str	r3, [r5, #0]
  4042ca:	bd38      	pop	{r3, r4, r5, pc}
  4042cc:	204014cc 	.word	0x204014cc

004042d0 <_fclose_r>:
  4042d0:	b570      	push	{r4, r5, r6, lr}
  4042d2:	b159      	cbz	r1, 4042ec <_fclose_r+0x1c>
  4042d4:	4605      	mov	r5, r0
  4042d6:	460c      	mov	r4, r1
  4042d8:	b110      	cbz	r0, 4042e0 <_fclose_r+0x10>
  4042da:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4042dc:	2b00      	cmp	r3, #0
  4042de:	d03c      	beq.n	40435a <_fclose_r+0x8a>
  4042e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4042e2:	07d8      	lsls	r0, r3, #31
  4042e4:	d505      	bpl.n	4042f2 <_fclose_r+0x22>
  4042e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4042ea:	b92b      	cbnz	r3, 4042f8 <_fclose_r+0x28>
  4042ec:	2600      	movs	r6, #0
  4042ee:	4630      	mov	r0, r6
  4042f0:	bd70      	pop	{r4, r5, r6, pc}
  4042f2:	89a3      	ldrh	r3, [r4, #12]
  4042f4:	0599      	lsls	r1, r3, #22
  4042f6:	d53c      	bpl.n	404372 <_fclose_r+0xa2>
  4042f8:	4621      	mov	r1, r4
  4042fa:	4628      	mov	r0, r5
  4042fc:	f7fe fb44 	bl	402988 <__sflush_r>
  404300:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404302:	4606      	mov	r6, r0
  404304:	b133      	cbz	r3, 404314 <_fclose_r+0x44>
  404306:	69e1      	ldr	r1, [r4, #28]
  404308:	4628      	mov	r0, r5
  40430a:	4798      	blx	r3
  40430c:	2800      	cmp	r0, #0
  40430e:	bfb8      	it	lt
  404310:	f04f 36ff 	movlt.w	r6, #4294967295
  404314:	89a3      	ldrh	r3, [r4, #12]
  404316:	061a      	lsls	r2, r3, #24
  404318:	d422      	bmi.n	404360 <_fclose_r+0x90>
  40431a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40431c:	b141      	cbz	r1, 404330 <_fclose_r+0x60>
  40431e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404322:	4299      	cmp	r1, r3
  404324:	d002      	beq.n	40432c <_fclose_r+0x5c>
  404326:	4628      	mov	r0, r5
  404328:	f7fe fd4c 	bl	402dc4 <_free_r>
  40432c:	2300      	movs	r3, #0
  40432e:	6323      	str	r3, [r4, #48]	; 0x30
  404330:	6c61      	ldr	r1, [r4, #68]	; 0x44
  404332:	b121      	cbz	r1, 40433e <_fclose_r+0x6e>
  404334:	4628      	mov	r0, r5
  404336:	f7fe fd45 	bl	402dc4 <_free_r>
  40433a:	2300      	movs	r3, #0
  40433c:	6463      	str	r3, [r4, #68]	; 0x44
  40433e:	f7fe fc47 	bl	402bd0 <__sfp_lock_acquire>
  404342:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404344:	2200      	movs	r2, #0
  404346:	07db      	lsls	r3, r3, #31
  404348:	81a2      	strh	r2, [r4, #12]
  40434a:	d50e      	bpl.n	40436a <_fclose_r+0x9a>
  40434c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40434e:	f7fe ffd1 	bl	4032f4 <__retarget_lock_close_recursive>
  404352:	f7fe fc43 	bl	402bdc <__sfp_lock_release>
  404356:	4630      	mov	r0, r6
  404358:	bd70      	pop	{r4, r5, r6, pc}
  40435a:	f7fe fc0d 	bl	402b78 <__sinit>
  40435e:	e7bf      	b.n	4042e0 <_fclose_r+0x10>
  404360:	6921      	ldr	r1, [r4, #16]
  404362:	4628      	mov	r0, r5
  404364:	f7fe fd2e 	bl	402dc4 <_free_r>
  404368:	e7d7      	b.n	40431a <_fclose_r+0x4a>
  40436a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40436c:	f7fe ffc6 	bl	4032fc <__retarget_lock_release_recursive>
  404370:	e7ec      	b.n	40434c <_fclose_r+0x7c>
  404372:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404374:	f7fe ffc0 	bl	4032f8 <__retarget_lock_acquire_recursive>
  404378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40437c:	2b00      	cmp	r3, #0
  40437e:	d1bb      	bne.n	4042f8 <_fclose_r+0x28>
  404380:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404382:	f016 0601 	ands.w	r6, r6, #1
  404386:	d1b1      	bne.n	4042ec <_fclose_r+0x1c>
  404388:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40438a:	f7fe ffb7 	bl	4032fc <__retarget_lock_release_recursive>
  40438e:	4630      	mov	r0, r6
  404390:	bd70      	pop	{r4, r5, r6, pc}
  404392:	bf00      	nop

00404394 <_fstat_r>:
  404394:	b538      	push	{r3, r4, r5, lr}
  404396:	460b      	mov	r3, r1
  404398:	4c07      	ldr	r4, [pc, #28]	; (4043b8 <_fstat_r+0x24>)
  40439a:	4605      	mov	r5, r0
  40439c:	4611      	mov	r1, r2
  40439e:	4618      	mov	r0, r3
  4043a0:	2300      	movs	r3, #0
  4043a2:	6023      	str	r3, [r4, #0]
  4043a4:	f7fd f94d 	bl	401642 <_fstat>
  4043a8:	1c43      	adds	r3, r0, #1
  4043aa:	d000      	beq.n	4043ae <_fstat_r+0x1a>
  4043ac:	bd38      	pop	{r3, r4, r5, pc}
  4043ae:	6823      	ldr	r3, [r4, #0]
  4043b0:	2b00      	cmp	r3, #0
  4043b2:	d0fb      	beq.n	4043ac <_fstat_r+0x18>
  4043b4:	602b      	str	r3, [r5, #0]
  4043b6:	bd38      	pop	{r3, r4, r5, pc}
  4043b8:	204014cc 	.word	0x204014cc

004043bc <_isatty_r>:
  4043bc:	b538      	push	{r3, r4, r5, lr}
  4043be:	4c07      	ldr	r4, [pc, #28]	; (4043dc <_isatty_r+0x20>)
  4043c0:	2300      	movs	r3, #0
  4043c2:	4605      	mov	r5, r0
  4043c4:	4608      	mov	r0, r1
  4043c6:	6023      	str	r3, [r4, #0]
  4043c8:	f7fd f940 	bl	40164c <_isatty>
  4043cc:	1c43      	adds	r3, r0, #1
  4043ce:	d000      	beq.n	4043d2 <_isatty_r+0x16>
  4043d0:	bd38      	pop	{r3, r4, r5, pc}
  4043d2:	6823      	ldr	r3, [r4, #0]
  4043d4:	2b00      	cmp	r3, #0
  4043d6:	d0fb      	beq.n	4043d0 <_isatty_r+0x14>
  4043d8:	602b      	str	r3, [r5, #0]
  4043da:	bd38      	pop	{r3, r4, r5, pc}
  4043dc:	204014cc 	.word	0x204014cc

004043e0 <_lseek_r>:
  4043e0:	b570      	push	{r4, r5, r6, lr}
  4043e2:	460d      	mov	r5, r1
  4043e4:	4c08      	ldr	r4, [pc, #32]	; (404408 <_lseek_r+0x28>)
  4043e6:	4611      	mov	r1, r2
  4043e8:	4606      	mov	r6, r0
  4043ea:	461a      	mov	r2, r3
  4043ec:	4628      	mov	r0, r5
  4043ee:	2300      	movs	r3, #0
  4043f0:	6023      	str	r3, [r4, #0]
  4043f2:	f7fd f92d 	bl	401650 <_lseek>
  4043f6:	1c43      	adds	r3, r0, #1
  4043f8:	d000      	beq.n	4043fc <_lseek_r+0x1c>
  4043fa:	bd70      	pop	{r4, r5, r6, pc}
  4043fc:	6823      	ldr	r3, [r4, #0]
  4043fe:	2b00      	cmp	r3, #0
  404400:	d0fb      	beq.n	4043fa <_lseek_r+0x1a>
  404402:	6033      	str	r3, [r6, #0]
  404404:	bd70      	pop	{r4, r5, r6, pc}
  404406:	bf00      	nop
  404408:	204014cc 	.word	0x204014cc

0040440c <_read_r>:
  40440c:	b570      	push	{r4, r5, r6, lr}
  40440e:	460d      	mov	r5, r1
  404410:	4c08      	ldr	r4, [pc, #32]	; (404434 <_read_r+0x28>)
  404412:	4611      	mov	r1, r2
  404414:	4606      	mov	r6, r0
  404416:	461a      	mov	r2, r3
  404418:	4628      	mov	r0, r5
  40441a:	2300      	movs	r3, #0
  40441c:	6023      	str	r3, [r4, #0]
  40441e:	f7fc fb2f 	bl	400a80 <_read>
  404422:	1c43      	adds	r3, r0, #1
  404424:	d000      	beq.n	404428 <_read_r+0x1c>
  404426:	bd70      	pop	{r4, r5, r6, pc}
  404428:	6823      	ldr	r3, [r4, #0]
  40442a:	2b00      	cmp	r3, #0
  40442c:	d0fb      	beq.n	404426 <_read_r+0x1a>
  40442e:	6033      	str	r3, [r6, #0]
  404430:	bd70      	pop	{r4, r5, r6, pc}
  404432:	bf00      	nop
  404434:	204014cc 	.word	0x204014cc

00404438 <__aeabi_uldivmod>:
  404438:	b953      	cbnz	r3, 404450 <__aeabi_uldivmod+0x18>
  40443a:	b94a      	cbnz	r2, 404450 <__aeabi_uldivmod+0x18>
  40443c:	2900      	cmp	r1, #0
  40443e:	bf08      	it	eq
  404440:	2800      	cmpeq	r0, #0
  404442:	bf1c      	itt	ne
  404444:	f04f 31ff 	movne.w	r1, #4294967295
  404448:	f04f 30ff 	movne.w	r0, #4294967295
  40444c:	f000 b97a 	b.w	404744 <__aeabi_idiv0>
  404450:	f1ad 0c08 	sub.w	ip, sp, #8
  404454:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404458:	f000 f806 	bl	404468 <__udivmoddi4>
  40445c:	f8dd e004 	ldr.w	lr, [sp, #4]
  404460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404464:	b004      	add	sp, #16
  404466:	4770      	bx	lr

00404468 <__udivmoddi4>:
  404468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40446c:	468c      	mov	ip, r1
  40446e:	460d      	mov	r5, r1
  404470:	4604      	mov	r4, r0
  404472:	9e08      	ldr	r6, [sp, #32]
  404474:	2b00      	cmp	r3, #0
  404476:	d151      	bne.n	40451c <__udivmoddi4+0xb4>
  404478:	428a      	cmp	r2, r1
  40447a:	4617      	mov	r7, r2
  40447c:	d96d      	bls.n	40455a <__udivmoddi4+0xf2>
  40447e:	fab2 fe82 	clz	lr, r2
  404482:	f1be 0f00 	cmp.w	lr, #0
  404486:	d00b      	beq.n	4044a0 <__udivmoddi4+0x38>
  404488:	f1ce 0c20 	rsb	ip, lr, #32
  40448c:	fa01 f50e 	lsl.w	r5, r1, lr
  404490:	fa20 fc0c 	lsr.w	ip, r0, ip
  404494:	fa02 f70e 	lsl.w	r7, r2, lr
  404498:	ea4c 0c05 	orr.w	ip, ip, r5
  40449c:	fa00 f40e 	lsl.w	r4, r0, lr
  4044a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4044a4:	0c25      	lsrs	r5, r4, #16
  4044a6:	fbbc f8fa 	udiv	r8, ip, sl
  4044aa:	fa1f f987 	uxth.w	r9, r7
  4044ae:	fb0a cc18 	mls	ip, sl, r8, ip
  4044b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4044b6:	fb08 f309 	mul.w	r3, r8, r9
  4044ba:	42ab      	cmp	r3, r5
  4044bc:	d90a      	bls.n	4044d4 <__udivmoddi4+0x6c>
  4044be:	19ed      	adds	r5, r5, r7
  4044c0:	f108 32ff 	add.w	r2, r8, #4294967295
  4044c4:	f080 8123 	bcs.w	40470e <__udivmoddi4+0x2a6>
  4044c8:	42ab      	cmp	r3, r5
  4044ca:	f240 8120 	bls.w	40470e <__udivmoddi4+0x2a6>
  4044ce:	f1a8 0802 	sub.w	r8, r8, #2
  4044d2:	443d      	add	r5, r7
  4044d4:	1aed      	subs	r5, r5, r3
  4044d6:	b2a4      	uxth	r4, r4
  4044d8:	fbb5 f0fa 	udiv	r0, r5, sl
  4044dc:	fb0a 5510 	mls	r5, sl, r0, r5
  4044e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4044e4:	fb00 f909 	mul.w	r9, r0, r9
  4044e8:	45a1      	cmp	r9, r4
  4044ea:	d909      	bls.n	404500 <__udivmoddi4+0x98>
  4044ec:	19e4      	adds	r4, r4, r7
  4044ee:	f100 33ff 	add.w	r3, r0, #4294967295
  4044f2:	f080 810a 	bcs.w	40470a <__udivmoddi4+0x2a2>
  4044f6:	45a1      	cmp	r9, r4
  4044f8:	f240 8107 	bls.w	40470a <__udivmoddi4+0x2a2>
  4044fc:	3802      	subs	r0, #2
  4044fe:	443c      	add	r4, r7
  404500:	eba4 0409 	sub.w	r4, r4, r9
  404504:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  404508:	2100      	movs	r1, #0
  40450a:	2e00      	cmp	r6, #0
  40450c:	d061      	beq.n	4045d2 <__udivmoddi4+0x16a>
  40450e:	fa24 f40e 	lsr.w	r4, r4, lr
  404512:	2300      	movs	r3, #0
  404514:	6034      	str	r4, [r6, #0]
  404516:	6073      	str	r3, [r6, #4]
  404518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40451c:	428b      	cmp	r3, r1
  40451e:	d907      	bls.n	404530 <__udivmoddi4+0xc8>
  404520:	2e00      	cmp	r6, #0
  404522:	d054      	beq.n	4045ce <__udivmoddi4+0x166>
  404524:	2100      	movs	r1, #0
  404526:	e886 0021 	stmia.w	r6, {r0, r5}
  40452a:	4608      	mov	r0, r1
  40452c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404530:	fab3 f183 	clz	r1, r3
  404534:	2900      	cmp	r1, #0
  404536:	f040 808e 	bne.w	404656 <__udivmoddi4+0x1ee>
  40453a:	42ab      	cmp	r3, r5
  40453c:	d302      	bcc.n	404544 <__udivmoddi4+0xdc>
  40453e:	4282      	cmp	r2, r0
  404540:	f200 80fa 	bhi.w	404738 <__udivmoddi4+0x2d0>
  404544:	1a84      	subs	r4, r0, r2
  404546:	eb65 0503 	sbc.w	r5, r5, r3
  40454a:	2001      	movs	r0, #1
  40454c:	46ac      	mov	ip, r5
  40454e:	2e00      	cmp	r6, #0
  404550:	d03f      	beq.n	4045d2 <__udivmoddi4+0x16a>
  404552:	e886 1010 	stmia.w	r6, {r4, ip}
  404556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40455a:	b912      	cbnz	r2, 404562 <__udivmoddi4+0xfa>
  40455c:	2701      	movs	r7, #1
  40455e:	fbb7 f7f2 	udiv	r7, r7, r2
  404562:	fab7 fe87 	clz	lr, r7
  404566:	f1be 0f00 	cmp.w	lr, #0
  40456a:	d134      	bne.n	4045d6 <__udivmoddi4+0x16e>
  40456c:	1beb      	subs	r3, r5, r7
  40456e:	0c3a      	lsrs	r2, r7, #16
  404570:	fa1f fc87 	uxth.w	ip, r7
  404574:	2101      	movs	r1, #1
  404576:	fbb3 f8f2 	udiv	r8, r3, r2
  40457a:	0c25      	lsrs	r5, r4, #16
  40457c:	fb02 3318 	mls	r3, r2, r8, r3
  404580:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404584:	fb0c f308 	mul.w	r3, ip, r8
  404588:	42ab      	cmp	r3, r5
  40458a:	d907      	bls.n	40459c <__udivmoddi4+0x134>
  40458c:	19ed      	adds	r5, r5, r7
  40458e:	f108 30ff 	add.w	r0, r8, #4294967295
  404592:	d202      	bcs.n	40459a <__udivmoddi4+0x132>
  404594:	42ab      	cmp	r3, r5
  404596:	f200 80d1 	bhi.w	40473c <__udivmoddi4+0x2d4>
  40459a:	4680      	mov	r8, r0
  40459c:	1aed      	subs	r5, r5, r3
  40459e:	b2a3      	uxth	r3, r4
  4045a0:	fbb5 f0f2 	udiv	r0, r5, r2
  4045a4:	fb02 5510 	mls	r5, r2, r0, r5
  4045a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4045ac:	fb0c fc00 	mul.w	ip, ip, r0
  4045b0:	45a4      	cmp	ip, r4
  4045b2:	d907      	bls.n	4045c4 <__udivmoddi4+0x15c>
  4045b4:	19e4      	adds	r4, r4, r7
  4045b6:	f100 33ff 	add.w	r3, r0, #4294967295
  4045ba:	d202      	bcs.n	4045c2 <__udivmoddi4+0x15a>
  4045bc:	45a4      	cmp	ip, r4
  4045be:	f200 80b8 	bhi.w	404732 <__udivmoddi4+0x2ca>
  4045c2:	4618      	mov	r0, r3
  4045c4:	eba4 040c 	sub.w	r4, r4, ip
  4045c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4045cc:	e79d      	b.n	40450a <__udivmoddi4+0xa2>
  4045ce:	4631      	mov	r1, r6
  4045d0:	4630      	mov	r0, r6
  4045d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4045d6:	f1ce 0420 	rsb	r4, lr, #32
  4045da:	fa05 f30e 	lsl.w	r3, r5, lr
  4045de:	fa07 f70e 	lsl.w	r7, r7, lr
  4045e2:	fa20 f804 	lsr.w	r8, r0, r4
  4045e6:	0c3a      	lsrs	r2, r7, #16
  4045e8:	fa25 f404 	lsr.w	r4, r5, r4
  4045ec:	ea48 0803 	orr.w	r8, r8, r3
  4045f0:	fbb4 f1f2 	udiv	r1, r4, r2
  4045f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4045f8:	fb02 4411 	mls	r4, r2, r1, r4
  4045fc:	fa1f fc87 	uxth.w	ip, r7
  404600:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  404604:	fb01 f30c 	mul.w	r3, r1, ip
  404608:	42ab      	cmp	r3, r5
  40460a:	fa00 f40e 	lsl.w	r4, r0, lr
  40460e:	d909      	bls.n	404624 <__udivmoddi4+0x1bc>
  404610:	19ed      	adds	r5, r5, r7
  404612:	f101 30ff 	add.w	r0, r1, #4294967295
  404616:	f080 808a 	bcs.w	40472e <__udivmoddi4+0x2c6>
  40461a:	42ab      	cmp	r3, r5
  40461c:	f240 8087 	bls.w	40472e <__udivmoddi4+0x2c6>
  404620:	3902      	subs	r1, #2
  404622:	443d      	add	r5, r7
  404624:	1aeb      	subs	r3, r5, r3
  404626:	fa1f f588 	uxth.w	r5, r8
  40462a:	fbb3 f0f2 	udiv	r0, r3, r2
  40462e:	fb02 3310 	mls	r3, r2, r0, r3
  404632:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404636:	fb00 f30c 	mul.w	r3, r0, ip
  40463a:	42ab      	cmp	r3, r5
  40463c:	d907      	bls.n	40464e <__udivmoddi4+0x1e6>
  40463e:	19ed      	adds	r5, r5, r7
  404640:	f100 38ff 	add.w	r8, r0, #4294967295
  404644:	d26f      	bcs.n	404726 <__udivmoddi4+0x2be>
  404646:	42ab      	cmp	r3, r5
  404648:	d96d      	bls.n	404726 <__udivmoddi4+0x2be>
  40464a:	3802      	subs	r0, #2
  40464c:	443d      	add	r5, r7
  40464e:	1aeb      	subs	r3, r5, r3
  404650:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  404654:	e78f      	b.n	404576 <__udivmoddi4+0x10e>
  404656:	f1c1 0720 	rsb	r7, r1, #32
  40465a:	fa22 f807 	lsr.w	r8, r2, r7
  40465e:	408b      	lsls	r3, r1
  404660:	fa05 f401 	lsl.w	r4, r5, r1
  404664:	ea48 0303 	orr.w	r3, r8, r3
  404668:	fa20 fe07 	lsr.w	lr, r0, r7
  40466c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  404670:	40fd      	lsrs	r5, r7
  404672:	ea4e 0e04 	orr.w	lr, lr, r4
  404676:	fbb5 f9fc 	udiv	r9, r5, ip
  40467a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40467e:	fb0c 5519 	mls	r5, ip, r9, r5
  404682:	fa1f f883 	uxth.w	r8, r3
  404686:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40468a:	fb09 f408 	mul.w	r4, r9, r8
  40468e:	42ac      	cmp	r4, r5
  404690:	fa02 f201 	lsl.w	r2, r2, r1
  404694:	fa00 fa01 	lsl.w	sl, r0, r1
  404698:	d908      	bls.n	4046ac <__udivmoddi4+0x244>
  40469a:	18ed      	adds	r5, r5, r3
  40469c:	f109 30ff 	add.w	r0, r9, #4294967295
  4046a0:	d243      	bcs.n	40472a <__udivmoddi4+0x2c2>
  4046a2:	42ac      	cmp	r4, r5
  4046a4:	d941      	bls.n	40472a <__udivmoddi4+0x2c2>
  4046a6:	f1a9 0902 	sub.w	r9, r9, #2
  4046aa:	441d      	add	r5, r3
  4046ac:	1b2d      	subs	r5, r5, r4
  4046ae:	fa1f fe8e 	uxth.w	lr, lr
  4046b2:	fbb5 f0fc 	udiv	r0, r5, ip
  4046b6:	fb0c 5510 	mls	r5, ip, r0, r5
  4046ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4046be:	fb00 f808 	mul.w	r8, r0, r8
  4046c2:	45a0      	cmp	r8, r4
  4046c4:	d907      	bls.n	4046d6 <__udivmoddi4+0x26e>
  4046c6:	18e4      	adds	r4, r4, r3
  4046c8:	f100 35ff 	add.w	r5, r0, #4294967295
  4046cc:	d229      	bcs.n	404722 <__udivmoddi4+0x2ba>
  4046ce:	45a0      	cmp	r8, r4
  4046d0:	d927      	bls.n	404722 <__udivmoddi4+0x2ba>
  4046d2:	3802      	subs	r0, #2
  4046d4:	441c      	add	r4, r3
  4046d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4046da:	eba4 0408 	sub.w	r4, r4, r8
  4046de:	fba0 8902 	umull	r8, r9, r0, r2
  4046e2:	454c      	cmp	r4, r9
  4046e4:	46c6      	mov	lr, r8
  4046e6:	464d      	mov	r5, r9
  4046e8:	d315      	bcc.n	404716 <__udivmoddi4+0x2ae>
  4046ea:	d012      	beq.n	404712 <__udivmoddi4+0x2aa>
  4046ec:	b156      	cbz	r6, 404704 <__udivmoddi4+0x29c>
  4046ee:	ebba 030e 	subs.w	r3, sl, lr
  4046f2:	eb64 0405 	sbc.w	r4, r4, r5
  4046f6:	fa04 f707 	lsl.w	r7, r4, r7
  4046fa:	40cb      	lsrs	r3, r1
  4046fc:	431f      	orrs	r7, r3
  4046fe:	40cc      	lsrs	r4, r1
  404700:	6037      	str	r7, [r6, #0]
  404702:	6074      	str	r4, [r6, #4]
  404704:	2100      	movs	r1, #0
  404706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40470a:	4618      	mov	r0, r3
  40470c:	e6f8      	b.n	404500 <__udivmoddi4+0x98>
  40470e:	4690      	mov	r8, r2
  404710:	e6e0      	b.n	4044d4 <__udivmoddi4+0x6c>
  404712:	45c2      	cmp	sl, r8
  404714:	d2ea      	bcs.n	4046ec <__udivmoddi4+0x284>
  404716:	ebb8 0e02 	subs.w	lr, r8, r2
  40471a:	eb69 0503 	sbc.w	r5, r9, r3
  40471e:	3801      	subs	r0, #1
  404720:	e7e4      	b.n	4046ec <__udivmoddi4+0x284>
  404722:	4628      	mov	r0, r5
  404724:	e7d7      	b.n	4046d6 <__udivmoddi4+0x26e>
  404726:	4640      	mov	r0, r8
  404728:	e791      	b.n	40464e <__udivmoddi4+0x1e6>
  40472a:	4681      	mov	r9, r0
  40472c:	e7be      	b.n	4046ac <__udivmoddi4+0x244>
  40472e:	4601      	mov	r1, r0
  404730:	e778      	b.n	404624 <__udivmoddi4+0x1bc>
  404732:	3802      	subs	r0, #2
  404734:	443c      	add	r4, r7
  404736:	e745      	b.n	4045c4 <__udivmoddi4+0x15c>
  404738:	4608      	mov	r0, r1
  40473a:	e708      	b.n	40454e <__udivmoddi4+0xe6>
  40473c:	f1a8 0802 	sub.w	r8, r8, #2
  404740:	443d      	add	r5, r7
  404742:	e72b      	b.n	40459c <__udivmoddi4+0x134>

00404744 <__aeabi_idiv0>:
  404744:	4770      	bx	lr
  404746:	bf00      	nop

00404748 <__func__.5842>:
  404748:	6262 705f 726f 5f74 6573 5f74 6164 6174     bb_port_set_data
  404758:	645f 7269 6365 3174 0036 0000               _direct16...

00404764 <__func__.5874>:
  404764:	6262 705f 726f 5f74 6567 5f74 6164 6174     bb_port_get_data
  404774:	645f 7269 6365 3374 0032 0000 6228 7479     _direct32...(byt
  404784:	4f65 6666 6573 4974 576e 726f 2064 2025     eOffsetInWord % 
  404794:	5532 2029 3d3d 3020 0000 0000 2e2e 622f     2U) == 0....../b
  4047a4:	616c 6b63 6f62 7261 2f64 6262 705f 726f     lackboard/bb_por
  4047b4:	2e74 0063 7962 6574 664f 7366 7465 6e49     t.c.byteOffsetIn
  4047c4:	6f57 6472 3d20 203d 0030 0000               Word == 0...

004047d0 <can_spec_can_element_list>:
  4047d0:	0400 0000 4974 0040 0064 0000 0004 0000     ....tI@.d.......
  4047e0:	4984 0040 0001 0004 0000 0000 0000 0000     .I@.............
	...
  404800:	0579 0040 0001 0000 0103 0000 0410 0000     y.@.............
  404810:	4990 0040 0064 0000 0008 0000 49a4 0040     .I@.d........I@.
  404820:	0001 0002 49b8 0040 0201 0002 49cc 0040     .....I@......I@.
  404830:	0401 0002 49dc 0040 0601 0002 0000 0000     .....I@.........
  404840:	0000 0000 0001 0000 0460 0000 49ec 0040     ........`....I@.
  404850:	0064 0000 0001 0000 49f0 0040 0001 0001     d........I@.....
	...
  404880:	0001 0000 0470 0000 4a00 0040 0064 0000     ....p....J@.d...
  404890:	0001 0000 4a14 0040 0001 0001 0000 0000     .....J@.........
	...
  4048bc:	0001 0000 0480 0000 4a24 0040 0064 0000     ........$J@.d...
  4048cc:	0001 0000 4a28 0040 0001 0001 0000 0000     ....(J@.........
	...
  4048f8:	0001 0000 0630 0000 4a38 0040 0064 0000     ....0...8J@.d...
  404908:	0001 0000 4a44 0040 0001 0001 0000 0000     ....DJ@.........
	...
  40492c:	0579 0040 0001 0000 0100 0000 0631 0000     y.@.........1...
  40493c:	4a50 0040 0064 0000 0008 0000 4a5c 0040     PJ@.d.......\J@.
  40494c:	0001 0002 4a6c 0040 0201 0002 4a80 0040     ....lJ@......J@.
  40495c:	0401 0002 4a8c 0040 0601 0002 0000 0000     .....J@.........
  40496c:	0000 0000 0100 0000 4353 5f4d 7953 7473     ........SCM_Syst
  40497c:	6d65 6142 6672 0079 6554 7473 6c46 6f6f     emBarfy.TestFloo
  40498c:	7966 0000 4353 5f4d 6f4d 6f74 3172 6150     fy..SCM_Motor1Pa
  40499c:	6172 736d 0031 0000 6f6d 6f74 3172 6341     rams1...motor1Ac
  4049ac:	6563 656c 6172 6974 6e6f 0000 6f6d 6f74     celeration..moto
  4049bc:	3172 6544 6563 656c 6172 6974 6e6f 0000     r1Deceleration..
  4049cc:	6f6d 6f74 3172 614d 5378 6570 6465 0000     motor1MaxSpeed..
  4049dc:	6f6d 6f74 3172 694d 536e 6570 6465 0000     motor1MinSpeed..
  4049ec:	4353 5f4d 6f4d 6f74 3172 6f43 746e 6f72     SCM_Motor1Contro
  4049fc:	006c 0000 4353 5f4d 6f4d 6f74 3172 6f43     l...SCM_Motor1Co
  404a0c:	746e 6f72 0032 0000 6f4d 6f74 3272 6f43     ntro2...Motor2Co
  404a1c:	746e 6f72 006c 0000 4353 5f4d 6f4d 6f74     ntrol...SCM_Moto
  404a2c:	3372 6f43 746e 6f72 006c 0000 4352 5f4d     r3Control...RCM_
  404a3c:	7953 7473 6d65 0000 6f4d 7564 656c 6449     System..ModuleId
  404a4c:	0000 0000 4352 5f4d 6553 736e 726f 0031     ....RCM_Sensor1.
  404a5c:	6553 736e 726f 5631 6c6f 6174 6567 0000     Sensor1Voltage..
  404a6c:	6553 736e 726f 5431 6d65 6570 6172 7574     Sensor1Temperatu
  404a7c:	6572 0000 6553 736e 726f 4631 6f6f 0000     re..Sensor1Foo..
  404a8c:	6553 736e 726f 4231 7261 0000 6574 7473     Sensor1Bar..test
  404a9c:	6143 6c6c 6162 6b63 203a 4353 5f4d 5645     Callback: SCM_EV
  404aac:	4e45 5f54 4f46 3d4f 6425 202c 7872 6843     ENT_FOO=%d, rxCh
  404abc:	6e61 253d 2c64 7420 4378 6168 3d6e 6425     an=%d, txChan=%d
  404acc:	202c 6f63 6e75 6574 3d72 6425 000a 0000     , counter=%d....
  404adc:	203a 434d 4e41 6220 7375 6f20 6666 6520     : MCAN bus off e
  404aec:	7272 726f 202c 6572 692d 696e 6974 6c61     rror, re-initial
  404afc:	7a69 7461 6f69 2e6e 0d20 0d0a 000a 0000     ization. .......
  404b0c:	7250 746f 636f 6c6f 4120 4b43 6520 7272     Protocol ACK err
  404b1c:	726f 202c 6c70 6165 6573 6420 756f 6c62     or, please doubl
  404b2c:	2065 6863 6365 206b 6874 2065 6c63 636f     e check the cloc
  404b3c:	206b 6e69 7420 6f77 6220 616f 6472 2e73     k in two boards.
  404b4c:	0d20 0d0a 000a 0000 7250 746f 636f 6c6f      .......Protocol
  404b5c:	6620 726f 616d 2074 7265 6f72 2c72 7020      format error, p
  404b6c:	656c 7361 2065 6f64 6275 656c 6320 6568     lease double che
  404b7c:	6b63 7420 6568 6320 6f6c 6b63 6920 206e     ck the clock in 
  404b8c:	7774 206f 6f62 7261 7364 202e 0a0d 0a0d     two boards. ....
  404b9c:	0000 0000 202c 7566 636e 6974 6e6f 203a     ...., function: 
  404bac:	0000 0000 7361 6573 7472 6f69 206e 2522     ....assertion "%
  404bbc:	2273 6620 6961 656c 3a64 6620 6c69 2065     s" failed: file 
  404bcc:	2522 2273 202c 696c 656e 2520 2564 2573     "%s", line %d%s%
  404bdc:	0a73 0000                                   s...

00404be0 <_global_impure_ptr>:
  404be0:	0018 2040 3130 3332 3534 3736 3938 4241     ..@ 0123456789AB
  404bf0:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  404c00:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  404c10:	296c 0000                                   l)..

00404c14 <blanks.7217>:
  404c14:	2020 2020 2020 2020 2020 2020 2020 2020                     

00404c24 <zeroes.7218>:
  404c24:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  404c34:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

00404c44 <_ctype_>:
  404c44:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  404c54:	2020 2020 2020 2020 2020 2020 2020 2020                     
  404c64:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  404c74:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  404c84:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  404c94:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  404ca4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  404cb4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  404cc4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00404d48 <_init>:
  404d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404d4a:	bf00      	nop
  404d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404d4e:	bc08      	pop	{r3}
  404d50:	469e      	mov	lr, r3
  404d52:	4770      	bx	lr

00404d54 <__init_array_start>:
  404d54:	00402959 	.word	0x00402959

00404d58 <__frame_dummy_init_array_entry>:
  404d58:	0040018d                                ..@.

00404d5c <_fini>:
  404d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404d5e:	bf00      	nop
  404d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404d62:	bc08      	pop	{r3}
  404d64:	469e      	mov	lr, r3
  404d66:	4770      	bx	lr

00404d68 <__fini_array_start>:
  404d68:	00400169 	.word	0x00400169
