
MCAN_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e00  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404e00  00404e00  00014e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00404e08  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000b10  204009c0  004057c8  000209c0  2**2
                  ALLOC
  4 .stack        00002000  204014d0  004062d8  000209c0  2**0
                  ALLOC
  5 .heap         00000200  204034d0  004082d8  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001e0e6  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004258  00000000  00000000  0003eb2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006eec  00000000  00000000  00042d85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000dc0  00000000  00000000  00049c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e00  00000000  00000000  0004aa31  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00023459  00000000  00000000  0004b831  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000fc9c  00000000  00000000  0006ec8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00097fca  00000000  00000000  0007e926  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002d0c  00000000  00000000  001168f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d0 34 40 20 dd 13 40 00 db 13 40 00 db 13 40 00     .4@ ..@...@...@.
  400010:	db 13 40 00 db 13 40 00 db 13 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	db 13 40 00 db 13 40 00 00 00 00 00 db 13 40 00     ..@...@.......@.
  40003c:	db 13 40 00 db 13 40 00 db 13 40 00 db 13 40 00     ..@...@...@...@.
  40004c:	db 13 40 00 db 13 40 00 db 13 40 00 db 13 40 00     ..@...@...@...@.
  40005c:	db 13 40 00 db 13 40 00 00 00 00 00 9d 10 40 00     ..@...@.......@.
  40006c:	b1 10 40 00 c5 10 40 00 db 13 40 00 db 13 40 00     ..@...@...@...@.
  40007c:	db 13 40 00 d9 10 40 00 ed 10 40 00 db 13 40 00     ..@...@...@...@.
  40008c:	db 13 40 00 db 13 40 00 db 13 40 00 db 13 40 00     ..@...@...@...@.
  40009c:	db 13 40 00 db 13 40 00 db 13 40 00 db 13 40 00     ..@...@...@...@.
  4000ac:	db 13 40 00 db 13 40 00 db 13 40 00 db 13 40 00     ..@...@...@...@.
  4000bc:	db 13 40 00 db 13 40 00 db 13 40 00 db 13 40 00     ..@...@...@...@.
  4000cc:	db 13 40 00 db 13 40 00 5d 09 40 00 db 13 40 00     ..@...@.].@...@.
  4000dc:	db 13 40 00 db 13 40 00 db 13 40 00 db 13 40 00     ..@...@...@...@.
  4000ec:	db 13 40 00 db 13 40 00 db 13 40 00 db 13 40 00     ..@...@...@...@.
  4000fc:	db 13 40 00 db 13 40 00 db 13 40 00 db 13 40 00     ..@...@...@...@.
  40010c:	db 13 40 00 db 13 40 00 db 13 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 db 13 40 00 db 13 40 00 db 13 40 00     ......@...@...@.
  40012c:	db 13 40 00 db 13 40 00 db 13 40 00 db 13 40 00     ..@...@...@...@.
  40013c:	db 13 40 00 db 13 40 00 db 13 40 00 db 13 40 00     ..@...@...@...@.
  40014c:	db 13 40 00 db 13 40 00 db 13 40 00 db 13 40 00     ..@...@...@...@.
  40015c:	db 13 40 00 db 13 40 00 db 13 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c0 	.word	0x204009c0
  400184:	00000000 	.word	0x00000000
  400188:	00404e08 	.word	0x00404e08

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00404e08 	.word	0x00404e08
  4001c8:	204009c4 	.word	0x204009c4
  4001cc:	00404e08 	.word	0x00404e08
  4001d0:	00000000 	.word	0x00000000

004001d4 <bb_elem_decrement_wakeup_offset>:
 * @return True if the wakeup offset was decremented, false if it was not
 */
bool_T bb_elem_decrement_wakeup_offset(BlackboardElement_T * bbElement, const uint32_t elapsedTicks)
{
    bool_T decremented = false;
    if (bbElement->wakeupOffset > elapsedTicks)
  4001d4:	68c3      	ldr	r3, [r0, #12]
  4001d6:	428b      	cmp	r3, r1
  4001d8:	d903      	bls.n	4001e2 <bb_elem_decrement_wakeup_offset+0xe>
    {
        bbElement->wakeupOffset = bbElement->wakeupOffset - elapsedTicks;
  4001da:	1a5b      	subs	r3, r3, r1
  4001dc:	60c3      	str	r3, [r0, #12]
        decremented = true;
  4001de:	2001      	movs	r0, #1
  4001e0:	4770      	bx	lr
    bool_T decremented = false;
  4001e2:	2000      	movs	r0, #0
    }
    return decremented;
}
  4001e4:	4770      	bx	lr
	...

004001e8 <bb_elem_get_data_for_can>:
 *
 * @param[out] data0 a pointer to a u32 that will be copied with the lower 4 bytes of data.
 * @param[out] data1 a pointer to a u32 that will be copied with the upper 4 bytes of data.
 */
void bb_elem_get_data_for_can(BlackboardElement_T const * bbElement, uint32_t * const data0, uint32_t * const data1)
{
  4001e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4001ea:	4606      	mov	r6, r0
  4001ec:	460f      	mov	r7, r1
  4001ee:	4615      	mov	r5, r2
    *data0 = bb_port_get_data_direct32(bbElement, 0U);
  4001f0:	2100      	movs	r1, #0
  4001f2:	4c04      	ldr	r4, [pc, #16]	; (400204 <bb_elem_get_data_for_can+0x1c>)
  4001f4:	47a0      	blx	r4
  4001f6:	6038      	str	r0, [r7, #0]
    *data1 = bb_port_get_data_direct32(bbElement, 4U);
  4001f8:	2104      	movs	r1, #4
  4001fa:	4630      	mov	r0, r6
  4001fc:	47a0      	blx	r4
  4001fe:	6028      	str	r0, [r5, #0]
  400200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400202:	bf00      	nop
  400204:	004003f9 	.word	0x004003f9

00400208 <bb_elem_update_last_tick_count>:
 * @brief updateLastTickCount updates last tick count to the current tick if the scheduler is running
 *
 * @return none
 */
void bb_elem_update_last_tick_count(BlackboardElement_T * bbElement)
{
  400208:	b510      	push	{r4, lr}
  40020a:	4604      	mov	r4, r0
    bbElement->lastUpdate_tick = bb_port_get_current_ticks();
  40020c:	4b01      	ldr	r3, [pc, #4]	; (400214 <bb_elem_update_last_tick_count+0xc>)
  40020e:	4798      	blx	r3
  400210:	60a0      	str	r0, [r4, #8]
  400212:	bd10      	pop	{r4, pc}
  400214:	004003b5 	.word	0x004003b5

00400218 <bb_elem_set_uint8_data>:
{
  400218:	b510      	push	{r4, lr}
  40021a:	4604      	mov	r4, r0
    bb_port_set_data_direct8(bbElement, data8, index);
  40021c:	4b02      	ldr	r3, [pc, #8]	; (400228 <bb_elem_set_uint8_data+0x10>)
  40021e:	4798      	blx	r3
    bb_elem_update_last_tick_count(bbElement);
  400220:	4620      	mov	r0, r4
  400222:	4b02      	ldr	r3, [pc, #8]	; (40022c <bb_elem_set_uint8_data+0x14>)
  400224:	4798      	blx	r3
  400226:	bd10      	pop	{r4, pc}
  400228:	004003c1 	.word	0x004003c1
  40022c:	00400209 	.word	0x00400209

00400230 <bb_elem_set_int8_data>:
{
  400230:	b508      	push	{r3, lr}
    bb_elem_set_uint8_data(bbElement, bb_utils_toUnsigned8(data8), index);
  400232:	b2c9      	uxtb	r1, r1
  400234:	4b01      	ldr	r3, [pc, #4]	; (40023c <bb_elem_set_int8_data+0xc>)
  400236:	4798      	blx	r3
  400238:	bd08      	pop	{r3, pc}
  40023a:	bf00      	nop
  40023c:	00400219 	.word	0x00400219

00400240 <bb_elem_set_uint16_data>:
{
  400240:	b510      	push	{r4, lr}
  400242:	4604      	mov	r4, r0
    bb_port_set_data_direct16(bbElement, data16, index);
  400244:	4b02      	ldr	r3, [pc, #8]	; (400250 <bb_elem_set_uint16_data+0x10>)
  400246:	4798      	blx	r3
    bb_elem_update_last_tick_count(bbElement);
  400248:	4620      	mov	r0, r4
  40024a:	4b02      	ldr	r3, [pc, #8]	; (400254 <bb_elem_set_uint16_data+0x14>)
  40024c:	4798      	blx	r3
  40024e:	bd10      	pop	{r4, pc}
  400250:	004003c5 	.word	0x004003c5
  400254:	00400209 	.word	0x00400209

00400258 <bb_elem_set_int16_data>:
{
  400258:	b508      	push	{r3, lr}
    bb_elem_set_uint16_data(bbElement, bb_utils_toUnsigned16(data16), index);
  40025a:	b289      	uxth	r1, r1
  40025c:	4b01      	ldr	r3, [pc, #4]	; (400264 <bb_elem_set_int16_data+0xc>)
  40025e:	4798      	blx	r3
  400260:	bd08      	pop	{r3, pc}
  400262:	bf00      	nop
  400264:	00400241 	.word	0x00400241

00400268 <bb_tx_proc_init>:
void bb_tx_proc_init(BlackboardTxProcessor_T * bbTxProc,
                     uint32_t maxDelay,
                     ICANTx_T* transmitters,
                     uint32_t numTransmitters,
                     uint32_t currTimestampTicks)
{
  400268:	b570      	push	{r4, r5, r6, lr}
  40026a:	9e04      	ldr	r6, [sp, #16]
    bbTxProc->maxDelay = maxDelay;
  40026c:	6001      	str	r1, [r0, #0]
    bbTxProc->transmitters = transmitters;
  40026e:	6042      	str	r2, [r0, #4]
    bbTxProc->numTransmitters = numTransmitters;
  400270:	6083      	str	r3, [r0, #8]

    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  400272:	2400      	movs	r4, #0
    {
        BlackboardElement_T * bbElement = bb_get_element((CANElementIndex_T)i);
  400274:	4d04      	ldr	r5, [pc, #16]	; (400288 <bb_tx_proc_init+0x20>)
  400276:	b2e0      	uxtb	r0, r4
  400278:	47a8      	blx	r5
        bb_elem_set_wakeup_offset(bbElement, currTimestampTicks + i);
  40027a:	1933      	adds	r3, r6, r4
 *
 * @param bbElement Pointer to the blackboard element struct to set the data of
 */
static inline void bb_elem_set_wakeup_offset(BlackboardElement_T * bbElement, const uint32_t wakeupOffset)
{
    bbElement->wakeupOffset = wakeupOffset;
  40027c:	60c3      	str	r3, [r0, #12]
    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  40027e:	3401      	adds	r4, #1
  400280:	2c07      	cmp	r4, #7
  400282:	d1f8      	bne.n	400276 <bb_tx_proc_init+0xe>
    }
}
  400284:	bd70      	pop	{r4, r5, r6, pc}
  400286:	bf00      	nop
  400288:	00400425 	.word	0x00400425

0040028c <bb_tx_proc_tx_message>:
                   const CANElement_T * canElement,
                   const BlackboardTxProcessor_T * const bbTxProc,
                   uint32_t canChannel,
                   uint32_t maskTxChannel,
                   uint32_t minimumOffsetTicks)
{
  40028c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40028e:	b083      	sub	sp, #12
  400290:	460f      	mov	r7, r1
  400292:	4615      	mov	r5, r2
  400294:	461e      	mov	r6, r3
    BlackboardElement_T * bbElement = bb_get_element((CANElementIndex_T)index);
  400296:	b2c0      	uxtb	r0, r0
  400298:	4b1c      	ldr	r3, [pc, #112]	; (40030c <bb_tx_proc_tx_message+0x80>)
  40029a:	4798      	blx	r3
  40029c:	4604      	mov	r4, r0
    if (!bb_elem_decrement_wakeup_offset(bbElement, elapsedTicks))
  40029e:	4639      	mov	r1, r7
  4002a0:	4b1b      	ldr	r3, [pc, #108]	; (400310 <bb_tx_proc_tx_message+0x84>)
  4002a2:	4798      	blx	r3
  4002a4:	b130      	cbz	r0, 4002b4 <bb_tx_proc_tx_message+0x28>
 *
 * @return The smaller of the current minimum offset and the blackboard element's wakeup offset
 */
static inline uint32_t bb_elem_compute_minimum_offset_ticks(BlackboardElement_T const * bbElement, const uint32_t minimumOffsetTicks)
{
    return (minimumOffsetTicks > bbElement->wakeupOffset) ? bbElement->wakeupOffset : minimumOffsetTicks;
  4002a6:	68e3      	ldr	r3, [r4, #12]
                                            CAN_NONE);                 // Rx Channel is N/A
        }
        // else Callback container is null, don't call
    }
    return bb_elem_compute_minimum_offset_ticks(bbElement, minimumOffsetTicks);
}
  4002a8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4002aa:	4298      	cmp	r0, r3
  4002ac:	bf28      	it	cs
  4002ae:	4618      	movcs	r0, r3
  4002b0:	b003      	add	sp, #12
  4002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        const uint32_t period_ticks = BB_PORT_MS_TO_TICKS(msgInfo->period_ms);
  4002b4:	68aa      	ldr	r2, [r5, #8]
  4002b6:	23c8      	movs	r3, #200	; 0xc8
  4002b8:	fb03 f302 	mul.w	r3, r3, r2
  4002bc:	4a15      	ldr	r2, [pc, #84]	; (400314 <bb_tx_proc_tx_message+0x88>)
  4002be:	fba2 2303 	umull	r2, r3, r2, r3
  4002c2:	099b      	lsrs	r3, r3, #6
    return elapsedTicks - bbElement->wakeupOffset;
  4002c4:	68e2      	ldr	r2, [r4, #12]
  4002c6:	1abf      	subs	r7, r7, r2
        bb_elem_set_wakeup_offset(bbElement, period_ticks - (overflow_ticks % period_ticks));
  4002c8:	fbb7 f2f3 	udiv	r2, r7, r3
  4002cc:	fb03 7712 	mls	r7, r3, r2, r7
  4002d0:	1bdb      	subs	r3, r3, r7
    bbElement->wakeupOffset = wakeupOffset;
  4002d2:	60e3      	str	r3, [r4, #12]
        uint32_t tx_data[2] = {0, 0};
  4002d4:	2300      	movs	r3, #0
  4002d6:	9300      	str	r3, [sp, #0]
  4002d8:	9301      	str	r3, [sp, #4]
        bb_elem_get_data_for_can(bbElement, &tx_data[0], &tx_data[1]);
  4002da:	aa01      	add	r2, sp, #4
  4002dc:	4669      	mov	r1, sp
  4002de:	4620      	mov	r0, r4
  4002e0:	4b0d      	ldr	r3, [pc, #52]	; (400318 <bb_tx_proc_tx_message+0x8c>)
  4002e2:	4798      	blx	r3
        const ICANTx_T * const transmitter = &bbTxProc->transmitters[canChannel];
  4002e4:	6873      	ldr	r3, [r6, #4]
  4002e6:	9a08      	ldr	r2, [sp, #32]
  4002e8:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
        transmitter->transmitFn(transmitter->context, msgInfo->id, (uint8_t *)(&tx_data[0]), (uint8_t)msgInfo->numBytes);
  4002ec:	f853 6032 	ldr.w	r6, [r3, r2, lsl #3]
  4002f0:	7b2b      	ldrb	r3, [r5, #12]
  4002f2:	466a      	mov	r2, sp
  4002f4:	6829      	ldr	r1, [r5, #0]
  4002f6:	6840      	ldr	r0, [r0, #4]
  4002f8:	47b0      	blx	r6
        if (canElement->callback.callbackFn != NULL)
  4002fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4002fc:	2b00      	cmp	r3, #0
  4002fe:	d0d2      	beq.n	4002a6 <bb_tx_proc_tx_message+0x1a>
            canElement->callback.callbackFn(canElement->callback.callbackCtx,
  400300:	2200      	movs	r2, #0
  400302:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
  400306:	6b68      	ldr	r0, [r5, #52]	; 0x34
  400308:	4798      	blx	r3
  40030a:	e7cc      	b.n	4002a6 <bb_tx_proc_tx_message+0x1a>
  40030c:	00400425 	.word	0x00400425
  400310:	004001d5 	.word	0x004001d5
  400314:	10624dd3 	.word	0x10624dd3
  400318:	004001e9 	.word	0x004001e9

0040031c <bb_tx_proc_process_tx>:
{
  40031c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400320:	b087      	sub	sp, #28
  400322:	4606      	mov	r6, r0
    const uint32_t elapsedTicks = currTimestampTicks - prevTimestampTicks;
  400324:	1a8b      	subs	r3, r1, r2
  400326:	9305      	str	r3, [sp, #20]
    uint32_t minimumOffsetTicks = bbTxProc->maxDelay;
  400328:	f8d0 9000 	ldr.w	r9, [r0]
    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  40032c:	2700      	movs	r7, #0
        const CANElement_T * canElement = can_elem_get_can_elem_idx((CANElementIndex_T)i);
  40032e:	f8df b05c 	ldr.w	fp, [pc, #92]	; 40038c <bb_tx_proc_process_tx+0x70>
                    minimumOffsetTicks = bb_tx_proc_tx_message(i, elapsedTicks, canElement, bbTxProc, canChannel, maskTxChannel, minimumOffsetTicks);
  400332:	f8df a05c 	ldr.w	sl, [pc, #92]	; 400390 <bb_tx_proc_process_tx+0x74>
  400336:	e017      	b.n	400368 <bb_tx_proc_process_tx+0x4c>
            for(uint32_t canChannel = 0U; canChannel < bbTxProc->numTransmitters; canChannel++)
  400338:	3401      	adds	r4, #1
  40033a:	68b3      	ldr	r3, [r6, #8]
  40033c:	42a3      	cmp	r3, r4
  40033e:	d910      	bls.n	400362 <bb_tx_proc_process_tx+0x46>
                const uint32_t maskTxChannel = (uint32_t)1U << canChannel;
  400340:	fa08 f304 	lsl.w	r3, r8, r4
                if (((uint32_t)canElement->txChan & maskTxChannel) > 0UL)
  400344:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
  400348:	421a      	tst	r2, r3
  40034a:	d0f5      	beq.n	400338 <bb_tx_proc_process_tx+0x1c>
                    minimumOffsetTicks = bb_tx_proc_tx_message(i, elapsedTicks, canElement, bbTxProc, canChannel, maskTxChannel, minimumOffsetTicks);
  40034c:	f8cd 9008 	str.w	r9, [sp, #8]
  400350:	9301      	str	r3, [sp, #4]
  400352:	9400      	str	r4, [sp, #0]
  400354:	4633      	mov	r3, r6
  400356:	462a      	mov	r2, r5
  400358:	9905      	ldr	r1, [sp, #20]
  40035a:	4638      	mov	r0, r7
  40035c:	47d0      	blx	sl
  40035e:	4681      	mov	r9, r0
  400360:	e7ea      	b.n	400338 <bb_tx_proc_process_tx+0x1c>
    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  400362:	3701      	adds	r7, #1
  400364:	2f07      	cmp	r7, #7
  400366:	d00d      	beq.n	400384 <bb_tx_proc_process_tx+0x68>
        const CANElement_T * canElement = can_elem_get_can_elem_idx((CANElementIndex_T)i);
  400368:	b2f8      	uxtb	r0, r7
  40036a:	47d8      	blx	fp
  40036c:	4605      	mov	r5, r0
        if ((uint32_t)canElement->txChan > 0UL)
  40036e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  400372:	2b00      	cmp	r3, #0
  400374:	d0f5      	beq.n	400362 <bb_tx_proc_process_tx+0x46>
            for(uint32_t canChannel = 0U; canChannel < bbTxProc->numTransmitters; canChannel++)
  400376:	68b3      	ldr	r3, [r6, #8]
  400378:	2b00      	cmp	r3, #0
  40037a:	d0f2      	beq.n	400362 <bb_tx_proc_process_tx+0x46>
  40037c:	2400      	movs	r4, #0
                const uint32_t maskTxChannel = (uint32_t)1U << canChannel;
  40037e:	f04f 0801 	mov.w	r8, #1
  400382:	e7dd      	b.n	400340 <bb_tx_proc_process_tx+0x24>
}
  400384:	4648      	mov	r0, r9
  400386:	b007      	add	sp, #28
  400388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40038c:	00400395 	.word	0x00400395
  400390:	0040028d 	.word	0x0040028d

00400394 <can_elem_get_can_elem_idx>:
 *
 * @return A pointer to the can element struct with the given index
 */
const CANElement_T * can_elem_get_can_elem_idx(const CANElementIndex_T idx)
{
    return &can_spec_can_element_list[idx];
  400394:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
}
  400398:	4b01      	ldr	r3, [pc, #4]	; (4003a0 <can_elem_get_can_elem_idx+0xc>)
  40039a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40039e:	4770      	bx	lr
  4003a0:	00404810 	.word	0x00404810

004003a4 <can_elem_get_can_msg_info_idx>:
 *
 * @return A pointer to the can msg info struct with the given index
 */
const CANMsgInfo_T * can_elem_get_can_msg_info_idx(const CANElementIndex_T idx)
{
    return &can_spec_can_element_list[idx].canMsgInfo;
  4003a4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
}
  4003a8:	4b01      	ldr	r3, [pc, #4]	; (4003b0 <can_elem_get_can_msg_info_idx+0xc>)
  4003aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4003ae:	4770      	bx	lr
  4003b0:	00404810 	.word	0x00404810

004003b4 <bb_port_get_current_ticks>:
 * g_tx_tick_count_ms.
 * @return the current time in ticks
 */
uint32_t bb_port_get_current_ticks(void)
{
  return g_tx_tick_count_ms;
  4003b4:	4b01      	ldr	r3, [pc, #4]	; (4003bc <bb_port_get_current_ticks+0x8>)
  4003b6:	6818      	ldr	r0, [r3, #0]
}
  4003b8:	4770      	bx	lr
  4003ba:	bf00      	nop
  4003bc:	20401464 	.word	0x20401464

004003c0 <bb_port_set_data_direct8>:
    const uint32_t byteOffsetInWord = (uint32_t)(byteIndexInElement) % 4U;
    const uint32_t wordIndex = (uint32_t)(byteIndexInElement) / 4U;

    volatile uint8_t * const dest8Ptr = (volatile uint8_t *)(&element->dataWords[wordIndex]) + byteOffsetInWord;

    *dest8Ptr = data8;
  4003c0:	5481      	strb	r1, [r0, r2]
  4003c2:	4770      	bx	lr

004003c4 <bb_port_set_data_direct16>:
 * perform an atomic write to the internal blackboard element storage.
 *
 * @see BlackboardPort.h for details on this method.
 */
void bb_port_set_data_direct16(BlackboardElement_T * element, const uint16_t data16, const uint8_t byteIndexInElement)
{
  4003c4:	b510      	push	{r4, lr}
    const uint32_t byteOffsetInWord = (uint32_t)(byteIndexInElement) % 4U;
    const uint32_t wordIndex = (uint32_t)(byteIndexInElement) / 4U;

    // Dereferencing a u16 pointer with a byte offset.  Make sure it is u16-aligned within the
    // element.
    SLI_ASSERT((byteOffsetInWord % 2U) == 0);
  4003c6:	f012 0f01 	tst.w	r2, #1
  4003ca:	d106      	bne.n	4003da <bb_port_set_data_direct16+0x16>
  4003cc:	f002 0303 	and.w	r3, r2, #3
  4003d0:	0894      	lsrs	r4, r2, #2
    volatile uint16_t * const dest16Ptr = (volatile uint16_t *)(((volatile uint8_t *)&element->dataWords[wordIndex]) + byteOffsetInWord);
  4003d2:	eb03 0384 	add.w	r3, r3, r4, lsl #2

    *dest16Ptr = data16;
  4003d6:	52c1      	strh	r1, [r0, r3]
  4003d8:	bd10      	pop	{r4, pc}
    SLI_ASSERT((byteOffsetInWord % 2U) == 0);
  4003da:	4b03      	ldr	r3, [pc, #12]	; (4003e8 <bb_port_set_data_direct16+0x24>)
  4003dc:	4a03      	ldr	r2, [pc, #12]	; (4003ec <bb_port_set_data_direct16+0x28>)
  4003de:	2176      	movs	r1, #118	; 0x76
  4003e0:	4803      	ldr	r0, [pc, #12]	; (4003f0 <bb_port_set_data_direct16+0x2c>)
  4003e2:	4c04      	ldr	r4, [pc, #16]	; (4003f4 <bb_port_set_data_direct16+0x30>)
  4003e4:	47a0      	blx	r4
  4003e6:	bf00      	nop
  4003e8:	004047c0 	.word	0x004047c0
  4003ec:	00404788 	.word	0x00404788
  4003f0:	004047e0 	.word	0x004047e0
  4003f4:	004016e9 	.word	0x004016e9

004003f8 <bb_port_get_data_direct32>:
    const uint32_t byteOffsetInWord = (uint32_t)(byteIndexInElement) % 4U;
    const uint32_t wordIndex = (uint32_t)(byteIndexInElement) / 4U;

    // Dereferencing a u32 pointer with a byte offset.  Make sure it is u32-aligned within the
    // element.
    SLI_ASSERT(byteOffsetInWord == 0);
  4003f8:	f011 0f03 	tst.w	r1, #3
  4003fc:	d103      	bne.n	400406 <bb_port_get_data_direct32+0xe>
  4003fe:	088b      	lsrs	r3, r1, #2
    volatile uint32_t * const src32Ptr = (volatile uint32_t *)(&element->dataWords[wordIndex]);

    return *src32Ptr;
  400400:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
  400404:	4770      	bx	lr
{
  400406:	b510      	push	{r4, lr}
    SLI_ASSERT(byteOffsetInWord == 0);
  400408:	4b02      	ldr	r3, [pc, #8]	; (400414 <bb_port_get_data_direct32+0x1c>)
  40040a:	4a03      	ldr	r2, [pc, #12]	; (400418 <bb_port_get_data_direct32+0x20>)
  40040c:	21c3      	movs	r1, #195	; 0xc3
  40040e:	4803      	ldr	r0, [pc, #12]	; (40041c <bb_port_get_data_direct32+0x24>)
  400410:	4c03      	ldr	r4, [pc, #12]	; (400420 <bb_port_get_data_direct32+0x28>)
  400412:	47a0      	blx	r4
  400414:	004047f8 	.word	0x004047f8
  400418:	004047a4 	.word	0x004047a4
  40041c:	004047e0 	.word	0x004047e0
  400420:	004016e9 	.word	0x004016e9

00400424 <bb_get_element>:
 */
BlackboardElement_T * bb_get_element(const CANElementIndex_T idx)
{
    static Blackboard_T theBB;
    return &theBB.elements[idx];
}
  400424:	4b01      	ldr	r3, [pc, #4]	; (40042c <bb_get_element+0x8>)
  400426:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  40042a:	4770      	bx	lr
  40042c:	204009dc 	.word	0x204009dc

00400430 <bb_set_SCM_motor1MaxSpeed>:
 * @brief Sets the SCM_motor1MaxSpeed value within the blackboard.
 * @see bb_get_SCM_motor1MaxSpeed for a description of this property.
 * @param value int16_t in step/s
 */
void bb_set_SCM_motor1MaxSpeed(const float32_T value)
{
  400430:	b500      	push	{lr}
  400432:	ed2d 8b02 	vpush	{d8}
  400436:	b083      	sub	sp, #12
  400438:	ee08 0a10 	vmov	s16, r0
    const CANMsgInfo_T * canMsgInfo = can_elem_get_can_msg_info_idx(CAN_ELEM_SCM_Motor1Params1);
  40043c:	2001      	movs	r0, #1
  40043e:	4b0a      	ldr	r3, [pc, #40]	; (400468 <bb_set_SCM_motor1MaxSpeed+0x38>)
  400440:	4798      	blx	r3
static inline int16_t bb_utils_floatToFixed16(const float32_T fvalue, const uint16_t bits)
{
    const uint32_t shift = 1UL << bits;
    const float32_T fshift = (float32_T)(shift);
    const float32_T fproduct = fvalue * fshift;
    return (int16_t)(fproduct);
  400442:	eef0 7a48 	vmov.f32	s15, s16
  400446:	eefe 7acf 	vcvt.s32.f32	s15, s15, #2
  40044a:	edcd 7a01 	vstr	s15, [sp, #4]
    BlackboardElement_T * bbElem = bb_get_element(CAN_ELEM_SCM_Motor1Params1);
    const CANDataInfo_T * dataInfo = &canMsgInfo->data_info[2];
    bb_elem_set_int16_data(bbElem, bb_utils_floatToFixed16(value, 2U), dataInfo->start_byte);
  40044e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
  400452:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
  400456:	4805      	ldr	r0, [pc, #20]	; (40046c <bb_set_SCM_motor1MaxSpeed+0x3c>)
  400458:	4b05      	ldr	r3, [pc, #20]	; (400470 <bb_set_SCM_motor1MaxSpeed+0x40>)
  40045a:	4798      	blx	r3
}
  40045c:	b003      	add	sp, #12
  40045e:	ecbd 8b02 	vpop	{d8}
  400462:	f85d fb04 	ldr.w	pc, [sp], #4
  400466:	bf00      	nop
  400468:	004003a5 	.word	0x004003a5
  40046c:	204009ec 	.word	0x204009ec
  400470:	00400259 	.word	0x00400259

00400474 <bb_set_SCM_motor1MinSpeed>:
 * @brief Sets the SCM_motor1MinSpeed value within the blackboard.
 * @see bb_get_SCM_motor1MinSpeed for a description of this property.
 * @param value int16_t in step/s
 */
void bb_set_SCM_motor1MinSpeed(const float32_T value)
{
  400474:	b500      	push	{lr}
  400476:	ed2d 8b02 	vpush	{d8}
  40047a:	b083      	sub	sp, #12
  40047c:	ee08 0a10 	vmov	s16, r0
    const CANMsgInfo_T * canMsgInfo = can_elem_get_can_msg_info_idx(CAN_ELEM_SCM_Motor1Params1);
  400480:	2001      	movs	r0, #1
  400482:	4b0a      	ldr	r3, [pc, #40]	; (4004ac <bb_set_SCM_motor1MinSpeed+0x38>)
  400484:	4798      	blx	r3
  400486:	eef0 7a48 	vmov.f32	s15, s16
  40048a:	eefe 7acf 	vcvt.s32.f32	s15, s15, #2
  40048e:	edcd 7a01 	vstr	s15, [sp, #4]
    BlackboardElement_T * bbElem = bb_get_element(CAN_ELEM_SCM_Motor1Params1);
    const CANDataInfo_T * dataInfo = &canMsgInfo->data_info[3];
    bb_elem_set_int16_data(bbElem, bb_utils_floatToFixed16(value, 2U), dataInfo->start_byte);
  400492:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
  400496:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
  40049a:	4805      	ldr	r0, [pc, #20]	; (4004b0 <bb_set_SCM_motor1MinSpeed+0x3c>)
  40049c:	4b05      	ldr	r3, [pc, #20]	; (4004b4 <bb_set_SCM_motor1MinSpeed+0x40>)
  40049e:	4798      	blx	r3
}
  4004a0:	b003      	add	sp, #12
  4004a2:	ecbd 8b02 	vpop	{d8}
  4004a6:	f85d fb04 	ldr.w	pc, [sp], #4
  4004aa:	bf00      	nop
  4004ac:	004003a5 	.word	0x004003a5
  4004b0:	204009ec 	.word	0x204009ec
  4004b4:	00400259 	.word	0x00400259

004004b8 <bb_set_SCM_Motor1Control>:
 * @brief Sets the SCM_Motor1Control value within the blackboard.
 * @see bb_get_SCM_Motor1Control for a description of this property.
 * @param value int8_t in steps
 */
void bb_set_SCM_Motor1Control(const int8_t value)
{
  4004b8:	b510      	push	{r4, lr}
  4004ba:	4604      	mov	r4, r0
    const CANMsgInfo_T * canMsgInfo = can_elem_get_can_msg_info_idx(CAN_ELEM_SCM_Motor1Control);
  4004bc:	2002      	movs	r0, #2
  4004be:	4b04      	ldr	r3, [pc, #16]	; (4004d0 <bb_set_SCM_Motor1Control+0x18>)
  4004c0:	4798      	blx	r3
    BlackboardElement_T * bbElem = bb_get_element(CAN_ELEM_SCM_Motor1Control);
    const CANDataInfo_T * dataInfo = &canMsgInfo->data_info[0];
    bb_elem_set_int8_data(bbElem, value, dataInfo->start_byte);
  4004c2:	7d42      	ldrb	r2, [r0, #21]
  4004c4:	4621      	mov	r1, r4
  4004c6:	4803      	ldr	r0, [pc, #12]	; (4004d4 <bb_set_SCM_Motor1Control+0x1c>)
  4004c8:	4b03      	ldr	r3, [pc, #12]	; (4004d8 <bb_set_SCM_Motor1Control+0x20>)
  4004ca:	4798      	blx	r3
  4004cc:	bd10      	pop	{r4, pc}
  4004ce:	bf00      	nop
  4004d0:	004003a5 	.word	0x004003a5
  4004d4:	204009fc 	.word	0x204009fc
  4004d8:	00400231 	.word	0x00400231

004004dc <bb_set_SCM_Motor3Control>:
 * @brief Sets the SCM_Motor3Control value within the blackboard.
 * @see bb_get_SCM_Motor3Control for a description of this property.
 * @param value int8_t in steps
 */
void bb_set_SCM_Motor3Control(const int8_t value)
{
  4004dc:	b510      	push	{r4, lr}
  4004de:	4604      	mov	r4, r0
    const CANMsgInfo_T * canMsgInfo = can_elem_get_can_msg_info_idx(CAN_ELEM_SCM_Motor3Control);
  4004e0:	2004      	movs	r0, #4
  4004e2:	4b04      	ldr	r3, [pc, #16]	; (4004f4 <bb_set_SCM_Motor3Control+0x18>)
  4004e4:	4798      	blx	r3
    BlackboardElement_T * bbElem = bb_get_element(CAN_ELEM_SCM_Motor3Control);
    const CANDataInfo_T * dataInfo = &canMsgInfo->data_info[0];
    bb_elem_set_int8_data(bbElem, value, dataInfo->start_byte);
  4004e6:	7d42      	ldrb	r2, [r0, #21]
  4004e8:	4621      	mov	r1, r4
  4004ea:	4803      	ldr	r0, [pc, #12]	; (4004f8 <bb_set_SCM_Motor3Control+0x1c>)
  4004ec:	4b03      	ldr	r3, [pc, #12]	; (4004fc <bb_set_SCM_Motor3Control+0x20>)
  4004ee:	4798      	blx	r3
  4004f0:	bd10      	pop	{r4, pc}
  4004f2:	bf00      	nop
  4004f4:	004003a5 	.word	0x004003a5
  4004f8:	20400a1c 	.word	0x20400a1c
  4004fc:	00400231 	.word	0x00400231

00400500 <CANTxTaskInit>:

static uint32_t prevTicks;
static uint32_t sleepTicks;

void CANTxTaskInit(void)
{
  400500:	b510      	push	{r4, lr}
  400502:	b082      	sub	sp, #8
	{
		{ &scm_can_trans, NULL }
	};

	const uint32_t MaxCanTxProcDelay = 10000UL;
	sleepTicks = 0U;
  400504:	2300      	movs	r3, #0
  400506:	4a07      	ldr	r2, [pc, #28]	; (400524 <CANTxTaskInit+0x24>)
  400508:	6013      	str	r3, [r2, #0]
	prevTicks = 0U;
  40050a:	4a07      	ldr	r2, [pc, #28]	; (400528 <CANTxTaskInit+0x28>)
  40050c:	6013      	str	r3, [r2, #0]
	bb_tx_proc_init(&bbtxProc, MaxCanTxProcDelay, icanHazTxers, (uint32_t)(sizeof(icanHazTxers)/sizeof(icanHazTxers[0])), 0U);
  40050e:	9300      	str	r3, [sp, #0]
  400510:	2301      	movs	r3, #1
  400512:	4a06      	ldr	r2, [pc, #24]	; (40052c <CANTxTaskInit+0x2c>)
  400514:	f242 7110 	movw	r1, #10000	; 0x2710
  400518:	4805      	ldr	r0, [pc, #20]	; (400530 <CANTxTaskInit+0x30>)
  40051a:	4c06      	ldr	r4, [pc, #24]	; (400534 <CANTxTaskInit+0x34>)
  40051c:	47a0      	blx	r4
}
  40051e:	b002      	add	sp, #8
  400520:	bd10      	pop	{r4, pc}
  400522:	bf00      	nop
  400524:	20400a5c 	.word	0x20400a5c
  400528:	20400a58 	.word	0x20400a58
  40052c:	20400000 	.word	0x20400000
  400530:	20400a4c 	.word	0x20400a4c
  400534:	00400269 	.word	0x00400269

00400538 <CANTxTask>:

void CANTxTask(uint32_t curr_tick_ms)
{
	if (curr_tick_ms >= (prevTicks + sleepTicks))
  400538:	4b0b      	ldr	r3, [pc, #44]	; (400568 <CANTxTask+0x30>)
  40053a:	681a      	ldr	r2, [r3, #0]
  40053c:	4b0b      	ldr	r3, [pc, #44]	; (40056c <CANTxTask+0x34>)
  40053e:	681b      	ldr	r3, [r3, #0]
  400540:	4413      	add	r3, r2
  400542:	4283      	cmp	r3, r0
  400544:	d900      	bls.n	400548 <CANTxTask+0x10>
  400546:	4770      	bx	lr
{
  400548:	b510      	push	{r4, lr}
  40054a:	4604      	mov	r4, r0
	{
		sleepTicks = bb_tx_proc_process_tx(&bbtxProc, curr_tick_ms, prevTicks);
  40054c:	4601      	mov	r1, r0
  40054e:	4808      	ldr	r0, [pc, #32]	; (400570 <CANTxTask+0x38>)
  400550:	4b08      	ldr	r3, [pc, #32]	; (400574 <CANTxTask+0x3c>)
  400552:	4798      	blx	r3
  400554:	4b05      	ldr	r3, [pc, #20]	; (40056c <CANTxTask+0x34>)
  400556:	6018      	str	r0, [r3, #0]
		prevTicks = curr_tick_ms;
  400558:	4b03      	ldr	r3, [pc, #12]	; (400568 <CANTxTask+0x30>)
  40055a:	601c      	str	r4, [r3, #0]
	}
  40055c:	2832      	cmp	r0, #50	; 0x32
  40055e:	d902      	bls.n	400566 <CANTxTask+0x2e>

	// ThreadX unfortunately does not have the nice vTaskDelayUntil function that FreeRTOS has
  400560:	2232      	movs	r2, #50	; 0x32
  400562:	4b02      	ldr	r3, [pc, #8]	; (40056c <CANTxTask+0x34>)
  400564:	601a      	str	r2, [r3, #0]
  400566:	bd10      	pop	{r4, pc}
  400568:	20400a58 	.word	0x20400a58
  40056c:	20400a5c 	.word	0x20400a5c
  400570:	20400a4c 	.word	0x20400a4c
  400574:	0040031d 	.word	0x0040031d

00400578 <testSCMCallback>:
#include <stdio.h>

static int hackyStickyCounter = 37;

void testSCMCallback(void * SCM_EVENT_FOO, CanChannel_T rxChan, CanChannel_T txChan)
{
  400578:	b530      	push	{r4, r5, lr}
  40057a:	b083      	sub	sp, #12
    SCMEvent_T scmEvent = (SCMEvent_T)(uint32_t)(uint64_t)(SCM_EVENT_FOO);
    printf("testCallback: SCM_EVENT_FOO=%d, rxChan=%d, txChan=%d, counter=%d\n", scmEvent, rxChan, txChan, hackyStickyCounter++);
  40057c:	4c06      	ldr	r4, [pc, #24]	; (400598 <testSCMCallback+0x20>)
  40057e:	6823      	ldr	r3, [r4, #0]
  400580:	1c5d      	adds	r5, r3, #1
  400582:	6025      	str	r5, [r4, #0]
  400584:	9300      	str	r3, [sp, #0]
  400586:	4613      	mov	r3, r2
  400588:	460a      	mov	r2, r1
  40058a:	b2c1      	uxtb	r1, r0
  40058c:	4803      	ldr	r0, [pc, #12]	; (40059c <testSCMCallback+0x24>)
  40058e:	4c04      	ldr	r4, [pc, #16]	; (4005a0 <testSCMCallback+0x28>)
  400590:	47a0      	blx	r4
}
  400592:	b003      	add	sp, #12
  400594:	bd30      	pop	{r4, r5, pc}
  400596:	bf00      	nop
  400598:	20400008 	.word	0x20400008
  40059c:	00404ad8 	.word	0x00404ad8
  4005a0:	0040179d 	.word	0x0040179d

004005a4 <CanMessageControl_Task>:



#include "blackboard.h"

void CanMessageControl_Task(void){
  4005a4:	b508      	push	{r3, lr}

    #ifndef TEST
  static uint16_t currentCount = (uint16_t)0;
  #endif

  if ((uint16_t)0 == currentCount)
  4005a6:	4b11      	ldr	r3, [pc, #68]	; (4005ec <CanMessageControl_Task+0x48>)
  4005a8:	881b      	ldrh	r3, [r3, #0]
  4005aa:	b1a3      	cbz	r3, 4005d6 <CanMessageControl_Task+0x32>
  { // 20Hz (req >= 10Hz)
    bb_set_SCM_motor1MaxSpeed(4095.5);
  }
  if ((currentCount & (uint16_t)1) == (uint16_t)1)
  4005ac:	4b0f      	ldr	r3, [pc, #60]	; (4005ec <CanMessageControl_Task+0x48>)
  4005ae:	881b      	ldrh	r3, [r3, #0]
  4005b0:	f013 0f01 	tst.w	r3, #1
  4005b4:	d113      	bne.n	4005de <CanMessageControl_Task+0x3a>
  { // 100Hz (req >= 50Hz)
    bb_set_SCM_motor1MinSpeed(5072);
  }
  // 200Hz (req >= 100Hz)

	bb_set_SCM_Motor1Control(42);
  4005b6:	202a      	movs	r0, #42	; 0x2a
  4005b8:	4b0d      	ldr	r3, [pc, #52]	; (4005f0 <CanMessageControl_Task+0x4c>)
  4005ba:	4798      	blx	r3
	bb_set_SCM_Motor3Control(90);
  4005bc:	205a      	movs	r0, #90	; 0x5a
  4005be:	4b0d      	ldr	r3, [pc, #52]	; (4005f4 <CanMessageControl_Task+0x50>)
  4005c0:	4798      	blx	r3

  ++currentCount;
  4005c2:	4b0a      	ldr	r3, [pc, #40]	; (4005ec <CanMessageControl_Task+0x48>)
  4005c4:	881b      	ldrh	r3, [r3, #0]
  4005c6:	3301      	adds	r3, #1
  4005c8:	b29b      	uxth	r3, r3
  if ((uint16_t)10 <= currentCount)
  4005ca:	2b09      	cmp	r3, #9
  4005cc:	d90b      	bls.n	4005e6 <CanMessageControl_Task+0x42>
  {
    currentCount = (uint16_t)0;
  4005ce:	2200      	movs	r2, #0
  4005d0:	4b06      	ldr	r3, [pc, #24]	; (4005ec <CanMessageControl_Task+0x48>)
  4005d2:	801a      	strh	r2, [r3, #0]
  4005d4:	bd08      	pop	{r3, pc}
    bb_set_SCM_motor1MaxSpeed(4095.5);
  4005d6:	4808      	ldr	r0, [pc, #32]	; (4005f8 <CanMessageControl_Task+0x54>)
  4005d8:	4b08      	ldr	r3, [pc, #32]	; (4005fc <CanMessageControl_Task+0x58>)
  4005da:	4798      	blx	r3
  4005dc:	e7e6      	b.n	4005ac <CanMessageControl_Task+0x8>
    bb_set_SCM_motor1MinSpeed(5072);
  4005de:	4808      	ldr	r0, [pc, #32]	; (400600 <CanMessageControl_Task+0x5c>)
  4005e0:	4b08      	ldr	r3, [pc, #32]	; (400604 <CanMessageControl_Task+0x60>)
  4005e2:	4798      	blx	r3
  4005e4:	e7e7      	b.n	4005b6 <CanMessageControl_Task+0x12>
  ++currentCount;
  4005e6:	4a01      	ldr	r2, [pc, #4]	; (4005ec <CanMessageControl_Task+0x48>)
  4005e8:	8013      	strh	r3, [r2, #0]
  4005ea:	bd08      	pop	{r3, pc}
  4005ec:	20400a60 	.word	0x20400a60
  4005f0:	004004b9 	.word	0x004004b9
  4005f4:	004004dd 	.word	0x004004dd
  4005f8:	457ff800 	.word	0x457ff800
  4005fc:	00400431 	.word	0x00400431
  400600:	459e8000 	.word	0x459e8000
  400604:	00400475 	.word	0x00400475

00400608 <scm_can_trans>:
* @param data CAN payload data, update to 8 bytes
* @param length Number of CAN data payload bytes to send
*/

void scm_can_trans(ICANTxCtx_T context, uint32_t msgID, uint8_t * data, uint8_t length)
{
  400608:	b510      	push	{r4, lr}
	const uint8_t MaxBytesPerCanMsg = 8U; // TODO: Centralized definition for this?
	SLI_ASSERT(length <= MaxBytesPerCanMsg);
  40060a:	2b08      	cmp	r3, #8
  40060c:	d80a      	bhi.n	400624 <scm_can_trans+0x1c>
  40060e:	4608      	mov	r0, r1
  400610:	4611      	mov	r1, r2
	
	(void)context;    // Unused

	// CANDriver can track its own error counter
    (void)candriver_send(msgID, data, length);
  400612:	461a      	mov	r2, r3
  400614:	4b06      	ldr	r3, [pc, #24]	; (400630 <scm_can_trans+0x28>)
  400616:	4798      	blx	r3

	candriver_error_poll();
  400618:	4b06      	ldr	r3, [pc, #24]	; (400634 <scm_can_trans+0x2c>)
  40061a:	4798      	blx	r3
	printf("Success");
  40061c:	4806      	ldr	r0, [pc, #24]	; (400638 <scm_can_trans+0x30>)
  40061e:	4b07      	ldr	r3, [pc, #28]	; (40063c <scm_can_trans+0x34>)
  400620:	4798      	blx	r3
  400622:	bd10      	pop	{r4, pc}
	SLI_ASSERT(length <= MaxBytesPerCanMsg);
  400624:	4b06      	ldr	r3, [pc, #24]	; (400640 <scm_can_trans+0x38>)
  400626:	4a07      	ldr	r2, [pc, #28]	; (400644 <scm_can_trans+0x3c>)
  400628:	2123      	movs	r1, #35	; 0x23
  40062a:	4807      	ldr	r0, [pc, #28]	; (400648 <scm_can_trans+0x40>)
  40062c:	4c07      	ldr	r4, [pc, #28]	; (40064c <scm_can_trans+0x44>)
  40062e:	47a0      	blx	r4
  400630:	004009e5 	.word	0x004009e5
  400634:	004009e1 	.word	0x004009e1
  400638:	00404b68 	.word	0x00404b68
  40063c:	0040179d 	.word	0x0040179d
  400640:	00404b2c 	.word	0x00404b2c
  400644:	00404b1c 	.word	0x00404b1c
  400648:	00404b48 	.word	0x00404b48
  40064c:	004016e9 	.word	0x004016e9

00400650 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400650:	b5f0      	push	{r4, r5, r6, r7, lr}
  400652:	b083      	sub	sp, #12
  400654:	4605      	mov	r5, r0
  400656:	460c      	mov	r4, r1
	uint32_t val = 0;
  400658:	2300      	movs	r3, #0
  40065a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40065c:	4b2a      	ldr	r3, [pc, #168]	; (400708 <usart_serial_getchar+0xb8>)
  40065e:	4298      	cmp	r0, r3
  400660:	d013      	beq.n	40068a <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400662:	4b2a      	ldr	r3, [pc, #168]	; (40070c <usart_serial_getchar+0xbc>)
  400664:	4298      	cmp	r0, r3
  400666:	d018      	beq.n	40069a <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400668:	4b29      	ldr	r3, [pc, #164]	; (400710 <usart_serial_getchar+0xc0>)
  40066a:	4298      	cmp	r0, r3
  40066c:	d01d      	beq.n	4006aa <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40066e:	4b29      	ldr	r3, [pc, #164]	; (400714 <usart_serial_getchar+0xc4>)
  400670:	429d      	cmp	r5, r3
  400672:	d022      	beq.n	4006ba <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400674:	4b28      	ldr	r3, [pc, #160]	; (400718 <usart_serial_getchar+0xc8>)
  400676:	429d      	cmp	r5, r3
  400678:	d027      	beq.n	4006ca <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40067a:	4b28      	ldr	r3, [pc, #160]	; (40071c <usart_serial_getchar+0xcc>)
  40067c:	429d      	cmp	r5, r3
  40067e:	d02e      	beq.n	4006de <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400680:	4b27      	ldr	r3, [pc, #156]	; (400720 <usart_serial_getchar+0xd0>)
  400682:	429d      	cmp	r5, r3
  400684:	d035      	beq.n	4006f2 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400686:	b003      	add	sp, #12
  400688:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40068a:	461f      	mov	r7, r3
  40068c:	4e25      	ldr	r6, [pc, #148]	; (400724 <usart_serial_getchar+0xd4>)
  40068e:	4621      	mov	r1, r4
  400690:	4638      	mov	r0, r7
  400692:	47b0      	blx	r6
  400694:	2800      	cmp	r0, #0
  400696:	d1fa      	bne.n	40068e <usart_serial_getchar+0x3e>
  400698:	e7e9      	b.n	40066e <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40069a:	461f      	mov	r7, r3
  40069c:	4e21      	ldr	r6, [pc, #132]	; (400724 <usart_serial_getchar+0xd4>)
  40069e:	4621      	mov	r1, r4
  4006a0:	4638      	mov	r0, r7
  4006a2:	47b0      	blx	r6
  4006a4:	2800      	cmp	r0, #0
  4006a6:	d1fa      	bne.n	40069e <usart_serial_getchar+0x4e>
  4006a8:	e7e4      	b.n	400674 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4006aa:	461f      	mov	r7, r3
  4006ac:	4e1d      	ldr	r6, [pc, #116]	; (400724 <usart_serial_getchar+0xd4>)
  4006ae:	4621      	mov	r1, r4
  4006b0:	4638      	mov	r0, r7
  4006b2:	47b0      	blx	r6
  4006b4:	2800      	cmp	r0, #0
  4006b6:	d1fa      	bne.n	4006ae <usart_serial_getchar+0x5e>
  4006b8:	e7df      	b.n	40067a <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4006ba:	461f      	mov	r7, r3
  4006bc:	4e19      	ldr	r6, [pc, #100]	; (400724 <usart_serial_getchar+0xd4>)
  4006be:	4621      	mov	r1, r4
  4006c0:	4638      	mov	r0, r7
  4006c2:	47b0      	blx	r6
  4006c4:	2800      	cmp	r0, #0
  4006c6:	d1fa      	bne.n	4006be <usart_serial_getchar+0x6e>
  4006c8:	e7da      	b.n	400680 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4006ca:	461e      	mov	r6, r3
  4006cc:	4d16      	ldr	r5, [pc, #88]	; (400728 <usart_serial_getchar+0xd8>)
  4006ce:	a901      	add	r1, sp, #4
  4006d0:	4630      	mov	r0, r6
  4006d2:	47a8      	blx	r5
  4006d4:	2800      	cmp	r0, #0
  4006d6:	d1fa      	bne.n	4006ce <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4006d8:	9b01      	ldr	r3, [sp, #4]
  4006da:	7023      	strb	r3, [r4, #0]
  4006dc:	e7d3      	b.n	400686 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4006de:	461e      	mov	r6, r3
  4006e0:	4d11      	ldr	r5, [pc, #68]	; (400728 <usart_serial_getchar+0xd8>)
  4006e2:	a901      	add	r1, sp, #4
  4006e4:	4630      	mov	r0, r6
  4006e6:	47a8      	blx	r5
  4006e8:	2800      	cmp	r0, #0
  4006ea:	d1fa      	bne.n	4006e2 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4006ec:	9b01      	ldr	r3, [sp, #4]
  4006ee:	7023      	strb	r3, [r4, #0]
  4006f0:	e7c9      	b.n	400686 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4006f2:	461e      	mov	r6, r3
  4006f4:	4d0c      	ldr	r5, [pc, #48]	; (400728 <usart_serial_getchar+0xd8>)
  4006f6:	a901      	add	r1, sp, #4
  4006f8:	4630      	mov	r0, r6
  4006fa:	47a8      	blx	r5
  4006fc:	2800      	cmp	r0, #0
  4006fe:	d1fa      	bne.n	4006f6 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  400700:	9b01      	ldr	r3, [sp, #4]
  400702:	7023      	strb	r3, [r4, #0]
}
  400704:	e7bf      	b.n	400686 <usart_serial_getchar+0x36>
  400706:	bf00      	nop
  400708:	400e0800 	.word	0x400e0800
  40070c:	400e0a00 	.word	0x400e0a00
  400710:	400e1a00 	.word	0x400e1a00
  400714:	400e1c00 	.word	0x400e1c00
  400718:	40024000 	.word	0x40024000
  40071c:	40028000 	.word	0x40028000
  400720:	4002c000 	.word	0x4002c000
  400724:	004012b7 	.word	0x004012b7
  400728:	004013c3 	.word	0x004013c3

0040072c <usart_serial_putchar>:
{
  40072c:	b570      	push	{r4, r5, r6, lr}
  40072e:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400730:	4b2a      	ldr	r3, [pc, #168]	; (4007dc <usart_serial_putchar+0xb0>)
  400732:	4298      	cmp	r0, r3
  400734:	d013      	beq.n	40075e <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  400736:	4b2a      	ldr	r3, [pc, #168]	; (4007e0 <usart_serial_putchar+0xb4>)
  400738:	4298      	cmp	r0, r3
  40073a:	d019      	beq.n	400770 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  40073c:	4b29      	ldr	r3, [pc, #164]	; (4007e4 <usart_serial_putchar+0xb8>)
  40073e:	4298      	cmp	r0, r3
  400740:	d01f      	beq.n	400782 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  400742:	4b29      	ldr	r3, [pc, #164]	; (4007e8 <usart_serial_putchar+0xbc>)
  400744:	4298      	cmp	r0, r3
  400746:	d025      	beq.n	400794 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  400748:	4b28      	ldr	r3, [pc, #160]	; (4007ec <usart_serial_putchar+0xc0>)
  40074a:	4298      	cmp	r0, r3
  40074c:	d02b      	beq.n	4007a6 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  40074e:	4b28      	ldr	r3, [pc, #160]	; (4007f0 <usart_serial_putchar+0xc4>)
  400750:	4298      	cmp	r0, r3
  400752:	d031      	beq.n	4007b8 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  400754:	4b27      	ldr	r3, [pc, #156]	; (4007f4 <usart_serial_putchar+0xc8>)
  400756:	4298      	cmp	r0, r3
  400758:	d037      	beq.n	4007ca <usart_serial_putchar+0x9e>
	return 0;
  40075a:	2000      	movs	r0, #0
}
  40075c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40075e:	461e      	mov	r6, r3
  400760:	4d25      	ldr	r5, [pc, #148]	; (4007f8 <usart_serial_putchar+0xcc>)
  400762:	4621      	mov	r1, r4
  400764:	4630      	mov	r0, r6
  400766:	47a8      	blx	r5
  400768:	2800      	cmp	r0, #0
  40076a:	d1fa      	bne.n	400762 <usart_serial_putchar+0x36>
		return 1;
  40076c:	2001      	movs	r0, #1
  40076e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400770:	461e      	mov	r6, r3
  400772:	4d21      	ldr	r5, [pc, #132]	; (4007f8 <usart_serial_putchar+0xcc>)
  400774:	4621      	mov	r1, r4
  400776:	4630      	mov	r0, r6
  400778:	47a8      	blx	r5
  40077a:	2800      	cmp	r0, #0
  40077c:	d1fa      	bne.n	400774 <usart_serial_putchar+0x48>
		return 1;
  40077e:	2001      	movs	r0, #1
  400780:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400782:	461e      	mov	r6, r3
  400784:	4d1c      	ldr	r5, [pc, #112]	; (4007f8 <usart_serial_putchar+0xcc>)
  400786:	4621      	mov	r1, r4
  400788:	4630      	mov	r0, r6
  40078a:	47a8      	blx	r5
  40078c:	2800      	cmp	r0, #0
  40078e:	d1fa      	bne.n	400786 <usart_serial_putchar+0x5a>
		return 1;
  400790:	2001      	movs	r0, #1
  400792:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400794:	461e      	mov	r6, r3
  400796:	4d18      	ldr	r5, [pc, #96]	; (4007f8 <usart_serial_putchar+0xcc>)
  400798:	4621      	mov	r1, r4
  40079a:	4630      	mov	r0, r6
  40079c:	47a8      	blx	r5
  40079e:	2800      	cmp	r0, #0
  4007a0:	d1fa      	bne.n	400798 <usart_serial_putchar+0x6c>
		return 1;
  4007a2:	2001      	movs	r0, #1
  4007a4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4007a6:	461e      	mov	r6, r3
  4007a8:	4d14      	ldr	r5, [pc, #80]	; (4007fc <usart_serial_putchar+0xd0>)
  4007aa:	4621      	mov	r1, r4
  4007ac:	4630      	mov	r0, r6
  4007ae:	47a8      	blx	r5
  4007b0:	2800      	cmp	r0, #0
  4007b2:	d1fa      	bne.n	4007aa <usart_serial_putchar+0x7e>
		return 1;
  4007b4:	2001      	movs	r0, #1
  4007b6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4007b8:	461e      	mov	r6, r3
  4007ba:	4d10      	ldr	r5, [pc, #64]	; (4007fc <usart_serial_putchar+0xd0>)
  4007bc:	4621      	mov	r1, r4
  4007be:	4630      	mov	r0, r6
  4007c0:	47a8      	blx	r5
  4007c2:	2800      	cmp	r0, #0
  4007c4:	d1fa      	bne.n	4007bc <usart_serial_putchar+0x90>
		return 1;
  4007c6:	2001      	movs	r0, #1
  4007c8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4007ca:	461e      	mov	r6, r3
  4007cc:	4d0b      	ldr	r5, [pc, #44]	; (4007fc <usart_serial_putchar+0xd0>)
  4007ce:	4621      	mov	r1, r4
  4007d0:	4630      	mov	r0, r6
  4007d2:	47a8      	blx	r5
  4007d4:	2800      	cmp	r0, #0
  4007d6:	d1fa      	bne.n	4007ce <usart_serial_putchar+0xa2>
		return 1;
  4007d8:	2001      	movs	r0, #1
  4007da:	bd70      	pop	{r4, r5, r6, pc}
  4007dc:	400e0800 	.word	0x400e0800
  4007e0:	400e0a00 	.word	0x400e0a00
  4007e4:	400e1a00 	.word	0x400e1a00
  4007e8:	400e1c00 	.word	0x400e1c00
  4007ec:	40024000 	.word	0x40024000
  4007f0:	40028000 	.word	0x40028000
  4007f4:	4002c000 	.word	0x4002c000
  4007f8:	004012a5 	.word	0x004012a5
  4007fc:	004013ad 	.word	0x004013ad

00400800 <configure_mcan>:
/**
 * \brief MCAN module initialization.
 *
 */
static void configure_mcan(void)
{
  400800:	b510      	push	{r4, lr}
  400802:	b08a      	sub	sp, #40	; 0x28
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->run_in_standby = false;
  400804:	2300      	movs	r3, #0
  400806:	f88d 3004 	strb.w	r3, [sp, #4]
	config->watchdog_configuration = 0x00;
  40080a:	f88d 3005 	strb.w	r3, [sp, #5]
	config->transmit_pause = true;
  40080e:	2201      	movs	r2, #1
  400810:	f88d 2006 	strb.w	r2, [sp, #6]
	config->edge_filtering = true;
  400814:	f88d 2007 	strb.w	r2, [sp, #7]
	config->protocol_exception_handling = true;
  400818:	f88d 2008 	strb.w	r2, [sp, #8]
	config->automatic_retransmission = true;
  40081c:	f88d 2009 	strb.w	r2, [sp, #9]
	config->clock_stop_request = false;
  400820:	f88d 300a 	strb.w	r3, [sp, #10]
	config->clock_stop_acknowledge = false;
  400824:	f88d 300b 	strb.w	r3, [sp, #11]
	config->timestamp_prescaler = 0;
  400828:	f88d 300c 	strb.w	r3, [sp, #12]
	config->timeout_period = 0xFFFF;
  40082c:	f64f 71ff 	movw	r1, #65535	; 0xffff
  400830:	f8ad 100e 	strh.w	r1, [sp, #14]
	config->timeout_mode = MCAN_TIMEOUT_CONTINUES;
  400834:	f88d 3010 	strb.w	r3, [sp, #16]
	config->timeout_enable = false;
  400838:	f88d 3011 	strb.w	r3, [sp, #17]
	config->tdc_enable = false;
  40083c:	f88d 3012 	strb.w	r3, [sp, #18]
	config->delay_compensation_offset = 0;
  400840:	f88d 3013 	strb.w	r3, [sp, #19]
#if (SAMV71B || SAME70B || SAMV70B)
	config->delay_compensation_filter_window_length = 0;
  400844:	f88d 3014 	strb.w	r3, [sp, #20]
#endif
	config->nonmatching_frames_action_standard = MCAN_NONMATCHING_FRAMES_REJECT;
  400848:	2102      	movs	r1, #2
  40084a:	f88d 1015 	strb.w	r1, [sp, #21]
	config->nonmatching_frames_action_extended = MCAN_NONMATCHING_FRAMES_REJECT;
  40084e:	f88d 1016 	strb.w	r1, [sp, #22]
	config->remote_frames_standard_reject = true;
  400852:	f88d 2017 	strb.w	r2, [sp, #23]
	config->remote_frames_extended_reject = true;
  400856:	f88d 2018 	strb.w	r2, [sp, #24]
	config->extended_id_mask = 0x1FFFFFFF;
  40085a:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
  40085e:	9107      	str	r1, [sp, #28]
	config->rx_fifo_0_overwrite = true;
  400860:	f88d 2020 	strb.w	r2, [sp, #32]
	config->rx_fifo_0_watermark = 0;
  400864:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	config->rx_fifo_1_overwrite = true;
  400868:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
	config->rx_fifo_1_watermark = 0;
  40086c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	config->tx_queue_mode = false;
  400870:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	config->tx_event_fifo_watermark = 0;
  400874:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	}

	/* Initialize the module. */
	struct mcan_config config_mcan;
	mcan_get_config_defaults(&config_mcan);
	mcan_init(&mcan_instance, MCAN_MODULE, &config_mcan);
  400878:	4c0b      	ldr	r4, [pc, #44]	; (4008a8 <configure_mcan+0xa8>)
  40087a:	aa01      	add	r2, sp, #4
  40087c:	490b      	ldr	r1, [pc, #44]	; (4008ac <configure_mcan+0xac>)
  40087e:	4620      	mov	r0, r4
  400880:	4b0b      	ldr	r3, [pc, #44]	; (4008b0 <configure_mcan+0xb0>)
  400882:	4798      	blx	r3


	mcan_start(&mcan_instance);
  400884:	4620      	mov	r0, r4
  400886:	4b0b      	ldr	r3, [pc, #44]	; (4008b4 <configure_mcan+0xb4>)
  400888:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40088a:	4b0b      	ldr	r3, [pc, #44]	; (4008b8 <configure_mcan+0xb8>)
  40088c:	2220      	movs	r2, #32
  40088e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400892:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400896:	605a      	str	r2, [r3, #4]
 * \param[in] source  Interrupt source type
 */
static inline void mcan_enable_interrupt(struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
	module_inst->hw->MCAN_IE |= source;
  400898:	6822      	ldr	r2, [r4, #0]
  40089a:	6d53      	ldr	r3, [r2, #84]	; 0x54
  40089c:	f043 43c4 	orr.w	r3, r3, #1644167168	; 0x62000000
  4008a0:	6553      	str	r3, [r2, #84]	; 0x54
	/* Enable interrupts for this MCAN module */
	irq_register_handler(MCAN1_INT0_IRQn, 1);
	mcan_enable_interrupt(&mcan_instance, MCAN_FORMAT_ERROR | MCAN_ACKNOWLEDGE_ERROR | MCAN_BUS_OFF);
}
  4008a2:	b00a      	add	sp, #40	; 0x28
  4008a4:	bd10      	pop	{r4, pc}
  4008a6:	bf00      	nop
  4008a8:	20400a64 	.word	0x20400a64
  4008ac:	40034000 	.word	0x40034000
  4008b0:	00400d29 	.word	0x00400d29
  4008b4:	00400f9d 	.word	0x00400f9d
  4008b8:	e000e100 	.word	0xe000e100

004008bc <can_init>:

void can_init()
{
  4008bc:	b570      	push	{r4, r5, r6, lr}
  4008be:	b086      	sub	sp, #24
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4008c0:	200e      	movs	r0, #14
  4008c2:	4e18      	ldr	r6, [pc, #96]	; (400924 <can_init+0x68>)
  4008c4:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4008c6:	4d18      	ldr	r5, [pc, #96]	; (400928 <can_init+0x6c>)
  4008c8:	4b18      	ldr	r3, [pc, #96]	; (40092c <can_init+0x70>)
  4008ca:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4008cc:	4a18      	ldr	r2, [pc, #96]	; (400930 <can_init+0x74>)
  4008ce:	4b19      	ldr	r3, [pc, #100]	; (400934 <can_init+0x78>)
  4008d0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4008d2:	4a19      	ldr	r2, [pc, #100]	; (400938 <can_init+0x7c>)
  4008d4:	4b19      	ldr	r3, [pc, #100]	; (40093c <can_init+0x80>)
  4008d6:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4008d8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4008dc:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  4008de:	23c0      	movs	r3, #192	; 0xc0
  4008e0:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  4008e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4008e6:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  4008e8:	2400      	movs	r4, #0
  4008ea:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4008ec:	9404      	str	r4, [sp, #16]
  4008ee:	200e      	movs	r0, #14
  4008f0:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  4008f2:	4a13      	ldr	r2, [pc, #76]	; (400940 <can_init+0x84>)
  4008f4:	4669      	mov	r1, sp
  4008f6:	4628      	mov	r0, r5
  4008f8:	4b12      	ldr	r3, [pc, #72]	; (400944 <can_init+0x88>)
  4008fa:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4008fc:	4628      	mov	r0, r5
  4008fe:	4b12      	ldr	r3, [pc, #72]	; (400948 <can_init+0x8c>)
  400900:	4798      	blx	r3
		usart_enable_rx(p_usart);
  400902:	4628      	mov	r0, r5
  400904:	4b11      	ldr	r3, [pc, #68]	; (40094c <can_init+0x90>)
  400906:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400908:	4e11      	ldr	r6, [pc, #68]	; (400950 <can_init+0x94>)
  40090a:	6833      	ldr	r3, [r6, #0]
  40090c:	4621      	mov	r1, r4
  40090e:	6898      	ldr	r0, [r3, #8]
  400910:	4d10      	ldr	r5, [pc, #64]	; (400954 <can_init+0x98>)
  400912:	47a8      	blx	r5
	setbuf(stdin, NULL);
  400914:	6833      	ldr	r3, [r6, #0]
  400916:	4621      	mov	r1, r4
  400918:	6858      	ldr	r0, [r3, #4]
  40091a:	47a8      	blx	r5
	configure_console();
	configure_mcan();
  40091c:	4b0e      	ldr	r3, [pc, #56]	; (400958 <can_init+0x9c>)
  40091e:	4798      	blx	r3
}
  400920:	b006      	add	sp, #24
  400922:	bd70      	pop	{r4, r5, r6, pc}
  400924:	00401221 	.word	0x00401221
  400928:	40028000 	.word	0x40028000
  40092c:	204014a4 	.word	0x204014a4
  400930:	0040072d 	.word	0x0040072d
  400934:	204014a0 	.word	0x204014a0
  400938:	00400651 	.word	0x00400651
  40093c:	2040149c 	.word	0x2040149c
  400940:	08f0d180 	.word	0x08f0d180
  400944:	0040134d 	.word	0x0040134d
  400948:	004013a1 	.word	0x004013a1
  40094c:	004013a7 	.word	0x004013a7
  400950:	20400014 	.word	0x20400014
  400954:	00401995 	.word	0x00401995
  400958:	00400801 	.word	0x00400801

0040095c <MCAN1_INT0_Handler>:
/**
 * \brief Interrupt handler for MCAN,
 *   inlcuding RX,TX,ERROR and so on processes.
 */
void MCAN1_INT0_Handler(void)
{
  40095c:	b500      	push	{lr}
  40095e:	b083      	sub	sp, #12
 * \param[in] module_inst  Pointer to the MCAN software instance struct
 */
static inline uint32_t mcan_read_interrupt_status(
		struct mcan_module *const module_inst)
{
	return module_inst->hw->MCAN_IR;
  400960:	4b18      	ldr	r3, [pc, #96]	; (4009c4 <MCAN1_INT0_Handler+0x68>)
  400962:	681b      	ldr	r3, [r3, #0]
  400964:	6d1a      	ldr	r2, [r3, #80]	; 0x50
	volatile uint32_t status, i, rx_buffer_index;
	status = mcan_read_interrupt_status(&mcan_instance);
  400966:	9201      	str	r2, [sp, #4]


	if (status & MCAN_BUS_OFF) {
  400968:	9a01      	ldr	r2, [sp, #4]
  40096a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
  40096e:	d10a      	bne.n	400986 <MCAN1_INT0_Handler+0x2a>
		mcan_stop(&mcan_instance);
		printf(": MCAN bus off error, re-initialization. \r\n\r\n");
		configure_mcan();
	}

	if (status & MCAN_ACKNOWLEDGE_ERROR) {
  400970:	9b01      	ldr	r3, [sp, #4]
  400972:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  400976:	d112      	bne.n	40099e <MCAN1_INT0_Handler+0x42>
		mcan_clear_interrupt_status(&mcan_instance, MCAN_ACKNOWLEDGE_ERROR);
		printf("Protocol ACK error, please double check the clock in two boards. \r\n\r\n");
	}

	if (status & MCAN_FORMAT_ERROR) {
  400978:	9b01      	ldr	r3, [sp, #4]
  40097a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  40097e:	d117      	bne.n	4009b0 <MCAN1_INT0_Handler+0x54>
		mcan_clear_interrupt_status(&mcan_instance, MCAN_FORMAT_ERROR);
		printf("Protocol format error, please double check the clock in two boards. \r\n\r\n");
	}
}
  400980:	b003      	add	sp, #12
  400982:	f85d fb04 	ldr.w	pc, [sp], #4
 */
static inline void mcan_clear_interrupt_status(
		struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
	module_inst->hw->MCAN_IR = source;
  400986:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40098a:	651a      	str	r2, [r3, #80]	; 0x50
		mcan_stop(&mcan_instance);
  40098c:	480d      	ldr	r0, [pc, #52]	; (4009c4 <MCAN1_INT0_Handler+0x68>)
  40098e:	4b0e      	ldr	r3, [pc, #56]	; (4009c8 <MCAN1_INT0_Handler+0x6c>)
  400990:	4798      	blx	r3
		printf(": MCAN bus off error, re-initialization. \r\n\r\n");
  400992:	480e      	ldr	r0, [pc, #56]	; (4009cc <MCAN1_INT0_Handler+0x70>)
  400994:	4b0e      	ldr	r3, [pc, #56]	; (4009d0 <MCAN1_INT0_Handler+0x74>)
  400996:	4798      	blx	r3
		configure_mcan();
  400998:	4b0e      	ldr	r3, [pc, #56]	; (4009d4 <MCAN1_INT0_Handler+0x78>)
  40099a:	4798      	blx	r3
  40099c:	e7e8      	b.n	400970 <MCAN1_INT0_Handler+0x14>
  40099e:	4b09      	ldr	r3, [pc, #36]	; (4009c4 <MCAN1_INT0_Handler+0x68>)
  4009a0:	681b      	ldr	r3, [r3, #0]
  4009a2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4009a6:	651a      	str	r2, [r3, #80]	; 0x50
		printf("Protocol ACK error, please double check the clock in two boards. \r\n\r\n");
  4009a8:	480b      	ldr	r0, [pc, #44]	; (4009d8 <MCAN1_INT0_Handler+0x7c>)
  4009aa:	4b09      	ldr	r3, [pc, #36]	; (4009d0 <MCAN1_INT0_Handler+0x74>)
  4009ac:	4798      	blx	r3
  4009ae:	e7e3      	b.n	400978 <MCAN1_INT0_Handler+0x1c>
  4009b0:	4b04      	ldr	r3, [pc, #16]	; (4009c4 <MCAN1_INT0_Handler+0x68>)
  4009b2:	681b      	ldr	r3, [r3, #0]
  4009b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4009b8:	651a      	str	r2, [r3, #80]	; 0x50
		printf("Protocol format error, please double check the clock in two boards. \r\n\r\n");
  4009ba:	4808      	ldr	r0, [pc, #32]	; (4009dc <MCAN1_INT0_Handler+0x80>)
  4009bc:	4b04      	ldr	r3, [pc, #16]	; (4009d0 <MCAN1_INT0_Handler+0x74>)
  4009be:	4798      	blx	r3
}
  4009c0:	e7de      	b.n	400980 <MCAN1_INT0_Handler+0x24>
  4009c2:	bf00      	nop
  4009c4:	20400a64 	.word	0x20400a64
  4009c8:	00400fb3 	.word	0x00400fb3
  4009cc:	00404b70 	.word	0x00404b70
  4009d0:	0040179d 	.word	0x0040179d
  4009d4:	00400801 	.word	0x00400801
  4009d8:	00404ba0 	.word	0x00404ba0
  4009dc:	00404be8 	.word	0x00404be8

004009e0 <candriver_error_poll>:


void candriver_error_poll(void)
{
  4009e0:	4770      	bx	lr
	...

004009e4 <candriver_send>:
 *  @param data_byte_length - the number of bytes sending
 *
 *  @post A message is sent if the CAN was not busy at the time of sending.
 */
bool candriver_send(uint32_t msg_id, uint8_t *msg_data, uint32_t data_byte_length)
{
  4009e4:	b510      	push	{r4, lr}
  4009e6:	b084      	sub	sp, #16
	tx_element->T0.reg = 0;
  4009e8:	2300      	movs	r3, #0
  4009ea:	9300      	str	r3, [sp, #0]
	tx_element->T1.reg = MCAN_TX_ELEMENT_T1_EFC |
  4009ec:	f44f 0308 	mov.w	r3, #8912896	; 0x880000
  4009f0:	9301      	str	r3, [sp, #4]
	tx_element.T0.reg |= MCAN_TX_ELEMENT_T0_STANDARD_ID(id_value);
  4009f2:	9c00      	ldr	r4, [sp, #0]
  4009f4:	4b11      	ldr	r3, [pc, #68]	; (400a3c <candriver_send+0x58>)
  4009f6:	ea03 4080 	and.w	r0, r3, r0, lsl #18
  4009fa:	4320      	orrs	r0, r4
  4009fc:	9000      	str	r0, [sp, #0]
	tx_element.T1.bit.DLC = data_length;
  4009fe:	9b01      	ldr	r3, [sp, #4]
  400a00:	f362 4313 	bfi	r3, r2, #16, #4
  400a04:	9301      	str	r3, [sp, #4]
	for (i = 0; i < data_length; i++) {
  400a06:	b142      	cbz	r2, 400a1a <candriver_send+0x36>
  400a08:	460b      	mov	r3, r1
  400a0a:	a802      	add	r0, sp, #8
  400a0c:	4411      	add	r1, r2
		tx_element.data[i] = *data;
  400a0e:	f813 4b01 	ldrb.w	r4, [r3], #1
  400a12:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < data_length; i++) {
  400a16:	428b      	cmp	r3, r1
  400a18:	d1f9      	bne.n	400a0e <candriver_send+0x2a>
	mcan_set_tx_buffer_element(&mcan_instance, &tx_element,
  400a1a:	4c09      	ldr	r4, [pc, #36]	; (400a40 <candriver_send+0x5c>)
  400a1c:	2200      	movs	r2, #0
  400a1e:	4669      	mov	r1, sp
  400a20:	4620      	mov	r0, r4
  400a22:	4b08      	ldr	r3, [pc, #32]	; (400a44 <candriver_send+0x60>)
  400a24:	4798      	blx	r3
	if (module_inst->hw->MCAN_CCCR & MCAN_CCCR_CCE) {
  400a26:	6823      	ldr	r3, [r4, #0]
  400a28:	699a      	ldr	r2, [r3, #24]
  400a2a:	f012 0f02 	tst.w	r2, #2
  400a2e:	d102      	bne.n	400a36 <candriver_send+0x52>
	module_inst->hw->MCAN_TXBAR = trig_mask;
  400a30:	2201      	movs	r2, #1
  400a32:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  mcan_send_standard_message(msg_id, msg_data,
					data_byte_length); 
  // return result;
  400a36:	b004      	add	sp, #16
  400a38:	bd10      	pop	{r4, pc}
  400a3a:	bf00      	nop
  400a3c:	1ffc0000 	.word	0x1ffc0000
  400a40:	20400a64 	.word	0x20400a64
  400a44:	00400fc9 	.word	0x00400fc9

00400a48 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400a48:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  400a4a:	4810      	ldr	r0, [pc, #64]	; (400a8c <sysclk_init+0x44>)
  400a4c:	4b10      	ldr	r3, [pc, #64]	; (400a90 <sysclk_init+0x48>)
  400a4e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400a50:	213e      	movs	r1, #62	; 0x3e
  400a52:	2000      	movs	r0, #0
  400a54:	4b0f      	ldr	r3, [pc, #60]	; (400a94 <sysclk_init+0x4c>)
  400a56:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400a58:	4c0f      	ldr	r4, [pc, #60]	; (400a98 <sysclk_init+0x50>)
  400a5a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400a5c:	2800      	cmp	r0, #0
  400a5e:	d0fc      	beq.n	400a5a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400a60:	4b0e      	ldr	r3, [pc, #56]	; (400a9c <sysclk_init+0x54>)
  400a62:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400a64:	4a0e      	ldr	r2, [pc, #56]	; (400aa0 <sysclk_init+0x58>)
  400a66:	4b0f      	ldr	r3, [pc, #60]	; (400aa4 <sysclk_init+0x5c>)
  400a68:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400a6a:	4c0f      	ldr	r4, [pc, #60]	; (400aa8 <sysclk_init+0x60>)
  400a6c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400a6e:	2800      	cmp	r0, #0
  400a70:	d0fc      	beq.n	400a6c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400a72:	2002      	movs	r0, #2
  400a74:	4b0d      	ldr	r3, [pc, #52]	; (400aac <sysclk_init+0x64>)
  400a76:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400a78:	2000      	movs	r0, #0
  400a7a:	4b0d      	ldr	r3, [pc, #52]	; (400ab0 <sysclk_init+0x68>)
  400a7c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400a7e:	4b0d      	ldr	r3, [pc, #52]	; (400ab4 <sysclk_init+0x6c>)
  400a80:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  400a82:	4802      	ldr	r0, [pc, #8]	; (400a8c <sysclk_init+0x44>)
  400a84:	4b02      	ldr	r3, [pc, #8]	; (400a90 <sysclk_init+0x48>)
  400a86:	4798      	blx	r3
  400a88:	bd10      	pop	{r4, pc}
  400a8a:	bf00      	nop
  400a8c:	08f0d180 	.word	0x08f0d180
  400a90:	004015b1 	.word	0x004015b1
  400a94:	0040119d 	.word	0x0040119d
  400a98:	004011f1 	.word	0x004011f1
  400a9c:	00401201 	.word	0x00401201
  400aa0:	20183f01 	.word	0x20183f01
  400aa4:	400e0600 	.word	0x400e0600
  400aa8:	00401211 	.word	0x00401211
  400aac:	00401101 	.word	0x00401101
  400ab0:	00401139 	.word	0x00401139
  400ab4:	004014a5 	.word	0x004014a5

00400ab8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400abc:	b980      	cbnz	r0, 400ae0 <_read+0x28>
  400abe:	460c      	mov	r4, r1
  400ac0:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400ac2:	2a00      	cmp	r2, #0
  400ac4:	dd0f      	ble.n	400ae6 <_read+0x2e>
  400ac6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400ac8:	4e08      	ldr	r6, [pc, #32]	; (400aec <_read+0x34>)
  400aca:	4d09      	ldr	r5, [pc, #36]	; (400af0 <_read+0x38>)
  400acc:	6830      	ldr	r0, [r6, #0]
  400ace:	4621      	mov	r1, r4
  400ad0:	682b      	ldr	r3, [r5, #0]
  400ad2:	4798      	blx	r3
		ptr++;
  400ad4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400ad6:	42bc      	cmp	r4, r7
  400ad8:	d1f8      	bne.n	400acc <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400ada:	4640      	mov	r0, r8
  400adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400ae0:	f04f 38ff 	mov.w	r8, #4294967295
  400ae4:	e7f9      	b.n	400ada <_read+0x22>
	for (; len > 0; --len) {
  400ae6:	4680      	mov	r8, r0
  400ae8:	e7f7      	b.n	400ada <_read+0x22>
  400aea:	bf00      	nop
  400aec:	204014a4 	.word	0x204014a4
  400af0:	2040149c 	.word	0x2040149c

00400af4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400af4:	3801      	subs	r0, #1
  400af6:	2802      	cmp	r0, #2
  400af8:	d815      	bhi.n	400b26 <_write+0x32>
{
  400afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400afe:	460e      	mov	r6, r1
  400b00:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400b02:	b19a      	cbz	r2, 400b2c <_write+0x38>
  400b04:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400b06:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400b40 <_write+0x4c>
  400b0a:	4f0c      	ldr	r7, [pc, #48]	; (400b3c <_write+0x48>)
  400b0c:	f8d8 0000 	ldr.w	r0, [r8]
  400b10:	f815 1b01 	ldrb.w	r1, [r5], #1
  400b14:	683b      	ldr	r3, [r7, #0]
  400b16:	4798      	blx	r3
  400b18:	2800      	cmp	r0, #0
  400b1a:	db0a      	blt.n	400b32 <_write+0x3e>
  400b1c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400b1e:	3c01      	subs	r4, #1
  400b20:	d1f4      	bne.n	400b0c <_write+0x18>
  400b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400b26:	f04f 30ff 	mov.w	r0, #4294967295
  400b2a:	4770      	bx	lr
	for (; len != 0; --len) {
  400b2c:	4610      	mov	r0, r2
  400b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400b32:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400b3a:	bf00      	nop
  400b3c:	204014a0 	.word	0x204014a0
  400b40:	204014a4 	.word	0x204014a4

00400b44 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400b44:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400b46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400b4a:	4b63      	ldr	r3, [pc, #396]	; (400cd8 <board_init+0x194>)
  400b4c:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400b4e:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
  400b52:	4a62      	ldr	r2, [pc, #392]	; (400cdc <board_init+0x198>)
  400b54:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400b56:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  400b5a:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  400b5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400b60:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400b64:	4b5e      	ldr	r3, [pc, #376]	; (400ce0 <board_init+0x19c>)
  400b66:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400b6a:	f022 0201 	bic.w	r2, r2, #1
  400b6e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400b72:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400b76:	f022 0201 	bic.w	r2, r2, #1
  400b7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  400b7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400b82:	f3bf 8f6f 	isb	sy
  400b86:	200a      	movs	r0, #10
  400b88:	4c56      	ldr	r4, [pc, #344]	; (400ce4 <board_init+0x1a0>)
  400b8a:	47a0      	blx	r4
  400b8c:	200b      	movs	r0, #11
  400b8e:	47a0      	blx	r4
  400b90:	200c      	movs	r0, #12
  400b92:	47a0      	blx	r4
  400b94:	2010      	movs	r0, #16
  400b96:	47a0      	blx	r4
  400b98:	2011      	movs	r0, #17
  400b9a:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400b9c:	4b52      	ldr	r3, [pc, #328]	; (400ce8 <board_init+0x1a4>)
  400b9e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400ba2:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ba4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ba8:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400baa:	4a50      	ldr	r2, [pc, #320]	; (400cec <board_init+0x1a8>)
  400bac:	f44f 7100 	mov.w	r1, #512	; 0x200
  400bb0:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bb2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400bb6:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400bb8:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bba:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400bbe:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400bc0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400bc4:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400bc6:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  400bc8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400bcc:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400bce:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  400bd2:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400bd4:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400bd6:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  400bda:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400bdc:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400be0:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400be4:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400be8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  400bec:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400bee:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400bf2:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400bf4:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400bf6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400bfa:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400bfc:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  400c00:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c02:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400c04:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  400c08:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c0a:	6059      	str	r1, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400c0c:	4938      	ldr	r1, [pc, #224]	; (400cf0 <board_init+0x1ac>)
  400c0e:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
  400c12:	f043 0310 	orr.w	r3, r3, #16
  400c16:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
		base->PIO_PUDR = mask;
  400c1a:	4b36      	ldr	r3, [pc, #216]	; (400cf4 <board_init+0x1b0>)
  400c1c:	2110      	movs	r1, #16
  400c1e:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c20:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c24:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c26:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c28:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400c2c:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400c2e:	4308      	orrs	r0, r1
  400c30:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400c32:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400c34:	4308      	orrs	r0, r1
  400c36:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c38:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  400c3a:	2108      	movs	r1, #8
  400c3c:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c3e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c42:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c44:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c46:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c4a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400c4c:	f020 0008 	bic.w	r0, r0, #8
  400c50:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c52:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400c54:	f020 0008 	bic.w	r0, r0, #8
  400c58:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c5a:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  400c5c:	2104      	movs	r1, #4
  400c5e:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c60:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c64:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c66:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c68:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c6c:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400c6e:	f020 0004 	bic.w	r0, r0, #4
  400c72:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c74:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400c76:	f020 0004 	bic.w	r0, r0, #4
  400c7a:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c7c:	6059      	str	r1, [r3, #4]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400c7e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400c82:	2101      	movs	r1, #1
  400c84:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400c86:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400c8a:	2102      	movs	r1, #2
  400c8c:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400c8e:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  400c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400c96:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c9c:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c9e:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400ca0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400ca4:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400ca6:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  400caa:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400cac:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400cae:	4319      	orrs	r1, r3
  400cb0:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400cb2:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  400cb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  400cb8:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400cbe:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400cc0:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400cc2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400cc6:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400cc8:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  400ccc:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400cce:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400cd0:	4319      	orrs	r1, r3
  400cd2:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400cd4:	6053      	str	r3, [r2, #4]
  400cd6:	bd10      	pop	{r4, pc}
  400cd8:	400e1850 	.word	0x400e1850
  400cdc:	5a00080c 	.word	0x5a00080c
  400ce0:	e000ed00 	.word	0xe000ed00
  400ce4:	00401221 	.word	0x00401221
  400ce8:	400e0e00 	.word	0x400e0e00
  400cec:	400e1200 	.word	0x400e1200
  400cf0:	40088000 	.word	0x40088000
  400cf4:	400e1000 	.word	0x400e1000

00400cf8 <_mcan_enable_peripheral_clock>:
 *
 * \param module_inst  MCAN instance
 *
 */
static void _mcan_enable_peripheral_clock(struct mcan_module *const module_inst)
{
  400cf8:	b508      	push	{r3, lr}
	if (module_inst->hw == MCAN0) {
  400cfa:	6803      	ldr	r3, [r0, #0]
  400cfc:	4a07      	ldr	r2, [pc, #28]	; (400d1c <_mcan_enable_peripheral_clock+0x24>)
  400cfe:	4293      	cmp	r3, r2
  400d00:	d003      	beq.n	400d0a <_mcan_enable_peripheral_clock+0x12>
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN0);
	} else if (module_inst->hw == MCAN1) {
  400d02:	4a07      	ldr	r2, [pc, #28]	; (400d20 <_mcan_enable_peripheral_clock+0x28>)
  400d04:	4293      	cmp	r3, r2
  400d06:	d004      	beq.n	400d12 <_mcan_enable_peripheral_clock+0x1a>
  400d08:	bd08      	pop	{r3, pc}
		pmc_enable_periph_clk(ID_MCAN0);
  400d0a:	2023      	movs	r0, #35	; 0x23
  400d0c:	4b05      	ldr	r3, [pc, #20]	; (400d24 <_mcan_enable_peripheral_clock+0x2c>)
  400d0e:	4798      	blx	r3
  400d10:	bd08      	pop	{r3, pc}
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN1);
  400d12:	2025      	movs	r0, #37	; 0x25
  400d14:	4b03      	ldr	r3, [pc, #12]	; (400d24 <_mcan_enable_peripheral_clock+0x2c>)
  400d16:	4798      	blx	r3
	}
}
  400d18:	e7f6      	b.n	400d08 <_mcan_enable_peripheral_clock+0x10>
  400d1a:	bf00      	nop
  400d1c:	40030000 	.word	0x40030000
  400d20:	40034000 	.word	0x40034000
  400d24:	00401221 	.word	0x00401221

00400d28 <mcan_init>:
 * \param hw  Base address of MCAN.
 * \param config default configuration .
 */
void mcan_init(struct mcan_module *const module_inst, Mcan *hw,
		struct mcan_config *config)
{
  400d28:	b570      	push	{r4, r5, r6, lr}
  400d2a:	4606      	mov	r6, r0
  400d2c:	460c      	mov	r4, r1
  400d2e:	4615      	mov	r5, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
  400d30:	6001      	str	r1, [r0, #0]

	pmc_disable_pck(PMC_PCK_5);
  400d32:	2005      	movs	r0, #5
  400d34:	4b82      	ldr	r3, [pc, #520]	; (400f40 <mcan_init+0x218>)
  400d36:	4798      	blx	r3

	pmc_switch_pck_to_pllack(PMC_PCK_5, PMC_PCK_PRES(9));
  400d38:	2190      	movs	r1, #144	; 0x90
  400d3a:	2005      	movs	r0, #5
  400d3c:	4b81      	ldr	r3, [pc, #516]	; (400f44 <mcan_init+0x21c>)
  400d3e:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_5);
  400d40:	2005      	movs	r0, #5
  400d42:	4b81      	ldr	r3, [pc, #516]	; (400f48 <mcan_init+0x220>)
  400d44:	4798      	blx	r3

	/* Enable peripheral clock */
	_mcan_enable_peripheral_clock(module_inst);
  400d46:	4630      	mov	r0, r6
  400d48:	4b80      	ldr	r3, [pc, #512]	; (400f4c <mcan_init+0x224>)
  400d4a:	4798      	blx	r3


	/* Configuration Change Enable. */
	hw->MCAN_CCCR |= MCAN_CCCR_CCE;
  400d4c:	69a3      	ldr	r3, [r4, #24]
  400d4e:	f043 0302 	orr.w	r3, r3, #2
  400d52:	61a3      	str	r3, [r4, #24]
	if (hw == MCAN0) {
  400d54:	4b7e      	ldr	r3, [pc, #504]	; (400f50 <mcan_init+0x228>)
  400d56:	429c      	cmp	r4, r3
  400d58:	f000 809c 	beq.w	400e94 <mcan_init+0x16c>
	} else if (hw == MCAN1) {
  400d5c:	4b7d      	ldr	r3, [pc, #500]	; (400f54 <mcan_init+0x22c>)
  400d5e:	429c      	cmp	r4, r3
  400d60:	f000 80c3 	beq.w	400eea <mcan_init+0x1c2>
		hw->MCAN_RXESC = MCAN_RXESC_RBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4) |
  400d64:	2300      	movs	r3, #0
  400d66:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		hw->MCAN_TXESC = MCAN_TXESC_TBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4);
  400d6a:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	hw->MCAN_NBTP = MCAN_NBTP_NBRP(CONF_MCAN_NBTP_NBRP_VALUE) |
  400d6e:	4b7a      	ldr	r3, [pc, #488]	; (400f58 <mcan_init+0x230>)
  400d70:	61e3      	str	r3, [r4, #28]
	hw->MCAN_DBTP = MCAN_DBTP_DBRP(CONF_MCAN_FBTP_FBRP_VALUE) |
  400d72:	4b7a      	ldr	r3, [pc, #488]	; (400f5c <mcan_init+0x234>)
  400d74:	60e3      	str	r3, [r4, #12]
	hw->MCAN_TDCR = MCAN_TDCR_TDCO(config->delay_compensation_offset) |
  400d76:	7beb      	ldrb	r3, [r5, #15]
  400d78:	021b      	lsls	r3, r3, #8
  400d7a:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
		    MCAN_TDCR_TDCF(config->delay_compensation_filter_window_length);
  400d7e:	7c2a      	ldrb	r2, [r5, #16]
  400d80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	hw->MCAN_TDCR = MCAN_TDCR_TDCO(config->delay_compensation_offset) |
  400d84:	4313      	orrs	r3, r2
  400d86:	64a3      	str	r3, [r4, #72]	; 0x48
	if (config->tdc_enable) {
  400d88:	7bab      	ldrb	r3, [r5, #14]
  400d8a:	b11b      	cbz	r3, 400d94 <mcan_init+0x6c>
		hw->MCAN_DBTP |= MCAN_DBTP_TDC_ENABLED;
  400d8c:	68e3      	ldr	r3, [r4, #12]
  400d8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  400d92:	60e3      	str	r3, [r4, #12]
	hw->MCAN_RWD |= MCAN_RWD_WDC(config->watchdog_configuration);
  400d94:	6962      	ldr	r2, [r4, #20]
  400d96:	786b      	ldrb	r3, [r5, #1]
  400d98:	4313      	orrs	r3, r2
  400d9a:	6163      	str	r3, [r4, #20]
	if (config->transmit_pause) {
  400d9c:	78ab      	ldrb	r3, [r5, #2]
  400d9e:	b11b      	cbz	r3, 400da8 <mcan_init+0x80>
		hw->MCAN_CCCR |= MCAN_CCCR_TXP;
  400da0:	69a3      	ldr	r3, [r4, #24]
  400da2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  400da6:	61a3      	str	r3, [r4, #24]
	if (!config->automatic_retransmission) {
  400da8:	796b      	ldrb	r3, [r5, #5]
  400daa:	b91b      	cbnz	r3, 400db4 <mcan_init+0x8c>
		hw->MCAN_CCCR |= MCAN_CCCR_DAR;
  400dac:	69a3      	ldr	r3, [r4, #24]
  400dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400db2:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_request) {
  400db4:	79ab      	ldrb	r3, [r5, #6]
  400db6:	b11b      	cbz	r3, 400dc0 <mcan_init+0x98>
		hw->MCAN_CCCR |= MCAN_CCCR_CSR;
  400db8:	69a3      	ldr	r3, [r4, #24]
  400dba:	f043 0310 	orr.w	r3, r3, #16
  400dbe:	61a3      	str	r3, [r4, #24]
	hw->MCAN_TSCC = MCAN_TSCC_TCP(config->timestamp_prescaler) |
  400dc0:	7a2b      	ldrb	r3, [r5, #8]
  400dc2:	041b      	lsls	r3, r3, #16
  400dc4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  400dc8:	f043 0301 	orr.w	r3, r3, #1
  400dcc:	6223      	str	r3, [r4, #32]
			config->timeout_mode | config->timeout_enable;
  400dce:	7b2b      	ldrb	r3, [r5, #12]
  400dd0:	7b6a      	ldrb	r2, [r5, #13]
  400dd2:	4313      	orrs	r3, r2
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  400dd4:	896a      	ldrh	r2, [r5, #10]
			config->timeout_mode | config->timeout_enable;
  400dd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  400dda:	62a3      	str	r3, [r4, #40]	; 0x28
	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  400ddc:	7c6b      	ldrb	r3, [r5, #17]
  400dde:	011b      	lsls	r3, r3, #4
  400de0:	f003 0330 	and.w	r3, r3, #48	; 0x30
			MCAN_GFC_ANFE(config->nonmatching_frames_action_extended);
  400de4:	7caa      	ldrb	r2, [r5, #18]
  400de6:	0092      	lsls	r2, r2, #2
  400de8:	f002 020c 	and.w	r2, r2, #12
	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  400dec:	4313      	orrs	r3, r2
  400dee:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if (config->remote_frames_standard_reject) {
  400df2:	7ceb      	ldrb	r3, [r5, #19]
  400df4:	b12b      	cbz	r3, 400e02 <mcan_init+0xda>
		hw->MCAN_GFC |= MCAN_GFC_RRFS;
  400df6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  400dfa:	f043 0302 	orr.w	r3, r3, #2
  400dfe:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if (config->remote_frames_extended_reject) {
  400e02:	7d2b      	ldrb	r3, [r5, #20]
  400e04:	b12b      	cbz	r3, 400e12 <mcan_init+0xea>
		hw->MCAN_GFC|= MCAN_GFC_RRFE;
  400e06:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  400e0a:	f043 0301 	orr.w	r3, r3, #1
  400e0e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hw->MCAN_XIDAM = config->extended_id_mask;
  400e12:	69ab      	ldr	r3, [r5, #24]
  400e14:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	if (config->rx_fifo_0_overwrite) {
  400e18:	7f2b      	ldrb	r3, [r5, #28]
  400e1a:	b12b      	cbz	r3, 400e28 <mcan_init+0x100>
		hw->MCAN_RXF0C |= MCAN_RXF0C_F0OM;
  400e1c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
  400e20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  400e24:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	hw->MCAN_RXF0C |= MCAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
  400e28:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
  400e2c:	7f6b      	ldrb	r3, [r5, #29]
  400e2e:	061b      	lsls	r3, r3, #24
  400e30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  400e34:	4313      	orrs	r3, r2
  400e36:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	if (config->rx_fifo_1_overwrite) {
  400e3a:	7fab      	ldrb	r3, [r5, #30]
  400e3c:	b12b      	cbz	r3, 400e4a <mcan_init+0x122>
		hw->MCAN_RXF1C |= MCAN_RXF1C_F1OM;
  400e3e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
  400e42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  400e46:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	hw->MCAN_RXF1C |= MCAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
  400e4a:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
  400e4e:	7feb      	ldrb	r3, [r5, #31]
  400e50:	061b      	lsls	r3, r3, #24
  400e52:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  400e56:	4313      	orrs	r3, r2
  400e58:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	if (config->tx_queue_mode) {
  400e5c:	f895 3020 	ldrb.w	r3, [r5, #32]
  400e60:	b12b      	cbz	r3, 400e6e <mcan_init+0x146>
		hw->MCAN_TXBC |= MCAN_TXBC_TFQM;
  400e62:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
  400e66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  400e6a:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hw->MCAN_TXEFC |= MCAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
  400e6e:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
  400e72:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
  400e76:	061b      	lsls	r3, r3, #24
  400e78:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  400e7c:	4313      	orrs	r3, r2
  400e7e:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0

	/* Set the configuration. */
	_mcan_set_configuration(hw, config);

	/* Enable the interrupt setting which no need change. */
	hw->MCAN_ILE = MCAN_ILE_EINT0 | MCAN_ILE_EINT1;
  400e82:	2303      	movs	r3, #3
  400e84:	65e3      	str	r3, [r4, #92]	; 0x5c
	hw->MCAN_TXBTIE = 0xFFFFFFFFul;
  400e86:	f04f 33ff 	mov.w	r3, #4294967295
  400e8a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	hw->MCAN_TXBCIE = 0xFFFFFFFFul;
  400e8e:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
  400e92:	bd70      	pop	{r4, r5, r6, pc}
		hw->MCAN_SIDFC = ((uint32_t)mcan0_rx_standard_filter & BIT_2_TO_15_MASK) |
  400e94:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  400e98:	4931      	ldr	r1, [pc, #196]	; (400f60 <mcan_init+0x238>)
  400e9a:	4011      	ands	r1, r2
  400e9c:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  400ea0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		hw->MCAN_XIDFC = ((uint32_t)mcan0_rx_extended_filter & BIT_2_TO_15_MASK) |
  400ea4:	492f      	ldr	r1, [pc, #188]	; (400f64 <mcan_init+0x23c>)
  400ea6:	4011      	ands	r1, r2
  400ea8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400eac:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		hw->MCAN_RXF0C = ((uint32_t)mcan0_rx_fifo_0 & BIT_2_TO_15_MASK) |
  400eb0:	492d      	ldr	r1, [pc, #180]	; (400f68 <mcan_init+0x240>)
  400eb2:	4011      	ands	r1, r2
  400eb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400eb8:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		hw->MCAN_RXF1C = ((uint32_t)mcan0_rx_fifo_1 & BIT_2_TO_15_MASK) |
  400ebc:	492b      	ldr	r1, [pc, #172]	; (400f6c <mcan_init+0x244>)
  400ebe:	4011      	ands	r1, r2
  400ec0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400ec4:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		hw->MCAN_RXBC = ((uint32_t)mcan0_rx_buffer & BIT_2_TO_15_MASK);
  400ec8:	4929      	ldr	r1, [pc, #164]	; (400f70 <mcan_init+0x248>)
  400eca:	4011      	ands	r1, r2
  400ecc:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  400ed0:	4828      	ldr	r0, [pc, #160]	; (400f74 <mcan_init+0x24c>)
  400ed2:	4010      	ands	r0, r2
				MCAN_TXBC_NDTB(CONF_MCAN0_TX_BUFFER_NUM) |
  400ed4:	4928      	ldr	r1, [pc, #160]	; (400f78 <mcan_init+0x250>)
  400ed6:	4301      	orrs	r1, r0
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  400ed8:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		hw->MCAN_TXEFC = ((uint32_t)mcan0_tx_event_fifo & BIT_2_TO_15_MASK) |
  400edc:	4927      	ldr	r1, [pc, #156]	; (400f7c <mcan_init+0x254>)
  400ede:	400a      	ands	r2, r1
  400ee0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  400ee4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  400ee8:	e73c      	b.n	400d64 <mcan_init+0x3c>
		hw->MCAN_SIDFC = ((uint32_t)mcan1_rx_standard_filter & BIT_2_TO_15_MASK) |
  400eea:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  400eee:	4924      	ldr	r1, [pc, #144]	; (400f80 <mcan_init+0x258>)
  400ef0:	4011      	ands	r1, r2
  400ef2:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  400ef6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		hw->MCAN_XIDFC = ((uint32_t)mcan1_rx_extended_filter & BIT_2_TO_15_MASK) |
  400efa:	4922      	ldr	r1, [pc, #136]	; (400f84 <mcan_init+0x25c>)
  400efc:	4011      	ands	r1, r2
  400efe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400f02:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		hw->MCAN_RXF0C = ((uint32_t)mcan1_rx_fifo_0 & BIT_2_TO_15_MASK) |
  400f06:	4920      	ldr	r1, [pc, #128]	; (400f88 <mcan_init+0x260>)
  400f08:	4011      	ands	r1, r2
  400f0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400f0e:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		hw->MCAN_RXF1C = ((uint32_t)mcan1_rx_fifo_1 & BIT_2_TO_15_MASK) |
  400f12:	491e      	ldr	r1, [pc, #120]	; (400f8c <mcan_init+0x264>)
  400f14:	4011      	ands	r1, r2
  400f16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400f1a:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		hw->MCAN_RXBC = ((uint32_t)mcan1_rx_buffer & BIT_2_TO_15_MASK);
  400f1e:	491c      	ldr	r1, [pc, #112]	; (400f90 <mcan_init+0x268>)
  400f20:	4011      	ands	r1, r2
  400f22:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  400f26:	481b      	ldr	r0, [pc, #108]	; (400f94 <mcan_init+0x26c>)
  400f28:	4010      	ands	r0, r2
				MCAN_TXBC_NDTB(CONF_MCAN1_TX_BUFFER_NUM) |
  400f2a:	4913      	ldr	r1, [pc, #76]	; (400f78 <mcan_init+0x250>)
  400f2c:	4301      	orrs	r1, r0
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  400f2e:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		hw->MCAN_TXEFC = ((uint32_t)mcan1_tx_event_fifo & BIT_2_TO_15_MASK) |
  400f32:	4919      	ldr	r1, [pc, #100]	; (400f98 <mcan_init+0x270>)
  400f34:	400a      	ands	r2, r1
  400f36:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  400f3a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  400f3e:	e711      	b.n	400d64 <mcan_init+0x3c>
  400f40:	00401291 	.word	0x00401291
  400f44:	00401241 	.word	0x00401241
  400f48:	0040127d 	.word	0x0040127d
  400f4c:	00400cf9 	.word	0x00400cf9
  400f50:	40030000 	.word	0x40030000
  400f54:	40034000 	.word	0x40034000
  400f58:	06010507 	.word	0x06010507
  400f5c:	00050a33 	.word	0x00050a33
  400f60:	20400de8 	.word	0x20400de8
  400f64:	20400b68 	.word	0x20400b68
  400f68:	20400be8 	.word	0x20400be8
  400f6c:	20400ce8 	.word	0x20400ce8
  400f70:	20400a68 	.word	0x20400a68
  400f74:	20400e68 	.word	0x20400e68
  400f78:	04040000 	.word	0x04040000
  400f7c:	20400ee8 	.word	0x20400ee8
  400f80:	204012a8 	.word	0x204012a8
  400f84:	20401028 	.word	0x20401028
  400f88:	204010a8 	.word	0x204010a8
  400f8c:	204011a8 	.word	0x204011a8
  400f90:	20400f28 	.word	0x20400f28
  400f94:	20401328 	.word	0x20401328
  400f98:	204013a8 	.word	0x204013a8

00400f9c <mcan_start>:
 * \param module_inst  MCAN instance
 *
 */
void mcan_start(struct mcan_module *const module_inst)
{
	module_inst->hw->MCAN_CCCR &= ~MCAN_CCCR_INIT;
  400f9c:	6802      	ldr	r2, [r0, #0]
  400f9e:	6993      	ldr	r3, [r2, #24]
  400fa0:	f023 0301 	bic.w	r3, r3, #1
  400fa4:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT);
  400fa6:	6802      	ldr	r2, [r0, #0]
  400fa8:	6993      	ldr	r3, [r2, #24]
  400faa:	f013 0f01 	tst.w	r3, #1
  400fae:	d1fb      	bne.n	400fa8 <mcan_start+0xc>
}
  400fb0:	4770      	bx	lr

00400fb2 <mcan_stop>:
 * \param module_inst  MCAN instance
 *
 */
void mcan_stop(struct mcan_module *const module_inst)
{
	module_inst->hw->MCAN_CCCR |= MCAN_CCCR_INIT;
  400fb2:	6802      	ldr	r2, [r0, #0]
  400fb4:	6993      	ldr	r3, [r2, #24]
  400fb6:	f043 0301 	orr.w	r3, r3, #1
  400fba:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (!(module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT));
  400fbc:	6802      	ldr	r2, [r0, #0]
  400fbe:	6993      	ldr	r3, [r2, #24]
  400fc0:	f013 0f01 	tst.w	r3, #1
  400fc4:	d0fb      	beq.n	400fbe <mcan_stop+0xc>
}
  400fc6:	4770      	bx	lr

00400fc8 <mcan_set_tx_buffer_element>:
 * \return status code.
 */
enum status_code mcan_set_tx_buffer_element(
		struct mcan_module *const module_inst,
		struct mcan_tx_element *tx_element, uint32_t index)
{
  400fc8:	b410      	push	{r4}
	uint32_t i;
	if (module_inst->hw == MCAN0) {
  400fca:	6803      	ldr	r3, [r0, #0]
  400fcc:	4819      	ldr	r0, [pc, #100]	; (401034 <mcan_set_tx_buffer_element+0x6c>)
  400fce:	4283      	cmp	r3, r0
  400fd0:	d018      	beq.n	401004 <mcan_set_tx_buffer_element+0x3c>
		mcan0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
			mcan0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	} else if (module_inst->hw == MCAN1) {
  400fd2:	4819      	ldr	r0, [pc, #100]	; (401038 <mcan_set_tx_buffer_element+0x70>)
  400fd4:	4283      	cmp	r3, r0
  400fd6:	d129      	bne.n	40102c <mcan_set_tx_buffer_element+0x64>
		mcan1_tx_buffer[index].T0.reg = tx_element->T0.reg;
  400fd8:	680c      	ldr	r4, [r1, #0]
  400fda:	4818      	ldr	r0, [pc, #96]	; (40103c <mcan_set_tx_buffer_element+0x74>)
  400fdc:	0112      	lsls	r2, r2, #4
  400fde:	1883      	adds	r3, r0, r2
  400fe0:	5084      	str	r4, [r0, r2]
		mcan1_tx_buffer[index].T1.reg = tx_element->T1.reg;
  400fe2:	684c      	ldr	r4, [r1, #4]
  400fe4:	605c      	str	r4, [r3, #4]
  400fe6:	f101 0308 	add.w	r3, r1, #8
  400fea:	3207      	adds	r2, #7
  400fec:	4402      	add	r2, r0
  400fee:	3110      	adds	r1, #16
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
			mcan1_tx_buffer[index].data[i] = tx_element->data[i];
  400ff0:	f813 0b01 	ldrb.w	r0, [r3], #1
  400ff4:	f802 0f01 	strb.w	r0, [r2, #1]!
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  400ff8:	428b      	cmp	r3, r1
  400ffa:	d1f9      	bne.n	400ff0 <mcan_set_tx_buffer_element+0x28>
		}
		return STATUS_OK;
  400ffc:	2000      	movs	r0, #0
	}
	return ERR_INVALID_ARG;
}
  400ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
  401002:	4770      	bx	lr
		mcan0_tx_buffer[index].T0.reg = tx_element->T0.reg;
  401004:	680c      	ldr	r4, [r1, #0]
  401006:	480e      	ldr	r0, [pc, #56]	; (401040 <mcan_set_tx_buffer_element+0x78>)
  401008:	0112      	lsls	r2, r2, #4
  40100a:	1883      	adds	r3, r0, r2
  40100c:	5084      	str	r4, [r0, r2]
		mcan0_tx_buffer[index].T1.reg = tx_element->T1.reg;
  40100e:	684c      	ldr	r4, [r1, #4]
  401010:	605c      	str	r4, [r3, #4]
  401012:	f101 0308 	add.w	r3, r1, #8
  401016:	3207      	adds	r2, #7
  401018:	4402      	add	r2, r0
  40101a:	3110      	adds	r1, #16
			mcan0_tx_buffer[index].data[i] = tx_element->data[i];
  40101c:	f813 0b01 	ldrb.w	r0, [r3], #1
  401020:	f802 0f01 	strb.w	r0, [r2, #1]!
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  401024:	428b      	cmp	r3, r1
  401026:	d1f9      	bne.n	40101c <mcan_set_tx_buffer_element+0x54>
		return STATUS_OK;
  401028:	2000      	movs	r0, #0
  40102a:	e7e8      	b.n	400ffe <mcan_set_tx_buffer_element+0x36>
	return ERR_INVALID_ARG;
  40102c:	f06f 0007 	mvn.w	r0, #7
  401030:	e7e5      	b.n	400ffe <mcan_set_tx_buffer_element+0x36>
  401032:	bf00      	nop
  401034:	40030000 	.word	0x40030000
  401038:	40034000 	.word	0x40034000
  40103c:	20401328 	.word	0x20401328
  401040:	20400e68 	.word	0x20400e68

00401044 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401044:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401046:	4770      	bx	lr

00401048 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401048:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40104a:	4770      	bx	lr

0040104c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40104c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401050:	4604      	mov	r4, r0
  401052:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401054:	4b0e      	ldr	r3, [pc, #56]	; (401090 <pio_handler_process+0x44>)
  401056:	4798      	blx	r3
  401058:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40105a:	4620      	mov	r0, r4
  40105c:	4b0d      	ldr	r3, [pc, #52]	; (401094 <pio_handler_process+0x48>)
  40105e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401060:	4005      	ands	r5, r0
  401062:	d013      	beq.n	40108c <pio_handler_process+0x40>
  401064:	4c0c      	ldr	r4, [pc, #48]	; (401098 <pio_handler_process+0x4c>)
  401066:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40106a:	e003      	b.n	401074 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40106c:	42b4      	cmp	r4, r6
  40106e:	d00d      	beq.n	40108c <pio_handler_process+0x40>
  401070:	3410      	adds	r4, #16
		while (status != 0) {
  401072:	b15d      	cbz	r5, 40108c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401074:	6820      	ldr	r0, [r4, #0]
  401076:	4540      	cmp	r0, r8
  401078:	d1f8      	bne.n	40106c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40107a:	6861      	ldr	r1, [r4, #4]
  40107c:	4229      	tst	r1, r5
  40107e:	d0f5      	beq.n	40106c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401080:	68e3      	ldr	r3, [r4, #12]
  401082:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401084:	6863      	ldr	r3, [r4, #4]
  401086:	ea25 0503 	bic.w	r5, r5, r3
  40108a:	e7ef      	b.n	40106c <pio_handler_process+0x20>
  40108c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401090:	00401045 	.word	0x00401045
  401094:	00401049 	.word	0x00401049
  401098:	204013e8 	.word	0x204013e8

0040109c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40109c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40109e:	210a      	movs	r1, #10
  4010a0:	4801      	ldr	r0, [pc, #4]	; (4010a8 <PIOA_Handler+0xc>)
  4010a2:	4b02      	ldr	r3, [pc, #8]	; (4010ac <PIOA_Handler+0x10>)
  4010a4:	4798      	blx	r3
  4010a6:	bd08      	pop	{r3, pc}
  4010a8:	400e0e00 	.word	0x400e0e00
  4010ac:	0040104d 	.word	0x0040104d

004010b0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4010b0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4010b2:	210b      	movs	r1, #11
  4010b4:	4801      	ldr	r0, [pc, #4]	; (4010bc <PIOB_Handler+0xc>)
  4010b6:	4b02      	ldr	r3, [pc, #8]	; (4010c0 <PIOB_Handler+0x10>)
  4010b8:	4798      	blx	r3
  4010ba:	bd08      	pop	{r3, pc}
  4010bc:	400e1000 	.word	0x400e1000
  4010c0:	0040104d 	.word	0x0040104d

004010c4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4010c4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4010c6:	210c      	movs	r1, #12
  4010c8:	4801      	ldr	r0, [pc, #4]	; (4010d0 <PIOC_Handler+0xc>)
  4010ca:	4b02      	ldr	r3, [pc, #8]	; (4010d4 <PIOC_Handler+0x10>)
  4010cc:	4798      	blx	r3
  4010ce:	bd08      	pop	{r3, pc}
  4010d0:	400e1200 	.word	0x400e1200
  4010d4:	0040104d 	.word	0x0040104d

004010d8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4010d8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4010da:	2110      	movs	r1, #16
  4010dc:	4801      	ldr	r0, [pc, #4]	; (4010e4 <PIOD_Handler+0xc>)
  4010de:	4b02      	ldr	r3, [pc, #8]	; (4010e8 <PIOD_Handler+0x10>)
  4010e0:	4798      	blx	r3
  4010e2:	bd08      	pop	{r3, pc}
  4010e4:	400e1400 	.word	0x400e1400
  4010e8:	0040104d 	.word	0x0040104d

004010ec <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4010ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4010ee:	2111      	movs	r1, #17
  4010f0:	4801      	ldr	r0, [pc, #4]	; (4010f8 <PIOE_Handler+0xc>)
  4010f2:	4b02      	ldr	r3, [pc, #8]	; (4010fc <PIOE_Handler+0x10>)
  4010f4:	4798      	blx	r3
  4010f6:	bd08      	pop	{r3, pc}
  4010f8:	400e1600 	.word	0x400e1600
  4010fc:	0040104d 	.word	0x0040104d

00401100 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401100:	2803      	cmp	r0, #3
  401102:	d011      	beq.n	401128 <pmc_mck_set_division+0x28>
  401104:	2804      	cmp	r0, #4
  401106:	d012      	beq.n	40112e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401108:	2802      	cmp	r0, #2
  40110a:	bf0c      	ite	eq
  40110c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401110:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401112:	4a08      	ldr	r2, [pc, #32]	; (401134 <pmc_mck_set_division+0x34>)
  401114:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40111a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40111c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40111e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401120:	f013 0f08 	tst.w	r3, #8
  401124:	d0fb      	beq.n	40111e <pmc_mck_set_division+0x1e>
}
  401126:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401128:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40112c:	e7f1      	b.n	401112 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40112e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401132:	e7ee      	b.n	401112 <pmc_mck_set_division+0x12>
  401134:	400e0600 	.word	0x400e0600

00401138 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401138:	4a17      	ldr	r2, [pc, #92]	; (401198 <pmc_switch_mck_to_pllack+0x60>)
  40113a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40113c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401140:	4318      	orrs	r0, r3
  401142:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401144:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401146:	f013 0f08 	tst.w	r3, #8
  40114a:	d10a      	bne.n	401162 <pmc_switch_mck_to_pllack+0x2a>
  40114c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401150:	4911      	ldr	r1, [pc, #68]	; (401198 <pmc_switch_mck_to_pllack+0x60>)
  401152:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401154:	f012 0f08 	tst.w	r2, #8
  401158:	d103      	bne.n	401162 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40115a:	3b01      	subs	r3, #1
  40115c:	d1f9      	bne.n	401152 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40115e:	2001      	movs	r0, #1
  401160:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401162:	4a0d      	ldr	r2, [pc, #52]	; (401198 <pmc_switch_mck_to_pllack+0x60>)
  401164:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401166:	f023 0303 	bic.w	r3, r3, #3
  40116a:	f043 0302 	orr.w	r3, r3, #2
  40116e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401170:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401172:	f013 0f08 	tst.w	r3, #8
  401176:	d10a      	bne.n	40118e <pmc_switch_mck_to_pllack+0x56>
  401178:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40117c:	4906      	ldr	r1, [pc, #24]	; (401198 <pmc_switch_mck_to_pllack+0x60>)
  40117e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401180:	f012 0f08 	tst.w	r2, #8
  401184:	d105      	bne.n	401192 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401186:	3b01      	subs	r3, #1
  401188:	d1f9      	bne.n	40117e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40118a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40118c:	4770      	bx	lr
	return 0;
  40118e:	2000      	movs	r0, #0
  401190:	4770      	bx	lr
  401192:	2000      	movs	r0, #0
  401194:	4770      	bx	lr
  401196:	bf00      	nop
  401198:	400e0600 	.word	0x400e0600

0040119c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40119c:	b9a0      	cbnz	r0, 4011c8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40119e:	480e      	ldr	r0, [pc, #56]	; (4011d8 <pmc_switch_mainck_to_xtal+0x3c>)
  4011a0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4011a2:	0209      	lsls	r1, r1, #8
  4011a4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4011a6:	4a0d      	ldr	r2, [pc, #52]	; (4011dc <pmc_switch_mainck_to_xtal+0x40>)
  4011a8:	401a      	ands	r2, r3
  4011aa:	4b0d      	ldr	r3, [pc, #52]	; (4011e0 <pmc_switch_mainck_to_xtal+0x44>)
  4011ac:	4313      	orrs	r3, r2
  4011ae:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4011b0:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4011b2:	4602      	mov	r2, r0
  4011b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011b6:	f013 0f01 	tst.w	r3, #1
  4011ba:	d0fb      	beq.n	4011b4 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4011bc:	4a06      	ldr	r2, [pc, #24]	; (4011d8 <pmc_switch_mainck_to_xtal+0x3c>)
  4011be:	6a11      	ldr	r1, [r2, #32]
  4011c0:	4b08      	ldr	r3, [pc, #32]	; (4011e4 <pmc_switch_mainck_to_xtal+0x48>)
  4011c2:	430b      	orrs	r3, r1
  4011c4:	6213      	str	r3, [r2, #32]
  4011c6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4011c8:	4903      	ldr	r1, [pc, #12]	; (4011d8 <pmc_switch_mainck_to_xtal+0x3c>)
  4011ca:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4011cc:	4a06      	ldr	r2, [pc, #24]	; (4011e8 <pmc_switch_mainck_to_xtal+0x4c>)
  4011ce:	401a      	ands	r2, r3
  4011d0:	4b06      	ldr	r3, [pc, #24]	; (4011ec <pmc_switch_mainck_to_xtal+0x50>)
  4011d2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4011d4:	620b      	str	r3, [r1, #32]
  4011d6:	4770      	bx	lr
  4011d8:	400e0600 	.word	0x400e0600
  4011dc:	ffc8fffc 	.word	0xffc8fffc
  4011e0:	00370001 	.word	0x00370001
  4011e4:	01370000 	.word	0x01370000
  4011e8:	fec8fffc 	.word	0xfec8fffc
  4011ec:	01370002 	.word	0x01370002

004011f0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4011f0:	4b02      	ldr	r3, [pc, #8]	; (4011fc <pmc_osc_is_ready_mainck+0xc>)
  4011f2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4011f4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4011f8:	4770      	bx	lr
  4011fa:	bf00      	nop
  4011fc:	400e0600 	.word	0x400e0600

00401200 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401200:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401204:	4b01      	ldr	r3, [pc, #4]	; (40120c <pmc_disable_pllack+0xc>)
  401206:	629a      	str	r2, [r3, #40]	; 0x28
  401208:	4770      	bx	lr
  40120a:	bf00      	nop
  40120c:	400e0600 	.word	0x400e0600

00401210 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401210:	4b02      	ldr	r3, [pc, #8]	; (40121c <pmc_is_locked_pllack+0xc>)
  401212:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401214:	f000 0002 	and.w	r0, r0, #2
  401218:	4770      	bx	lr
  40121a:	bf00      	nop
  40121c:	400e0600 	.word	0x400e0600

00401220 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  401220:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  401224:	4b05      	ldr	r3, [pc, #20]	; (40123c <pmc_enable_periph_clk+0x1c>)
  401226:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  40122a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  40122e:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  401232:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  401236:	2000      	movs	r0, #0
  401238:	4770      	bx	lr
  40123a:	bf00      	nop
  40123c:	400e0600 	.word	0x400e0600

00401240 <pmc_switch_pck_to_pllack>:
 */
uint32_t pmc_switch_pck_to_pllack(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLA_CLK | ul_pres;
  401240:	f041 0102 	orr.w	r1, r1, #2
  401244:	4b0c      	ldr	r3, [pc, #48]	; (401278 <pmc_switch_pck_to_pllack+0x38>)
  401246:	f100 0210 	add.w	r2, r0, #16
  40124a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  40124e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  401250:	f44f 7380 	mov.w	r3, #256	; 0x100
  401254:	fa03 f000 	lsl.w	r0, r3, r0
	for (ul_timeout = PMC_TIMEOUT;
  401258:	4202      	tst	r2, r0
  40125a:	d109      	bne.n	401270 <pmc_switch_pck_to_pllack+0x30>
  40125c:	f44f 6300 	mov.w	r3, #2048	; 0x800
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  401260:	4905      	ldr	r1, [pc, #20]	; (401278 <pmc_switch_pck_to_pllack+0x38>)
  401262:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	for (ul_timeout = PMC_TIMEOUT;
  401264:	4202      	tst	r2, r0
  401266:	d105      	bne.n	401274 <pmc_switch_pck_to_pllack+0x34>
		if (ul_timeout == 0) {
  401268:	3b01      	subs	r3, #1
  40126a:	d1fa      	bne.n	401262 <pmc_switch_pck_to_pllack+0x22>
			return 1;
  40126c:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40126e:	4770      	bx	lr
	return 0;
  401270:	2000      	movs	r0, #0
  401272:	4770      	bx	lr
  401274:	2000      	movs	r0, #0
  401276:	4770      	bx	lr
  401278:	400e0600 	.word	0x400e0600

0040127c <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  40127c:	f44f 7380 	mov.w	r3, #256	; 0x100
  401280:	fa03 f000 	lsl.w	r0, r3, r0
  401284:	4b01      	ldr	r3, [pc, #4]	; (40128c <pmc_enable_pck+0x10>)
  401286:	6018      	str	r0, [r3, #0]
  401288:	4770      	bx	lr
  40128a:	bf00      	nop
  40128c:	400e0600 	.word	0x400e0600

00401290 <pmc_disable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  401290:	f44f 7380 	mov.w	r3, #256	; 0x100
  401294:	fa03 f000 	lsl.w	r0, r3, r0
  401298:	4b01      	ldr	r3, [pc, #4]	; (4012a0 <pmc_disable_pck+0x10>)
  40129a:	6058      	str	r0, [r3, #4]
  40129c:	4770      	bx	lr
  40129e:	bf00      	nop
  4012a0:	400e0600 	.word	0x400e0600

004012a4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4012a4:	6943      	ldr	r3, [r0, #20]
  4012a6:	f013 0f02 	tst.w	r3, #2
  4012aa:	d002      	beq.n	4012b2 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4012ac:	61c1      	str	r1, [r0, #28]
	return 0;
  4012ae:	2000      	movs	r0, #0
  4012b0:	4770      	bx	lr
		return 1;
  4012b2:	2001      	movs	r0, #1
}
  4012b4:	4770      	bx	lr

004012b6 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4012b6:	6943      	ldr	r3, [r0, #20]
  4012b8:	f013 0f01 	tst.w	r3, #1
  4012bc:	d003      	beq.n	4012c6 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4012be:	6983      	ldr	r3, [r0, #24]
  4012c0:	700b      	strb	r3, [r1, #0]
	return 0;
  4012c2:	2000      	movs	r0, #0
  4012c4:	4770      	bx	lr
		return 1;
  4012c6:	2001      	movs	r0, #1
}
  4012c8:	4770      	bx	lr

004012ca <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4012ca:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4012cc:	010b      	lsls	r3, r1, #4
  4012ce:	4293      	cmp	r3, r2
  4012d0:	d914      	bls.n	4012fc <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4012d2:	00c9      	lsls	r1, r1, #3
  4012d4:	084b      	lsrs	r3, r1, #1
  4012d6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4012da:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4012de:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4012e0:	1e5c      	subs	r4, r3, #1
  4012e2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4012e6:	428c      	cmp	r4, r1
  4012e8:	d901      	bls.n	4012ee <usart_set_async_baudrate+0x24>
		return 1;
  4012ea:	2001      	movs	r0, #1
  4012ec:	e017      	b.n	40131e <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4012ee:	6841      	ldr	r1, [r0, #4]
  4012f0:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4012f4:	6041      	str	r1, [r0, #4]
  4012f6:	e00c      	b.n	401312 <usart_set_async_baudrate+0x48>
		return 1;
  4012f8:	2001      	movs	r0, #1
  4012fa:	e010      	b.n	40131e <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4012fc:	0859      	lsrs	r1, r3, #1
  4012fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401302:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  401306:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401308:	1e5c      	subs	r4, r3, #1
  40130a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40130e:	428c      	cmp	r4, r1
  401310:	d8f2      	bhi.n	4012f8 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401312:	0412      	lsls	r2, r2, #16
  401314:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401318:	431a      	orrs	r2, r3
  40131a:	6202      	str	r2, [r0, #32]

	return 0;
  40131c:	2000      	movs	r0, #0
}
  40131e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401322:	4770      	bx	lr

00401324 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401324:	4b08      	ldr	r3, [pc, #32]	; (401348 <usart_reset+0x24>)
  401326:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  40132a:	2300      	movs	r3, #0
  40132c:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40132e:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401330:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401332:	2388      	movs	r3, #136	; 0x88
  401334:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401336:	2324      	movs	r3, #36	; 0x24
  401338:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40133a:	f44f 7380 	mov.w	r3, #256	; 0x100
  40133e:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401340:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401344:	6003      	str	r3, [r0, #0]
  401346:	4770      	bx	lr
  401348:	55534100 	.word	0x55534100

0040134c <usart_init_rs232>:
{
  40134c:	b570      	push	{r4, r5, r6, lr}
  40134e:	4605      	mov	r5, r0
  401350:	460c      	mov	r4, r1
  401352:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401354:	4b0f      	ldr	r3, [pc, #60]	; (401394 <usart_init_rs232+0x48>)
  401356:	4798      	blx	r3
	ul_reg_val = 0;
  401358:	2200      	movs	r2, #0
  40135a:	4b0f      	ldr	r3, [pc, #60]	; (401398 <usart_init_rs232+0x4c>)
  40135c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40135e:	b1a4      	cbz	r4, 40138a <usart_init_rs232+0x3e>
  401360:	4632      	mov	r2, r6
  401362:	6821      	ldr	r1, [r4, #0]
  401364:	4628      	mov	r0, r5
  401366:	4b0d      	ldr	r3, [pc, #52]	; (40139c <usart_init_rs232+0x50>)
  401368:	4798      	blx	r3
  40136a:	4602      	mov	r2, r0
  40136c:	b978      	cbnz	r0, 40138e <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40136e:	6863      	ldr	r3, [r4, #4]
  401370:	68a1      	ldr	r1, [r4, #8]
  401372:	430b      	orrs	r3, r1
  401374:	6921      	ldr	r1, [r4, #16]
  401376:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401378:	68e1      	ldr	r1, [r4, #12]
  40137a:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40137c:	4906      	ldr	r1, [pc, #24]	; (401398 <usart_init_rs232+0x4c>)
  40137e:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401380:	6869      	ldr	r1, [r5, #4]
  401382:	430b      	orrs	r3, r1
  401384:	606b      	str	r3, [r5, #4]
}
  401386:	4610      	mov	r0, r2
  401388:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  40138a:	2201      	movs	r2, #1
  40138c:	e7fb      	b.n	401386 <usart_init_rs232+0x3a>
  40138e:	2201      	movs	r2, #1
  401390:	e7f9      	b.n	401386 <usart_init_rs232+0x3a>
  401392:	bf00      	nop
  401394:	00401325 	.word	0x00401325
  401398:	20401458 	.word	0x20401458
  40139c:	004012cb 	.word	0x004012cb

004013a0 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4013a0:	2340      	movs	r3, #64	; 0x40
  4013a2:	6003      	str	r3, [r0, #0]
  4013a4:	4770      	bx	lr

004013a6 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4013a6:	2310      	movs	r3, #16
  4013a8:	6003      	str	r3, [r0, #0]
  4013aa:	4770      	bx	lr

004013ac <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4013ac:	6943      	ldr	r3, [r0, #20]
  4013ae:	f013 0f02 	tst.w	r3, #2
  4013b2:	d004      	beq.n	4013be <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4013b4:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4013b8:	61c1      	str	r1, [r0, #28]
	return 0;
  4013ba:	2000      	movs	r0, #0
  4013bc:	4770      	bx	lr
		return 1;
  4013be:	2001      	movs	r0, #1
}
  4013c0:	4770      	bx	lr

004013c2 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4013c2:	6943      	ldr	r3, [r0, #20]
  4013c4:	f013 0f01 	tst.w	r3, #1
  4013c8:	d005      	beq.n	4013d6 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4013ca:	6983      	ldr	r3, [r0, #24]
  4013cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4013d0:	600b      	str	r3, [r1, #0]
	return 0;
  4013d2:	2000      	movs	r0, #0
  4013d4:	4770      	bx	lr
		return 1;
  4013d6:	2001      	movs	r0, #1
}
  4013d8:	4770      	bx	lr

004013da <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4013da:	e7fe      	b.n	4013da <Dummy_Handler>

004013dc <Reset_Handler>:
{
  4013dc:	b500      	push	{lr}
  4013de:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4013e0:	4b25      	ldr	r3, [pc, #148]	; (401478 <Reset_Handler+0x9c>)
  4013e2:	4a26      	ldr	r2, [pc, #152]	; (40147c <Reset_Handler+0xa0>)
  4013e4:	429a      	cmp	r2, r3
  4013e6:	d010      	beq.n	40140a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4013e8:	4b25      	ldr	r3, [pc, #148]	; (401480 <Reset_Handler+0xa4>)
  4013ea:	4a23      	ldr	r2, [pc, #140]	; (401478 <Reset_Handler+0x9c>)
  4013ec:	429a      	cmp	r2, r3
  4013ee:	d20c      	bcs.n	40140a <Reset_Handler+0x2e>
  4013f0:	3b01      	subs	r3, #1
  4013f2:	1a9b      	subs	r3, r3, r2
  4013f4:	f023 0303 	bic.w	r3, r3, #3
  4013f8:	3304      	adds	r3, #4
  4013fa:	4413      	add	r3, r2
  4013fc:	491f      	ldr	r1, [pc, #124]	; (40147c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4013fe:	f851 0b04 	ldr.w	r0, [r1], #4
  401402:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401406:	429a      	cmp	r2, r3
  401408:	d1f9      	bne.n	4013fe <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40140a:	4b1e      	ldr	r3, [pc, #120]	; (401484 <Reset_Handler+0xa8>)
  40140c:	4a1e      	ldr	r2, [pc, #120]	; (401488 <Reset_Handler+0xac>)
  40140e:	429a      	cmp	r2, r3
  401410:	d20a      	bcs.n	401428 <Reset_Handler+0x4c>
  401412:	3b01      	subs	r3, #1
  401414:	1a9b      	subs	r3, r3, r2
  401416:	f023 0303 	bic.w	r3, r3, #3
  40141a:	3304      	adds	r3, #4
  40141c:	4413      	add	r3, r2
                *pDest++ = 0;
  40141e:	2100      	movs	r1, #0
  401420:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401424:	4293      	cmp	r3, r2
  401426:	d1fb      	bne.n	401420 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401428:	4a18      	ldr	r2, [pc, #96]	; (40148c <Reset_Handler+0xb0>)
  40142a:	4b19      	ldr	r3, [pc, #100]	; (401490 <Reset_Handler+0xb4>)
  40142c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401430:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401432:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401436:	fab3 f383 	clz	r3, r3
  40143a:	095b      	lsrs	r3, r3, #5
  40143c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40143e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  401440:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401444:	2200      	movs	r2, #0
  401446:	4b13      	ldr	r3, [pc, #76]	; (401494 <Reset_Handler+0xb8>)
  401448:	701a      	strb	r2, [r3, #0]
	return flags;
  40144a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  40144c:	4a12      	ldr	r2, [pc, #72]	; (401498 <Reset_Handler+0xbc>)
  40144e:	6813      	ldr	r3, [r2, #0]
  401450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401454:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  401456:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40145a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40145e:	b129      	cbz	r1, 40146c <Reset_Handler+0x90>
		cpu_irq_enable();
  401460:	2201      	movs	r2, #1
  401462:	4b0c      	ldr	r3, [pc, #48]	; (401494 <Reset_Handler+0xb8>)
  401464:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  401466:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40146a:	b662      	cpsie	i
        __libc_init_array();
  40146c:	4b0b      	ldr	r3, [pc, #44]	; (40149c <Reset_Handler+0xc0>)
  40146e:	4798      	blx	r3
        main();
  401470:	4b0b      	ldr	r3, [pc, #44]	; (4014a0 <Reset_Handler+0xc4>)
  401472:	4798      	blx	r3
  401474:	e7fe      	b.n	401474 <Reset_Handler+0x98>
  401476:	bf00      	nop
  401478:	20400000 	.word	0x20400000
  40147c:	00404e08 	.word	0x00404e08
  401480:	204009c0 	.word	0x204009c0
  401484:	204014d0 	.word	0x204014d0
  401488:	204009c0 	.word	0x204009c0
  40148c:	e000ed00 	.word	0xe000ed00
  401490:	00400000 	.word	0x00400000
  401494:	2040000c 	.word	0x2040000c
  401498:	e000ed88 	.word	0xe000ed88
  40149c:	0040174d 	.word	0x0040174d
  4014a0:	00401699 	.word	0x00401699

004014a4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4014a4:	4b3b      	ldr	r3, [pc, #236]	; (401594 <SystemCoreClockUpdate+0xf0>)
  4014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4014a8:	f003 0303 	and.w	r3, r3, #3
  4014ac:	2b01      	cmp	r3, #1
  4014ae:	d01d      	beq.n	4014ec <SystemCoreClockUpdate+0x48>
  4014b0:	b183      	cbz	r3, 4014d4 <SystemCoreClockUpdate+0x30>
  4014b2:	2b02      	cmp	r3, #2
  4014b4:	d036      	beq.n	401524 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4014b6:	4b37      	ldr	r3, [pc, #220]	; (401594 <SystemCoreClockUpdate+0xf0>)
  4014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4014ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4014be:	2b70      	cmp	r3, #112	; 0x70
  4014c0:	d05f      	beq.n	401582 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4014c2:	4b34      	ldr	r3, [pc, #208]	; (401594 <SystemCoreClockUpdate+0xf0>)
  4014c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4014c6:	4934      	ldr	r1, [pc, #208]	; (401598 <SystemCoreClockUpdate+0xf4>)
  4014c8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4014cc:	680b      	ldr	r3, [r1, #0]
  4014ce:	40d3      	lsrs	r3, r2
  4014d0:	600b      	str	r3, [r1, #0]
  4014d2:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4014d4:	4b31      	ldr	r3, [pc, #196]	; (40159c <SystemCoreClockUpdate+0xf8>)
  4014d6:	695b      	ldr	r3, [r3, #20]
  4014d8:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4014dc:	bf14      	ite	ne
  4014de:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4014e2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4014e6:	4b2c      	ldr	r3, [pc, #176]	; (401598 <SystemCoreClockUpdate+0xf4>)
  4014e8:	601a      	str	r2, [r3, #0]
  4014ea:	e7e4      	b.n	4014b6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4014ec:	4b29      	ldr	r3, [pc, #164]	; (401594 <SystemCoreClockUpdate+0xf0>)
  4014ee:	6a1b      	ldr	r3, [r3, #32]
  4014f0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4014f4:	d003      	beq.n	4014fe <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4014f6:	4a2a      	ldr	r2, [pc, #168]	; (4015a0 <SystemCoreClockUpdate+0xfc>)
  4014f8:	4b27      	ldr	r3, [pc, #156]	; (401598 <SystemCoreClockUpdate+0xf4>)
  4014fa:	601a      	str	r2, [r3, #0]
  4014fc:	e7db      	b.n	4014b6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4014fe:	4a29      	ldr	r2, [pc, #164]	; (4015a4 <SystemCoreClockUpdate+0x100>)
  401500:	4b25      	ldr	r3, [pc, #148]	; (401598 <SystemCoreClockUpdate+0xf4>)
  401502:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401504:	4b23      	ldr	r3, [pc, #140]	; (401594 <SystemCoreClockUpdate+0xf0>)
  401506:	6a1b      	ldr	r3, [r3, #32]
  401508:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40150c:	2b10      	cmp	r3, #16
  40150e:	d005      	beq.n	40151c <SystemCoreClockUpdate+0x78>
  401510:	2b20      	cmp	r3, #32
  401512:	d1d0      	bne.n	4014b6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401514:	4a22      	ldr	r2, [pc, #136]	; (4015a0 <SystemCoreClockUpdate+0xfc>)
  401516:	4b20      	ldr	r3, [pc, #128]	; (401598 <SystemCoreClockUpdate+0xf4>)
  401518:	601a      	str	r2, [r3, #0]
          break;
  40151a:	e7cc      	b.n	4014b6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  40151c:	4a22      	ldr	r2, [pc, #136]	; (4015a8 <SystemCoreClockUpdate+0x104>)
  40151e:	4b1e      	ldr	r3, [pc, #120]	; (401598 <SystemCoreClockUpdate+0xf4>)
  401520:	601a      	str	r2, [r3, #0]
          break;
  401522:	e7c8      	b.n	4014b6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401524:	4b1b      	ldr	r3, [pc, #108]	; (401594 <SystemCoreClockUpdate+0xf0>)
  401526:	6a1b      	ldr	r3, [r3, #32]
  401528:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40152c:	d016      	beq.n	40155c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40152e:	4a1c      	ldr	r2, [pc, #112]	; (4015a0 <SystemCoreClockUpdate+0xfc>)
  401530:	4b19      	ldr	r3, [pc, #100]	; (401598 <SystemCoreClockUpdate+0xf4>)
  401532:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401534:	4b17      	ldr	r3, [pc, #92]	; (401594 <SystemCoreClockUpdate+0xf0>)
  401536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401538:	f003 0303 	and.w	r3, r3, #3
  40153c:	2b02      	cmp	r3, #2
  40153e:	d1ba      	bne.n	4014b6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401540:	4a14      	ldr	r2, [pc, #80]	; (401594 <SystemCoreClockUpdate+0xf0>)
  401542:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401544:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401546:	4814      	ldr	r0, [pc, #80]	; (401598 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401548:	f3c1 410a 	ubfx	r1, r1, #16, #11
  40154c:	6803      	ldr	r3, [r0, #0]
  40154e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401552:	b2d2      	uxtb	r2, r2
  401554:	fbb3 f3f2 	udiv	r3, r3, r2
  401558:	6003      	str	r3, [r0, #0]
  40155a:	e7ac      	b.n	4014b6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40155c:	4a11      	ldr	r2, [pc, #68]	; (4015a4 <SystemCoreClockUpdate+0x100>)
  40155e:	4b0e      	ldr	r3, [pc, #56]	; (401598 <SystemCoreClockUpdate+0xf4>)
  401560:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401562:	4b0c      	ldr	r3, [pc, #48]	; (401594 <SystemCoreClockUpdate+0xf0>)
  401564:	6a1b      	ldr	r3, [r3, #32]
  401566:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40156a:	2b10      	cmp	r3, #16
  40156c:	d005      	beq.n	40157a <SystemCoreClockUpdate+0xd6>
  40156e:	2b20      	cmp	r3, #32
  401570:	d1e0      	bne.n	401534 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401572:	4a0b      	ldr	r2, [pc, #44]	; (4015a0 <SystemCoreClockUpdate+0xfc>)
  401574:	4b08      	ldr	r3, [pc, #32]	; (401598 <SystemCoreClockUpdate+0xf4>)
  401576:	601a      	str	r2, [r3, #0]
          break;
  401578:	e7dc      	b.n	401534 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40157a:	4a0b      	ldr	r2, [pc, #44]	; (4015a8 <SystemCoreClockUpdate+0x104>)
  40157c:	4b06      	ldr	r3, [pc, #24]	; (401598 <SystemCoreClockUpdate+0xf4>)
  40157e:	601a      	str	r2, [r3, #0]
          break;
  401580:	e7d8      	b.n	401534 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401582:	4a05      	ldr	r2, [pc, #20]	; (401598 <SystemCoreClockUpdate+0xf4>)
  401584:	6813      	ldr	r3, [r2, #0]
  401586:	4909      	ldr	r1, [pc, #36]	; (4015ac <SystemCoreClockUpdate+0x108>)
  401588:	fba1 1303 	umull	r1, r3, r1, r3
  40158c:	085b      	lsrs	r3, r3, #1
  40158e:	6013      	str	r3, [r2, #0]
  401590:	4770      	bx	lr
  401592:	bf00      	nop
  401594:	400e0600 	.word	0x400e0600
  401598:	20400010 	.word	0x20400010
  40159c:	400e1810 	.word	0x400e1810
  4015a0:	00b71b00 	.word	0x00b71b00
  4015a4:	003d0900 	.word	0x003d0900
  4015a8:	007a1200 	.word	0x007a1200
  4015ac:	aaaaaaab 	.word	0xaaaaaaab

004015b0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4015b0:	4b16      	ldr	r3, [pc, #88]	; (40160c <system_init_flash+0x5c>)
  4015b2:	4298      	cmp	r0, r3
  4015b4:	d913      	bls.n	4015de <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4015b6:	4b16      	ldr	r3, [pc, #88]	; (401610 <system_init_flash+0x60>)
  4015b8:	4298      	cmp	r0, r3
  4015ba:	d915      	bls.n	4015e8 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4015bc:	4b15      	ldr	r3, [pc, #84]	; (401614 <system_init_flash+0x64>)
  4015be:	4298      	cmp	r0, r3
  4015c0:	d916      	bls.n	4015f0 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4015c2:	4b15      	ldr	r3, [pc, #84]	; (401618 <system_init_flash+0x68>)
  4015c4:	4298      	cmp	r0, r3
  4015c6:	d917      	bls.n	4015f8 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4015c8:	4b14      	ldr	r3, [pc, #80]	; (40161c <system_init_flash+0x6c>)
  4015ca:	4298      	cmp	r0, r3
  4015cc:	d918      	bls.n	401600 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4015ce:	4b14      	ldr	r3, [pc, #80]	; (401620 <system_init_flash+0x70>)
  4015d0:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4015d2:	bf94      	ite	ls
  4015d4:	4a13      	ldrls	r2, [pc, #76]	; (401624 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4015d6:	4a14      	ldrhi	r2, [pc, #80]	; (401628 <system_init_flash+0x78>)
  4015d8:	4b14      	ldr	r3, [pc, #80]	; (40162c <system_init_flash+0x7c>)
  4015da:	601a      	str	r2, [r3, #0]
  4015dc:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4015de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4015e2:	4b12      	ldr	r3, [pc, #72]	; (40162c <system_init_flash+0x7c>)
  4015e4:	601a      	str	r2, [r3, #0]
  4015e6:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4015e8:	4a11      	ldr	r2, [pc, #68]	; (401630 <system_init_flash+0x80>)
  4015ea:	4b10      	ldr	r3, [pc, #64]	; (40162c <system_init_flash+0x7c>)
  4015ec:	601a      	str	r2, [r3, #0]
  4015ee:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4015f0:	4a10      	ldr	r2, [pc, #64]	; (401634 <system_init_flash+0x84>)
  4015f2:	4b0e      	ldr	r3, [pc, #56]	; (40162c <system_init_flash+0x7c>)
  4015f4:	601a      	str	r2, [r3, #0]
  4015f6:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4015f8:	4a0f      	ldr	r2, [pc, #60]	; (401638 <system_init_flash+0x88>)
  4015fa:	4b0c      	ldr	r3, [pc, #48]	; (40162c <system_init_flash+0x7c>)
  4015fc:	601a      	str	r2, [r3, #0]
  4015fe:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401600:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401604:	4b09      	ldr	r3, [pc, #36]	; (40162c <system_init_flash+0x7c>)
  401606:	601a      	str	r2, [r3, #0]
  401608:	4770      	bx	lr
  40160a:	bf00      	nop
  40160c:	015ef3bf 	.word	0x015ef3bf
  401610:	02bde77f 	.word	0x02bde77f
  401614:	041cdb3f 	.word	0x041cdb3f
  401618:	057bceff 	.word	0x057bceff
  40161c:	06dac2bf 	.word	0x06dac2bf
  401620:	0839b67f 	.word	0x0839b67f
  401624:	04000500 	.word	0x04000500
  401628:	04000600 	.word	0x04000600
  40162c:	400e0c00 	.word	0x400e0c00
  401630:	04000100 	.word	0x04000100
  401634:	04000200 	.word	0x04000200
  401638:	04000300 	.word	0x04000300

0040163c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  40163c:	4b0a      	ldr	r3, [pc, #40]	; (401668 <_sbrk+0x2c>)
  40163e:	681b      	ldr	r3, [r3, #0]
  401640:	b153      	cbz	r3, 401658 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401642:	4b09      	ldr	r3, [pc, #36]	; (401668 <_sbrk+0x2c>)
  401644:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401646:	181a      	adds	r2, r3, r0
  401648:	4908      	ldr	r1, [pc, #32]	; (40166c <_sbrk+0x30>)
  40164a:	4291      	cmp	r1, r2
  40164c:	db08      	blt.n	401660 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40164e:	4610      	mov	r0, r2
  401650:	4a05      	ldr	r2, [pc, #20]	; (401668 <_sbrk+0x2c>)
  401652:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401654:	4618      	mov	r0, r3
  401656:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401658:	4a05      	ldr	r2, [pc, #20]	; (401670 <_sbrk+0x34>)
  40165a:	4b03      	ldr	r3, [pc, #12]	; (401668 <_sbrk+0x2c>)
  40165c:	601a      	str	r2, [r3, #0]
  40165e:	e7f0      	b.n	401642 <_sbrk+0x6>
		return (caddr_t) -1;	
  401660:	f04f 30ff 	mov.w	r0, #4294967295
}
  401664:	4770      	bx	lr
  401666:	bf00      	nop
  401668:	2040145c 	.word	0x2040145c
  40166c:	2045fffc 	.word	0x2045fffc
  401670:	204036d0 	.word	0x204036d0

00401674 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401674:	f04f 30ff 	mov.w	r0, #4294967295
  401678:	4770      	bx	lr

0040167a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40167a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40167e:	604b      	str	r3, [r1, #4]

	return 0;
}
  401680:	2000      	movs	r0, #0
  401682:	4770      	bx	lr

00401684 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401684:	2001      	movs	r0, #1
  401686:	4770      	bx	lr

00401688 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401688:	2000      	movs	r0, #0
  40168a:	4770      	bx	lr

0040168c <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
  40168c:	be00      	bkpt	0x0000
  40168e:	e7fe      	b.n	40168e <_exit+0x2>

00401690 <_kill>:
	for (;;);
}

extern void _kill(int pid, int sig)
{
  401690:	4770      	bx	lr

00401692 <_getpid>:
}

extern int _getpid(void)
{
	return -1;
}
  401692:	f04f 30ff 	mov.w	r0, #4294967295
  401696:	4770      	bx	lr

00401698 <main>:
volatile uint64_t    g_tickTime_ms      = 0UL;
volatile uint32_t    g_tx_tick_count_ms = 0U;


 int main(void)
 {
  401698:	b508      	push	{r3, lr}
 	uint8_t key;

 	sysclk_init();
  40169a:	4b0b      	ldr	r3, [pc, #44]	; (4016c8 <main+0x30>)
  40169c:	4798      	blx	r3
 	board_init();
  40169e:	4b0b      	ldr	r3, [pc, #44]	; (4016cc <main+0x34>)
  4016a0:	4798      	blx	r3

	// sample_init();
	
	g_tickCount = 0;
  4016a2:	2300      	movs	r3, #0
  4016a4:	4a0a      	ldr	r2, [pc, #40]	; (4016d0 <main+0x38>)
  4016a6:	6013      	str	r3, [r2, #0]
	g_tx_tick_count_ms = 0;
  4016a8:	4a0a      	ldr	r2, [pc, #40]	; (4016d4 <main+0x3c>)
  4016aa:	6013      	str	r3, [r2, #0]

 	can_init();    // CAN1_Initialize();
  4016ac:	4b0a      	ldr	r3, [pc, #40]	; (4016d8 <main+0x40>)
  4016ae:	4798      	blx	r3
 	CANTxTaskInit();
  4016b0:	4b0a      	ldr	r3, [pc, #40]	; (4016dc <main+0x44>)
  4016b2:	4798      	blx	r3
  {
	// sample();
    // CANRxTask();
	// bb_set_SCM_Motor1Control(42);
	// bb_set_SCM_Motor3Control(90);
    CANTxTask(g_tx_tick_count_ms);
  4016b4:	4c07      	ldr	r4, [pc, #28]	; (4016d4 <main+0x3c>)
  4016b6:	4e0a      	ldr	r6, [pc, #40]	; (4016e0 <main+0x48>)
    g_tx_tick_count_ms++;
    CanMessageControl_Task();
  4016b8:	4d0a      	ldr	r5, [pc, #40]	; (4016e4 <main+0x4c>)
    CANTxTask(g_tx_tick_count_ms);
  4016ba:	6820      	ldr	r0, [r4, #0]
  4016bc:	47b0      	blx	r6
    g_tx_tick_count_ms++;
  4016be:	6823      	ldr	r3, [r4, #0]
  4016c0:	3301      	adds	r3, #1
  4016c2:	6023      	str	r3, [r4, #0]
    CanMessageControl_Task();
  4016c4:	47a8      	blx	r5
  4016c6:	e7f8      	b.n	4016ba <main+0x22>
  4016c8:	00400a49 	.word	0x00400a49
  4016cc:	00400b45 	.word	0x00400b45
  4016d0:	20401460 	.word	0x20401460
  4016d4:	20401464 	.word	0x20401464
  4016d8:	004008bd 	.word	0x004008bd
  4016dc:	00400501 	.word	0x00400501
  4016e0:	00400539 	.word	0x00400539
  4016e4:	004005a5 	.word	0x004005a5

004016e8 <__assert_func>:
  4016e8:	b500      	push	{lr}
  4016ea:	4c0a      	ldr	r4, [pc, #40]	; (401714 <__assert_func+0x2c>)
  4016ec:	6826      	ldr	r6, [r4, #0]
  4016ee:	4605      	mov	r5, r0
  4016f0:	b085      	sub	sp, #20
  4016f2:	461c      	mov	r4, r3
  4016f4:	68f0      	ldr	r0, [r6, #12]
  4016f6:	b152      	cbz	r2, 40170e <__assert_func+0x26>
  4016f8:	4b07      	ldr	r3, [pc, #28]	; (401718 <__assert_func+0x30>)
  4016fa:	9202      	str	r2, [sp, #8]
  4016fc:	e88d 000a 	stmia.w	sp, {r1, r3}
  401700:	4622      	mov	r2, r4
  401702:	462b      	mov	r3, r5
  401704:	4905      	ldr	r1, [pc, #20]	; (40171c <__assert_func+0x34>)
  401706:	f000 f80d 	bl	401724 <fiprintf>
  40170a:	f001 f94b 	bl	4029a4 <abort>
  40170e:	4b04      	ldr	r3, [pc, #16]	; (401720 <__assert_func+0x38>)
  401710:	461a      	mov	r2, r3
  401712:	e7f2      	b.n	4016fa <__assert_func+0x12>
  401714:	20400014 	.word	0x20400014
  401718:	00404c34 	.word	0x00404c34
  40171c:	00404c44 	.word	0x00404c44
  401720:	00404c30 	.word	0x00404c30

00401724 <fiprintf>:
  401724:	b40e      	push	{r1, r2, r3}
  401726:	b510      	push	{r4, lr}
  401728:	b083      	sub	sp, #12
  40172a:	ab05      	add	r3, sp, #20
  40172c:	4c06      	ldr	r4, [pc, #24]	; (401748 <fiprintf+0x24>)
  40172e:	f853 2b04 	ldr.w	r2, [r3], #4
  401732:	9301      	str	r3, [sp, #4]
  401734:	4601      	mov	r1, r0
  401736:	6820      	ldr	r0, [r4, #0]
  401738:	f000 fa3c 	bl	401bb4 <_vfiprintf_r>
  40173c:	b003      	add	sp, #12
  40173e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401742:	b003      	add	sp, #12
  401744:	4770      	bx	lr
  401746:	bf00      	nop
  401748:	20400014 	.word	0x20400014

0040174c <__libc_init_array>:
  40174c:	b570      	push	{r4, r5, r6, lr}
  40174e:	4e0f      	ldr	r6, [pc, #60]	; (40178c <__libc_init_array+0x40>)
  401750:	4d0f      	ldr	r5, [pc, #60]	; (401790 <__libc_init_array+0x44>)
  401752:	1b76      	subs	r6, r6, r5
  401754:	10b6      	asrs	r6, r6, #2
  401756:	bf18      	it	ne
  401758:	2400      	movne	r4, #0
  40175a:	d005      	beq.n	401768 <__libc_init_array+0x1c>
  40175c:	3401      	adds	r4, #1
  40175e:	f855 3b04 	ldr.w	r3, [r5], #4
  401762:	4798      	blx	r3
  401764:	42a6      	cmp	r6, r4
  401766:	d1f9      	bne.n	40175c <__libc_init_array+0x10>
  401768:	4e0a      	ldr	r6, [pc, #40]	; (401794 <__libc_init_array+0x48>)
  40176a:	4d0b      	ldr	r5, [pc, #44]	; (401798 <__libc_init_array+0x4c>)
  40176c:	1b76      	subs	r6, r6, r5
  40176e:	f003 fb35 	bl	404ddc <_init>
  401772:	10b6      	asrs	r6, r6, #2
  401774:	bf18      	it	ne
  401776:	2400      	movne	r4, #0
  401778:	d006      	beq.n	401788 <__libc_init_array+0x3c>
  40177a:	3401      	adds	r4, #1
  40177c:	f855 3b04 	ldr.w	r3, [r5], #4
  401780:	4798      	blx	r3
  401782:	42a6      	cmp	r6, r4
  401784:	d1f9      	bne.n	40177a <__libc_init_array+0x2e>
  401786:	bd70      	pop	{r4, r5, r6, pc}
  401788:	bd70      	pop	{r4, r5, r6, pc}
  40178a:	bf00      	nop
  40178c:	00404de8 	.word	0x00404de8
  401790:	00404de8 	.word	0x00404de8
  401794:	00404df0 	.word	0x00404df0
  401798:	00404de8 	.word	0x00404de8

0040179c <iprintf>:
  40179c:	b40f      	push	{r0, r1, r2, r3}
  40179e:	b500      	push	{lr}
  4017a0:	4907      	ldr	r1, [pc, #28]	; (4017c0 <iprintf+0x24>)
  4017a2:	b083      	sub	sp, #12
  4017a4:	ab04      	add	r3, sp, #16
  4017a6:	6808      	ldr	r0, [r1, #0]
  4017a8:	f853 2b04 	ldr.w	r2, [r3], #4
  4017ac:	6881      	ldr	r1, [r0, #8]
  4017ae:	9301      	str	r3, [sp, #4]
  4017b0:	f000 fa00 	bl	401bb4 <_vfiprintf_r>
  4017b4:	b003      	add	sp, #12
  4017b6:	f85d eb04 	ldr.w	lr, [sp], #4
  4017ba:	b004      	add	sp, #16
  4017bc:	4770      	bx	lr
  4017be:	bf00      	nop
  4017c0:	20400014 	.word	0x20400014

004017c4 <memcpy>:
  4017c4:	4684      	mov	ip, r0
  4017c6:	ea41 0300 	orr.w	r3, r1, r0
  4017ca:	f013 0303 	ands.w	r3, r3, #3
  4017ce:	d16d      	bne.n	4018ac <memcpy+0xe8>
  4017d0:	3a40      	subs	r2, #64	; 0x40
  4017d2:	d341      	bcc.n	401858 <memcpy+0x94>
  4017d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4017d8:	f840 3b04 	str.w	r3, [r0], #4
  4017dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4017e0:	f840 3b04 	str.w	r3, [r0], #4
  4017e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4017e8:	f840 3b04 	str.w	r3, [r0], #4
  4017ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4017f0:	f840 3b04 	str.w	r3, [r0], #4
  4017f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4017f8:	f840 3b04 	str.w	r3, [r0], #4
  4017fc:	f851 3b04 	ldr.w	r3, [r1], #4
  401800:	f840 3b04 	str.w	r3, [r0], #4
  401804:	f851 3b04 	ldr.w	r3, [r1], #4
  401808:	f840 3b04 	str.w	r3, [r0], #4
  40180c:	f851 3b04 	ldr.w	r3, [r1], #4
  401810:	f840 3b04 	str.w	r3, [r0], #4
  401814:	f851 3b04 	ldr.w	r3, [r1], #4
  401818:	f840 3b04 	str.w	r3, [r0], #4
  40181c:	f851 3b04 	ldr.w	r3, [r1], #4
  401820:	f840 3b04 	str.w	r3, [r0], #4
  401824:	f851 3b04 	ldr.w	r3, [r1], #4
  401828:	f840 3b04 	str.w	r3, [r0], #4
  40182c:	f851 3b04 	ldr.w	r3, [r1], #4
  401830:	f840 3b04 	str.w	r3, [r0], #4
  401834:	f851 3b04 	ldr.w	r3, [r1], #4
  401838:	f840 3b04 	str.w	r3, [r0], #4
  40183c:	f851 3b04 	ldr.w	r3, [r1], #4
  401840:	f840 3b04 	str.w	r3, [r0], #4
  401844:	f851 3b04 	ldr.w	r3, [r1], #4
  401848:	f840 3b04 	str.w	r3, [r0], #4
  40184c:	f851 3b04 	ldr.w	r3, [r1], #4
  401850:	f840 3b04 	str.w	r3, [r0], #4
  401854:	3a40      	subs	r2, #64	; 0x40
  401856:	d2bd      	bcs.n	4017d4 <memcpy+0x10>
  401858:	3230      	adds	r2, #48	; 0x30
  40185a:	d311      	bcc.n	401880 <memcpy+0xbc>
  40185c:	f851 3b04 	ldr.w	r3, [r1], #4
  401860:	f840 3b04 	str.w	r3, [r0], #4
  401864:	f851 3b04 	ldr.w	r3, [r1], #4
  401868:	f840 3b04 	str.w	r3, [r0], #4
  40186c:	f851 3b04 	ldr.w	r3, [r1], #4
  401870:	f840 3b04 	str.w	r3, [r0], #4
  401874:	f851 3b04 	ldr.w	r3, [r1], #4
  401878:	f840 3b04 	str.w	r3, [r0], #4
  40187c:	3a10      	subs	r2, #16
  40187e:	d2ed      	bcs.n	40185c <memcpy+0x98>
  401880:	320c      	adds	r2, #12
  401882:	d305      	bcc.n	401890 <memcpy+0xcc>
  401884:	f851 3b04 	ldr.w	r3, [r1], #4
  401888:	f840 3b04 	str.w	r3, [r0], #4
  40188c:	3a04      	subs	r2, #4
  40188e:	d2f9      	bcs.n	401884 <memcpy+0xc0>
  401890:	3204      	adds	r2, #4
  401892:	d008      	beq.n	4018a6 <memcpy+0xe2>
  401894:	07d2      	lsls	r2, r2, #31
  401896:	bf1c      	itt	ne
  401898:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40189c:	f800 3b01 	strbne.w	r3, [r0], #1
  4018a0:	d301      	bcc.n	4018a6 <memcpy+0xe2>
  4018a2:	880b      	ldrh	r3, [r1, #0]
  4018a4:	8003      	strh	r3, [r0, #0]
  4018a6:	4660      	mov	r0, ip
  4018a8:	4770      	bx	lr
  4018aa:	bf00      	nop
  4018ac:	2a08      	cmp	r2, #8
  4018ae:	d313      	bcc.n	4018d8 <memcpy+0x114>
  4018b0:	078b      	lsls	r3, r1, #30
  4018b2:	d08d      	beq.n	4017d0 <memcpy+0xc>
  4018b4:	f010 0303 	ands.w	r3, r0, #3
  4018b8:	d08a      	beq.n	4017d0 <memcpy+0xc>
  4018ba:	f1c3 0304 	rsb	r3, r3, #4
  4018be:	1ad2      	subs	r2, r2, r3
  4018c0:	07db      	lsls	r3, r3, #31
  4018c2:	bf1c      	itt	ne
  4018c4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4018c8:	f800 3b01 	strbne.w	r3, [r0], #1
  4018cc:	d380      	bcc.n	4017d0 <memcpy+0xc>
  4018ce:	f831 3b02 	ldrh.w	r3, [r1], #2
  4018d2:	f820 3b02 	strh.w	r3, [r0], #2
  4018d6:	e77b      	b.n	4017d0 <memcpy+0xc>
  4018d8:	3a04      	subs	r2, #4
  4018da:	d3d9      	bcc.n	401890 <memcpy+0xcc>
  4018dc:	3a01      	subs	r2, #1
  4018de:	f811 3b01 	ldrb.w	r3, [r1], #1
  4018e2:	f800 3b01 	strb.w	r3, [r0], #1
  4018e6:	d2f9      	bcs.n	4018dc <memcpy+0x118>
  4018e8:	780b      	ldrb	r3, [r1, #0]
  4018ea:	7003      	strb	r3, [r0, #0]
  4018ec:	784b      	ldrb	r3, [r1, #1]
  4018ee:	7043      	strb	r3, [r0, #1]
  4018f0:	788b      	ldrb	r3, [r1, #2]
  4018f2:	7083      	strb	r3, [r0, #2]
  4018f4:	4660      	mov	r0, ip
  4018f6:	4770      	bx	lr

004018f8 <memset>:
  4018f8:	b470      	push	{r4, r5, r6}
  4018fa:	0786      	lsls	r6, r0, #30
  4018fc:	d046      	beq.n	40198c <memset+0x94>
  4018fe:	1e54      	subs	r4, r2, #1
  401900:	2a00      	cmp	r2, #0
  401902:	d041      	beq.n	401988 <memset+0x90>
  401904:	b2ca      	uxtb	r2, r1
  401906:	4603      	mov	r3, r0
  401908:	e002      	b.n	401910 <memset+0x18>
  40190a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40190e:	d33b      	bcc.n	401988 <memset+0x90>
  401910:	f803 2b01 	strb.w	r2, [r3], #1
  401914:	079d      	lsls	r5, r3, #30
  401916:	d1f8      	bne.n	40190a <memset+0x12>
  401918:	2c03      	cmp	r4, #3
  40191a:	d92e      	bls.n	40197a <memset+0x82>
  40191c:	b2cd      	uxtb	r5, r1
  40191e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401922:	2c0f      	cmp	r4, #15
  401924:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401928:	d919      	bls.n	40195e <memset+0x66>
  40192a:	f103 0210 	add.w	r2, r3, #16
  40192e:	4626      	mov	r6, r4
  401930:	3e10      	subs	r6, #16
  401932:	2e0f      	cmp	r6, #15
  401934:	f842 5c10 	str.w	r5, [r2, #-16]
  401938:	f842 5c0c 	str.w	r5, [r2, #-12]
  40193c:	f842 5c08 	str.w	r5, [r2, #-8]
  401940:	f842 5c04 	str.w	r5, [r2, #-4]
  401944:	f102 0210 	add.w	r2, r2, #16
  401948:	d8f2      	bhi.n	401930 <memset+0x38>
  40194a:	f1a4 0210 	sub.w	r2, r4, #16
  40194e:	f022 020f 	bic.w	r2, r2, #15
  401952:	f004 040f 	and.w	r4, r4, #15
  401956:	3210      	adds	r2, #16
  401958:	2c03      	cmp	r4, #3
  40195a:	4413      	add	r3, r2
  40195c:	d90d      	bls.n	40197a <memset+0x82>
  40195e:	461e      	mov	r6, r3
  401960:	4622      	mov	r2, r4
  401962:	3a04      	subs	r2, #4
  401964:	2a03      	cmp	r2, #3
  401966:	f846 5b04 	str.w	r5, [r6], #4
  40196a:	d8fa      	bhi.n	401962 <memset+0x6a>
  40196c:	1f22      	subs	r2, r4, #4
  40196e:	f022 0203 	bic.w	r2, r2, #3
  401972:	3204      	adds	r2, #4
  401974:	4413      	add	r3, r2
  401976:	f004 0403 	and.w	r4, r4, #3
  40197a:	b12c      	cbz	r4, 401988 <memset+0x90>
  40197c:	b2c9      	uxtb	r1, r1
  40197e:	441c      	add	r4, r3
  401980:	f803 1b01 	strb.w	r1, [r3], #1
  401984:	429c      	cmp	r4, r3
  401986:	d1fb      	bne.n	401980 <memset+0x88>
  401988:	bc70      	pop	{r4, r5, r6}
  40198a:	4770      	bx	lr
  40198c:	4614      	mov	r4, r2
  40198e:	4603      	mov	r3, r0
  401990:	e7c2      	b.n	401918 <memset+0x20>
  401992:	bf00      	nop

00401994 <setbuf>:
  401994:	2900      	cmp	r1, #0
  401996:	bf0c      	ite	eq
  401998:	2202      	moveq	r2, #2
  40199a:	2200      	movne	r2, #0
  40199c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4019a0:	f000 b800 	b.w	4019a4 <setvbuf>

004019a4 <setvbuf>:
  4019a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4019a8:	4c61      	ldr	r4, [pc, #388]	; (401b30 <setvbuf+0x18c>)
  4019aa:	6825      	ldr	r5, [r4, #0]
  4019ac:	b083      	sub	sp, #12
  4019ae:	4604      	mov	r4, r0
  4019b0:	460f      	mov	r7, r1
  4019b2:	4690      	mov	r8, r2
  4019b4:	461e      	mov	r6, r3
  4019b6:	b115      	cbz	r5, 4019be <setvbuf+0x1a>
  4019b8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4019ba:	2b00      	cmp	r3, #0
  4019bc:	d064      	beq.n	401a88 <setvbuf+0xe4>
  4019be:	f1b8 0f02 	cmp.w	r8, #2
  4019c2:	d006      	beq.n	4019d2 <setvbuf+0x2e>
  4019c4:	f1b8 0f01 	cmp.w	r8, #1
  4019c8:	f200 809f 	bhi.w	401b0a <setvbuf+0x166>
  4019cc:	2e00      	cmp	r6, #0
  4019ce:	f2c0 809c 	blt.w	401b0a <setvbuf+0x166>
  4019d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4019d4:	07d8      	lsls	r0, r3, #31
  4019d6:	d534      	bpl.n	401a42 <setvbuf+0x9e>
  4019d8:	4621      	mov	r1, r4
  4019da:	4628      	mov	r0, r5
  4019dc:	f001 f890 	bl	402b00 <_fflush_r>
  4019e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4019e2:	b141      	cbz	r1, 4019f6 <setvbuf+0x52>
  4019e4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4019e8:	4299      	cmp	r1, r3
  4019ea:	d002      	beq.n	4019f2 <setvbuf+0x4e>
  4019ec:	4628      	mov	r0, r5
  4019ee:	f001 fa05 	bl	402dfc <_free_r>
  4019f2:	2300      	movs	r3, #0
  4019f4:	6323      	str	r3, [r4, #48]	; 0x30
  4019f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4019fa:	2200      	movs	r2, #0
  4019fc:	61a2      	str	r2, [r4, #24]
  4019fe:	6062      	str	r2, [r4, #4]
  401a00:	061a      	lsls	r2, r3, #24
  401a02:	d43a      	bmi.n	401a7a <setvbuf+0xd6>
  401a04:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401a08:	f023 0303 	bic.w	r3, r3, #3
  401a0c:	f1b8 0f02 	cmp.w	r8, #2
  401a10:	81a3      	strh	r3, [r4, #12]
  401a12:	d01d      	beq.n	401a50 <setvbuf+0xac>
  401a14:	ab01      	add	r3, sp, #4
  401a16:	466a      	mov	r2, sp
  401a18:	4621      	mov	r1, r4
  401a1a:	4628      	mov	r0, r5
  401a1c:	f001 fc8c 	bl	403338 <__swhatbuf_r>
  401a20:	89a3      	ldrh	r3, [r4, #12]
  401a22:	4318      	orrs	r0, r3
  401a24:	81a0      	strh	r0, [r4, #12]
  401a26:	2e00      	cmp	r6, #0
  401a28:	d132      	bne.n	401a90 <setvbuf+0xec>
  401a2a:	9e00      	ldr	r6, [sp, #0]
  401a2c:	4630      	mov	r0, r6
  401a2e:	f001 fcfb 	bl	403428 <malloc>
  401a32:	4607      	mov	r7, r0
  401a34:	2800      	cmp	r0, #0
  401a36:	d06b      	beq.n	401b10 <setvbuf+0x16c>
  401a38:	89a3      	ldrh	r3, [r4, #12]
  401a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401a3e:	81a3      	strh	r3, [r4, #12]
  401a40:	e028      	b.n	401a94 <setvbuf+0xf0>
  401a42:	89a3      	ldrh	r3, [r4, #12]
  401a44:	0599      	lsls	r1, r3, #22
  401a46:	d4c7      	bmi.n	4019d8 <setvbuf+0x34>
  401a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401a4a:	f001 fc71 	bl	403330 <__retarget_lock_acquire_recursive>
  401a4e:	e7c3      	b.n	4019d8 <setvbuf+0x34>
  401a50:	2500      	movs	r5, #0
  401a52:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401a54:	2600      	movs	r6, #0
  401a56:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401a5a:	f043 0302 	orr.w	r3, r3, #2
  401a5e:	2001      	movs	r0, #1
  401a60:	60a6      	str	r6, [r4, #8]
  401a62:	07ce      	lsls	r6, r1, #31
  401a64:	81a3      	strh	r3, [r4, #12]
  401a66:	6022      	str	r2, [r4, #0]
  401a68:	6122      	str	r2, [r4, #16]
  401a6a:	6160      	str	r0, [r4, #20]
  401a6c:	d401      	bmi.n	401a72 <setvbuf+0xce>
  401a6e:	0598      	lsls	r0, r3, #22
  401a70:	d53e      	bpl.n	401af0 <setvbuf+0x14c>
  401a72:	4628      	mov	r0, r5
  401a74:	b003      	add	sp, #12
  401a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401a7a:	6921      	ldr	r1, [r4, #16]
  401a7c:	4628      	mov	r0, r5
  401a7e:	f001 f9bd 	bl	402dfc <_free_r>
  401a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401a86:	e7bd      	b.n	401a04 <setvbuf+0x60>
  401a88:	4628      	mov	r0, r5
  401a8a:	f001 f891 	bl	402bb0 <__sinit>
  401a8e:	e796      	b.n	4019be <setvbuf+0x1a>
  401a90:	2f00      	cmp	r7, #0
  401a92:	d0cb      	beq.n	401a2c <setvbuf+0x88>
  401a94:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401a96:	2b00      	cmp	r3, #0
  401a98:	d033      	beq.n	401b02 <setvbuf+0x15e>
  401a9a:	9b00      	ldr	r3, [sp, #0]
  401a9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401aa0:	6027      	str	r7, [r4, #0]
  401aa2:	429e      	cmp	r6, r3
  401aa4:	bf1c      	itt	ne
  401aa6:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  401aaa:	81a2      	strhne	r2, [r4, #12]
  401aac:	f1b8 0f01 	cmp.w	r8, #1
  401ab0:	bf04      	itt	eq
  401ab2:	f042 0201 	orreq.w	r2, r2, #1
  401ab6:	81a2      	strheq	r2, [r4, #12]
  401ab8:	b292      	uxth	r2, r2
  401aba:	f012 0308 	ands.w	r3, r2, #8
  401abe:	6127      	str	r7, [r4, #16]
  401ac0:	6166      	str	r6, [r4, #20]
  401ac2:	d00e      	beq.n	401ae2 <setvbuf+0x13e>
  401ac4:	07d1      	lsls	r1, r2, #31
  401ac6:	d51a      	bpl.n	401afe <setvbuf+0x15a>
  401ac8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401aca:	4276      	negs	r6, r6
  401acc:	2300      	movs	r3, #0
  401ace:	f015 0501 	ands.w	r5, r5, #1
  401ad2:	61a6      	str	r6, [r4, #24]
  401ad4:	60a3      	str	r3, [r4, #8]
  401ad6:	d009      	beq.n	401aec <setvbuf+0x148>
  401ad8:	2500      	movs	r5, #0
  401ada:	4628      	mov	r0, r5
  401adc:	b003      	add	sp, #12
  401ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401ae2:	60a3      	str	r3, [r4, #8]
  401ae4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401ae6:	f015 0501 	ands.w	r5, r5, #1
  401aea:	d1f5      	bne.n	401ad8 <setvbuf+0x134>
  401aec:	0593      	lsls	r3, r2, #22
  401aee:	d4c0      	bmi.n	401a72 <setvbuf+0xce>
  401af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401af2:	f001 fc1f 	bl	403334 <__retarget_lock_release_recursive>
  401af6:	4628      	mov	r0, r5
  401af8:	b003      	add	sp, #12
  401afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401afe:	60a6      	str	r6, [r4, #8]
  401b00:	e7f0      	b.n	401ae4 <setvbuf+0x140>
  401b02:	4628      	mov	r0, r5
  401b04:	f001 f854 	bl	402bb0 <__sinit>
  401b08:	e7c7      	b.n	401a9a <setvbuf+0xf6>
  401b0a:	f04f 35ff 	mov.w	r5, #4294967295
  401b0e:	e7b0      	b.n	401a72 <setvbuf+0xce>
  401b10:	f8dd 9000 	ldr.w	r9, [sp]
  401b14:	45b1      	cmp	r9, r6
  401b16:	d004      	beq.n	401b22 <setvbuf+0x17e>
  401b18:	4648      	mov	r0, r9
  401b1a:	f001 fc85 	bl	403428 <malloc>
  401b1e:	4607      	mov	r7, r0
  401b20:	b920      	cbnz	r0, 401b2c <setvbuf+0x188>
  401b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401b26:	f04f 35ff 	mov.w	r5, #4294967295
  401b2a:	e792      	b.n	401a52 <setvbuf+0xae>
  401b2c:	464e      	mov	r6, r9
  401b2e:	e783      	b.n	401a38 <setvbuf+0x94>
  401b30:	20400014 	.word	0x20400014

00401b34 <__sprint_r.part.0>:
  401b34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b38:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401b3a:	049c      	lsls	r4, r3, #18
  401b3c:	4693      	mov	fp, r2
  401b3e:	d52f      	bpl.n	401ba0 <__sprint_r.part.0+0x6c>
  401b40:	6893      	ldr	r3, [r2, #8]
  401b42:	6812      	ldr	r2, [r2, #0]
  401b44:	b353      	cbz	r3, 401b9c <__sprint_r.part.0+0x68>
  401b46:	460e      	mov	r6, r1
  401b48:	4607      	mov	r7, r0
  401b4a:	f102 0908 	add.w	r9, r2, #8
  401b4e:	e919 0420 	ldmdb	r9, {r5, sl}
  401b52:	ea5f 089a 	movs.w	r8, sl, lsr #2
  401b56:	d017      	beq.n	401b88 <__sprint_r.part.0+0x54>
  401b58:	3d04      	subs	r5, #4
  401b5a:	2400      	movs	r4, #0
  401b5c:	e001      	b.n	401b62 <__sprint_r.part.0+0x2e>
  401b5e:	45a0      	cmp	r8, r4
  401b60:	d010      	beq.n	401b84 <__sprint_r.part.0+0x50>
  401b62:	4632      	mov	r2, r6
  401b64:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401b68:	4638      	mov	r0, r7
  401b6a:	f001 f8c3 	bl	402cf4 <_fputwc_r>
  401b6e:	1c43      	adds	r3, r0, #1
  401b70:	f104 0401 	add.w	r4, r4, #1
  401b74:	d1f3      	bne.n	401b5e <__sprint_r.part.0+0x2a>
  401b76:	2300      	movs	r3, #0
  401b78:	f8cb 3008 	str.w	r3, [fp, #8]
  401b7c:	f8cb 3004 	str.w	r3, [fp, #4]
  401b80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b84:	f8db 3008 	ldr.w	r3, [fp, #8]
  401b88:	f02a 0a03 	bic.w	sl, sl, #3
  401b8c:	eba3 030a 	sub.w	r3, r3, sl
  401b90:	f8cb 3008 	str.w	r3, [fp, #8]
  401b94:	f109 0908 	add.w	r9, r9, #8
  401b98:	2b00      	cmp	r3, #0
  401b9a:	d1d8      	bne.n	401b4e <__sprint_r.part.0+0x1a>
  401b9c:	2000      	movs	r0, #0
  401b9e:	e7ea      	b.n	401b76 <__sprint_r.part.0+0x42>
  401ba0:	f001 fa12 	bl	402fc8 <__sfvwrite_r>
  401ba4:	2300      	movs	r3, #0
  401ba6:	f8cb 3008 	str.w	r3, [fp, #8]
  401baa:	f8cb 3004 	str.w	r3, [fp, #4]
  401bae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401bb2:	bf00      	nop

00401bb4 <_vfiprintf_r>:
  401bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401bb8:	b0ad      	sub	sp, #180	; 0xb4
  401bba:	461d      	mov	r5, r3
  401bbc:	468b      	mov	fp, r1
  401bbe:	4690      	mov	r8, r2
  401bc0:	9307      	str	r3, [sp, #28]
  401bc2:	9006      	str	r0, [sp, #24]
  401bc4:	b118      	cbz	r0, 401bce <_vfiprintf_r+0x1a>
  401bc6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401bc8:	2b00      	cmp	r3, #0
  401bca:	f000 80f3 	beq.w	401db4 <_vfiprintf_r+0x200>
  401bce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401bd2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401bd6:	07df      	lsls	r7, r3, #31
  401bd8:	b281      	uxth	r1, r0
  401bda:	d402      	bmi.n	401be2 <_vfiprintf_r+0x2e>
  401bdc:	058e      	lsls	r6, r1, #22
  401bde:	f140 80fc 	bpl.w	401dda <_vfiprintf_r+0x226>
  401be2:	048c      	lsls	r4, r1, #18
  401be4:	d40a      	bmi.n	401bfc <_vfiprintf_r+0x48>
  401be6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401bea:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  401bee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401bf2:	f8ab 100c 	strh.w	r1, [fp, #12]
  401bf6:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  401bfa:	b289      	uxth	r1, r1
  401bfc:	0708      	lsls	r0, r1, #28
  401bfe:	f140 80b3 	bpl.w	401d68 <_vfiprintf_r+0x1b4>
  401c02:	f8db 3010 	ldr.w	r3, [fp, #16]
  401c06:	2b00      	cmp	r3, #0
  401c08:	f000 80ae 	beq.w	401d68 <_vfiprintf_r+0x1b4>
  401c0c:	f001 031a 	and.w	r3, r1, #26
  401c10:	2b0a      	cmp	r3, #10
  401c12:	f000 80b5 	beq.w	401d80 <_vfiprintf_r+0x1cc>
  401c16:	2300      	movs	r3, #0
  401c18:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  401c1c:	930b      	str	r3, [sp, #44]	; 0x2c
  401c1e:	9311      	str	r3, [sp, #68]	; 0x44
  401c20:	9310      	str	r3, [sp, #64]	; 0x40
  401c22:	9303      	str	r3, [sp, #12]
  401c24:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401c28:	46ca      	mov	sl, r9
  401c2a:	f8cd b010 	str.w	fp, [sp, #16]
  401c2e:	f898 3000 	ldrb.w	r3, [r8]
  401c32:	4644      	mov	r4, r8
  401c34:	b1fb      	cbz	r3, 401c76 <_vfiprintf_r+0xc2>
  401c36:	2b25      	cmp	r3, #37	; 0x25
  401c38:	d102      	bne.n	401c40 <_vfiprintf_r+0x8c>
  401c3a:	e01c      	b.n	401c76 <_vfiprintf_r+0xc2>
  401c3c:	2b25      	cmp	r3, #37	; 0x25
  401c3e:	d003      	beq.n	401c48 <_vfiprintf_r+0x94>
  401c40:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  401c44:	2b00      	cmp	r3, #0
  401c46:	d1f9      	bne.n	401c3c <_vfiprintf_r+0x88>
  401c48:	eba4 0508 	sub.w	r5, r4, r8
  401c4c:	b19d      	cbz	r5, 401c76 <_vfiprintf_r+0xc2>
  401c4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401c50:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401c52:	f8ca 8000 	str.w	r8, [sl]
  401c56:	3301      	adds	r3, #1
  401c58:	442a      	add	r2, r5
  401c5a:	2b07      	cmp	r3, #7
  401c5c:	f8ca 5004 	str.w	r5, [sl, #4]
  401c60:	9211      	str	r2, [sp, #68]	; 0x44
  401c62:	9310      	str	r3, [sp, #64]	; 0x40
  401c64:	dd7a      	ble.n	401d5c <_vfiprintf_r+0x1a8>
  401c66:	2a00      	cmp	r2, #0
  401c68:	f040 84b0 	bne.w	4025cc <_vfiprintf_r+0xa18>
  401c6c:	9b03      	ldr	r3, [sp, #12]
  401c6e:	9210      	str	r2, [sp, #64]	; 0x40
  401c70:	442b      	add	r3, r5
  401c72:	46ca      	mov	sl, r9
  401c74:	9303      	str	r3, [sp, #12]
  401c76:	7823      	ldrb	r3, [r4, #0]
  401c78:	2b00      	cmp	r3, #0
  401c7a:	f000 83e0 	beq.w	40243e <_vfiprintf_r+0x88a>
  401c7e:	2000      	movs	r0, #0
  401c80:	f04f 0300 	mov.w	r3, #0
  401c84:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  401c88:	f104 0801 	add.w	r8, r4, #1
  401c8c:	7862      	ldrb	r2, [r4, #1]
  401c8e:	4605      	mov	r5, r0
  401c90:	4606      	mov	r6, r0
  401c92:	4603      	mov	r3, r0
  401c94:	f04f 34ff 	mov.w	r4, #4294967295
  401c98:	f108 0801 	add.w	r8, r8, #1
  401c9c:	f1a2 0120 	sub.w	r1, r2, #32
  401ca0:	2958      	cmp	r1, #88	; 0x58
  401ca2:	f200 82de 	bhi.w	402262 <_vfiprintf_r+0x6ae>
  401ca6:	e8df f011 	tbh	[pc, r1, lsl #1]
  401caa:	0221      	.short	0x0221
  401cac:	02dc02dc 	.word	0x02dc02dc
  401cb0:	02dc0229 	.word	0x02dc0229
  401cb4:	02dc02dc 	.word	0x02dc02dc
  401cb8:	02dc02dc 	.word	0x02dc02dc
  401cbc:	028902dc 	.word	0x028902dc
  401cc0:	02dc0295 	.word	0x02dc0295
  401cc4:	02bd00a2 	.word	0x02bd00a2
  401cc8:	019f02dc 	.word	0x019f02dc
  401ccc:	01a401a4 	.word	0x01a401a4
  401cd0:	01a401a4 	.word	0x01a401a4
  401cd4:	01a401a4 	.word	0x01a401a4
  401cd8:	01a401a4 	.word	0x01a401a4
  401cdc:	02dc01a4 	.word	0x02dc01a4
  401ce0:	02dc02dc 	.word	0x02dc02dc
  401ce4:	02dc02dc 	.word	0x02dc02dc
  401ce8:	02dc02dc 	.word	0x02dc02dc
  401cec:	02dc02dc 	.word	0x02dc02dc
  401cf0:	01b202dc 	.word	0x01b202dc
  401cf4:	02dc02dc 	.word	0x02dc02dc
  401cf8:	02dc02dc 	.word	0x02dc02dc
  401cfc:	02dc02dc 	.word	0x02dc02dc
  401d00:	02dc02dc 	.word	0x02dc02dc
  401d04:	02dc02dc 	.word	0x02dc02dc
  401d08:	02dc0197 	.word	0x02dc0197
  401d0c:	02dc02dc 	.word	0x02dc02dc
  401d10:	02dc02dc 	.word	0x02dc02dc
  401d14:	02dc019b 	.word	0x02dc019b
  401d18:	025302dc 	.word	0x025302dc
  401d1c:	02dc02dc 	.word	0x02dc02dc
  401d20:	02dc02dc 	.word	0x02dc02dc
  401d24:	02dc02dc 	.word	0x02dc02dc
  401d28:	02dc02dc 	.word	0x02dc02dc
  401d2c:	02dc02dc 	.word	0x02dc02dc
  401d30:	021b025a 	.word	0x021b025a
  401d34:	02dc02dc 	.word	0x02dc02dc
  401d38:	026e02dc 	.word	0x026e02dc
  401d3c:	02dc021b 	.word	0x02dc021b
  401d40:	027302dc 	.word	0x027302dc
  401d44:	01f502dc 	.word	0x01f502dc
  401d48:	02090182 	.word	0x02090182
  401d4c:	02dc02d7 	.word	0x02dc02d7
  401d50:	02dc029a 	.word	0x02dc029a
  401d54:	02dc00a7 	.word	0x02dc00a7
  401d58:	022e02dc 	.word	0x022e02dc
  401d5c:	f10a 0a08 	add.w	sl, sl, #8
  401d60:	9b03      	ldr	r3, [sp, #12]
  401d62:	442b      	add	r3, r5
  401d64:	9303      	str	r3, [sp, #12]
  401d66:	e786      	b.n	401c76 <_vfiprintf_r+0xc2>
  401d68:	4659      	mov	r1, fp
  401d6a:	9806      	ldr	r0, [sp, #24]
  401d6c:	f000 fdac 	bl	4028c8 <__swsetup_r>
  401d70:	bb18      	cbnz	r0, 401dba <_vfiprintf_r+0x206>
  401d72:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  401d76:	f001 031a 	and.w	r3, r1, #26
  401d7a:	2b0a      	cmp	r3, #10
  401d7c:	f47f af4b 	bne.w	401c16 <_vfiprintf_r+0x62>
  401d80:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  401d84:	2b00      	cmp	r3, #0
  401d86:	f6ff af46 	blt.w	401c16 <_vfiprintf_r+0x62>
  401d8a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401d8e:	07db      	lsls	r3, r3, #31
  401d90:	d405      	bmi.n	401d9e <_vfiprintf_r+0x1ea>
  401d92:	058f      	lsls	r7, r1, #22
  401d94:	d403      	bmi.n	401d9e <_vfiprintf_r+0x1ea>
  401d96:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401d9a:	f001 facb 	bl	403334 <__retarget_lock_release_recursive>
  401d9e:	462b      	mov	r3, r5
  401da0:	4642      	mov	r2, r8
  401da2:	4659      	mov	r1, fp
  401da4:	9806      	ldr	r0, [sp, #24]
  401da6:	f000 fd4d 	bl	402844 <__sbprintf>
  401daa:	9003      	str	r0, [sp, #12]
  401dac:	9803      	ldr	r0, [sp, #12]
  401dae:	b02d      	add	sp, #180	; 0xb4
  401db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401db4:	f000 fefc 	bl	402bb0 <__sinit>
  401db8:	e709      	b.n	401bce <_vfiprintf_r+0x1a>
  401dba:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401dbe:	07d9      	lsls	r1, r3, #31
  401dc0:	d404      	bmi.n	401dcc <_vfiprintf_r+0x218>
  401dc2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401dc6:	059a      	lsls	r2, r3, #22
  401dc8:	f140 84aa 	bpl.w	402720 <_vfiprintf_r+0xb6c>
  401dcc:	f04f 33ff 	mov.w	r3, #4294967295
  401dd0:	9303      	str	r3, [sp, #12]
  401dd2:	9803      	ldr	r0, [sp, #12]
  401dd4:	b02d      	add	sp, #180	; 0xb4
  401dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401dda:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401dde:	f001 faa7 	bl	403330 <__retarget_lock_acquire_recursive>
  401de2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401de6:	b281      	uxth	r1, r0
  401de8:	e6fb      	b.n	401be2 <_vfiprintf_r+0x2e>
  401dea:	4276      	negs	r6, r6
  401dec:	9207      	str	r2, [sp, #28]
  401dee:	f043 0304 	orr.w	r3, r3, #4
  401df2:	f898 2000 	ldrb.w	r2, [r8]
  401df6:	e74f      	b.n	401c98 <_vfiprintf_r+0xe4>
  401df8:	9608      	str	r6, [sp, #32]
  401dfa:	069e      	lsls	r6, r3, #26
  401dfc:	f100 8450 	bmi.w	4026a0 <_vfiprintf_r+0xaec>
  401e00:	9907      	ldr	r1, [sp, #28]
  401e02:	06dd      	lsls	r5, r3, #27
  401e04:	460a      	mov	r2, r1
  401e06:	f100 83ef 	bmi.w	4025e8 <_vfiprintf_r+0xa34>
  401e0a:	0658      	lsls	r0, r3, #25
  401e0c:	f140 83ec 	bpl.w	4025e8 <_vfiprintf_r+0xa34>
  401e10:	880e      	ldrh	r6, [r1, #0]
  401e12:	3104      	adds	r1, #4
  401e14:	2700      	movs	r7, #0
  401e16:	2201      	movs	r2, #1
  401e18:	9107      	str	r1, [sp, #28]
  401e1a:	f04f 0100 	mov.w	r1, #0
  401e1e:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  401e22:	2500      	movs	r5, #0
  401e24:	1c61      	adds	r1, r4, #1
  401e26:	f000 8116 	beq.w	402056 <_vfiprintf_r+0x4a2>
  401e2a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  401e2e:	9102      	str	r1, [sp, #8]
  401e30:	ea56 0107 	orrs.w	r1, r6, r7
  401e34:	f040 8114 	bne.w	402060 <_vfiprintf_r+0x4ac>
  401e38:	2c00      	cmp	r4, #0
  401e3a:	f040 835c 	bne.w	4024f6 <_vfiprintf_r+0x942>
  401e3e:	2a00      	cmp	r2, #0
  401e40:	f040 83b7 	bne.w	4025b2 <_vfiprintf_r+0x9fe>
  401e44:	f013 0301 	ands.w	r3, r3, #1
  401e48:	9305      	str	r3, [sp, #20]
  401e4a:	f000 8457 	beq.w	4026fc <_vfiprintf_r+0xb48>
  401e4e:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  401e52:	2330      	movs	r3, #48	; 0x30
  401e54:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  401e58:	9b05      	ldr	r3, [sp, #20]
  401e5a:	42a3      	cmp	r3, r4
  401e5c:	bfb8      	it	lt
  401e5e:	4623      	movlt	r3, r4
  401e60:	9301      	str	r3, [sp, #4]
  401e62:	b10d      	cbz	r5, 401e68 <_vfiprintf_r+0x2b4>
  401e64:	3301      	adds	r3, #1
  401e66:	9301      	str	r3, [sp, #4]
  401e68:	9b02      	ldr	r3, [sp, #8]
  401e6a:	f013 0302 	ands.w	r3, r3, #2
  401e6e:	9309      	str	r3, [sp, #36]	; 0x24
  401e70:	d002      	beq.n	401e78 <_vfiprintf_r+0x2c4>
  401e72:	9b01      	ldr	r3, [sp, #4]
  401e74:	3302      	adds	r3, #2
  401e76:	9301      	str	r3, [sp, #4]
  401e78:	9b02      	ldr	r3, [sp, #8]
  401e7a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  401e7e:	930a      	str	r3, [sp, #40]	; 0x28
  401e80:	f040 8217 	bne.w	4022b2 <_vfiprintf_r+0x6fe>
  401e84:	9b08      	ldr	r3, [sp, #32]
  401e86:	9a01      	ldr	r2, [sp, #4]
  401e88:	1a9d      	subs	r5, r3, r2
  401e8a:	2d00      	cmp	r5, #0
  401e8c:	f340 8211 	ble.w	4022b2 <_vfiprintf_r+0x6fe>
  401e90:	2d10      	cmp	r5, #16
  401e92:	f340 8490 	ble.w	4027b6 <_vfiprintf_r+0xc02>
  401e96:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401e98:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401e9a:	4ec4      	ldr	r6, [pc, #784]	; (4021ac <_vfiprintf_r+0x5f8>)
  401e9c:	46d6      	mov	lr, sl
  401e9e:	2710      	movs	r7, #16
  401ea0:	46a2      	mov	sl, r4
  401ea2:	4619      	mov	r1, r3
  401ea4:	9c06      	ldr	r4, [sp, #24]
  401ea6:	e007      	b.n	401eb8 <_vfiprintf_r+0x304>
  401ea8:	f101 0c02 	add.w	ip, r1, #2
  401eac:	f10e 0e08 	add.w	lr, lr, #8
  401eb0:	4601      	mov	r1, r0
  401eb2:	3d10      	subs	r5, #16
  401eb4:	2d10      	cmp	r5, #16
  401eb6:	dd11      	ble.n	401edc <_vfiprintf_r+0x328>
  401eb8:	1c48      	adds	r0, r1, #1
  401eba:	3210      	adds	r2, #16
  401ebc:	2807      	cmp	r0, #7
  401ebe:	9211      	str	r2, [sp, #68]	; 0x44
  401ec0:	e88e 00c0 	stmia.w	lr, {r6, r7}
  401ec4:	9010      	str	r0, [sp, #64]	; 0x40
  401ec6:	ddef      	ble.n	401ea8 <_vfiprintf_r+0x2f4>
  401ec8:	2a00      	cmp	r2, #0
  401eca:	f040 81e4 	bne.w	402296 <_vfiprintf_r+0x6e2>
  401ece:	3d10      	subs	r5, #16
  401ed0:	2d10      	cmp	r5, #16
  401ed2:	4611      	mov	r1, r2
  401ed4:	f04f 0c01 	mov.w	ip, #1
  401ed8:	46ce      	mov	lr, r9
  401eda:	dced      	bgt.n	401eb8 <_vfiprintf_r+0x304>
  401edc:	4654      	mov	r4, sl
  401ede:	4661      	mov	r1, ip
  401ee0:	46f2      	mov	sl, lr
  401ee2:	442a      	add	r2, r5
  401ee4:	2907      	cmp	r1, #7
  401ee6:	9211      	str	r2, [sp, #68]	; 0x44
  401ee8:	f8ca 6000 	str.w	r6, [sl]
  401eec:	f8ca 5004 	str.w	r5, [sl, #4]
  401ef0:	9110      	str	r1, [sp, #64]	; 0x40
  401ef2:	f300 82ec 	bgt.w	4024ce <_vfiprintf_r+0x91a>
  401ef6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401efa:	f10a 0a08 	add.w	sl, sl, #8
  401efe:	1c48      	adds	r0, r1, #1
  401f00:	2d00      	cmp	r5, #0
  401f02:	f040 81de 	bne.w	4022c2 <_vfiprintf_r+0x70e>
  401f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401f08:	2b00      	cmp	r3, #0
  401f0a:	f000 81f8 	beq.w	4022fe <_vfiprintf_r+0x74a>
  401f0e:	3202      	adds	r2, #2
  401f10:	a90e      	add	r1, sp, #56	; 0x38
  401f12:	2302      	movs	r3, #2
  401f14:	2807      	cmp	r0, #7
  401f16:	9211      	str	r2, [sp, #68]	; 0x44
  401f18:	9010      	str	r0, [sp, #64]	; 0x40
  401f1a:	e88a 000a 	stmia.w	sl, {r1, r3}
  401f1e:	f340 81ea 	ble.w	4022f6 <_vfiprintf_r+0x742>
  401f22:	2a00      	cmp	r2, #0
  401f24:	f040 838c 	bne.w	402640 <_vfiprintf_r+0xa8c>
  401f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401f2a:	2b80      	cmp	r3, #128	; 0x80
  401f2c:	f04f 0001 	mov.w	r0, #1
  401f30:	4611      	mov	r1, r2
  401f32:	46ca      	mov	sl, r9
  401f34:	f040 81e7 	bne.w	402306 <_vfiprintf_r+0x752>
  401f38:	9b08      	ldr	r3, [sp, #32]
  401f3a:	9d01      	ldr	r5, [sp, #4]
  401f3c:	1b5e      	subs	r6, r3, r5
  401f3e:	2e00      	cmp	r6, #0
  401f40:	f340 81e1 	ble.w	402306 <_vfiprintf_r+0x752>
  401f44:	2e10      	cmp	r6, #16
  401f46:	4d9a      	ldr	r5, [pc, #616]	; (4021b0 <_vfiprintf_r+0x5fc>)
  401f48:	f340 8450 	ble.w	4027ec <_vfiprintf_r+0xc38>
  401f4c:	46d4      	mov	ip, sl
  401f4e:	2710      	movs	r7, #16
  401f50:	46a2      	mov	sl, r4
  401f52:	9c06      	ldr	r4, [sp, #24]
  401f54:	e007      	b.n	401f66 <_vfiprintf_r+0x3b2>
  401f56:	f101 0e02 	add.w	lr, r1, #2
  401f5a:	f10c 0c08 	add.w	ip, ip, #8
  401f5e:	4601      	mov	r1, r0
  401f60:	3e10      	subs	r6, #16
  401f62:	2e10      	cmp	r6, #16
  401f64:	dd11      	ble.n	401f8a <_vfiprintf_r+0x3d6>
  401f66:	1c48      	adds	r0, r1, #1
  401f68:	3210      	adds	r2, #16
  401f6a:	2807      	cmp	r0, #7
  401f6c:	9211      	str	r2, [sp, #68]	; 0x44
  401f6e:	e88c 00a0 	stmia.w	ip, {r5, r7}
  401f72:	9010      	str	r0, [sp, #64]	; 0x40
  401f74:	ddef      	ble.n	401f56 <_vfiprintf_r+0x3a2>
  401f76:	2a00      	cmp	r2, #0
  401f78:	f040 829d 	bne.w	4024b6 <_vfiprintf_r+0x902>
  401f7c:	3e10      	subs	r6, #16
  401f7e:	2e10      	cmp	r6, #16
  401f80:	f04f 0e01 	mov.w	lr, #1
  401f84:	4611      	mov	r1, r2
  401f86:	46cc      	mov	ip, r9
  401f88:	dced      	bgt.n	401f66 <_vfiprintf_r+0x3b2>
  401f8a:	4654      	mov	r4, sl
  401f8c:	46e2      	mov	sl, ip
  401f8e:	4432      	add	r2, r6
  401f90:	f1be 0f07 	cmp.w	lr, #7
  401f94:	9211      	str	r2, [sp, #68]	; 0x44
  401f96:	e88a 0060 	stmia.w	sl, {r5, r6}
  401f9a:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  401f9e:	f300 8369 	bgt.w	402674 <_vfiprintf_r+0xac0>
  401fa2:	f10a 0a08 	add.w	sl, sl, #8
  401fa6:	f10e 0001 	add.w	r0, lr, #1
  401faa:	4671      	mov	r1, lr
  401fac:	e1ab      	b.n	402306 <_vfiprintf_r+0x752>
  401fae:	9608      	str	r6, [sp, #32]
  401fb0:	f013 0220 	ands.w	r2, r3, #32
  401fb4:	f040 838c 	bne.w	4026d0 <_vfiprintf_r+0xb1c>
  401fb8:	f013 0110 	ands.w	r1, r3, #16
  401fbc:	f040 831a 	bne.w	4025f4 <_vfiprintf_r+0xa40>
  401fc0:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  401fc4:	f000 8316 	beq.w	4025f4 <_vfiprintf_r+0xa40>
  401fc8:	9807      	ldr	r0, [sp, #28]
  401fca:	460a      	mov	r2, r1
  401fcc:	4601      	mov	r1, r0
  401fce:	3104      	adds	r1, #4
  401fd0:	8806      	ldrh	r6, [r0, #0]
  401fd2:	9107      	str	r1, [sp, #28]
  401fd4:	2700      	movs	r7, #0
  401fd6:	e720      	b.n	401e1a <_vfiprintf_r+0x266>
  401fd8:	9608      	str	r6, [sp, #32]
  401fda:	f043 0310 	orr.w	r3, r3, #16
  401fde:	e7e7      	b.n	401fb0 <_vfiprintf_r+0x3fc>
  401fe0:	9608      	str	r6, [sp, #32]
  401fe2:	f043 0310 	orr.w	r3, r3, #16
  401fe6:	e708      	b.n	401dfa <_vfiprintf_r+0x246>
  401fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401fec:	f898 2000 	ldrb.w	r2, [r8]
  401ff0:	e652      	b.n	401c98 <_vfiprintf_r+0xe4>
  401ff2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401ff6:	2600      	movs	r6, #0
  401ff8:	f818 2b01 	ldrb.w	r2, [r8], #1
  401ffc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  402000:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  402004:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402008:	2909      	cmp	r1, #9
  40200a:	d9f5      	bls.n	401ff8 <_vfiprintf_r+0x444>
  40200c:	e646      	b.n	401c9c <_vfiprintf_r+0xe8>
  40200e:	9608      	str	r6, [sp, #32]
  402010:	2800      	cmp	r0, #0
  402012:	f040 8408 	bne.w	402826 <_vfiprintf_r+0xc72>
  402016:	f043 0310 	orr.w	r3, r3, #16
  40201a:	069e      	lsls	r6, r3, #26
  40201c:	f100 834c 	bmi.w	4026b8 <_vfiprintf_r+0xb04>
  402020:	06dd      	lsls	r5, r3, #27
  402022:	f100 82f3 	bmi.w	40260c <_vfiprintf_r+0xa58>
  402026:	0658      	lsls	r0, r3, #25
  402028:	f140 82f0 	bpl.w	40260c <_vfiprintf_r+0xa58>
  40202c:	9d07      	ldr	r5, [sp, #28]
  40202e:	f9b5 6000 	ldrsh.w	r6, [r5]
  402032:	462a      	mov	r2, r5
  402034:	17f7      	asrs	r7, r6, #31
  402036:	3204      	adds	r2, #4
  402038:	4630      	mov	r0, r6
  40203a:	4639      	mov	r1, r7
  40203c:	9207      	str	r2, [sp, #28]
  40203e:	2800      	cmp	r0, #0
  402040:	f171 0200 	sbcs.w	r2, r1, #0
  402044:	f2c0 835d 	blt.w	402702 <_vfiprintf_r+0xb4e>
  402048:	1c61      	adds	r1, r4, #1
  40204a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40204e:	f04f 0201 	mov.w	r2, #1
  402052:	f47f aeea 	bne.w	401e2a <_vfiprintf_r+0x276>
  402056:	ea56 0107 	orrs.w	r1, r6, r7
  40205a:	f000 824d 	beq.w	4024f8 <_vfiprintf_r+0x944>
  40205e:	9302      	str	r3, [sp, #8]
  402060:	2a01      	cmp	r2, #1
  402062:	f000 828c 	beq.w	40257e <_vfiprintf_r+0x9ca>
  402066:	2a02      	cmp	r2, #2
  402068:	f040 825c 	bne.w	402524 <_vfiprintf_r+0x970>
  40206c:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40206e:	46cb      	mov	fp, r9
  402070:	0933      	lsrs	r3, r6, #4
  402072:	f006 010f 	and.w	r1, r6, #15
  402076:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40207a:	093a      	lsrs	r2, r7, #4
  40207c:	461e      	mov	r6, r3
  40207e:	4617      	mov	r7, r2
  402080:	5c43      	ldrb	r3, [r0, r1]
  402082:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  402086:	ea56 0307 	orrs.w	r3, r6, r7
  40208a:	d1f1      	bne.n	402070 <_vfiprintf_r+0x4bc>
  40208c:	eba9 030b 	sub.w	r3, r9, fp
  402090:	9305      	str	r3, [sp, #20]
  402092:	e6e1      	b.n	401e58 <_vfiprintf_r+0x2a4>
  402094:	2800      	cmp	r0, #0
  402096:	f040 83c0 	bne.w	40281a <_vfiprintf_r+0xc66>
  40209a:	0699      	lsls	r1, r3, #26
  40209c:	f100 8367 	bmi.w	40276e <_vfiprintf_r+0xbba>
  4020a0:	06da      	lsls	r2, r3, #27
  4020a2:	f100 80f1 	bmi.w	402288 <_vfiprintf_r+0x6d4>
  4020a6:	065b      	lsls	r3, r3, #25
  4020a8:	f140 80ee 	bpl.w	402288 <_vfiprintf_r+0x6d4>
  4020ac:	9a07      	ldr	r2, [sp, #28]
  4020ae:	6813      	ldr	r3, [r2, #0]
  4020b0:	3204      	adds	r2, #4
  4020b2:	9207      	str	r2, [sp, #28]
  4020b4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4020b8:	801a      	strh	r2, [r3, #0]
  4020ba:	e5b8      	b.n	401c2e <_vfiprintf_r+0x7a>
  4020bc:	9807      	ldr	r0, [sp, #28]
  4020be:	4a3d      	ldr	r2, [pc, #244]	; (4021b4 <_vfiprintf_r+0x600>)
  4020c0:	9608      	str	r6, [sp, #32]
  4020c2:	920b      	str	r2, [sp, #44]	; 0x2c
  4020c4:	6806      	ldr	r6, [r0, #0]
  4020c6:	2278      	movs	r2, #120	; 0x78
  4020c8:	2130      	movs	r1, #48	; 0x30
  4020ca:	3004      	adds	r0, #4
  4020cc:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4020d0:	f043 0302 	orr.w	r3, r3, #2
  4020d4:	9007      	str	r0, [sp, #28]
  4020d6:	2700      	movs	r7, #0
  4020d8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4020dc:	2202      	movs	r2, #2
  4020de:	e69c      	b.n	401e1a <_vfiprintf_r+0x266>
  4020e0:	9608      	str	r6, [sp, #32]
  4020e2:	2800      	cmp	r0, #0
  4020e4:	d099      	beq.n	40201a <_vfiprintf_r+0x466>
  4020e6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4020ea:	e796      	b.n	40201a <_vfiprintf_r+0x466>
  4020ec:	f898 2000 	ldrb.w	r2, [r8]
  4020f0:	2d00      	cmp	r5, #0
  4020f2:	f47f add1 	bne.w	401c98 <_vfiprintf_r+0xe4>
  4020f6:	2001      	movs	r0, #1
  4020f8:	2520      	movs	r5, #32
  4020fa:	e5cd      	b.n	401c98 <_vfiprintf_r+0xe4>
  4020fc:	f043 0301 	orr.w	r3, r3, #1
  402100:	f898 2000 	ldrb.w	r2, [r8]
  402104:	e5c8      	b.n	401c98 <_vfiprintf_r+0xe4>
  402106:	9608      	str	r6, [sp, #32]
  402108:	2800      	cmp	r0, #0
  40210a:	f040 8393 	bne.w	402834 <_vfiprintf_r+0xc80>
  40210e:	4929      	ldr	r1, [pc, #164]	; (4021b4 <_vfiprintf_r+0x600>)
  402110:	910b      	str	r1, [sp, #44]	; 0x2c
  402112:	069f      	lsls	r7, r3, #26
  402114:	f100 82e8 	bmi.w	4026e8 <_vfiprintf_r+0xb34>
  402118:	9807      	ldr	r0, [sp, #28]
  40211a:	06de      	lsls	r6, r3, #27
  40211c:	4601      	mov	r1, r0
  40211e:	f100 8270 	bmi.w	402602 <_vfiprintf_r+0xa4e>
  402122:	065d      	lsls	r5, r3, #25
  402124:	f140 826d 	bpl.w	402602 <_vfiprintf_r+0xa4e>
  402128:	3104      	adds	r1, #4
  40212a:	8806      	ldrh	r6, [r0, #0]
  40212c:	9107      	str	r1, [sp, #28]
  40212e:	2700      	movs	r7, #0
  402130:	07d8      	lsls	r0, r3, #31
  402132:	f140 8222 	bpl.w	40257a <_vfiprintf_r+0x9c6>
  402136:	ea56 0107 	orrs.w	r1, r6, r7
  40213a:	f000 821e 	beq.w	40257a <_vfiprintf_r+0x9c6>
  40213e:	2130      	movs	r1, #48	; 0x30
  402140:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  402144:	f043 0302 	orr.w	r3, r3, #2
  402148:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  40214c:	2202      	movs	r2, #2
  40214e:	e664      	b.n	401e1a <_vfiprintf_r+0x266>
  402150:	9608      	str	r6, [sp, #32]
  402152:	2800      	cmp	r0, #0
  402154:	f040 836b 	bne.w	40282e <_vfiprintf_r+0xc7a>
  402158:	4917      	ldr	r1, [pc, #92]	; (4021b8 <_vfiprintf_r+0x604>)
  40215a:	910b      	str	r1, [sp, #44]	; 0x2c
  40215c:	e7d9      	b.n	402112 <_vfiprintf_r+0x55e>
  40215e:	9907      	ldr	r1, [sp, #28]
  402160:	9608      	str	r6, [sp, #32]
  402162:	680a      	ldr	r2, [r1, #0]
  402164:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  402168:	f04f 0000 	mov.w	r0, #0
  40216c:	460a      	mov	r2, r1
  40216e:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  402172:	3204      	adds	r2, #4
  402174:	2001      	movs	r0, #1
  402176:	9001      	str	r0, [sp, #4]
  402178:	9207      	str	r2, [sp, #28]
  40217a:	9005      	str	r0, [sp, #20]
  40217c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  402180:	9302      	str	r3, [sp, #8]
  402182:	2400      	movs	r4, #0
  402184:	e670      	b.n	401e68 <_vfiprintf_r+0x2b4>
  402186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40218a:	f898 2000 	ldrb.w	r2, [r8]
  40218e:	e583      	b.n	401c98 <_vfiprintf_r+0xe4>
  402190:	f898 2000 	ldrb.w	r2, [r8]
  402194:	2a6c      	cmp	r2, #108	; 0x6c
  402196:	bf03      	ittte	eq
  402198:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  40219c:	f043 0320 	orreq.w	r3, r3, #32
  4021a0:	f108 0801 	addeq.w	r8, r8, #1
  4021a4:	f043 0310 	orrne.w	r3, r3, #16
  4021a8:	e576      	b.n	401c98 <_vfiprintf_r+0xe4>
  4021aa:	bf00      	nop
  4021ac:	00404ca8 	.word	0x00404ca8
  4021b0:	00404cb8 	.word	0x00404cb8
  4021b4:	00404c8c 	.word	0x00404c8c
  4021b8:	00404c78 	.word	0x00404c78
  4021bc:	9907      	ldr	r1, [sp, #28]
  4021be:	680e      	ldr	r6, [r1, #0]
  4021c0:	460a      	mov	r2, r1
  4021c2:	2e00      	cmp	r6, #0
  4021c4:	f102 0204 	add.w	r2, r2, #4
  4021c8:	f6ff ae0f 	blt.w	401dea <_vfiprintf_r+0x236>
  4021cc:	9207      	str	r2, [sp, #28]
  4021ce:	f898 2000 	ldrb.w	r2, [r8]
  4021d2:	e561      	b.n	401c98 <_vfiprintf_r+0xe4>
  4021d4:	f898 2000 	ldrb.w	r2, [r8]
  4021d8:	2001      	movs	r0, #1
  4021da:	252b      	movs	r5, #43	; 0x2b
  4021dc:	e55c      	b.n	401c98 <_vfiprintf_r+0xe4>
  4021de:	9907      	ldr	r1, [sp, #28]
  4021e0:	9608      	str	r6, [sp, #32]
  4021e2:	f8d1 b000 	ldr.w	fp, [r1]
  4021e6:	f04f 0200 	mov.w	r2, #0
  4021ea:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4021ee:	1d0e      	adds	r6, r1, #4
  4021f0:	f1bb 0f00 	cmp.w	fp, #0
  4021f4:	f000 82e5 	beq.w	4027c2 <_vfiprintf_r+0xc0e>
  4021f8:	1c67      	adds	r7, r4, #1
  4021fa:	f000 82c4 	beq.w	402786 <_vfiprintf_r+0xbd2>
  4021fe:	4622      	mov	r2, r4
  402200:	2100      	movs	r1, #0
  402202:	4658      	mov	r0, fp
  402204:	9301      	str	r3, [sp, #4]
  402206:	f001 fbe3 	bl	4039d0 <memchr>
  40220a:	9b01      	ldr	r3, [sp, #4]
  40220c:	2800      	cmp	r0, #0
  40220e:	f000 82e5 	beq.w	4027dc <_vfiprintf_r+0xc28>
  402212:	eba0 020b 	sub.w	r2, r0, fp
  402216:	9205      	str	r2, [sp, #20]
  402218:	9607      	str	r6, [sp, #28]
  40221a:	9302      	str	r3, [sp, #8]
  40221c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402220:	2400      	movs	r4, #0
  402222:	e619      	b.n	401e58 <_vfiprintf_r+0x2a4>
  402224:	f898 2000 	ldrb.w	r2, [r8]
  402228:	2a2a      	cmp	r2, #42	; 0x2a
  40222a:	f108 0701 	add.w	r7, r8, #1
  40222e:	f000 82e9 	beq.w	402804 <_vfiprintf_r+0xc50>
  402232:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402236:	2909      	cmp	r1, #9
  402238:	46b8      	mov	r8, r7
  40223a:	f04f 0400 	mov.w	r4, #0
  40223e:	f63f ad2d 	bhi.w	401c9c <_vfiprintf_r+0xe8>
  402242:	f818 2b01 	ldrb.w	r2, [r8], #1
  402246:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40224a:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40224e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402252:	2909      	cmp	r1, #9
  402254:	d9f5      	bls.n	402242 <_vfiprintf_r+0x68e>
  402256:	e521      	b.n	401c9c <_vfiprintf_r+0xe8>
  402258:	f043 0320 	orr.w	r3, r3, #32
  40225c:	f898 2000 	ldrb.w	r2, [r8]
  402260:	e51a      	b.n	401c98 <_vfiprintf_r+0xe4>
  402262:	9608      	str	r6, [sp, #32]
  402264:	2800      	cmp	r0, #0
  402266:	f040 82db 	bne.w	402820 <_vfiprintf_r+0xc6c>
  40226a:	2a00      	cmp	r2, #0
  40226c:	f000 80e7 	beq.w	40243e <_vfiprintf_r+0x88a>
  402270:	2101      	movs	r1, #1
  402272:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  402276:	f04f 0200 	mov.w	r2, #0
  40227a:	9101      	str	r1, [sp, #4]
  40227c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  402280:	9105      	str	r1, [sp, #20]
  402282:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  402286:	e77b      	b.n	402180 <_vfiprintf_r+0x5cc>
  402288:	9a07      	ldr	r2, [sp, #28]
  40228a:	6813      	ldr	r3, [r2, #0]
  40228c:	3204      	adds	r2, #4
  40228e:	9207      	str	r2, [sp, #28]
  402290:	9a03      	ldr	r2, [sp, #12]
  402292:	601a      	str	r2, [r3, #0]
  402294:	e4cb      	b.n	401c2e <_vfiprintf_r+0x7a>
  402296:	aa0f      	add	r2, sp, #60	; 0x3c
  402298:	9904      	ldr	r1, [sp, #16]
  40229a:	4620      	mov	r0, r4
  40229c:	f7ff fc4a 	bl	401b34 <__sprint_r.part.0>
  4022a0:	2800      	cmp	r0, #0
  4022a2:	f040 8139 	bne.w	402518 <_vfiprintf_r+0x964>
  4022a6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4022a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4022aa:	f101 0c01 	add.w	ip, r1, #1
  4022ae:	46ce      	mov	lr, r9
  4022b0:	e5ff      	b.n	401eb2 <_vfiprintf_r+0x2fe>
  4022b2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4022b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4022b6:	1c48      	adds	r0, r1, #1
  4022b8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4022bc:	2d00      	cmp	r5, #0
  4022be:	f43f ae22 	beq.w	401f06 <_vfiprintf_r+0x352>
  4022c2:	3201      	adds	r2, #1
  4022c4:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4022c8:	2101      	movs	r1, #1
  4022ca:	2807      	cmp	r0, #7
  4022cc:	9211      	str	r2, [sp, #68]	; 0x44
  4022ce:	9010      	str	r0, [sp, #64]	; 0x40
  4022d0:	f8ca 5000 	str.w	r5, [sl]
  4022d4:	f8ca 1004 	str.w	r1, [sl, #4]
  4022d8:	f340 8108 	ble.w	4024ec <_vfiprintf_r+0x938>
  4022dc:	2a00      	cmp	r2, #0
  4022de:	f040 81bc 	bne.w	40265a <_vfiprintf_r+0xaa6>
  4022e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4022e4:	2b00      	cmp	r3, #0
  4022e6:	f43f ae1f 	beq.w	401f28 <_vfiprintf_r+0x374>
  4022ea:	ab0e      	add	r3, sp, #56	; 0x38
  4022ec:	2202      	movs	r2, #2
  4022ee:	4608      	mov	r0, r1
  4022f0:	931c      	str	r3, [sp, #112]	; 0x70
  4022f2:	921d      	str	r2, [sp, #116]	; 0x74
  4022f4:	46ca      	mov	sl, r9
  4022f6:	4601      	mov	r1, r0
  4022f8:	f10a 0a08 	add.w	sl, sl, #8
  4022fc:	3001      	adds	r0, #1
  4022fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402300:	2b80      	cmp	r3, #128	; 0x80
  402302:	f43f ae19 	beq.w	401f38 <_vfiprintf_r+0x384>
  402306:	9b05      	ldr	r3, [sp, #20]
  402308:	1ae4      	subs	r4, r4, r3
  40230a:	2c00      	cmp	r4, #0
  40230c:	dd2e      	ble.n	40236c <_vfiprintf_r+0x7b8>
  40230e:	2c10      	cmp	r4, #16
  402310:	4db3      	ldr	r5, [pc, #716]	; (4025e0 <_vfiprintf_r+0xa2c>)
  402312:	dd1e      	ble.n	402352 <_vfiprintf_r+0x79e>
  402314:	46d6      	mov	lr, sl
  402316:	2610      	movs	r6, #16
  402318:	9f06      	ldr	r7, [sp, #24]
  40231a:	f8dd a010 	ldr.w	sl, [sp, #16]
  40231e:	e006      	b.n	40232e <_vfiprintf_r+0x77a>
  402320:	1c88      	adds	r0, r1, #2
  402322:	f10e 0e08 	add.w	lr, lr, #8
  402326:	4619      	mov	r1, r3
  402328:	3c10      	subs	r4, #16
  40232a:	2c10      	cmp	r4, #16
  40232c:	dd10      	ble.n	402350 <_vfiprintf_r+0x79c>
  40232e:	1c4b      	adds	r3, r1, #1
  402330:	3210      	adds	r2, #16
  402332:	2b07      	cmp	r3, #7
  402334:	9211      	str	r2, [sp, #68]	; 0x44
  402336:	e88e 0060 	stmia.w	lr, {r5, r6}
  40233a:	9310      	str	r3, [sp, #64]	; 0x40
  40233c:	ddf0      	ble.n	402320 <_vfiprintf_r+0x76c>
  40233e:	2a00      	cmp	r2, #0
  402340:	d165      	bne.n	40240e <_vfiprintf_r+0x85a>
  402342:	3c10      	subs	r4, #16
  402344:	2c10      	cmp	r4, #16
  402346:	f04f 0001 	mov.w	r0, #1
  40234a:	4611      	mov	r1, r2
  40234c:	46ce      	mov	lr, r9
  40234e:	dcee      	bgt.n	40232e <_vfiprintf_r+0x77a>
  402350:	46f2      	mov	sl, lr
  402352:	4422      	add	r2, r4
  402354:	2807      	cmp	r0, #7
  402356:	9211      	str	r2, [sp, #68]	; 0x44
  402358:	f8ca 5000 	str.w	r5, [sl]
  40235c:	f8ca 4004 	str.w	r4, [sl, #4]
  402360:	9010      	str	r0, [sp, #64]	; 0x40
  402362:	f300 8085 	bgt.w	402470 <_vfiprintf_r+0x8bc>
  402366:	f10a 0a08 	add.w	sl, sl, #8
  40236a:	3001      	adds	r0, #1
  40236c:	9905      	ldr	r1, [sp, #20]
  40236e:	f8ca b000 	str.w	fp, [sl]
  402372:	440a      	add	r2, r1
  402374:	2807      	cmp	r0, #7
  402376:	9211      	str	r2, [sp, #68]	; 0x44
  402378:	f8ca 1004 	str.w	r1, [sl, #4]
  40237c:	9010      	str	r0, [sp, #64]	; 0x40
  40237e:	f340 8082 	ble.w	402486 <_vfiprintf_r+0x8d2>
  402382:	2a00      	cmp	r2, #0
  402384:	f040 8118 	bne.w	4025b8 <_vfiprintf_r+0xa04>
  402388:	9b02      	ldr	r3, [sp, #8]
  40238a:	9210      	str	r2, [sp, #64]	; 0x40
  40238c:	0758      	lsls	r0, r3, #29
  40238e:	d535      	bpl.n	4023fc <_vfiprintf_r+0x848>
  402390:	9b08      	ldr	r3, [sp, #32]
  402392:	9901      	ldr	r1, [sp, #4]
  402394:	1a5c      	subs	r4, r3, r1
  402396:	2c00      	cmp	r4, #0
  402398:	f340 80e7 	ble.w	40256a <_vfiprintf_r+0x9b6>
  40239c:	46ca      	mov	sl, r9
  40239e:	2c10      	cmp	r4, #16
  4023a0:	f340 8218 	ble.w	4027d4 <_vfiprintf_r+0xc20>
  4023a4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4023a6:	4e8f      	ldr	r6, [pc, #572]	; (4025e4 <_vfiprintf_r+0xa30>)
  4023a8:	9f06      	ldr	r7, [sp, #24]
  4023aa:	f8dd b010 	ldr.w	fp, [sp, #16]
  4023ae:	2510      	movs	r5, #16
  4023b0:	e006      	b.n	4023c0 <_vfiprintf_r+0x80c>
  4023b2:	1c88      	adds	r0, r1, #2
  4023b4:	f10a 0a08 	add.w	sl, sl, #8
  4023b8:	4619      	mov	r1, r3
  4023ba:	3c10      	subs	r4, #16
  4023bc:	2c10      	cmp	r4, #16
  4023be:	dd11      	ble.n	4023e4 <_vfiprintf_r+0x830>
  4023c0:	1c4b      	adds	r3, r1, #1
  4023c2:	3210      	adds	r2, #16
  4023c4:	2b07      	cmp	r3, #7
  4023c6:	9211      	str	r2, [sp, #68]	; 0x44
  4023c8:	f8ca 6000 	str.w	r6, [sl]
  4023cc:	f8ca 5004 	str.w	r5, [sl, #4]
  4023d0:	9310      	str	r3, [sp, #64]	; 0x40
  4023d2:	ddee      	ble.n	4023b2 <_vfiprintf_r+0x7fe>
  4023d4:	bb42      	cbnz	r2, 402428 <_vfiprintf_r+0x874>
  4023d6:	3c10      	subs	r4, #16
  4023d8:	2c10      	cmp	r4, #16
  4023da:	f04f 0001 	mov.w	r0, #1
  4023de:	4611      	mov	r1, r2
  4023e0:	46ca      	mov	sl, r9
  4023e2:	dced      	bgt.n	4023c0 <_vfiprintf_r+0x80c>
  4023e4:	4422      	add	r2, r4
  4023e6:	2807      	cmp	r0, #7
  4023e8:	9211      	str	r2, [sp, #68]	; 0x44
  4023ea:	f8ca 6000 	str.w	r6, [sl]
  4023ee:	f8ca 4004 	str.w	r4, [sl, #4]
  4023f2:	9010      	str	r0, [sp, #64]	; 0x40
  4023f4:	dd51      	ble.n	40249a <_vfiprintf_r+0x8e6>
  4023f6:	2a00      	cmp	r2, #0
  4023f8:	f040 819b 	bne.w	402732 <_vfiprintf_r+0xb7e>
  4023fc:	9b03      	ldr	r3, [sp, #12]
  4023fe:	9a08      	ldr	r2, [sp, #32]
  402400:	9901      	ldr	r1, [sp, #4]
  402402:	428a      	cmp	r2, r1
  402404:	bfac      	ite	ge
  402406:	189b      	addge	r3, r3, r2
  402408:	185b      	addlt	r3, r3, r1
  40240a:	9303      	str	r3, [sp, #12]
  40240c:	e04e      	b.n	4024ac <_vfiprintf_r+0x8f8>
  40240e:	aa0f      	add	r2, sp, #60	; 0x3c
  402410:	4651      	mov	r1, sl
  402412:	4638      	mov	r0, r7
  402414:	f7ff fb8e 	bl	401b34 <__sprint_r.part.0>
  402418:	2800      	cmp	r0, #0
  40241a:	f040 813f 	bne.w	40269c <_vfiprintf_r+0xae8>
  40241e:	9910      	ldr	r1, [sp, #64]	; 0x40
  402420:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402422:	1c48      	adds	r0, r1, #1
  402424:	46ce      	mov	lr, r9
  402426:	e77f      	b.n	402328 <_vfiprintf_r+0x774>
  402428:	aa0f      	add	r2, sp, #60	; 0x3c
  40242a:	4659      	mov	r1, fp
  40242c:	4638      	mov	r0, r7
  40242e:	f7ff fb81 	bl	401b34 <__sprint_r.part.0>
  402432:	b960      	cbnz	r0, 40244e <_vfiprintf_r+0x89a>
  402434:	9910      	ldr	r1, [sp, #64]	; 0x40
  402436:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402438:	1c48      	adds	r0, r1, #1
  40243a:	46ca      	mov	sl, r9
  40243c:	e7bd      	b.n	4023ba <_vfiprintf_r+0x806>
  40243e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402440:	f8dd b010 	ldr.w	fp, [sp, #16]
  402444:	2b00      	cmp	r3, #0
  402446:	f040 81d4 	bne.w	4027f2 <_vfiprintf_r+0xc3e>
  40244a:	2300      	movs	r3, #0
  40244c:	9310      	str	r3, [sp, #64]	; 0x40
  40244e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402452:	f013 0f01 	tst.w	r3, #1
  402456:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40245a:	d102      	bne.n	402462 <_vfiprintf_r+0x8ae>
  40245c:	059a      	lsls	r2, r3, #22
  40245e:	f140 80de 	bpl.w	40261e <_vfiprintf_r+0xa6a>
  402462:	065b      	lsls	r3, r3, #25
  402464:	f53f acb2 	bmi.w	401dcc <_vfiprintf_r+0x218>
  402468:	9803      	ldr	r0, [sp, #12]
  40246a:	b02d      	add	sp, #180	; 0xb4
  40246c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402470:	2a00      	cmp	r2, #0
  402472:	f040 8106 	bne.w	402682 <_vfiprintf_r+0xace>
  402476:	9a05      	ldr	r2, [sp, #20]
  402478:	921d      	str	r2, [sp, #116]	; 0x74
  40247a:	2301      	movs	r3, #1
  40247c:	9211      	str	r2, [sp, #68]	; 0x44
  40247e:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  402482:	9310      	str	r3, [sp, #64]	; 0x40
  402484:	46ca      	mov	sl, r9
  402486:	f10a 0a08 	add.w	sl, sl, #8
  40248a:	9b02      	ldr	r3, [sp, #8]
  40248c:	0759      	lsls	r1, r3, #29
  40248e:	d504      	bpl.n	40249a <_vfiprintf_r+0x8e6>
  402490:	9b08      	ldr	r3, [sp, #32]
  402492:	9901      	ldr	r1, [sp, #4]
  402494:	1a5c      	subs	r4, r3, r1
  402496:	2c00      	cmp	r4, #0
  402498:	dc81      	bgt.n	40239e <_vfiprintf_r+0x7ea>
  40249a:	9b03      	ldr	r3, [sp, #12]
  40249c:	9908      	ldr	r1, [sp, #32]
  40249e:	9801      	ldr	r0, [sp, #4]
  4024a0:	4281      	cmp	r1, r0
  4024a2:	bfac      	ite	ge
  4024a4:	185b      	addge	r3, r3, r1
  4024a6:	181b      	addlt	r3, r3, r0
  4024a8:	9303      	str	r3, [sp, #12]
  4024aa:	bb72      	cbnz	r2, 40250a <_vfiprintf_r+0x956>
  4024ac:	2300      	movs	r3, #0
  4024ae:	9310      	str	r3, [sp, #64]	; 0x40
  4024b0:	46ca      	mov	sl, r9
  4024b2:	f7ff bbbc 	b.w	401c2e <_vfiprintf_r+0x7a>
  4024b6:	aa0f      	add	r2, sp, #60	; 0x3c
  4024b8:	9904      	ldr	r1, [sp, #16]
  4024ba:	4620      	mov	r0, r4
  4024bc:	f7ff fb3a 	bl	401b34 <__sprint_r.part.0>
  4024c0:	bb50      	cbnz	r0, 402518 <_vfiprintf_r+0x964>
  4024c2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4024c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4024c6:	f101 0e01 	add.w	lr, r1, #1
  4024ca:	46cc      	mov	ip, r9
  4024cc:	e548      	b.n	401f60 <_vfiprintf_r+0x3ac>
  4024ce:	2a00      	cmp	r2, #0
  4024d0:	f040 8140 	bne.w	402754 <_vfiprintf_r+0xba0>
  4024d4:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4024d8:	2900      	cmp	r1, #0
  4024da:	f000 811b 	beq.w	402714 <_vfiprintf_r+0xb60>
  4024de:	2201      	movs	r2, #1
  4024e0:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4024e4:	4610      	mov	r0, r2
  4024e6:	921d      	str	r2, [sp, #116]	; 0x74
  4024e8:	911c      	str	r1, [sp, #112]	; 0x70
  4024ea:	46ca      	mov	sl, r9
  4024ec:	4601      	mov	r1, r0
  4024ee:	f10a 0a08 	add.w	sl, sl, #8
  4024f2:	3001      	adds	r0, #1
  4024f4:	e507      	b.n	401f06 <_vfiprintf_r+0x352>
  4024f6:	9b02      	ldr	r3, [sp, #8]
  4024f8:	2a01      	cmp	r2, #1
  4024fa:	f000 8098 	beq.w	40262e <_vfiprintf_r+0xa7a>
  4024fe:	2a02      	cmp	r2, #2
  402500:	d10d      	bne.n	40251e <_vfiprintf_r+0x96a>
  402502:	9302      	str	r3, [sp, #8]
  402504:	2600      	movs	r6, #0
  402506:	2700      	movs	r7, #0
  402508:	e5b0      	b.n	40206c <_vfiprintf_r+0x4b8>
  40250a:	aa0f      	add	r2, sp, #60	; 0x3c
  40250c:	9904      	ldr	r1, [sp, #16]
  40250e:	9806      	ldr	r0, [sp, #24]
  402510:	f7ff fb10 	bl	401b34 <__sprint_r.part.0>
  402514:	2800      	cmp	r0, #0
  402516:	d0c9      	beq.n	4024ac <_vfiprintf_r+0x8f8>
  402518:	f8dd b010 	ldr.w	fp, [sp, #16]
  40251c:	e797      	b.n	40244e <_vfiprintf_r+0x89a>
  40251e:	9302      	str	r3, [sp, #8]
  402520:	2600      	movs	r6, #0
  402522:	2700      	movs	r7, #0
  402524:	4649      	mov	r1, r9
  402526:	e000      	b.n	40252a <_vfiprintf_r+0x976>
  402528:	4659      	mov	r1, fp
  40252a:	08f2      	lsrs	r2, r6, #3
  40252c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  402530:	08f8      	lsrs	r0, r7, #3
  402532:	f006 0307 	and.w	r3, r6, #7
  402536:	4607      	mov	r7, r0
  402538:	4616      	mov	r6, r2
  40253a:	3330      	adds	r3, #48	; 0x30
  40253c:	ea56 0207 	orrs.w	r2, r6, r7
  402540:	f801 3c01 	strb.w	r3, [r1, #-1]
  402544:	f101 3bff 	add.w	fp, r1, #4294967295
  402548:	d1ee      	bne.n	402528 <_vfiprintf_r+0x974>
  40254a:	9a02      	ldr	r2, [sp, #8]
  40254c:	07d6      	lsls	r6, r2, #31
  40254e:	f57f ad9d 	bpl.w	40208c <_vfiprintf_r+0x4d8>
  402552:	2b30      	cmp	r3, #48	; 0x30
  402554:	f43f ad9a 	beq.w	40208c <_vfiprintf_r+0x4d8>
  402558:	3902      	subs	r1, #2
  40255a:	2330      	movs	r3, #48	; 0x30
  40255c:	f80b 3c01 	strb.w	r3, [fp, #-1]
  402560:	eba9 0301 	sub.w	r3, r9, r1
  402564:	9305      	str	r3, [sp, #20]
  402566:	468b      	mov	fp, r1
  402568:	e476      	b.n	401e58 <_vfiprintf_r+0x2a4>
  40256a:	9b03      	ldr	r3, [sp, #12]
  40256c:	9a08      	ldr	r2, [sp, #32]
  40256e:	428a      	cmp	r2, r1
  402570:	bfac      	ite	ge
  402572:	189b      	addge	r3, r3, r2
  402574:	185b      	addlt	r3, r3, r1
  402576:	9303      	str	r3, [sp, #12]
  402578:	e798      	b.n	4024ac <_vfiprintf_r+0x8f8>
  40257a:	2202      	movs	r2, #2
  40257c:	e44d      	b.n	401e1a <_vfiprintf_r+0x266>
  40257e:	2f00      	cmp	r7, #0
  402580:	bf08      	it	eq
  402582:	2e0a      	cmpeq	r6, #10
  402584:	d352      	bcc.n	40262c <_vfiprintf_r+0xa78>
  402586:	46cb      	mov	fp, r9
  402588:	4630      	mov	r0, r6
  40258a:	4639      	mov	r1, r7
  40258c:	220a      	movs	r2, #10
  40258e:	2300      	movs	r3, #0
  402590:	f001 ff72 	bl	404478 <__aeabi_uldivmod>
  402594:	3230      	adds	r2, #48	; 0x30
  402596:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40259a:	4630      	mov	r0, r6
  40259c:	4639      	mov	r1, r7
  40259e:	2300      	movs	r3, #0
  4025a0:	220a      	movs	r2, #10
  4025a2:	f001 ff69 	bl	404478 <__aeabi_uldivmod>
  4025a6:	4606      	mov	r6, r0
  4025a8:	460f      	mov	r7, r1
  4025aa:	ea56 0307 	orrs.w	r3, r6, r7
  4025ae:	d1eb      	bne.n	402588 <_vfiprintf_r+0x9d4>
  4025b0:	e56c      	b.n	40208c <_vfiprintf_r+0x4d8>
  4025b2:	9405      	str	r4, [sp, #20]
  4025b4:	46cb      	mov	fp, r9
  4025b6:	e44f      	b.n	401e58 <_vfiprintf_r+0x2a4>
  4025b8:	aa0f      	add	r2, sp, #60	; 0x3c
  4025ba:	9904      	ldr	r1, [sp, #16]
  4025bc:	9806      	ldr	r0, [sp, #24]
  4025be:	f7ff fab9 	bl	401b34 <__sprint_r.part.0>
  4025c2:	2800      	cmp	r0, #0
  4025c4:	d1a8      	bne.n	402518 <_vfiprintf_r+0x964>
  4025c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4025c8:	46ca      	mov	sl, r9
  4025ca:	e75e      	b.n	40248a <_vfiprintf_r+0x8d6>
  4025cc:	aa0f      	add	r2, sp, #60	; 0x3c
  4025ce:	9904      	ldr	r1, [sp, #16]
  4025d0:	9806      	ldr	r0, [sp, #24]
  4025d2:	f7ff faaf 	bl	401b34 <__sprint_r.part.0>
  4025d6:	2800      	cmp	r0, #0
  4025d8:	d19e      	bne.n	402518 <_vfiprintf_r+0x964>
  4025da:	46ca      	mov	sl, r9
  4025dc:	f7ff bbc0 	b.w	401d60 <_vfiprintf_r+0x1ac>
  4025e0:	00404cb8 	.word	0x00404cb8
  4025e4:	00404ca8 	.word	0x00404ca8
  4025e8:	3104      	adds	r1, #4
  4025ea:	6816      	ldr	r6, [r2, #0]
  4025ec:	9107      	str	r1, [sp, #28]
  4025ee:	2201      	movs	r2, #1
  4025f0:	2700      	movs	r7, #0
  4025f2:	e412      	b.n	401e1a <_vfiprintf_r+0x266>
  4025f4:	9807      	ldr	r0, [sp, #28]
  4025f6:	4601      	mov	r1, r0
  4025f8:	3104      	adds	r1, #4
  4025fa:	6806      	ldr	r6, [r0, #0]
  4025fc:	9107      	str	r1, [sp, #28]
  4025fe:	2700      	movs	r7, #0
  402600:	e40b      	b.n	401e1a <_vfiprintf_r+0x266>
  402602:	680e      	ldr	r6, [r1, #0]
  402604:	3104      	adds	r1, #4
  402606:	9107      	str	r1, [sp, #28]
  402608:	2700      	movs	r7, #0
  40260a:	e591      	b.n	402130 <_vfiprintf_r+0x57c>
  40260c:	9907      	ldr	r1, [sp, #28]
  40260e:	680e      	ldr	r6, [r1, #0]
  402610:	460a      	mov	r2, r1
  402612:	17f7      	asrs	r7, r6, #31
  402614:	3204      	adds	r2, #4
  402616:	9207      	str	r2, [sp, #28]
  402618:	4630      	mov	r0, r6
  40261a:	4639      	mov	r1, r7
  40261c:	e50f      	b.n	40203e <_vfiprintf_r+0x48a>
  40261e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402622:	f000 fe87 	bl	403334 <__retarget_lock_release_recursive>
  402626:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40262a:	e71a      	b.n	402462 <_vfiprintf_r+0x8ae>
  40262c:	9b02      	ldr	r3, [sp, #8]
  40262e:	9302      	str	r3, [sp, #8]
  402630:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  402634:	3630      	adds	r6, #48	; 0x30
  402636:	2301      	movs	r3, #1
  402638:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  40263c:	9305      	str	r3, [sp, #20]
  40263e:	e40b      	b.n	401e58 <_vfiprintf_r+0x2a4>
  402640:	aa0f      	add	r2, sp, #60	; 0x3c
  402642:	9904      	ldr	r1, [sp, #16]
  402644:	9806      	ldr	r0, [sp, #24]
  402646:	f7ff fa75 	bl	401b34 <__sprint_r.part.0>
  40264a:	2800      	cmp	r0, #0
  40264c:	f47f af64 	bne.w	402518 <_vfiprintf_r+0x964>
  402650:	9910      	ldr	r1, [sp, #64]	; 0x40
  402652:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402654:	1c48      	adds	r0, r1, #1
  402656:	46ca      	mov	sl, r9
  402658:	e651      	b.n	4022fe <_vfiprintf_r+0x74a>
  40265a:	aa0f      	add	r2, sp, #60	; 0x3c
  40265c:	9904      	ldr	r1, [sp, #16]
  40265e:	9806      	ldr	r0, [sp, #24]
  402660:	f7ff fa68 	bl	401b34 <__sprint_r.part.0>
  402664:	2800      	cmp	r0, #0
  402666:	f47f af57 	bne.w	402518 <_vfiprintf_r+0x964>
  40266a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40266c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40266e:	1c48      	adds	r0, r1, #1
  402670:	46ca      	mov	sl, r9
  402672:	e448      	b.n	401f06 <_vfiprintf_r+0x352>
  402674:	2a00      	cmp	r2, #0
  402676:	f040 8091 	bne.w	40279c <_vfiprintf_r+0xbe8>
  40267a:	2001      	movs	r0, #1
  40267c:	4611      	mov	r1, r2
  40267e:	46ca      	mov	sl, r9
  402680:	e641      	b.n	402306 <_vfiprintf_r+0x752>
  402682:	aa0f      	add	r2, sp, #60	; 0x3c
  402684:	9904      	ldr	r1, [sp, #16]
  402686:	9806      	ldr	r0, [sp, #24]
  402688:	f7ff fa54 	bl	401b34 <__sprint_r.part.0>
  40268c:	2800      	cmp	r0, #0
  40268e:	f47f af43 	bne.w	402518 <_vfiprintf_r+0x964>
  402692:	9810      	ldr	r0, [sp, #64]	; 0x40
  402694:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402696:	3001      	adds	r0, #1
  402698:	46ca      	mov	sl, r9
  40269a:	e667      	b.n	40236c <_vfiprintf_r+0x7b8>
  40269c:	46d3      	mov	fp, sl
  40269e:	e6d6      	b.n	40244e <_vfiprintf_r+0x89a>
  4026a0:	9e07      	ldr	r6, [sp, #28]
  4026a2:	3607      	adds	r6, #7
  4026a4:	f026 0207 	bic.w	r2, r6, #7
  4026a8:	f102 0108 	add.w	r1, r2, #8
  4026ac:	e9d2 6700 	ldrd	r6, r7, [r2]
  4026b0:	9107      	str	r1, [sp, #28]
  4026b2:	2201      	movs	r2, #1
  4026b4:	f7ff bbb1 	b.w	401e1a <_vfiprintf_r+0x266>
  4026b8:	9e07      	ldr	r6, [sp, #28]
  4026ba:	3607      	adds	r6, #7
  4026bc:	f026 0607 	bic.w	r6, r6, #7
  4026c0:	e9d6 0100 	ldrd	r0, r1, [r6]
  4026c4:	f106 0208 	add.w	r2, r6, #8
  4026c8:	9207      	str	r2, [sp, #28]
  4026ca:	4606      	mov	r6, r0
  4026cc:	460f      	mov	r7, r1
  4026ce:	e4b6      	b.n	40203e <_vfiprintf_r+0x48a>
  4026d0:	9e07      	ldr	r6, [sp, #28]
  4026d2:	3607      	adds	r6, #7
  4026d4:	f026 0207 	bic.w	r2, r6, #7
  4026d8:	f102 0108 	add.w	r1, r2, #8
  4026dc:	e9d2 6700 	ldrd	r6, r7, [r2]
  4026e0:	9107      	str	r1, [sp, #28]
  4026e2:	2200      	movs	r2, #0
  4026e4:	f7ff bb99 	b.w	401e1a <_vfiprintf_r+0x266>
  4026e8:	9e07      	ldr	r6, [sp, #28]
  4026ea:	3607      	adds	r6, #7
  4026ec:	f026 0107 	bic.w	r1, r6, #7
  4026f0:	f101 0008 	add.w	r0, r1, #8
  4026f4:	9007      	str	r0, [sp, #28]
  4026f6:	e9d1 6700 	ldrd	r6, r7, [r1]
  4026fa:	e519      	b.n	402130 <_vfiprintf_r+0x57c>
  4026fc:	46cb      	mov	fp, r9
  4026fe:	f7ff bbab 	b.w	401e58 <_vfiprintf_r+0x2a4>
  402702:	252d      	movs	r5, #45	; 0x2d
  402704:	4276      	negs	r6, r6
  402706:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40270a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40270e:	2201      	movs	r2, #1
  402710:	f7ff bb88 	b.w	401e24 <_vfiprintf_r+0x270>
  402714:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402716:	b9b3      	cbnz	r3, 402746 <_vfiprintf_r+0xb92>
  402718:	4611      	mov	r1, r2
  40271a:	2001      	movs	r0, #1
  40271c:	46ca      	mov	sl, r9
  40271e:	e5f2      	b.n	402306 <_vfiprintf_r+0x752>
  402720:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402724:	f000 fe06 	bl	403334 <__retarget_lock_release_recursive>
  402728:	f04f 33ff 	mov.w	r3, #4294967295
  40272c:	9303      	str	r3, [sp, #12]
  40272e:	f7ff bb50 	b.w	401dd2 <_vfiprintf_r+0x21e>
  402732:	aa0f      	add	r2, sp, #60	; 0x3c
  402734:	9904      	ldr	r1, [sp, #16]
  402736:	9806      	ldr	r0, [sp, #24]
  402738:	f7ff f9fc 	bl	401b34 <__sprint_r.part.0>
  40273c:	2800      	cmp	r0, #0
  40273e:	f47f aeeb 	bne.w	402518 <_vfiprintf_r+0x964>
  402742:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402744:	e6a9      	b.n	40249a <_vfiprintf_r+0x8e6>
  402746:	ab0e      	add	r3, sp, #56	; 0x38
  402748:	2202      	movs	r2, #2
  40274a:	931c      	str	r3, [sp, #112]	; 0x70
  40274c:	921d      	str	r2, [sp, #116]	; 0x74
  40274e:	2001      	movs	r0, #1
  402750:	46ca      	mov	sl, r9
  402752:	e5d0      	b.n	4022f6 <_vfiprintf_r+0x742>
  402754:	aa0f      	add	r2, sp, #60	; 0x3c
  402756:	9904      	ldr	r1, [sp, #16]
  402758:	9806      	ldr	r0, [sp, #24]
  40275a:	f7ff f9eb 	bl	401b34 <__sprint_r.part.0>
  40275e:	2800      	cmp	r0, #0
  402760:	f47f aeda 	bne.w	402518 <_vfiprintf_r+0x964>
  402764:	9910      	ldr	r1, [sp, #64]	; 0x40
  402766:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402768:	1c48      	adds	r0, r1, #1
  40276a:	46ca      	mov	sl, r9
  40276c:	e5a4      	b.n	4022b8 <_vfiprintf_r+0x704>
  40276e:	9a07      	ldr	r2, [sp, #28]
  402770:	9903      	ldr	r1, [sp, #12]
  402772:	6813      	ldr	r3, [r2, #0]
  402774:	17cd      	asrs	r5, r1, #31
  402776:	4608      	mov	r0, r1
  402778:	3204      	adds	r2, #4
  40277a:	4629      	mov	r1, r5
  40277c:	9207      	str	r2, [sp, #28]
  40277e:	e9c3 0100 	strd	r0, r1, [r3]
  402782:	f7ff ba54 	b.w	401c2e <_vfiprintf_r+0x7a>
  402786:	4658      	mov	r0, fp
  402788:	9607      	str	r6, [sp, #28]
  40278a:	9302      	str	r3, [sp, #8]
  40278c:	f001 fc38 	bl	404000 <strlen>
  402790:	2400      	movs	r4, #0
  402792:	9005      	str	r0, [sp, #20]
  402794:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402798:	f7ff bb5e 	b.w	401e58 <_vfiprintf_r+0x2a4>
  40279c:	aa0f      	add	r2, sp, #60	; 0x3c
  40279e:	9904      	ldr	r1, [sp, #16]
  4027a0:	9806      	ldr	r0, [sp, #24]
  4027a2:	f7ff f9c7 	bl	401b34 <__sprint_r.part.0>
  4027a6:	2800      	cmp	r0, #0
  4027a8:	f47f aeb6 	bne.w	402518 <_vfiprintf_r+0x964>
  4027ac:	9910      	ldr	r1, [sp, #64]	; 0x40
  4027ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4027b0:	1c48      	adds	r0, r1, #1
  4027b2:	46ca      	mov	sl, r9
  4027b4:	e5a7      	b.n	402306 <_vfiprintf_r+0x752>
  4027b6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4027b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4027ba:	4e20      	ldr	r6, [pc, #128]	; (40283c <_vfiprintf_r+0xc88>)
  4027bc:	3101      	adds	r1, #1
  4027be:	f7ff bb90 	b.w	401ee2 <_vfiprintf_r+0x32e>
  4027c2:	2c06      	cmp	r4, #6
  4027c4:	bf28      	it	cs
  4027c6:	2406      	movcs	r4, #6
  4027c8:	9405      	str	r4, [sp, #20]
  4027ca:	9607      	str	r6, [sp, #28]
  4027cc:	9401      	str	r4, [sp, #4]
  4027ce:	f8df b070 	ldr.w	fp, [pc, #112]	; 402840 <_vfiprintf_r+0xc8c>
  4027d2:	e4d5      	b.n	402180 <_vfiprintf_r+0x5cc>
  4027d4:	9810      	ldr	r0, [sp, #64]	; 0x40
  4027d6:	4e19      	ldr	r6, [pc, #100]	; (40283c <_vfiprintf_r+0xc88>)
  4027d8:	3001      	adds	r0, #1
  4027da:	e603      	b.n	4023e4 <_vfiprintf_r+0x830>
  4027dc:	9405      	str	r4, [sp, #20]
  4027de:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4027e2:	9607      	str	r6, [sp, #28]
  4027e4:	9302      	str	r3, [sp, #8]
  4027e6:	4604      	mov	r4, r0
  4027e8:	f7ff bb36 	b.w	401e58 <_vfiprintf_r+0x2a4>
  4027ec:	4686      	mov	lr, r0
  4027ee:	f7ff bbce 	b.w	401f8e <_vfiprintf_r+0x3da>
  4027f2:	9806      	ldr	r0, [sp, #24]
  4027f4:	aa0f      	add	r2, sp, #60	; 0x3c
  4027f6:	4659      	mov	r1, fp
  4027f8:	f7ff f99c 	bl	401b34 <__sprint_r.part.0>
  4027fc:	2800      	cmp	r0, #0
  4027fe:	f43f ae24 	beq.w	40244a <_vfiprintf_r+0x896>
  402802:	e624      	b.n	40244e <_vfiprintf_r+0x89a>
  402804:	9907      	ldr	r1, [sp, #28]
  402806:	f898 2001 	ldrb.w	r2, [r8, #1]
  40280a:	680c      	ldr	r4, [r1, #0]
  40280c:	3104      	adds	r1, #4
  40280e:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  402812:	46b8      	mov	r8, r7
  402814:	9107      	str	r1, [sp, #28]
  402816:	f7ff ba3f 	b.w	401c98 <_vfiprintf_r+0xe4>
  40281a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40281e:	e43c      	b.n	40209a <_vfiprintf_r+0x4e6>
  402820:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402824:	e521      	b.n	40226a <_vfiprintf_r+0x6b6>
  402826:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40282a:	f7ff bbf4 	b.w	402016 <_vfiprintf_r+0x462>
  40282e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402832:	e491      	b.n	402158 <_vfiprintf_r+0x5a4>
  402834:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402838:	e469      	b.n	40210e <_vfiprintf_r+0x55a>
  40283a:	bf00      	nop
  40283c:	00404ca8 	.word	0x00404ca8
  402840:	00404ca0 	.word	0x00404ca0

00402844 <__sbprintf>:
  402844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402848:	460c      	mov	r4, r1
  40284a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40284e:	8989      	ldrh	r1, [r1, #12]
  402850:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402852:	89e5      	ldrh	r5, [r4, #14]
  402854:	9619      	str	r6, [sp, #100]	; 0x64
  402856:	f021 0102 	bic.w	r1, r1, #2
  40285a:	4606      	mov	r6, r0
  40285c:	69e0      	ldr	r0, [r4, #28]
  40285e:	f8ad 100c 	strh.w	r1, [sp, #12]
  402862:	4617      	mov	r7, r2
  402864:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402868:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40286a:	f8ad 500e 	strh.w	r5, [sp, #14]
  40286e:	4698      	mov	r8, r3
  402870:	ad1a      	add	r5, sp, #104	; 0x68
  402872:	2300      	movs	r3, #0
  402874:	9007      	str	r0, [sp, #28]
  402876:	a816      	add	r0, sp, #88	; 0x58
  402878:	9209      	str	r2, [sp, #36]	; 0x24
  40287a:	9306      	str	r3, [sp, #24]
  40287c:	9500      	str	r5, [sp, #0]
  40287e:	9504      	str	r5, [sp, #16]
  402880:	9102      	str	r1, [sp, #8]
  402882:	9105      	str	r1, [sp, #20]
  402884:	f000 fd50 	bl	403328 <__retarget_lock_init_recursive>
  402888:	4643      	mov	r3, r8
  40288a:	463a      	mov	r2, r7
  40288c:	4669      	mov	r1, sp
  40288e:	4630      	mov	r0, r6
  402890:	f7ff f990 	bl	401bb4 <_vfiprintf_r>
  402894:	1e05      	subs	r5, r0, #0
  402896:	db07      	blt.n	4028a8 <__sbprintf+0x64>
  402898:	4630      	mov	r0, r6
  40289a:	4669      	mov	r1, sp
  40289c:	f000 f930 	bl	402b00 <_fflush_r>
  4028a0:	2800      	cmp	r0, #0
  4028a2:	bf18      	it	ne
  4028a4:	f04f 35ff 	movne.w	r5, #4294967295
  4028a8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4028ac:	065b      	lsls	r3, r3, #25
  4028ae:	d503      	bpl.n	4028b8 <__sbprintf+0x74>
  4028b0:	89a3      	ldrh	r3, [r4, #12]
  4028b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4028b6:	81a3      	strh	r3, [r4, #12]
  4028b8:	9816      	ldr	r0, [sp, #88]	; 0x58
  4028ba:	f000 fd37 	bl	40332c <__retarget_lock_close_recursive>
  4028be:	4628      	mov	r0, r5
  4028c0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4028c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004028c8 <__swsetup_r>:
  4028c8:	b538      	push	{r3, r4, r5, lr}
  4028ca:	4b30      	ldr	r3, [pc, #192]	; (40298c <__swsetup_r+0xc4>)
  4028cc:	681b      	ldr	r3, [r3, #0]
  4028ce:	4605      	mov	r5, r0
  4028d0:	460c      	mov	r4, r1
  4028d2:	b113      	cbz	r3, 4028da <__swsetup_r+0x12>
  4028d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4028d6:	2a00      	cmp	r2, #0
  4028d8:	d038      	beq.n	40294c <__swsetup_r+0x84>
  4028da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4028de:	b293      	uxth	r3, r2
  4028e0:	0718      	lsls	r0, r3, #28
  4028e2:	d50c      	bpl.n	4028fe <__swsetup_r+0x36>
  4028e4:	6920      	ldr	r0, [r4, #16]
  4028e6:	b1a8      	cbz	r0, 402914 <__swsetup_r+0x4c>
  4028e8:	f013 0201 	ands.w	r2, r3, #1
  4028ec:	d01e      	beq.n	40292c <__swsetup_r+0x64>
  4028ee:	6963      	ldr	r3, [r4, #20]
  4028f0:	2200      	movs	r2, #0
  4028f2:	425b      	negs	r3, r3
  4028f4:	61a3      	str	r3, [r4, #24]
  4028f6:	60a2      	str	r2, [r4, #8]
  4028f8:	b1f0      	cbz	r0, 402938 <__swsetup_r+0x70>
  4028fa:	2000      	movs	r0, #0
  4028fc:	bd38      	pop	{r3, r4, r5, pc}
  4028fe:	06d9      	lsls	r1, r3, #27
  402900:	d53c      	bpl.n	40297c <__swsetup_r+0xb4>
  402902:	0758      	lsls	r0, r3, #29
  402904:	d426      	bmi.n	402954 <__swsetup_r+0x8c>
  402906:	6920      	ldr	r0, [r4, #16]
  402908:	f042 0308 	orr.w	r3, r2, #8
  40290c:	81a3      	strh	r3, [r4, #12]
  40290e:	b29b      	uxth	r3, r3
  402910:	2800      	cmp	r0, #0
  402912:	d1e9      	bne.n	4028e8 <__swsetup_r+0x20>
  402914:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402918:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40291c:	d0e4      	beq.n	4028e8 <__swsetup_r+0x20>
  40291e:	4628      	mov	r0, r5
  402920:	4621      	mov	r1, r4
  402922:	f000 fd37 	bl	403394 <__smakebuf_r>
  402926:	89a3      	ldrh	r3, [r4, #12]
  402928:	6920      	ldr	r0, [r4, #16]
  40292a:	e7dd      	b.n	4028e8 <__swsetup_r+0x20>
  40292c:	0799      	lsls	r1, r3, #30
  40292e:	bf58      	it	pl
  402930:	6962      	ldrpl	r2, [r4, #20]
  402932:	60a2      	str	r2, [r4, #8]
  402934:	2800      	cmp	r0, #0
  402936:	d1e0      	bne.n	4028fa <__swsetup_r+0x32>
  402938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40293c:	061a      	lsls	r2, r3, #24
  40293e:	d5dd      	bpl.n	4028fc <__swsetup_r+0x34>
  402940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402944:	81a3      	strh	r3, [r4, #12]
  402946:	f04f 30ff 	mov.w	r0, #4294967295
  40294a:	bd38      	pop	{r3, r4, r5, pc}
  40294c:	4618      	mov	r0, r3
  40294e:	f000 f92f 	bl	402bb0 <__sinit>
  402952:	e7c2      	b.n	4028da <__swsetup_r+0x12>
  402954:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402956:	b151      	cbz	r1, 40296e <__swsetup_r+0xa6>
  402958:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40295c:	4299      	cmp	r1, r3
  40295e:	d004      	beq.n	40296a <__swsetup_r+0xa2>
  402960:	4628      	mov	r0, r5
  402962:	f000 fa4b 	bl	402dfc <_free_r>
  402966:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40296a:	2300      	movs	r3, #0
  40296c:	6323      	str	r3, [r4, #48]	; 0x30
  40296e:	2300      	movs	r3, #0
  402970:	6920      	ldr	r0, [r4, #16]
  402972:	6063      	str	r3, [r4, #4]
  402974:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402978:	6020      	str	r0, [r4, #0]
  40297a:	e7c5      	b.n	402908 <__swsetup_r+0x40>
  40297c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402980:	2309      	movs	r3, #9
  402982:	602b      	str	r3, [r5, #0]
  402984:	f04f 30ff 	mov.w	r0, #4294967295
  402988:	81a2      	strh	r2, [r4, #12]
  40298a:	bd38      	pop	{r3, r4, r5, pc}
  40298c:	20400014 	.word	0x20400014

00402990 <register_fini>:
  402990:	4b02      	ldr	r3, [pc, #8]	; (40299c <register_fini+0xc>)
  402992:	b113      	cbz	r3, 40299a <register_fini+0xa>
  402994:	4802      	ldr	r0, [pc, #8]	; (4029a0 <register_fini+0x10>)
  402996:	f000 b80d 	b.w	4029b4 <atexit>
  40299a:	4770      	bx	lr
  40299c:	00000000 	.word	0x00000000
  4029a0:	00402c21 	.word	0x00402c21

004029a4 <abort>:
  4029a4:	b508      	push	{r3, lr}
  4029a6:	2006      	movs	r0, #6
  4029a8:	f001 faba 	bl	403f20 <raise>
  4029ac:	2001      	movs	r0, #1
  4029ae:	f7fe fe6d 	bl	40168c <_exit>
  4029b2:	bf00      	nop

004029b4 <atexit>:
  4029b4:	2300      	movs	r3, #0
  4029b6:	4601      	mov	r1, r0
  4029b8:	461a      	mov	r2, r3
  4029ba:	4618      	mov	r0, r3
  4029bc:	f001 bc34 	b.w	404228 <__register_exitproc>

004029c0 <__sflush_r>:
  4029c0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4029c4:	b29a      	uxth	r2, r3
  4029c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4029ca:	460d      	mov	r5, r1
  4029cc:	0711      	lsls	r1, r2, #28
  4029ce:	4680      	mov	r8, r0
  4029d0:	d43a      	bmi.n	402a48 <__sflush_r+0x88>
  4029d2:	686a      	ldr	r2, [r5, #4]
  4029d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4029d8:	2a00      	cmp	r2, #0
  4029da:	81ab      	strh	r3, [r5, #12]
  4029dc:	dd6f      	ble.n	402abe <__sflush_r+0xfe>
  4029de:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4029e0:	2c00      	cmp	r4, #0
  4029e2:	d049      	beq.n	402a78 <__sflush_r+0xb8>
  4029e4:	2200      	movs	r2, #0
  4029e6:	b29b      	uxth	r3, r3
  4029e8:	f8d8 6000 	ldr.w	r6, [r8]
  4029ec:	f8c8 2000 	str.w	r2, [r8]
  4029f0:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4029f4:	d067      	beq.n	402ac6 <__sflush_r+0x106>
  4029f6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4029f8:	075f      	lsls	r7, r3, #29
  4029fa:	d505      	bpl.n	402a08 <__sflush_r+0x48>
  4029fc:	6869      	ldr	r1, [r5, #4]
  4029fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402a00:	1a52      	subs	r2, r2, r1
  402a02:	b10b      	cbz	r3, 402a08 <__sflush_r+0x48>
  402a04:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402a06:	1ad2      	subs	r2, r2, r3
  402a08:	2300      	movs	r3, #0
  402a0a:	69e9      	ldr	r1, [r5, #28]
  402a0c:	4640      	mov	r0, r8
  402a0e:	47a0      	blx	r4
  402a10:	1c44      	adds	r4, r0, #1
  402a12:	d03c      	beq.n	402a8e <__sflush_r+0xce>
  402a14:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402a18:	692a      	ldr	r2, [r5, #16]
  402a1a:	602a      	str	r2, [r5, #0]
  402a1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402a20:	2200      	movs	r2, #0
  402a22:	81ab      	strh	r3, [r5, #12]
  402a24:	04db      	lsls	r3, r3, #19
  402a26:	606a      	str	r2, [r5, #4]
  402a28:	d447      	bmi.n	402aba <__sflush_r+0xfa>
  402a2a:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402a2c:	f8c8 6000 	str.w	r6, [r8]
  402a30:	b311      	cbz	r1, 402a78 <__sflush_r+0xb8>
  402a32:	f105 0340 	add.w	r3, r5, #64	; 0x40
  402a36:	4299      	cmp	r1, r3
  402a38:	d002      	beq.n	402a40 <__sflush_r+0x80>
  402a3a:	4640      	mov	r0, r8
  402a3c:	f000 f9de 	bl	402dfc <_free_r>
  402a40:	2000      	movs	r0, #0
  402a42:	6328      	str	r0, [r5, #48]	; 0x30
  402a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402a48:	692e      	ldr	r6, [r5, #16]
  402a4a:	b1ae      	cbz	r6, 402a78 <__sflush_r+0xb8>
  402a4c:	682c      	ldr	r4, [r5, #0]
  402a4e:	602e      	str	r6, [r5, #0]
  402a50:	0791      	lsls	r1, r2, #30
  402a52:	bf0c      	ite	eq
  402a54:	696b      	ldreq	r3, [r5, #20]
  402a56:	2300      	movne	r3, #0
  402a58:	1ba4      	subs	r4, r4, r6
  402a5a:	60ab      	str	r3, [r5, #8]
  402a5c:	e00a      	b.n	402a74 <__sflush_r+0xb4>
  402a5e:	4623      	mov	r3, r4
  402a60:	4632      	mov	r2, r6
  402a62:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402a64:	69e9      	ldr	r1, [r5, #28]
  402a66:	4640      	mov	r0, r8
  402a68:	47b8      	blx	r7
  402a6a:	2800      	cmp	r0, #0
  402a6c:	eba4 0400 	sub.w	r4, r4, r0
  402a70:	4406      	add	r6, r0
  402a72:	dd04      	ble.n	402a7e <__sflush_r+0xbe>
  402a74:	2c00      	cmp	r4, #0
  402a76:	dcf2      	bgt.n	402a5e <__sflush_r+0x9e>
  402a78:	2000      	movs	r0, #0
  402a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402a7e:	89ab      	ldrh	r3, [r5, #12]
  402a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402a84:	81ab      	strh	r3, [r5, #12]
  402a86:	f04f 30ff 	mov.w	r0, #4294967295
  402a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402a8e:	f8d8 4000 	ldr.w	r4, [r8]
  402a92:	2c1d      	cmp	r4, #29
  402a94:	d8f3      	bhi.n	402a7e <__sflush_r+0xbe>
  402a96:	4b19      	ldr	r3, [pc, #100]	; (402afc <__sflush_r+0x13c>)
  402a98:	40e3      	lsrs	r3, r4
  402a9a:	43db      	mvns	r3, r3
  402a9c:	f013 0301 	ands.w	r3, r3, #1
  402aa0:	d1ed      	bne.n	402a7e <__sflush_r+0xbe>
  402aa2:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  402aa6:	606b      	str	r3, [r5, #4]
  402aa8:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402aac:	6929      	ldr	r1, [r5, #16]
  402aae:	81ab      	strh	r3, [r5, #12]
  402ab0:	04da      	lsls	r2, r3, #19
  402ab2:	6029      	str	r1, [r5, #0]
  402ab4:	d5b9      	bpl.n	402a2a <__sflush_r+0x6a>
  402ab6:	2c00      	cmp	r4, #0
  402ab8:	d1b7      	bne.n	402a2a <__sflush_r+0x6a>
  402aba:	6528      	str	r0, [r5, #80]	; 0x50
  402abc:	e7b5      	b.n	402a2a <__sflush_r+0x6a>
  402abe:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402ac0:	2a00      	cmp	r2, #0
  402ac2:	dc8c      	bgt.n	4029de <__sflush_r+0x1e>
  402ac4:	e7d8      	b.n	402a78 <__sflush_r+0xb8>
  402ac6:	2301      	movs	r3, #1
  402ac8:	69e9      	ldr	r1, [r5, #28]
  402aca:	4640      	mov	r0, r8
  402acc:	47a0      	blx	r4
  402ace:	1c43      	adds	r3, r0, #1
  402ad0:	4602      	mov	r2, r0
  402ad2:	d002      	beq.n	402ada <__sflush_r+0x11a>
  402ad4:	89ab      	ldrh	r3, [r5, #12]
  402ad6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402ad8:	e78e      	b.n	4029f8 <__sflush_r+0x38>
  402ada:	f8d8 3000 	ldr.w	r3, [r8]
  402ade:	2b00      	cmp	r3, #0
  402ae0:	d0f8      	beq.n	402ad4 <__sflush_r+0x114>
  402ae2:	2b1d      	cmp	r3, #29
  402ae4:	d001      	beq.n	402aea <__sflush_r+0x12a>
  402ae6:	2b16      	cmp	r3, #22
  402ae8:	d102      	bne.n	402af0 <__sflush_r+0x130>
  402aea:	f8c8 6000 	str.w	r6, [r8]
  402aee:	e7c3      	b.n	402a78 <__sflush_r+0xb8>
  402af0:	89ab      	ldrh	r3, [r5, #12]
  402af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402af6:	81ab      	strh	r3, [r5, #12]
  402af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402afc:	20400001 	.word	0x20400001

00402b00 <_fflush_r>:
  402b00:	b538      	push	{r3, r4, r5, lr}
  402b02:	460d      	mov	r5, r1
  402b04:	4604      	mov	r4, r0
  402b06:	b108      	cbz	r0, 402b0c <_fflush_r+0xc>
  402b08:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402b0a:	b1bb      	cbz	r3, 402b3c <_fflush_r+0x3c>
  402b0c:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402b10:	b188      	cbz	r0, 402b36 <_fflush_r+0x36>
  402b12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402b14:	07db      	lsls	r3, r3, #31
  402b16:	d401      	bmi.n	402b1c <_fflush_r+0x1c>
  402b18:	0581      	lsls	r1, r0, #22
  402b1a:	d517      	bpl.n	402b4c <_fflush_r+0x4c>
  402b1c:	4620      	mov	r0, r4
  402b1e:	4629      	mov	r1, r5
  402b20:	f7ff ff4e 	bl	4029c0 <__sflush_r>
  402b24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402b26:	07da      	lsls	r2, r3, #31
  402b28:	4604      	mov	r4, r0
  402b2a:	d402      	bmi.n	402b32 <_fflush_r+0x32>
  402b2c:	89ab      	ldrh	r3, [r5, #12]
  402b2e:	059b      	lsls	r3, r3, #22
  402b30:	d507      	bpl.n	402b42 <_fflush_r+0x42>
  402b32:	4620      	mov	r0, r4
  402b34:	bd38      	pop	{r3, r4, r5, pc}
  402b36:	4604      	mov	r4, r0
  402b38:	4620      	mov	r0, r4
  402b3a:	bd38      	pop	{r3, r4, r5, pc}
  402b3c:	f000 f838 	bl	402bb0 <__sinit>
  402b40:	e7e4      	b.n	402b0c <_fflush_r+0xc>
  402b42:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402b44:	f000 fbf6 	bl	403334 <__retarget_lock_release_recursive>
  402b48:	4620      	mov	r0, r4
  402b4a:	bd38      	pop	{r3, r4, r5, pc}
  402b4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402b4e:	f000 fbef 	bl	403330 <__retarget_lock_acquire_recursive>
  402b52:	e7e3      	b.n	402b1c <_fflush_r+0x1c>

00402b54 <_cleanup_r>:
  402b54:	4901      	ldr	r1, [pc, #4]	; (402b5c <_cleanup_r+0x8>)
  402b56:	f000 bbaf 	b.w	4032b8 <_fwalk_reent>
  402b5a:	bf00      	nop
  402b5c:	00404311 	.word	0x00404311

00402b60 <std.isra.0>:
  402b60:	b510      	push	{r4, lr}
  402b62:	2300      	movs	r3, #0
  402b64:	4604      	mov	r4, r0
  402b66:	8181      	strh	r1, [r0, #12]
  402b68:	81c2      	strh	r2, [r0, #14]
  402b6a:	6003      	str	r3, [r0, #0]
  402b6c:	6043      	str	r3, [r0, #4]
  402b6e:	6083      	str	r3, [r0, #8]
  402b70:	6643      	str	r3, [r0, #100]	; 0x64
  402b72:	6103      	str	r3, [r0, #16]
  402b74:	6143      	str	r3, [r0, #20]
  402b76:	6183      	str	r3, [r0, #24]
  402b78:	4619      	mov	r1, r3
  402b7a:	2208      	movs	r2, #8
  402b7c:	305c      	adds	r0, #92	; 0x5c
  402b7e:	f7fe febb 	bl	4018f8 <memset>
  402b82:	4807      	ldr	r0, [pc, #28]	; (402ba0 <std.isra.0+0x40>)
  402b84:	4907      	ldr	r1, [pc, #28]	; (402ba4 <std.isra.0+0x44>)
  402b86:	4a08      	ldr	r2, [pc, #32]	; (402ba8 <std.isra.0+0x48>)
  402b88:	4b08      	ldr	r3, [pc, #32]	; (402bac <std.isra.0+0x4c>)
  402b8a:	6220      	str	r0, [r4, #32]
  402b8c:	61e4      	str	r4, [r4, #28]
  402b8e:	6261      	str	r1, [r4, #36]	; 0x24
  402b90:	62a2      	str	r2, [r4, #40]	; 0x28
  402b92:	62e3      	str	r3, [r4, #44]	; 0x2c
  402b94:	f104 0058 	add.w	r0, r4, #88	; 0x58
  402b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402b9c:	f000 bbc4 	b.w	403328 <__retarget_lock_init_recursive>
  402ba0:	00403f5d 	.word	0x00403f5d
  402ba4:	00403f81 	.word	0x00403f81
  402ba8:	00403fbd 	.word	0x00403fbd
  402bac:	00403fdd 	.word	0x00403fdd

00402bb0 <__sinit>:
  402bb0:	b510      	push	{r4, lr}
  402bb2:	4604      	mov	r4, r0
  402bb4:	4812      	ldr	r0, [pc, #72]	; (402c00 <__sinit+0x50>)
  402bb6:	f000 fbbb 	bl	403330 <__retarget_lock_acquire_recursive>
  402bba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402bbc:	b9d2      	cbnz	r2, 402bf4 <__sinit+0x44>
  402bbe:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  402bc2:	4810      	ldr	r0, [pc, #64]	; (402c04 <__sinit+0x54>)
  402bc4:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  402bc8:	2103      	movs	r1, #3
  402bca:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  402bce:	63e0      	str	r0, [r4, #60]	; 0x3c
  402bd0:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  402bd4:	6860      	ldr	r0, [r4, #4]
  402bd6:	2104      	movs	r1, #4
  402bd8:	f7ff ffc2 	bl	402b60 <std.isra.0>
  402bdc:	2201      	movs	r2, #1
  402bde:	2109      	movs	r1, #9
  402be0:	68a0      	ldr	r0, [r4, #8]
  402be2:	f7ff ffbd 	bl	402b60 <std.isra.0>
  402be6:	2202      	movs	r2, #2
  402be8:	2112      	movs	r1, #18
  402bea:	68e0      	ldr	r0, [r4, #12]
  402bec:	f7ff ffb8 	bl	402b60 <std.isra.0>
  402bf0:	2301      	movs	r3, #1
  402bf2:	63a3      	str	r3, [r4, #56]	; 0x38
  402bf4:	4802      	ldr	r0, [pc, #8]	; (402c00 <__sinit+0x50>)
  402bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402bfa:	f000 bb9b 	b.w	403334 <__retarget_lock_release_recursive>
  402bfe:	bf00      	nop
  402c00:	204014b4 	.word	0x204014b4
  402c04:	00402b55 	.word	0x00402b55

00402c08 <__sfp_lock_acquire>:
  402c08:	4801      	ldr	r0, [pc, #4]	; (402c10 <__sfp_lock_acquire+0x8>)
  402c0a:	f000 bb91 	b.w	403330 <__retarget_lock_acquire_recursive>
  402c0e:	bf00      	nop
  402c10:	204014c8 	.word	0x204014c8

00402c14 <__sfp_lock_release>:
  402c14:	4801      	ldr	r0, [pc, #4]	; (402c1c <__sfp_lock_release+0x8>)
  402c16:	f000 bb8d 	b.w	403334 <__retarget_lock_release_recursive>
  402c1a:	bf00      	nop
  402c1c:	204014c8 	.word	0x204014c8

00402c20 <__libc_fini_array>:
  402c20:	b538      	push	{r3, r4, r5, lr}
  402c22:	4c0a      	ldr	r4, [pc, #40]	; (402c4c <__libc_fini_array+0x2c>)
  402c24:	4d0a      	ldr	r5, [pc, #40]	; (402c50 <__libc_fini_array+0x30>)
  402c26:	1b64      	subs	r4, r4, r5
  402c28:	10a4      	asrs	r4, r4, #2
  402c2a:	d00a      	beq.n	402c42 <__libc_fini_array+0x22>
  402c2c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402c30:	3b01      	subs	r3, #1
  402c32:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402c36:	3c01      	subs	r4, #1
  402c38:	f855 3904 	ldr.w	r3, [r5], #-4
  402c3c:	4798      	blx	r3
  402c3e:	2c00      	cmp	r4, #0
  402c40:	d1f9      	bne.n	402c36 <__libc_fini_array+0x16>
  402c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402c46:	f002 b8d3 	b.w	404df0 <_fini>
  402c4a:	bf00      	nop
  402c4c:	00404e00 	.word	0x00404e00
  402c50:	00404dfc 	.word	0x00404dfc

00402c54 <__fputwc>:
  402c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402c58:	b082      	sub	sp, #8
  402c5a:	4680      	mov	r8, r0
  402c5c:	4689      	mov	r9, r1
  402c5e:	4614      	mov	r4, r2
  402c60:	f000 fb54 	bl	40330c <__locale_mb_cur_max>
  402c64:	2801      	cmp	r0, #1
  402c66:	d036      	beq.n	402cd6 <__fputwc+0x82>
  402c68:	464a      	mov	r2, r9
  402c6a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402c6e:	a901      	add	r1, sp, #4
  402c70:	4640      	mov	r0, r8
  402c72:	f001 fa8b 	bl	40418c <_wcrtomb_r>
  402c76:	1c42      	adds	r2, r0, #1
  402c78:	4606      	mov	r6, r0
  402c7a:	d025      	beq.n	402cc8 <__fputwc+0x74>
  402c7c:	b3a8      	cbz	r0, 402cea <__fputwc+0x96>
  402c7e:	f89d e004 	ldrb.w	lr, [sp, #4]
  402c82:	2500      	movs	r5, #0
  402c84:	f10d 0a04 	add.w	sl, sp, #4
  402c88:	e009      	b.n	402c9e <__fputwc+0x4a>
  402c8a:	6823      	ldr	r3, [r4, #0]
  402c8c:	1c5a      	adds	r2, r3, #1
  402c8e:	6022      	str	r2, [r4, #0]
  402c90:	f883 e000 	strb.w	lr, [r3]
  402c94:	3501      	adds	r5, #1
  402c96:	42b5      	cmp	r5, r6
  402c98:	d227      	bcs.n	402cea <__fputwc+0x96>
  402c9a:	f815 e00a 	ldrb.w	lr, [r5, sl]
  402c9e:	68a3      	ldr	r3, [r4, #8]
  402ca0:	3b01      	subs	r3, #1
  402ca2:	2b00      	cmp	r3, #0
  402ca4:	60a3      	str	r3, [r4, #8]
  402ca6:	daf0      	bge.n	402c8a <__fputwc+0x36>
  402ca8:	69a7      	ldr	r7, [r4, #24]
  402caa:	42bb      	cmp	r3, r7
  402cac:	4671      	mov	r1, lr
  402cae:	4622      	mov	r2, r4
  402cb0:	4640      	mov	r0, r8
  402cb2:	db02      	blt.n	402cba <__fputwc+0x66>
  402cb4:	f1be 0f0a 	cmp.w	lr, #10
  402cb8:	d1e7      	bne.n	402c8a <__fputwc+0x36>
  402cba:	f001 fa0f 	bl	4040dc <__swbuf_r>
  402cbe:	1c43      	adds	r3, r0, #1
  402cc0:	d1e8      	bne.n	402c94 <__fputwc+0x40>
  402cc2:	b002      	add	sp, #8
  402cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402cc8:	89a3      	ldrh	r3, [r4, #12]
  402cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402cce:	81a3      	strh	r3, [r4, #12]
  402cd0:	b002      	add	sp, #8
  402cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402cd6:	f109 33ff 	add.w	r3, r9, #4294967295
  402cda:	2bfe      	cmp	r3, #254	; 0xfe
  402cdc:	d8c4      	bhi.n	402c68 <__fputwc+0x14>
  402cde:	fa5f fe89 	uxtb.w	lr, r9
  402ce2:	4606      	mov	r6, r0
  402ce4:	f88d e004 	strb.w	lr, [sp, #4]
  402ce8:	e7cb      	b.n	402c82 <__fputwc+0x2e>
  402cea:	4648      	mov	r0, r9
  402cec:	b002      	add	sp, #8
  402cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402cf2:	bf00      	nop

00402cf4 <_fputwc_r>:
  402cf4:	b530      	push	{r4, r5, lr}
  402cf6:	6e53      	ldr	r3, [r2, #100]	; 0x64
  402cf8:	f013 0f01 	tst.w	r3, #1
  402cfc:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402d00:	4614      	mov	r4, r2
  402d02:	b083      	sub	sp, #12
  402d04:	4605      	mov	r5, r0
  402d06:	b29a      	uxth	r2, r3
  402d08:	d101      	bne.n	402d0e <_fputwc_r+0x1a>
  402d0a:	0590      	lsls	r0, r2, #22
  402d0c:	d51c      	bpl.n	402d48 <_fputwc_r+0x54>
  402d0e:	0490      	lsls	r0, r2, #18
  402d10:	d406      	bmi.n	402d20 <_fputwc_r+0x2c>
  402d12:	6e62      	ldr	r2, [r4, #100]	; 0x64
  402d14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402d18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402d1c:	81a3      	strh	r3, [r4, #12]
  402d1e:	6662      	str	r2, [r4, #100]	; 0x64
  402d20:	4628      	mov	r0, r5
  402d22:	4622      	mov	r2, r4
  402d24:	f7ff ff96 	bl	402c54 <__fputwc>
  402d28:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402d2a:	07da      	lsls	r2, r3, #31
  402d2c:	4605      	mov	r5, r0
  402d2e:	d402      	bmi.n	402d36 <_fputwc_r+0x42>
  402d30:	89a3      	ldrh	r3, [r4, #12]
  402d32:	059b      	lsls	r3, r3, #22
  402d34:	d502      	bpl.n	402d3c <_fputwc_r+0x48>
  402d36:	4628      	mov	r0, r5
  402d38:	b003      	add	sp, #12
  402d3a:	bd30      	pop	{r4, r5, pc}
  402d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402d3e:	f000 faf9 	bl	403334 <__retarget_lock_release_recursive>
  402d42:	4628      	mov	r0, r5
  402d44:	b003      	add	sp, #12
  402d46:	bd30      	pop	{r4, r5, pc}
  402d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402d4a:	9101      	str	r1, [sp, #4]
  402d4c:	f000 faf0 	bl	403330 <__retarget_lock_acquire_recursive>
  402d50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402d54:	9901      	ldr	r1, [sp, #4]
  402d56:	b29a      	uxth	r2, r3
  402d58:	e7d9      	b.n	402d0e <_fputwc_r+0x1a>
  402d5a:	bf00      	nop

00402d5c <_malloc_trim_r>:
  402d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402d5e:	4f24      	ldr	r7, [pc, #144]	; (402df0 <_malloc_trim_r+0x94>)
  402d60:	460c      	mov	r4, r1
  402d62:	4606      	mov	r6, r0
  402d64:	f000 fee8 	bl	403b38 <__malloc_lock>
  402d68:	68bb      	ldr	r3, [r7, #8]
  402d6a:	685d      	ldr	r5, [r3, #4]
  402d6c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402d70:	310f      	adds	r1, #15
  402d72:	f025 0503 	bic.w	r5, r5, #3
  402d76:	4429      	add	r1, r5
  402d78:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402d7c:	f021 010f 	bic.w	r1, r1, #15
  402d80:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  402d84:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402d88:	db07      	blt.n	402d9a <_malloc_trim_r+0x3e>
  402d8a:	2100      	movs	r1, #0
  402d8c:	4630      	mov	r0, r6
  402d8e:	f001 f885 	bl	403e9c <_sbrk_r>
  402d92:	68bb      	ldr	r3, [r7, #8]
  402d94:	442b      	add	r3, r5
  402d96:	4298      	cmp	r0, r3
  402d98:	d004      	beq.n	402da4 <_malloc_trim_r+0x48>
  402d9a:	4630      	mov	r0, r6
  402d9c:	f000 fed2 	bl	403b44 <__malloc_unlock>
  402da0:	2000      	movs	r0, #0
  402da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402da4:	4261      	negs	r1, r4
  402da6:	4630      	mov	r0, r6
  402da8:	f001 f878 	bl	403e9c <_sbrk_r>
  402dac:	3001      	adds	r0, #1
  402dae:	d00d      	beq.n	402dcc <_malloc_trim_r+0x70>
  402db0:	4b10      	ldr	r3, [pc, #64]	; (402df4 <_malloc_trim_r+0x98>)
  402db2:	68ba      	ldr	r2, [r7, #8]
  402db4:	6819      	ldr	r1, [r3, #0]
  402db6:	1b2d      	subs	r5, r5, r4
  402db8:	f045 0501 	orr.w	r5, r5, #1
  402dbc:	4630      	mov	r0, r6
  402dbe:	1b09      	subs	r1, r1, r4
  402dc0:	6055      	str	r5, [r2, #4]
  402dc2:	6019      	str	r1, [r3, #0]
  402dc4:	f000 febe 	bl	403b44 <__malloc_unlock>
  402dc8:	2001      	movs	r0, #1
  402dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402dcc:	2100      	movs	r1, #0
  402dce:	4630      	mov	r0, r6
  402dd0:	f001 f864 	bl	403e9c <_sbrk_r>
  402dd4:	68ba      	ldr	r2, [r7, #8]
  402dd6:	1a83      	subs	r3, r0, r2
  402dd8:	2b0f      	cmp	r3, #15
  402dda:	ddde      	ble.n	402d9a <_malloc_trim_r+0x3e>
  402ddc:	4c06      	ldr	r4, [pc, #24]	; (402df8 <_malloc_trim_r+0x9c>)
  402dde:	4905      	ldr	r1, [pc, #20]	; (402df4 <_malloc_trim_r+0x98>)
  402de0:	6824      	ldr	r4, [r4, #0]
  402de2:	f043 0301 	orr.w	r3, r3, #1
  402de6:	1b00      	subs	r0, r0, r4
  402de8:	6053      	str	r3, [r2, #4]
  402dea:	6008      	str	r0, [r1, #0]
  402dec:	e7d5      	b.n	402d9a <_malloc_trim_r+0x3e>
  402dee:	bf00      	nop
  402df0:	204005b0 	.word	0x204005b0
  402df4:	20401468 	.word	0x20401468
  402df8:	204009b8 	.word	0x204009b8

00402dfc <_free_r>:
  402dfc:	2900      	cmp	r1, #0
  402dfe:	d044      	beq.n	402e8a <_free_r+0x8e>
  402e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402e04:	460d      	mov	r5, r1
  402e06:	4680      	mov	r8, r0
  402e08:	f000 fe96 	bl	403b38 <__malloc_lock>
  402e0c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402e10:	4969      	ldr	r1, [pc, #420]	; (402fb8 <_free_r+0x1bc>)
  402e12:	f027 0301 	bic.w	r3, r7, #1
  402e16:	f1a5 0408 	sub.w	r4, r5, #8
  402e1a:	18e2      	adds	r2, r4, r3
  402e1c:	688e      	ldr	r6, [r1, #8]
  402e1e:	6850      	ldr	r0, [r2, #4]
  402e20:	42b2      	cmp	r2, r6
  402e22:	f020 0003 	bic.w	r0, r0, #3
  402e26:	d05e      	beq.n	402ee6 <_free_r+0xea>
  402e28:	07fe      	lsls	r6, r7, #31
  402e2a:	6050      	str	r0, [r2, #4]
  402e2c:	d40b      	bmi.n	402e46 <_free_r+0x4a>
  402e2e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  402e32:	1be4      	subs	r4, r4, r7
  402e34:	f101 0e08 	add.w	lr, r1, #8
  402e38:	68a5      	ldr	r5, [r4, #8]
  402e3a:	4575      	cmp	r5, lr
  402e3c:	443b      	add	r3, r7
  402e3e:	d06d      	beq.n	402f1c <_free_r+0x120>
  402e40:	68e7      	ldr	r7, [r4, #12]
  402e42:	60ef      	str	r7, [r5, #12]
  402e44:	60bd      	str	r5, [r7, #8]
  402e46:	1815      	adds	r5, r2, r0
  402e48:	686d      	ldr	r5, [r5, #4]
  402e4a:	07ed      	lsls	r5, r5, #31
  402e4c:	d53e      	bpl.n	402ecc <_free_r+0xd0>
  402e4e:	f043 0201 	orr.w	r2, r3, #1
  402e52:	6062      	str	r2, [r4, #4]
  402e54:	50e3      	str	r3, [r4, r3]
  402e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402e5a:	d217      	bcs.n	402e8c <_free_r+0x90>
  402e5c:	08db      	lsrs	r3, r3, #3
  402e5e:	1c58      	adds	r0, r3, #1
  402e60:	109a      	asrs	r2, r3, #2
  402e62:	684d      	ldr	r5, [r1, #4]
  402e64:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  402e68:	60a7      	str	r7, [r4, #8]
  402e6a:	2301      	movs	r3, #1
  402e6c:	4093      	lsls	r3, r2
  402e6e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  402e72:	432b      	orrs	r3, r5
  402e74:	3a08      	subs	r2, #8
  402e76:	60e2      	str	r2, [r4, #12]
  402e78:	604b      	str	r3, [r1, #4]
  402e7a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  402e7e:	60fc      	str	r4, [r7, #12]
  402e80:	4640      	mov	r0, r8
  402e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402e86:	f000 be5d 	b.w	403b44 <__malloc_unlock>
  402e8a:	4770      	bx	lr
  402e8c:	0a5a      	lsrs	r2, r3, #9
  402e8e:	2a04      	cmp	r2, #4
  402e90:	d852      	bhi.n	402f38 <_free_r+0x13c>
  402e92:	099a      	lsrs	r2, r3, #6
  402e94:	f102 0739 	add.w	r7, r2, #57	; 0x39
  402e98:	00ff      	lsls	r7, r7, #3
  402e9a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  402e9e:	19c8      	adds	r0, r1, r7
  402ea0:	59ca      	ldr	r2, [r1, r7]
  402ea2:	3808      	subs	r0, #8
  402ea4:	4290      	cmp	r0, r2
  402ea6:	d04f      	beq.n	402f48 <_free_r+0x14c>
  402ea8:	6851      	ldr	r1, [r2, #4]
  402eaa:	f021 0103 	bic.w	r1, r1, #3
  402eae:	428b      	cmp	r3, r1
  402eb0:	d232      	bcs.n	402f18 <_free_r+0x11c>
  402eb2:	6892      	ldr	r2, [r2, #8]
  402eb4:	4290      	cmp	r0, r2
  402eb6:	d1f7      	bne.n	402ea8 <_free_r+0xac>
  402eb8:	68c3      	ldr	r3, [r0, #12]
  402eba:	60a0      	str	r0, [r4, #8]
  402ebc:	60e3      	str	r3, [r4, #12]
  402ebe:	609c      	str	r4, [r3, #8]
  402ec0:	60c4      	str	r4, [r0, #12]
  402ec2:	4640      	mov	r0, r8
  402ec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402ec8:	f000 be3c 	b.w	403b44 <__malloc_unlock>
  402ecc:	6895      	ldr	r5, [r2, #8]
  402ece:	4f3b      	ldr	r7, [pc, #236]	; (402fbc <_free_r+0x1c0>)
  402ed0:	42bd      	cmp	r5, r7
  402ed2:	4403      	add	r3, r0
  402ed4:	d040      	beq.n	402f58 <_free_r+0x15c>
  402ed6:	68d0      	ldr	r0, [r2, #12]
  402ed8:	60e8      	str	r0, [r5, #12]
  402eda:	f043 0201 	orr.w	r2, r3, #1
  402ede:	6085      	str	r5, [r0, #8]
  402ee0:	6062      	str	r2, [r4, #4]
  402ee2:	50e3      	str	r3, [r4, r3]
  402ee4:	e7b7      	b.n	402e56 <_free_r+0x5a>
  402ee6:	07ff      	lsls	r7, r7, #31
  402ee8:	4403      	add	r3, r0
  402eea:	d407      	bmi.n	402efc <_free_r+0x100>
  402eec:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402ef0:	1aa4      	subs	r4, r4, r2
  402ef2:	4413      	add	r3, r2
  402ef4:	68a0      	ldr	r0, [r4, #8]
  402ef6:	68e2      	ldr	r2, [r4, #12]
  402ef8:	60c2      	str	r2, [r0, #12]
  402efa:	6090      	str	r0, [r2, #8]
  402efc:	4a30      	ldr	r2, [pc, #192]	; (402fc0 <_free_r+0x1c4>)
  402efe:	6812      	ldr	r2, [r2, #0]
  402f00:	f043 0001 	orr.w	r0, r3, #1
  402f04:	4293      	cmp	r3, r2
  402f06:	6060      	str	r0, [r4, #4]
  402f08:	608c      	str	r4, [r1, #8]
  402f0a:	d3b9      	bcc.n	402e80 <_free_r+0x84>
  402f0c:	4b2d      	ldr	r3, [pc, #180]	; (402fc4 <_free_r+0x1c8>)
  402f0e:	4640      	mov	r0, r8
  402f10:	6819      	ldr	r1, [r3, #0]
  402f12:	f7ff ff23 	bl	402d5c <_malloc_trim_r>
  402f16:	e7b3      	b.n	402e80 <_free_r+0x84>
  402f18:	4610      	mov	r0, r2
  402f1a:	e7cd      	b.n	402eb8 <_free_r+0xbc>
  402f1c:	1811      	adds	r1, r2, r0
  402f1e:	6849      	ldr	r1, [r1, #4]
  402f20:	07c9      	lsls	r1, r1, #31
  402f22:	d444      	bmi.n	402fae <_free_r+0x1b2>
  402f24:	6891      	ldr	r1, [r2, #8]
  402f26:	68d2      	ldr	r2, [r2, #12]
  402f28:	60ca      	str	r2, [r1, #12]
  402f2a:	4403      	add	r3, r0
  402f2c:	f043 0001 	orr.w	r0, r3, #1
  402f30:	6091      	str	r1, [r2, #8]
  402f32:	6060      	str	r0, [r4, #4]
  402f34:	50e3      	str	r3, [r4, r3]
  402f36:	e7a3      	b.n	402e80 <_free_r+0x84>
  402f38:	2a14      	cmp	r2, #20
  402f3a:	d816      	bhi.n	402f6a <_free_r+0x16e>
  402f3c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402f40:	00ff      	lsls	r7, r7, #3
  402f42:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  402f46:	e7aa      	b.n	402e9e <_free_r+0xa2>
  402f48:	10aa      	asrs	r2, r5, #2
  402f4a:	2301      	movs	r3, #1
  402f4c:	684d      	ldr	r5, [r1, #4]
  402f4e:	4093      	lsls	r3, r2
  402f50:	432b      	orrs	r3, r5
  402f52:	604b      	str	r3, [r1, #4]
  402f54:	4603      	mov	r3, r0
  402f56:	e7b0      	b.n	402eba <_free_r+0xbe>
  402f58:	f043 0201 	orr.w	r2, r3, #1
  402f5c:	614c      	str	r4, [r1, #20]
  402f5e:	610c      	str	r4, [r1, #16]
  402f60:	60e5      	str	r5, [r4, #12]
  402f62:	60a5      	str	r5, [r4, #8]
  402f64:	6062      	str	r2, [r4, #4]
  402f66:	50e3      	str	r3, [r4, r3]
  402f68:	e78a      	b.n	402e80 <_free_r+0x84>
  402f6a:	2a54      	cmp	r2, #84	; 0x54
  402f6c:	d806      	bhi.n	402f7c <_free_r+0x180>
  402f6e:	0b1a      	lsrs	r2, r3, #12
  402f70:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  402f74:	00ff      	lsls	r7, r7, #3
  402f76:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  402f7a:	e790      	b.n	402e9e <_free_r+0xa2>
  402f7c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402f80:	d806      	bhi.n	402f90 <_free_r+0x194>
  402f82:	0bda      	lsrs	r2, r3, #15
  402f84:	f102 0778 	add.w	r7, r2, #120	; 0x78
  402f88:	00ff      	lsls	r7, r7, #3
  402f8a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402f8e:	e786      	b.n	402e9e <_free_r+0xa2>
  402f90:	f240 5054 	movw	r0, #1364	; 0x554
  402f94:	4282      	cmp	r2, r0
  402f96:	d806      	bhi.n	402fa6 <_free_r+0x1aa>
  402f98:	0c9a      	lsrs	r2, r3, #18
  402f9a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  402f9e:	00ff      	lsls	r7, r7, #3
  402fa0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  402fa4:	e77b      	b.n	402e9e <_free_r+0xa2>
  402fa6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  402faa:	257e      	movs	r5, #126	; 0x7e
  402fac:	e777      	b.n	402e9e <_free_r+0xa2>
  402fae:	f043 0101 	orr.w	r1, r3, #1
  402fb2:	6061      	str	r1, [r4, #4]
  402fb4:	6013      	str	r3, [r2, #0]
  402fb6:	e763      	b.n	402e80 <_free_r+0x84>
  402fb8:	204005b0 	.word	0x204005b0
  402fbc:	204005b8 	.word	0x204005b8
  402fc0:	204009bc 	.word	0x204009bc
  402fc4:	20401498 	.word	0x20401498

00402fc8 <__sfvwrite_r>:
  402fc8:	6893      	ldr	r3, [r2, #8]
  402fca:	2b00      	cmp	r3, #0
  402fcc:	d073      	beq.n	4030b6 <__sfvwrite_r+0xee>
  402fce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402fd2:	898b      	ldrh	r3, [r1, #12]
  402fd4:	b083      	sub	sp, #12
  402fd6:	460c      	mov	r4, r1
  402fd8:	0719      	lsls	r1, r3, #28
  402fda:	9000      	str	r0, [sp, #0]
  402fdc:	4616      	mov	r6, r2
  402fde:	d526      	bpl.n	40302e <__sfvwrite_r+0x66>
  402fe0:	6922      	ldr	r2, [r4, #16]
  402fe2:	b322      	cbz	r2, 40302e <__sfvwrite_r+0x66>
  402fe4:	f013 0002 	ands.w	r0, r3, #2
  402fe8:	6835      	ldr	r5, [r6, #0]
  402fea:	d02c      	beq.n	403046 <__sfvwrite_r+0x7e>
  402fec:	f04f 0900 	mov.w	r9, #0
  402ff0:	4fb0      	ldr	r7, [pc, #704]	; (4032b4 <__sfvwrite_r+0x2ec>)
  402ff2:	46c8      	mov	r8, r9
  402ff4:	46b2      	mov	sl, r6
  402ff6:	45b8      	cmp	r8, r7
  402ff8:	4643      	mov	r3, r8
  402ffa:	464a      	mov	r2, r9
  402ffc:	bf28      	it	cs
  402ffe:	463b      	movcs	r3, r7
  403000:	9800      	ldr	r0, [sp, #0]
  403002:	f1b8 0f00 	cmp.w	r8, #0
  403006:	d050      	beq.n	4030aa <__sfvwrite_r+0xe2>
  403008:	69e1      	ldr	r1, [r4, #28]
  40300a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40300c:	47b0      	blx	r6
  40300e:	2800      	cmp	r0, #0
  403010:	dd58      	ble.n	4030c4 <__sfvwrite_r+0xfc>
  403012:	f8da 3008 	ldr.w	r3, [sl, #8]
  403016:	1a1b      	subs	r3, r3, r0
  403018:	4481      	add	r9, r0
  40301a:	eba8 0800 	sub.w	r8, r8, r0
  40301e:	f8ca 3008 	str.w	r3, [sl, #8]
  403022:	2b00      	cmp	r3, #0
  403024:	d1e7      	bne.n	402ff6 <__sfvwrite_r+0x2e>
  403026:	2000      	movs	r0, #0
  403028:	b003      	add	sp, #12
  40302a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40302e:	4621      	mov	r1, r4
  403030:	9800      	ldr	r0, [sp, #0]
  403032:	f7ff fc49 	bl	4028c8 <__swsetup_r>
  403036:	2800      	cmp	r0, #0
  403038:	f040 8133 	bne.w	4032a2 <__sfvwrite_r+0x2da>
  40303c:	89a3      	ldrh	r3, [r4, #12]
  40303e:	6835      	ldr	r5, [r6, #0]
  403040:	f013 0002 	ands.w	r0, r3, #2
  403044:	d1d2      	bne.n	402fec <__sfvwrite_r+0x24>
  403046:	f013 0901 	ands.w	r9, r3, #1
  40304a:	d145      	bne.n	4030d8 <__sfvwrite_r+0x110>
  40304c:	464f      	mov	r7, r9
  40304e:	9601      	str	r6, [sp, #4]
  403050:	b337      	cbz	r7, 4030a0 <__sfvwrite_r+0xd8>
  403052:	059a      	lsls	r2, r3, #22
  403054:	f8d4 8008 	ldr.w	r8, [r4, #8]
  403058:	f140 8083 	bpl.w	403162 <__sfvwrite_r+0x19a>
  40305c:	4547      	cmp	r7, r8
  40305e:	46c3      	mov	fp, r8
  403060:	f0c0 80ab 	bcc.w	4031ba <__sfvwrite_r+0x1f2>
  403064:	f413 6f90 	tst.w	r3, #1152	; 0x480
  403068:	f040 80ac 	bne.w	4031c4 <__sfvwrite_r+0x1fc>
  40306c:	6820      	ldr	r0, [r4, #0]
  40306e:	46ba      	mov	sl, r7
  403070:	465a      	mov	r2, fp
  403072:	4649      	mov	r1, r9
  403074:	f000 fcfc 	bl	403a70 <memmove>
  403078:	68a2      	ldr	r2, [r4, #8]
  40307a:	6823      	ldr	r3, [r4, #0]
  40307c:	eba2 0208 	sub.w	r2, r2, r8
  403080:	445b      	add	r3, fp
  403082:	60a2      	str	r2, [r4, #8]
  403084:	6023      	str	r3, [r4, #0]
  403086:	9a01      	ldr	r2, [sp, #4]
  403088:	6893      	ldr	r3, [r2, #8]
  40308a:	eba3 030a 	sub.w	r3, r3, sl
  40308e:	44d1      	add	r9, sl
  403090:	eba7 070a 	sub.w	r7, r7, sl
  403094:	6093      	str	r3, [r2, #8]
  403096:	2b00      	cmp	r3, #0
  403098:	d0c5      	beq.n	403026 <__sfvwrite_r+0x5e>
  40309a:	89a3      	ldrh	r3, [r4, #12]
  40309c:	2f00      	cmp	r7, #0
  40309e:	d1d8      	bne.n	403052 <__sfvwrite_r+0x8a>
  4030a0:	f8d5 9000 	ldr.w	r9, [r5]
  4030a4:	686f      	ldr	r7, [r5, #4]
  4030a6:	3508      	adds	r5, #8
  4030a8:	e7d2      	b.n	403050 <__sfvwrite_r+0x88>
  4030aa:	f8d5 9000 	ldr.w	r9, [r5]
  4030ae:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4030b2:	3508      	adds	r5, #8
  4030b4:	e79f      	b.n	402ff6 <__sfvwrite_r+0x2e>
  4030b6:	2000      	movs	r0, #0
  4030b8:	4770      	bx	lr
  4030ba:	4621      	mov	r1, r4
  4030bc:	9800      	ldr	r0, [sp, #0]
  4030be:	f7ff fd1f 	bl	402b00 <_fflush_r>
  4030c2:	b370      	cbz	r0, 403122 <__sfvwrite_r+0x15a>
  4030c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4030c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4030cc:	f04f 30ff 	mov.w	r0, #4294967295
  4030d0:	81a3      	strh	r3, [r4, #12]
  4030d2:	b003      	add	sp, #12
  4030d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4030d8:	4681      	mov	r9, r0
  4030da:	4633      	mov	r3, r6
  4030dc:	464e      	mov	r6, r9
  4030de:	46a8      	mov	r8, r5
  4030e0:	469a      	mov	sl, r3
  4030e2:	464d      	mov	r5, r9
  4030e4:	b34e      	cbz	r6, 40313a <__sfvwrite_r+0x172>
  4030e6:	b380      	cbz	r0, 40314a <__sfvwrite_r+0x182>
  4030e8:	6820      	ldr	r0, [r4, #0]
  4030ea:	6923      	ldr	r3, [r4, #16]
  4030ec:	6962      	ldr	r2, [r4, #20]
  4030ee:	45b1      	cmp	r9, r6
  4030f0:	46cb      	mov	fp, r9
  4030f2:	bf28      	it	cs
  4030f4:	46b3      	movcs	fp, r6
  4030f6:	4298      	cmp	r0, r3
  4030f8:	465f      	mov	r7, fp
  4030fa:	d904      	bls.n	403106 <__sfvwrite_r+0x13e>
  4030fc:	68a3      	ldr	r3, [r4, #8]
  4030fe:	4413      	add	r3, r2
  403100:	459b      	cmp	fp, r3
  403102:	f300 80a6 	bgt.w	403252 <__sfvwrite_r+0x28a>
  403106:	4593      	cmp	fp, r2
  403108:	db4b      	blt.n	4031a2 <__sfvwrite_r+0x1da>
  40310a:	4613      	mov	r3, r2
  40310c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40310e:	69e1      	ldr	r1, [r4, #28]
  403110:	9800      	ldr	r0, [sp, #0]
  403112:	462a      	mov	r2, r5
  403114:	47b8      	blx	r7
  403116:	1e07      	subs	r7, r0, #0
  403118:	ddd4      	ble.n	4030c4 <__sfvwrite_r+0xfc>
  40311a:	ebb9 0907 	subs.w	r9, r9, r7
  40311e:	d0cc      	beq.n	4030ba <__sfvwrite_r+0xf2>
  403120:	2001      	movs	r0, #1
  403122:	f8da 3008 	ldr.w	r3, [sl, #8]
  403126:	1bdb      	subs	r3, r3, r7
  403128:	443d      	add	r5, r7
  40312a:	1bf6      	subs	r6, r6, r7
  40312c:	f8ca 3008 	str.w	r3, [sl, #8]
  403130:	2b00      	cmp	r3, #0
  403132:	f43f af78 	beq.w	403026 <__sfvwrite_r+0x5e>
  403136:	2e00      	cmp	r6, #0
  403138:	d1d5      	bne.n	4030e6 <__sfvwrite_r+0x11e>
  40313a:	f108 0308 	add.w	r3, r8, #8
  40313e:	e913 0060 	ldmdb	r3, {r5, r6}
  403142:	4698      	mov	r8, r3
  403144:	3308      	adds	r3, #8
  403146:	2e00      	cmp	r6, #0
  403148:	d0f9      	beq.n	40313e <__sfvwrite_r+0x176>
  40314a:	4632      	mov	r2, r6
  40314c:	210a      	movs	r1, #10
  40314e:	4628      	mov	r0, r5
  403150:	f000 fc3e 	bl	4039d0 <memchr>
  403154:	2800      	cmp	r0, #0
  403156:	f000 80a1 	beq.w	40329c <__sfvwrite_r+0x2d4>
  40315a:	3001      	adds	r0, #1
  40315c:	eba0 0905 	sub.w	r9, r0, r5
  403160:	e7c2      	b.n	4030e8 <__sfvwrite_r+0x120>
  403162:	6820      	ldr	r0, [r4, #0]
  403164:	6923      	ldr	r3, [r4, #16]
  403166:	4298      	cmp	r0, r3
  403168:	d802      	bhi.n	403170 <__sfvwrite_r+0x1a8>
  40316a:	6963      	ldr	r3, [r4, #20]
  40316c:	429f      	cmp	r7, r3
  40316e:	d25d      	bcs.n	40322c <__sfvwrite_r+0x264>
  403170:	45b8      	cmp	r8, r7
  403172:	bf28      	it	cs
  403174:	46b8      	movcs	r8, r7
  403176:	4642      	mov	r2, r8
  403178:	4649      	mov	r1, r9
  40317a:	f000 fc79 	bl	403a70 <memmove>
  40317e:	68a3      	ldr	r3, [r4, #8]
  403180:	6822      	ldr	r2, [r4, #0]
  403182:	eba3 0308 	sub.w	r3, r3, r8
  403186:	4442      	add	r2, r8
  403188:	60a3      	str	r3, [r4, #8]
  40318a:	6022      	str	r2, [r4, #0]
  40318c:	b10b      	cbz	r3, 403192 <__sfvwrite_r+0x1ca>
  40318e:	46c2      	mov	sl, r8
  403190:	e779      	b.n	403086 <__sfvwrite_r+0xbe>
  403192:	4621      	mov	r1, r4
  403194:	9800      	ldr	r0, [sp, #0]
  403196:	f7ff fcb3 	bl	402b00 <_fflush_r>
  40319a:	2800      	cmp	r0, #0
  40319c:	d192      	bne.n	4030c4 <__sfvwrite_r+0xfc>
  40319e:	46c2      	mov	sl, r8
  4031a0:	e771      	b.n	403086 <__sfvwrite_r+0xbe>
  4031a2:	465a      	mov	r2, fp
  4031a4:	4629      	mov	r1, r5
  4031a6:	f000 fc63 	bl	403a70 <memmove>
  4031aa:	68a2      	ldr	r2, [r4, #8]
  4031ac:	6823      	ldr	r3, [r4, #0]
  4031ae:	eba2 020b 	sub.w	r2, r2, fp
  4031b2:	445b      	add	r3, fp
  4031b4:	60a2      	str	r2, [r4, #8]
  4031b6:	6023      	str	r3, [r4, #0]
  4031b8:	e7af      	b.n	40311a <__sfvwrite_r+0x152>
  4031ba:	6820      	ldr	r0, [r4, #0]
  4031bc:	46b8      	mov	r8, r7
  4031be:	46ba      	mov	sl, r7
  4031c0:	46bb      	mov	fp, r7
  4031c2:	e755      	b.n	403070 <__sfvwrite_r+0xa8>
  4031c4:	6962      	ldr	r2, [r4, #20]
  4031c6:	6820      	ldr	r0, [r4, #0]
  4031c8:	6921      	ldr	r1, [r4, #16]
  4031ca:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4031ce:	eba0 0a01 	sub.w	sl, r0, r1
  4031d2:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4031d6:	f10a 0001 	add.w	r0, sl, #1
  4031da:	ea4f 0868 	mov.w	r8, r8, asr #1
  4031de:	4438      	add	r0, r7
  4031e0:	4540      	cmp	r0, r8
  4031e2:	4642      	mov	r2, r8
  4031e4:	bf84      	itt	hi
  4031e6:	4680      	movhi	r8, r0
  4031e8:	4642      	movhi	r2, r8
  4031ea:	055b      	lsls	r3, r3, #21
  4031ec:	d544      	bpl.n	403278 <__sfvwrite_r+0x2b0>
  4031ee:	4611      	mov	r1, r2
  4031f0:	9800      	ldr	r0, [sp, #0]
  4031f2:	f000 f921 	bl	403438 <_malloc_r>
  4031f6:	4683      	mov	fp, r0
  4031f8:	2800      	cmp	r0, #0
  4031fa:	d055      	beq.n	4032a8 <__sfvwrite_r+0x2e0>
  4031fc:	4652      	mov	r2, sl
  4031fe:	6921      	ldr	r1, [r4, #16]
  403200:	f7fe fae0 	bl	4017c4 <memcpy>
  403204:	89a3      	ldrh	r3, [r4, #12]
  403206:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40320a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40320e:	81a3      	strh	r3, [r4, #12]
  403210:	eb0b 000a 	add.w	r0, fp, sl
  403214:	eba8 030a 	sub.w	r3, r8, sl
  403218:	f8c4 b010 	str.w	fp, [r4, #16]
  40321c:	f8c4 8014 	str.w	r8, [r4, #20]
  403220:	6020      	str	r0, [r4, #0]
  403222:	60a3      	str	r3, [r4, #8]
  403224:	46b8      	mov	r8, r7
  403226:	46ba      	mov	sl, r7
  403228:	46bb      	mov	fp, r7
  40322a:	e721      	b.n	403070 <__sfvwrite_r+0xa8>
  40322c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  403230:	42b9      	cmp	r1, r7
  403232:	bf28      	it	cs
  403234:	4639      	movcs	r1, r7
  403236:	464a      	mov	r2, r9
  403238:	fb91 f1f3 	sdiv	r1, r1, r3
  40323c:	9800      	ldr	r0, [sp, #0]
  40323e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403240:	fb03 f301 	mul.w	r3, r3, r1
  403244:	69e1      	ldr	r1, [r4, #28]
  403246:	47b0      	blx	r6
  403248:	f1b0 0a00 	subs.w	sl, r0, #0
  40324c:	f73f af1b 	bgt.w	403086 <__sfvwrite_r+0xbe>
  403250:	e738      	b.n	4030c4 <__sfvwrite_r+0xfc>
  403252:	461a      	mov	r2, r3
  403254:	4629      	mov	r1, r5
  403256:	9301      	str	r3, [sp, #4]
  403258:	f000 fc0a 	bl	403a70 <memmove>
  40325c:	6822      	ldr	r2, [r4, #0]
  40325e:	9b01      	ldr	r3, [sp, #4]
  403260:	9800      	ldr	r0, [sp, #0]
  403262:	441a      	add	r2, r3
  403264:	6022      	str	r2, [r4, #0]
  403266:	4621      	mov	r1, r4
  403268:	f7ff fc4a 	bl	402b00 <_fflush_r>
  40326c:	9b01      	ldr	r3, [sp, #4]
  40326e:	2800      	cmp	r0, #0
  403270:	f47f af28 	bne.w	4030c4 <__sfvwrite_r+0xfc>
  403274:	461f      	mov	r7, r3
  403276:	e750      	b.n	40311a <__sfvwrite_r+0x152>
  403278:	9800      	ldr	r0, [sp, #0]
  40327a:	f000 fc69 	bl	403b50 <_realloc_r>
  40327e:	4683      	mov	fp, r0
  403280:	2800      	cmp	r0, #0
  403282:	d1c5      	bne.n	403210 <__sfvwrite_r+0x248>
  403284:	9d00      	ldr	r5, [sp, #0]
  403286:	6921      	ldr	r1, [r4, #16]
  403288:	4628      	mov	r0, r5
  40328a:	f7ff fdb7 	bl	402dfc <_free_r>
  40328e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403292:	220c      	movs	r2, #12
  403294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  403298:	602a      	str	r2, [r5, #0]
  40329a:	e715      	b.n	4030c8 <__sfvwrite_r+0x100>
  40329c:	f106 0901 	add.w	r9, r6, #1
  4032a0:	e722      	b.n	4030e8 <__sfvwrite_r+0x120>
  4032a2:	f04f 30ff 	mov.w	r0, #4294967295
  4032a6:	e6bf      	b.n	403028 <__sfvwrite_r+0x60>
  4032a8:	9a00      	ldr	r2, [sp, #0]
  4032aa:	230c      	movs	r3, #12
  4032ac:	6013      	str	r3, [r2, #0]
  4032ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4032b2:	e709      	b.n	4030c8 <__sfvwrite_r+0x100>
  4032b4:	7ffffc00 	.word	0x7ffffc00

004032b8 <_fwalk_reent>:
  4032b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4032bc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4032c0:	d01f      	beq.n	403302 <_fwalk_reent+0x4a>
  4032c2:	4688      	mov	r8, r1
  4032c4:	4606      	mov	r6, r0
  4032c6:	f04f 0900 	mov.w	r9, #0
  4032ca:	687d      	ldr	r5, [r7, #4]
  4032cc:	68bc      	ldr	r4, [r7, #8]
  4032ce:	3d01      	subs	r5, #1
  4032d0:	d411      	bmi.n	4032f6 <_fwalk_reent+0x3e>
  4032d2:	89a3      	ldrh	r3, [r4, #12]
  4032d4:	2b01      	cmp	r3, #1
  4032d6:	f105 35ff 	add.w	r5, r5, #4294967295
  4032da:	d908      	bls.n	4032ee <_fwalk_reent+0x36>
  4032dc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4032e0:	3301      	adds	r3, #1
  4032e2:	4621      	mov	r1, r4
  4032e4:	4630      	mov	r0, r6
  4032e6:	d002      	beq.n	4032ee <_fwalk_reent+0x36>
  4032e8:	47c0      	blx	r8
  4032ea:	ea49 0900 	orr.w	r9, r9, r0
  4032ee:	1c6b      	adds	r3, r5, #1
  4032f0:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4032f4:	d1ed      	bne.n	4032d2 <_fwalk_reent+0x1a>
  4032f6:	683f      	ldr	r7, [r7, #0]
  4032f8:	2f00      	cmp	r7, #0
  4032fa:	d1e6      	bne.n	4032ca <_fwalk_reent+0x12>
  4032fc:	4648      	mov	r0, r9
  4032fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403302:	46b9      	mov	r9, r7
  403304:	4648      	mov	r0, r9
  403306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40330a:	bf00      	nop

0040330c <__locale_mb_cur_max>:
  40330c:	4b04      	ldr	r3, [pc, #16]	; (403320 <__locale_mb_cur_max+0x14>)
  40330e:	4a05      	ldr	r2, [pc, #20]	; (403324 <__locale_mb_cur_max+0x18>)
  403310:	681b      	ldr	r3, [r3, #0]
  403312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  403314:	2b00      	cmp	r3, #0
  403316:	bf08      	it	eq
  403318:	4613      	moveq	r3, r2
  40331a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40331e:	4770      	bx	lr
  403320:	20400014 	.word	0x20400014
  403324:	20400444 	.word	0x20400444

00403328 <__retarget_lock_init_recursive>:
  403328:	4770      	bx	lr
  40332a:	bf00      	nop

0040332c <__retarget_lock_close_recursive>:
  40332c:	4770      	bx	lr
  40332e:	bf00      	nop

00403330 <__retarget_lock_acquire_recursive>:
  403330:	4770      	bx	lr
  403332:	bf00      	nop

00403334 <__retarget_lock_release_recursive>:
  403334:	4770      	bx	lr
  403336:	bf00      	nop

00403338 <__swhatbuf_r>:
  403338:	b570      	push	{r4, r5, r6, lr}
  40333a:	460c      	mov	r4, r1
  40333c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403340:	2900      	cmp	r1, #0
  403342:	b090      	sub	sp, #64	; 0x40
  403344:	4615      	mov	r5, r2
  403346:	461e      	mov	r6, r3
  403348:	db14      	blt.n	403374 <__swhatbuf_r+0x3c>
  40334a:	aa01      	add	r2, sp, #4
  40334c:	f001 f842 	bl	4043d4 <_fstat_r>
  403350:	2800      	cmp	r0, #0
  403352:	db0f      	blt.n	403374 <__swhatbuf_r+0x3c>
  403354:	9a02      	ldr	r2, [sp, #8]
  403356:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40335a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40335e:	fab2 f282 	clz	r2, r2
  403362:	0952      	lsrs	r2, r2, #5
  403364:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403368:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40336c:	6032      	str	r2, [r6, #0]
  40336e:	602b      	str	r3, [r5, #0]
  403370:	b010      	add	sp, #64	; 0x40
  403372:	bd70      	pop	{r4, r5, r6, pc}
  403374:	89a2      	ldrh	r2, [r4, #12]
  403376:	2300      	movs	r3, #0
  403378:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40337c:	6033      	str	r3, [r6, #0]
  40337e:	d004      	beq.n	40338a <__swhatbuf_r+0x52>
  403380:	2240      	movs	r2, #64	; 0x40
  403382:	4618      	mov	r0, r3
  403384:	602a      	str	r2, [r5, #0]
  403386:	b010      	add	sp, #64	; 0x40
  403388:	bd70      	pop	{r4, r5, r6, pc}
  40338a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40338e:	602b      	str	r3, [r5, #0]
  403390:	b010      	add	sp, #64	; 0x40
  403392:	bd70      	pop	{r4, r5, r6, pc}

00403394 <__smakebuf_r>:
  403394:	898a      	ldrh	r2, [r1, #12]
  403396:	0792      	lsls	r2, r2, #30
  403398:	460b      	mov	r3, r1
  40339a:	d506      	bpl.n	4033aa <__smakebuf_r+0x16>
  40339c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4033a0:	2101      	movs	r1, #1
  4033a2:	601a      	str	r2, [r3, #0]
  4033a4:	611a      	str	r2, [r3, #16]
  4033a6:	6159      	str	r1, [r3, #20]
  4033a8:	4770      	bx	lr
  4033aa:	b5f0      	push	{r4, r5, r6, r7, lr}
  4033ac:	b083      	sub	sp, #12
  4033ae:	ab01      	add	r3, sp, #4
  4033b0:	466a      	mov	r2, sp
  4033b2:	460c      	mov	r4, r1
  4033b4:	4606      	mov	r6, r0
  4033b6:	f7ff ffbf 	bl	403338 <__swhatbuf_r>
  4033ba:	9900      	ldr	r1, [sp, #0]
  4033bc:	4605      	mov	r5, r0
  4033be:	4630      	mov	r0, r6
  4033c0:	f000 f83a 	bl	403438 <_malloc_r>
  4033c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4033c8:	b1d8      	cbz	r0, 403402 <__smakebuf_r+0x6e>
  4033ca:	9a01      	ldr	r2, [sp, #4]
  4033cc:	4f15      	ldr	r7, [pc, #84]	; (403424 <__smakebuf_r+0x90>)
  4033ce:	9900      	ldr	r1, [sp, #0]
  4033d0:	63f7      	str	r7, [r6, #60]	; 0x3c
  4033d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4033d6:	81a3      	strh	r3, [r4, #12]
  4033d8:	6020      	str	r0, [r4, #0]
  4033da:	6120      	str	r0, [r4, #16]
  4033dc:	6161      	str	r1, [r4, #20]
  4033de:	b91a      	cbnz	r2, 4033e8 <__smakebuf_r+0x54>
  4033e0:	432b      	orrs	r3, r5
  4033e2:	81a3      	strh	r3, [r4, #12]
  4033e4:	b003      	add	sp, #12
  4033e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4033e8:	4630      	mov	r0, r6
  4033ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4033ee:	f001 f805 	bl	4043fc <_isatty_r>
  4033f2:	b1a0      	cbz	r0, 40341e <__smakebuf_r+0x8a>
  4033f4:	89a3      	ldrh	r3, [r4, #12]
  4033f6:	f023 0303 	bic.w	r3, r3, #3
  4033fa:	f043 0301 	orr.w	r3, r3, #1
  4033fe:	b21b      	sxth	r3, r3
  403400:	e7ee      	b.n	4033e0 <__smakebuf_r+0x4c>
  403402:	059a      	lsls	r2, r3, #22
  403404:	d4ee      	bmi.n	4033e4 <__smakebuf_r+0x50>
  403406:	f023 0303 	bic.w	r3, r3, #3
  40340a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40340e:	f043 0302 	orr.w	r3, r3, #2
  403412:	2101      	movs	r1, #1
  403414:	81a3      	strh	r3, [r4, #12]
  403416:	6022      	str	r2, [r4, #0]
  403418:	6122      	str	r2, [r4, #16]
  40341a:	6161      	str	r1, [r4, #20]
  40341c:	e7e2      	b.n	4033e4 <__smakebuf_r+0x50>
  40341e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403422:	e7dd      	b.n	4033e0 <__smakebuf_r+0x4c>
  403424:	00402b55 	.word	0x00402b55

00403428 <malloc>:
  403428:	4b02      	ldr	r3, [pc, #8]	; (403434 <malloc+0xc>)
  40342a:	4601      	mov	r1, r0
  40342c:	6818      	ldr	r0, [r3, #0]
  40342e:	f000 b803 	b.w	403438 <_malloc_r>
  403432:	bf00      	nop
  403434:	20400014 	.word	0x20400014

00403438 <_malloc_r>:
  403438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40343c:	f101 060b 	add.w	r6, r1, #11
  403440:	2e16      	cmp	r6, #22
  403442:	b083      	sub	sp, #12
  403444:	4605      	mov	r5, r0
  403446:	f240 809e 	bls.w	403586 <_malloc_r+0x14e>
  40344a:	f036 0607 	bics.w	r6, r6, #7
  40344e:	f100 80bd 	bmi.w	4035cc <_malloc_r+0x194>
  403452:	42b1      	cmp	r1, r6
  403454:	f200 80ba 	bhi.w	4035cc <_malloc_r+0x194>
  403458:	f000 fb6e 	bl	403b38 <__malloc_lock>
  40345c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403460:	f0c0 8293 	bcc.w	40398a <_malloc_r+0x552>
  403464:	0a73      	lsrs	r3, r6, #9
  403466:	f000 80b8 	beq.w	4035da <_malloc_r+0x1a2>
  40346a:	2b04      	cmp	r3, #4
  40346c:	f200 8179 	bhi.w	403762 <_malloc_r+0x32a>
  403470:	09b3      	lsrs	r3, r6, #6
  403472:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403476:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40347a:	00c3      	lsls	r3, r0, #3
  40347c:	4fbf      	ldr	r7, [pc, #764]	; (40377c <_malloc_r+0x344>)
  40347e:	443b      	add	r3, r7
  403480:	f1a3 0108 	sub.w	r1, r3, #8
  403484:	685c      	ldr	r4, [r3, #4]
  403486:	42a1      	cmp	r1, r4
  403488:	d106      	bne.n	403498 <_malloc_r+0x60>
  40348a:	e00c      	b.n	4034a6 <_malloc_r+0x6e>
  40348c:	2a00      	cmp	r2, #0
  40348e:	f280 80aa 	bge.w	4035e6 <_malloc_r+0x1ae>
  403492:	68e4      	ldr	r4, [r4, #12]
  403494:	42a1      	cmp	r1, r4
  403496:	d006      	beq.n	4034a6 <_malloc_r+0x6e>
  403498:	6863      	ldr	r3, [r4, #4]
  40349a:	f023 0303 	bic.w	r3, r3, #3
  40349e:	1b9a      	subs	r2, r3, r6
  4034a0:	2a0f      	cmp	r2, #15
  4034a2:	ddf3      	ble.n	40348c <_malloc_r+0x54>
  4034a4:	4670      	mov	r0, lr
  4034a6:	693c      	ldr	r4, [r7, #16]
  4034a8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403790 <_malloc_r+0x358>
  4034ac:	4574      	cmp	r4, lr
  4034ae:	f000 81ab 	beq.w	403808 <_malloc_r+0x3d0>
  4034b2:	6863      	ldr	r3, [r4, #4]
  4034b4:	f023 0303 	bic.w	r3, r3, #3
  4034b8:	1b9a      	subs	r2, r3, r6
  4034ba:	2a0f      	cmp	r2, #15
  4034bc:	f300 8190 	bgt.w	4037e0 <_malloc_r+0x3a8>
  4034c0:	2a00      	cmp	r2, #0
  4034c2:	f8c7 e014 	str.w	lr, [r7, #20]
  4034c6:	f8c7 e010 	str.w	lr, [r7, #16]
  4034ca:	f280 809d 	bge.w	403608 <_malloc_r+0x1d0>
  4034ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4034d2:	f080 8161 	bcs.w	403798 <_malloc_r+0x360>
  4034d6:	08db      	lsrs	r3, r3, #3
  4034d8:	f103 0c01 	add.w	ip, r3, #1
  4034dc:	1099      	asrs	r1, r3, #2
  4034de:	687a      	ldr	r2, [r7, #4]
  4034e0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4034e4:	f8c4 8008 	str.w	r8, [r4, #8]
  4034e8:	2301      	movs	r3, #1
  4034ea:	408b      	lsls	r3, r1
  4034ec:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4034f0:	4313      	orrs	r3, r2
  4034f2:	3908      	subs	r1, #8
  4034f4:	60e1      	str	r1, [r4, #12]
  4034f6:	607b      	str	r3, [r7, #4]
  4034f8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4034fc:	f8c8 400c 	str.w	r4, [r8, #12]
  403500:	1082      	asrs	r2, r0, #2
  403502:	2401      	movs	r4, #1
  403504:	4094      	lsls	r4, r2
  403506:	429c      	cmp	r4, r3
  403508:	f200 808b 	bhi.w	403622 <_malloc_r+0x1ea>
  40350c:	421c      	tst	r4, r3
  40350e:	d106      	bne.n	40351e <_malloc_r+0xe6>
  403510:	f020 0003 	bic.w	r0, r0, #3
  403514:	0064      	lsls	r4, r4, #1
  403516:	421c      	tst	r4, r3
  403518:	f100 0004 	add.w	r0, r0, #4
  40351c:	d0fa      	beq.n	403514 <_malloc_r+0xdc>
  40351e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403522:	46cc      	mov	ip, r9
  403524:	4680      	mov	r8, r0
  403526:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40352a:	459c      	cmp	ip, r3
  40352c:	d107      	bne.n	40353e <_malloc_r+0x106>
  40352e:	e16d      	b.n	40380c <_malloc_r+0x3d4>
  403530:	2a00      	cmp	r2, #0
  403532:	f280 817b 	bge.w	40382c <_malloc_r+0x3f4>
  403536:	68db      	ldr	r3, [r3, #12]
  403538:	459c      	cmp	ip, r3
  40353a:	f000 8167 	beq.w	40380c <_malloc_r+0x3d4>
  40353e:	6859      	ldr	r1, [r3, #4]
  403540:	f021 0103 	bic.w	r1, r1, #3
  403544:	1b8a      	subs	r2, r1, r6
  403546:	2a0f      	cmp	r2, #15
  403548:	ddf2      	ble.n	403530 <_malloc_r+0xf8>
  40354a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40354e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403552:	9300      	str	r3, [sp, #0]
  403554:	199c      	adds	r4, r3, r6
  403556:	4628      	mov	r0, r5
  403558:	f046 0601 	orr.w	r6, r6, #1
  40355c:	f042 0501 	orr.w	r5, r2, #1
  403560:	605e      	str	r6, [r3, #4]
  403562:	f8c8 c00c 	str.w	ip, [r8, #12]
  403566:	f8cc 8008 	str.w	r8, [ip, #8]
  40356a:	617c      	str	r4, [r7, #20]
  40356c:	613c      	str	r4, [r7, #16]
  40356e:	f8c4 e00c 	str.w	lr, [r4, #12]
  403572:	f8c4 e008 	str.w	lr, [r4, #8]
  403576:	6065      	str	r5, [r4, #4]
  403578:	505a      	str	r2, [r3, r1]
  40357a:	f000 fae3 	bl	403b44 <__malloc_unlock>
  40357e:	9b00      	ldr	r3, [sp, #0]
  403580:	f103 0408 	add.w	r4, r3, #8
  403584:	e01e      	b.n	4035c4 <_malloc_r+0x18c>
  403586:	2910      	cmp	r1, #16
  403588:	d820      	bhi.n	4035cc <_malloc_r+0x194>
  40358a:	f000 fad5 	bl	403b38 <__malloc_lock>
  40358e:	2610      	movs	r6, #16
  403590:	2318      	movs	r3, #24
  403592:	2002      	movs	r0, #2
  403594:	4f79      	ldr	r7, [pc, #484]	; (40377c <_malloc_r+0x344>)
  403596:	443b      	add	r3, r7
  403598:	f1a3 0208 	sub.w	r2, r3, #8
  40359c:	685c      	ldr	r4, [r3, #4]
  40359e:	4294      	cmp	r4, r2
  4035a0:	f000 813d 	beq.w	40381e <_malloc_r+0x3e6>
  4035a4:	6863      	ldr	r3, [r4, #4]
  4035a6:	68e1      	ldr	r1, [r4, #12]
  4035a8:	68a6      	ldr	r6, [r4, #8]
  4035aa:	f023 0303 	bic.w	r3, r3, #3
  4035ae:	4423      	add	r3, r4
  4035b0:	4628      	mov	r0, r5
  4035b2:	685a      	ldr	r2, [r3, #4]
  4035b4:	60f1      	str	r1, [r6, #12]
  4035b6:	f042 0201 	orr.w	r2, r2, #1
  4035ba:	608e      	str	r6, [r1, #8]
  4035bc:	605a      	str	r2, [r3, #4]
  4035be:	f000 fac1 	bl	403b44 <__malloc_unlock>
  4035c2:	3408      	adds	r4, #8
  4035c4:	4620      	mov	r0, r4
  4035c6:	b003      	add	sp, #12
  4035c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035cc:	2400      	movs	r4, #0
  4035ce:	230c      	movs	r3, #12
  4035d0:	4620      	mov	r0, r4
  4035d2:	602b      	str	r3, [r5, #0]
  4035d4:	b003      	add	sp, #12
  4035d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035da:	2040      	movs	r0, #64	; 0x40
  4035dc:	f44f 7300 	mov.w	r3, #512	; 0x200
  4035e0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4035e4:	e74a      	b.n	40347c <_malloc_r+0x44>
  4035e6:	4423      	add	r3, r4
  4035e8:	68e1      	ldr	r1, [r4, #12]
  4035ea:	685a      	ldr	r2, [r3, #4]
  4035ec:	68a6      	ldr	r6, [r4, #8]
  4035ee:	f042 0201 	orr.w	r2, r2, #1
  4035f2:	60f1      	str	r1, [r6, #12]
  4035f4:	4628      	mov	r0, r5
  4035f6:	608e      	str	r6, [r1, #8]
  4035f8:	605a      	str	r2, [r3, #4]
  4035fa:	f000 faa3 	bl	403b44 <__malloc_unlock>
  4035fe:	3408      	adds	r4, #8
  403600:	4620      	mov	r0, r4
  403602:	b003      	add	sp, #12
  403604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403608:	4423      	add	r3, r4
  40360a:	4628      	mov	r0, r5
  40360c:	685a      	ldr	r2, [r3, #4]
  40360e:	f042 0201 	orr.w	r2, r2, #1
  403612:	605a      	str	r2, [r3, #4]
  403614:	f000 fa96 	bl	403b44 <__malloc_unlock>
  403618:	3408      	adds	r4, #8
  40361a:	4620      	mov	r0, r4
  40361c:	b003      	add	sp, #12
  40361e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403622:	68bc      	ldr	r4, [r7, #8]
  403624:	6863      	ldr	r3, [r4, #4]
  403626:	f023 0803 	bic.w	r8, r3, #3
  40362a:	45b0      	cmp	r8, r6
  40362c:	d304      	bcc.n	403638 <_malloc_r+0x200>
  40362e:	eba8 0306 	sub.w	r3, r8, r6
  403632:	2b0f      	cmp	r3, #15
  403634:	f300 8085 	bgt.w	403742 <_malloc_r+0x30a>
  403638:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403794 <_malloc_r+0x35c>
  40363c:	4b50      	ldr	r3, [pc, #320]	; (403780 <_malloc_r+0x348>)
  40363e:	f8d9 2000 	ldr.w	r2, [r9]
  403642:	681b      	ldr	r3, [r3, #0]
  403644:	3201      	adds	r2, #1
  403646:	4433      	add	r3, r6
  403648:	eb04 0a08 	add.w	sl, r4, r8
  40364c:	f000 8155 	beq.w	4038fa <_malloc_r+0x4c2>
  403650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403654:	330f      	adds	r3, #15
  403656:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40365a:	f02b 0b0f 	bic.w	fp, fp, #15
  40365e:	4659      	mov	r1, fp
  403660:	4628      	mov	r0, r5
  403662:	f000 fc1b 	bl	403e9c <_sbrk_r>
  403666:	1c41      	adds	r1, r0, #1
  403668:	4602      	mov	r2, r0
  40366a:	f000 80fc 	beq.w	403866 <_malloc_r+0x42e>
  40366e:	4582      	cmp	sl, r0
  403670:	f200 80f7 	bhi.w	403862 <_malloc_r+0x42a>
  403674:	4b43      	ldr	r3, [pc, #268]	; (403784 <_malloc_r+0x34c>)
  403676:	6819      	ldr	r1, [r3, #0]
  403678:	4459      	add	r1, fp
  40367a:	6019      	str	r1, [r3, #0]
  40367c:	f000 814d 	beq.w	40391a <_malloc_r+0x4e2>
  403680:	f8d9 0000 	ldr.w	r0, [r9]
  403684:	3001      	adds	r0, #1
  403686:	bf1b      	ittet	ne
  403688:	eba2 0a0a 	subne.w	sl, r2, sl
  40368c:	4451      	addne	r1, sl
  40368e:	f8c9 2000 	streq.w	r2, [r9]
  403692:	6019      	strne	r1, [r3, #0]
  403694:	f012 0107 	ands.w	r1, r2, #7
  403698:	f000 8115 	beq.w	4038c6 <_malloc_r+0x48e>
  40369c:	f1c1 0008 	rsb	r0, r1, #8
  4036a0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4036a4:	4402      	add	r2, r0
  4036a6:	3108      	adds	r1, #8
  4036a8:	eb02 090b 	add.w	r9, r2, fp
  4036ac:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4036b0:	eba1 0909 	sub.w	r9, r1, r9
  4036b4:	4649      	mov	r1, r9
  4036b6:	4628      	mov	r0, r5
  4036b8:	9301      	str	r3, [sp, #4]
  4036ba:	9200      	str	r2, [sp, #0]
  4036bc:	f000 fbee 	bl	403e9c <_sbrk_r>
  4036c0:	1c43      	adds	r3, r0, #1
  4036c2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4036c6:	f000 8143 	beq.w	403950 <_malloc_r+0x518>
  4036ca:	1a80      	subs	r0, r0, r2
  4036cc:	4448      	add	r0, r9
  4036ce:	f040 0001 	orr.w	r0, r0, #1
  4036d2:	6819      	ldr	r1, [r3, #0]
  4036d4:	60ba      	str	r2, [r7, #8]
  4036d6:	4449      	add	r1, r9
  4036d8:	42bc      	cmp	r4, r7
  4036da:	6050      	str	r0, [r2, #4]
  4036dc:	6019      	str	r1, [r3, #0]
  4036de:	d017      	beq.n	403710 <_malloc_r+0x2d8>
  4036e0:	f1b8 0f0f 	cmp.w	r8, #15
  4036e4:	f240 80fb 	bls.w	4038de <_malloc_r+0x4a6>
  4036e8:	6860      	ldr	r0, [r4, #4]
  4036ea:	f1a8 020c 	sub.w	r2, r8, #12
  4036ee:	f022 0207 	bic.w	r2, r2, #7
  4036f2:	eb04 0e02 	add.w	lr, r4, r2
  4036f6:	f000 0001 	and.w	r0, r0, #1
  4036fa:	f04f 0c05 	mov.w	ip, #5
  4036fe:	4310      	orrs	r0, r2
  403700:	2a0f      	cmp	r2, #15
  403702:	6060      	str	r0, [r4, #4]
  403704:	f8ce c004 	str.w	ip, [lr, #4]
  403708:	f8ce c008 	str.w	ip, [lr, #8]
  40370c:	f200 8117 	bhi.w	40393e <_malloc_r+0x506>
  403710:	4b1d      	ldr	r3, [pc, #116]	; (403788 <_malloc_r+0x350>)
  403712:	68bc      	ldr	r4, [r7, #8]
  403714:	681a      	ldr	r2, [r3, #0]
  403716:	4291      	cmp	r1, r2
  403718:	bf88      	it	hi
  40371a:	6019      	strhi	r1, [r3, #0]
  40371c:	4b1b      	ldr	r3, [pc, #108]	; (40378c <_malloc_r+0x354>)
  40371e:	681a      	ldr	r2, [r3, #0]
  403720:	4291      	cmp	r1, r2
  403722:	6862      	ldr	r2, [r4, #4]
  403724:	bf88      	it	hi
  403726:	6019      	strhi	r1, [r3, #0]
  403728:	f022 0203 	bic.w	r2, r2, #3
  40372c:	4296      	cmp	r6, r2
  40372e:	eba2 0306 	sub.w	r3, r2, r6
  403732:	d801      	bhi.n	403738 <_malloc_r+0x300>
  403734:	2b0f      	cmp	r3, #15
  403736:	dc04      	bgt.n	403742 <_malloc_r+0x30a>
  403738:	4628      	mov	r0, r5
  40373a:	f000 fa03 	bl	403b44 <__malloc_unlock>
  40373e:	2400      	movs	r4, #0
  403740:	e740      	b.n	4035c4 <_malloc_r+0x18c>
  403742:	19a2      	adds	r2, r4, r6
  403744:	f043 0301 	orr.w	r3, r3, #1
  403748:	f046 0601 	orr.w	r6, r6, #1
  40374c:	6066      	str	r6, [r4, #4]
  40374e:	4628      	mov	r0, r5
  403750:	60ba      	str	r2, [r7, #8]
  403752:	6053      	str	r3, [r2, #4]
  403754:	f000 f9f6 	bl	403b44 <__malloc_unlock>
  403758:	3408      	adds	r4, #8
  40375a:	4620      	mov	r0, r4
  40375c:	b003      	add	sp, #12
  40375e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403762:	2b14      	cmp	r3, #20
  403764:	d971      	bls.n	40384a <_malloc_r+0x412>
  403766:	2b54      	cmp	r3, #84	; 0x54
  403768:	f200 80a3 	bhi.w	4038b2 <_malloc_r+0x47a>
  40376c:	0b33      	lsrs	r3, r6, #12
  40376e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403772:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403776:	00c3      	lsls	r3, r0, #3
  403778:	e680      	b.n	40347c <_malloc_r+0x44>
  40377a:	bf00      	nop
  40377c:	204005b0 	.word	0x204005b0
  403780:	20401498 	.word	0x20401498
  403784:	20401468 	.word	0x20401468
  403788:	20401490 	.word	0x20401490
  40378c:	20401494 	.word	0x20401494
  403790:	204005b8 	.word	0x204005b8
  403794:	204009b8 	.word	0x204009b8
  403798:	0a5a      	lsrs	r2, r3, #9
  40379a:	2a04      	cmp	r2, #4
  40379c:	d95b      	bls.n	403856 <_malloc_r+0x41e>
  40379e:	2a14      	cmp	r2, #20
  4037a0:	f200 80ae 	bhi.w	403900 <_malloc_r+0x4c8>
  4037a4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4037a8:	00c9      	lsls	r1, r1, #3
  4037aa:	325b      	adds	r2, #91	; 0x5b
  4037ac:	eb07 0c01 	add.w	ip, r7, r1
  4037b0:	5879      	ldr	r1, [r7, r1]
  4037b2:	f1ac 0c08 	sub.w	ip, ip, #8
  4037b6:	458c      	cmp	ip, r1
  4037b8:	f000 8088 	beq.w	4038cc <_malloc_r+0x494>
  4037bc:	684a      	ldr	r2, [r1, #4]
  4037be:	f022 0203 	bic.w	r2, r2, #3
  4037c2:	4293      	cmp	r3, r2
  4037c4:	d273      	bcs.n	4038ae <_malloc_r+0x476>
  4037c6:	6889      	ldr	r1, [r1, #8]
  4037c8:	458c      	cmp	ip, r1
  4037ca:	d1f7      	bne.n	4037bc <_malloc_r+0x384>
  4037cc:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4037d0:	687b      	ldr	r3, [r7, #4]
  4037d2:	60e2      	str	r2, [r4, #12]
  4037d4:	f8c4 c008 	str.w	ip, [r4, #8]
  4037d8:	6094      	str	r4, [r2, #8]
  4037da:	f8cc 400c 	str.w	r4, [ip, #12]
  4037de:	e68f      	b.n	403500 <_malloc_r+0xc8>
  4037e0:	19a1      	adds	r1, r4, r6
  4037e2:	f046 0c01 	orr.w	ip, r6, #1
  4037e6:	f042 0601 	orr.w	r6, r2, #1
  4037ea:	f8c4 c004 	str.w	ip, [r4, #4]
  4037ee:	4628      	mov	r0, r5
  4037f0:	6179      	str	r1, [r7, #20]
  4037f2:	6139      	str	r1, [r7, #16]
  4037f4:	f8c1 e00c 	str.w	lr, [r1, #12]
  4037f8:	f8c1 e008 	str.w	lr, [r1, #8]
  4037fc:	604e      	str	r6, [r1, #4]
  4037fe:	50e2      	str	r2, [r4, r3]
  403800:	f000 f9a0 	bl	403b44 <__malloc_unlock>
  403804:	3408      	adds	r4, #8
  403806:	e6dd      	b.n	4035c4 <_malloc_r+0x18c>
  403808:	687b      	ldr	r3, [r7, #4]
  40380a:	e679      	b.n	403500 <_malloc_r+0xc8>
  40380c:	f108 0801 	add.w	r8, r8, #1
  403810:	f018 0f03 	tst.w	r8, #3
  403814:	f10c 0c08 	add.w	ip, ip, #8
  403818:	f47f ae85 	bne.w	403526 <_malloc_r+0xee>
  40381c:	e02d      	b.n	40387a <_malloc_r+0x442>
  40381e:	68dc      	ldr	r4, [r3, #12]
  403820:	42a3      	cmp	r3, r4
  403822:	bf08      	it	eq
  403824:	3002      	addeq	r0, #2
  403826:	f43f ae3e 	beq.w	4034a6 <_malloc_r+0x6e>
  40382a:	e6bb      	b.n	4035a4 <_malloc_r+0x16c>
  40382c:	4419      	add	r1, r3
  40382e:	461c      	mov	r4, r3
  403830:	684a      	ldr	r2, [r1, #4]
  403832:	68db      	ldr	r3, [r3, #12]
  403834:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403838:	f042 0201 	orr.w	r2, r2, #1
  40383c:	604a      	str	r2, [r1, #4]
  40383e:	4628      	mov	r0, r5
  403840:	60f3      	str	r3, [r6, #12]
  403842:	609e      	str	r6, [r3, #8]
  403844:	f000 f97e 	bl	403b44 <__malloc_unlock>
  403848:	e6bc      	b.n	4035c4 <_malloc_r+0x18c>
  40384a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40384e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403852:	00c3      	lsls	r3, r0, #3
  403854:	e612      	b.n	40347c <_malloc_r+0x44>
  403856:	099a      	lsrs	r2, r3, #6
  403858:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40385c:	00c9      	lsls	r1, r1, #3
  40385e:	3238      	adds	r2, #56	; 0x38
  403860:	e7a4      	b.n	4037ac <_malloc_r+0x374>
  403862:	42bc      	cmp	r4, r7
  403864:	d054      	beq.n	403910 <_malloc_r+0x4d8>
  403866:	68bc      	ldr	r4, [r7, #8]
  403868:	6862      	ldr	r2, [r4, #4]
  40386a:	f022 0203 	bic.w	r2, r2, #3
  40386e:	e75d      	b.n	40372c <_malloc_r+0x2f4>
  403870:	f859 3908 	ldr.w	r3, [r9], #-8
  403874:	4599      	cmp	r9, r3
  403876:	f040 8086 	bne.w	403986 <_malloc_r+0x54e>
  40387a:	f010 0f03 	tst.w	r0, #3
  40387e:	f100 30ff 	add.w	r0, r0, #4294967295
  403882:	d1f5      	bne.n	403870 <_malloc_r+0x438>
  403884:	687b      	ldr	r3, [r7, #4]
  403886:	ea23 0304 	bic.w	r3, r3, r4
  40388a:	607b      	str	r3, [r7, #4]
  40388c:	0064      	lsls	r4, r4, #1
  40388e:	429c      	cmp	r4, r3
  403890:	f63f aec7 	bhi.w	403622 <_malloc_r+0x1ea>
  403894:	2c00      	cmp	r4, #0
  403896:	f43f aec4 	beq.w	403622 <_malloc_r+0x1ea>
  40389a:	421c      	tst	r4, r3
  40389c:	4640      	mov	r0, r8
  40389e:	f47f ae3e 	bne.w	40351e <_malloc_r+0xe6>
  4038a2:	0064      	lsls	r4, r4, #1
  4038a4:	421c      	tst	r4, r3
  4038a6:	f100 0004 	add.w	r0, r0, #4
  4038aa:	d0fa      	beq.n	4038a2 <_malloc_r+0x46a>
  4038ac:	e637      	b.n	40351e <_malloc_r+0xe6>
  4038ae:	468c      	mov	ip, r1
  4038b0:	e78c      	b.n	4037cc <_malloc_r+0x394>
  4038b2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4038b6:	d815      	bhi.n	4038e4 <_malloc_r+0x4ac>
  4038b8:	0bf3      	lsrs	r3, r6, #15
  4038ba:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4038be:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4038c2:	00c3      	lsls	r3, r0, #3
  4038c4:	e5da      	b.n	40347c <_malloc_r+0x44>
  4038c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4038ca:	e6ed      	b.n	4036a8 <_malloc_r+0x270>
  4038cc:	687b      	ldr	r3, [r7, #4]
  4038ce:	1092      	asrs	r2, r2, #2
  4038d0:	2101      	movs	r1, #1
  4038d2:	fa01 f202 	lsl.w	r2, r1, r2
  4038d6:	4313      	orrs	r3, r2
  4038d8:	607b      	str	r3, [r7, #4]
  4038da:	4662      	mov	r2, ip
  4038dc:	e779      	b.n	4037d2 <_malloc_r+0x39a>
  4038de:	2301      	movs	r3, #1
  4038e0:	6053      	str	r3, [r2, #4]
  4038e2:	e729      	b.n	403738 <_malloc_r+0x300>
  4038e4:	f240 5254 	movw	r2, #1364	; 0x554
  4038e8:	4293      	cmp	r3, r2
  4038ea:	d822      	bhi.n	403932 <_malloc_r+0x4fa>
  4038ec:	0cb3      	lsrs	r3, r6, #18
  4038ee:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4038f2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4038f6:	00c3      	lsls	r3, r0, #3
  4038f8:	e5c0      	b.n	40347c <_malloc_r+0x44>
  4038fa:	f103 0b10 	add.w	fp, r3, #16
  4038fe:	e6ae      	b.n	40365e <_malloc_r+0x226>
  403900:	2a54      	cmp	r2, #84	; 0x54
  403902:	d829      	bhi.n	403958 <_malloc_r+0x520>
  403904:	0b1a      	lsrs	r2, r3, #12
  403906:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40390a:	00c9      	lsls	r1, r1, #3
  40390c:	326e      	adds	r2, #110	; 0x6e
  40390e:	e74d      	b.n	4037ac <_malloc_r+0x374>
  403910:	4b20      	ldr	r3, [pc, #128]	; (403994 <_malloc_r+0x55c>)
  403912:	6819      	ldr	r1, [r3, #0]
  403914:	4459      	add	r1, fp
  403916:	6019      	str	r1, [r3, #0]
  403918:	e6b2      	b.n	403680 <_malloc_r+0x248>
  40391a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40391e:	2800      	cmp	r0, #0
  403920:	f47f aeae 	bne.w	403680 <_malloc_r+0x248>
  403924:	eb08 030b 	add.w	r3, r8, fp
  403928:	68ba      	ldr	r2, [r7, #8]
  40392a:	f043 0301 	orr.w	r3, r3, #1
  40392e:	6053      	str	r3, [r2, #4]
  403930:	e6ee      	b.n	403710 <_malloc_r+0x2d8>
  403932:	207f      	movs	r0, #127	; 0x7f
  403934:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403938:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40393c:	e59e      	b.n	40347c <_malloc_r+0x44>
  40393e:	f104 0108 	add.w	r1, r4, #8
  403942:	4628      	mov	r0, r5
  403944:	9300      	str	r3, [sp, #0]
  403946:	f7ff fa59 	bl	402dfc <_free_r>
  40394a:	9b00      	ldr	r3, [sp, #0]
  40394c:	6819      	ldr	r1, [r3, #0]
  40394e:	e6df      	b.n	403710 <_malloc_r+0x2d8>
  403950:	2001      	movs	r0, #1
  403952:	f04f 0900 	mov.w	r9, #0
  403956:	e6bc      	b.n	4036d2 <_malloc_r+0x29a>
  403958:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40395c:	d805      	bhi.n	40396a <_malloc_r+0x532>
  40395e:	0bda      	lsrs	r2, r3, #15
  403960:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403964:	00c9      	lsls	r1, r1, #3
  403966:	3277      	adds	r2, #119	; 0x77
  403968:	e720      	b.n	4037ac <_malloc_r+0x374>
  40396a:	f240 5154 	movw	r1, #1364	; 0x554
  40396e:	428a      	cmp	r2, r1
  403970:	d805      	bhi.n	40397e <_malloc_r+0x546>
  403972:	0c9a      	lsrs	r2, r3, #18
  403974:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403978:	00c9      	lsls	r1, r1, #3
  40397a:	327c      	adds	r2, #124	; 0x7c
  40397c:	e716      	b.n	4037ac <_malloc_r+0x374>
  40397e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403982:	227e      	movs	r2, #126	; 0x7e
  403984:	e712      	b.n	4037ac <_malloc_r+0x374>
  403986:	687b      	ldr	r3, [r7, #4]
  403988:	e780      	b.n	40388c <_malloc_r+0x454>
  40398a:	08f0      	lsrs	r0, r6, #3
  40398c:	f106 0308 	add.w	r3, r6, #8
  403990:	e600      	b.n	403594 <_malloc_r+0x15c>
  403992:	bf00      	nop
  403994:	20401468 	.word	0x20401468

00403998 <__ascii_mbtowc>:
  403998:	b082      	sub	sp, #8
  40399a:	b149      	cbz	r1, 4039b0 <__ascii_mbtowc+0x18>
  40399c:	b15a      	cbz	r2, 4039b6 <__ascii_mbtowc+0x1e>
  40399e:	b16b      	cbz	r3, 4039bc <__ascii_mbtowc+0x24>
  4039a0:	7813      	ldrb	r3, [r2, #0]
  4039a2:	600b      	str	r3, [r1, #0]
  4039a4:	7812      	ldrb	r2, [r2, #0]
  4039a6:	1c10      	adds	r0, r2, #0
  4039a8:	bf18      	it	ne
  4039aa:	2001      	movne	r0, #1
  4039ac:	b002      	add	sp, #8
  4039ae:	4770      	bx	lr
  4039b0:	a901      	add	r1, sp, #4
  4039b2:	2a00      	cmp	r2, #0
  4039b4:	d1f3      	bne.n	40399e <__ascii_mbtowc+0x6>
  4039b6:	4610      	mov	r0, r2
  4039b8:	b002      	add	sp, #8
  4039ba:	4770      	bx	lr
  4039bc:	f06f 0001 	mvn.w	r0, #1
  4039c0:	e7f4      	b.n	4039ac <__ascii_mbtowc+0x14>
  4039c2:	bf00      	nop
	...

004039d0 <memchr>:
  4039d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4039d4:	2a10      	cmp	r2, #16
  4039d6:	db2b      	blt.n	403a30 <memchr+0x60>
  4039d8:	f010 0f07 	tst.w	r0, #7
  4039dc:	d008      	beq.n	4039f0 <memchr+0x20>
  4039de:	f810 3b01 	ldrb.w	r3, [r0], #1
  4039e2:	3a01      	subs	r2, #1
  4039e4:	428b      	cmp	r3, r1
  4039e6:	d02d      	beq.n	403a44 <memchr+0x74>
  4039e8:	f010 0f07 	tst.w	r0, #7
  4039ec:	b342      	cbz	r2, 403a40 <memchr+0x70>
  4039ee:	d1f6      	bne.n	4039de <memchr+0xe>
  4039f0:	b4f0      	push	{r4, r5, r6, r7}
  4039f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4039f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4039fa:	f022 0407 	bic.w	r4, r2, #7
  4039fe:	f07f 0700 	mvns.w	r7, #0
  403a02:	2300      	movs	r3, #0
  403a04:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403a08:	3c08      	subs	r4, #8
  403a0a:	ea85 0501 	eor.w	r5, r5, r1
  403a0e:	ea86 0601 	eor.w	r6, r6, r1
  403a12:	fa85 f547 	uadd8	r5, r5, r7
  403a16:	faa3 f587 	sel	r5, r3, r7
  403a1a:	fa86 f647 	uadd8	r6, r6, r7
  403a1e:	faa5 f687 	sel	r6, r5, r7
  403a22:	b98e      	cbnz	r6, 403a48 <memchr+0x78>
  403a24:	d1ee      	bne.n	403a04 <memchr+0x34>
  403a26:	bcf0      	pop	{r4, r5, r6, r7}
  403a28:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403a2c:	f002 0207 	and.w	r2, r2, #7
  403a30:	b132      	cbz	r2, 403a40 <memchr+0x70>
  403a32:	f810 3b01 	ldrb.w	r3, [r0], #1
  403a36:	3a01      	subs	r2, #1
  403a38:	ea83 0301 	eor.w	r3, r3, r1
  403a3c:	b113      	cbz	r3, 403a44 <memchr+0x74>
  403a3e:	d1f8      	bne.n	403a32 <memchr+0x62>
  403a40:	2000      	movs	r0, #0
  403a42:	4770      	bx	lr
  403a44:	3801      	subs	r0, #1
  403a46:	4770      	bx	lr
  403a48:	2d00      	cmp	r5, #0
  403a4a:	bf06      	itte	eq
  403a4c:	4635      	moveq	r5, r6
  403a4e:	3803      	subeq	r0, #3
  403a50:	3807      	subne	r0, #7
  403a52:	f015 0f01 	tst.w	r5, #1
  403a56:	d107      	bne.n	403a68 <memchr+0x98>
  403a58:	3001      	adds	r0, #1
  403a5a:	f415 7f80 	tst.w	r5, #256	; 0x100
  403a5e:	bf02      	ittt	eq
  403a60:	3001      	addeq	r0, #1
  403a62:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403a66:	3001      	addeq	r0, #1
  403a68:	bcf0      	pop	{r4, r5, r6, r7}
  403a6a:	3801      	subs	r0, #1
  403a6c:	4770      	bx	lr
  403a6e:	bf00      	nop

00403a70 <memmove>:
  403a70:	4288      	cmp	r0, r1
  403a72:	b5f0      	push	{r4, r5, r6, r7, lr}
  403a74:	d90d      	bls.n	403a92 <memmove+0x22>
  403a76:	188b      	adds	r3, r1, r2
  403a78:	4298      	cmp	r0, r3
  403a7a:	d20a      	bcs.n	403a92 <memmove+0x22>
  403a7c:	1884      	adds	r4, r0, r2
  403a7e:	2a00      	cmp	r2, #0
  403a80:	d051      	beq.n	403b26 <memmove+0xb6>
  403a82:	4622      	mov	r2, r4
  403a84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  403a88:	f802 4d01 	strb.w	r4, [r2, #-1]!
  403a8c:	4299      	cmp	r1, r3
  403a8e:	d1f9      	bne.n	403a84 <memmove+0x14>
  403a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403a92:	2a0f      	cmp	r2, #15
  403a94:	d948      	bls.n	403b28 <memmove+0xb8>
  403a96:	ea41 0300 	orr.w	r3, r1, r0
  403a9a:	079b      	lsls	r3, r3, #30
  403a9c:	d146      	bne.n	403b2c <memmove+0xbc>
  403a9e:	f100 0410 	add.w	r4, r0, #16
  403aa2:	f101 0310 	add.w	r3, r1, #16
  403aa6:	4615      	mov	r5, r2
  403aa8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403aac:	f844 6c10 	str.w	r6, [r4, #-16]
  403ab0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403ab4:	f844 6c0c 	str.w	r6, [r4, #-12]
  403ab8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403abc:	f844 6c08 	str.w	r6, [r4, #-8]
  403ac0:	3d10      	subs	r5, #16
  403ac2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  403ac6:	f844 6c04 	str.w	r6, [r4, #-4]
  403aca:	2d0f      	cmp	r5, #15
  403acc:	f103 0310 	add.w	r3, r3, #16
  403ad0:	f104 0410 	add.w	r4, r4, #16
  403ad4:	d8e8      	bhi.n	403aa8 <memmove+0x38>
  403ad6:	f1a2 0310 	sub.w	r3, r2, #16
  403ada:	f023 030f 	bic.w	r3, r3, #15
  403ade:	f002 0e0f 	and.w	lr, r2, #15
  403ae2:	3310      	adds	r3, #16
  403ae4:	f1be 0f03 	cmp.w	lr, #3
  403ae8:	4419      	add	r1, r3
  403aea:	4403      	add	r3, r0
  403aec:	d921      	bls.n	403b32 <memmove+0xc2>
  403aee:	1f1e      	subs	r6, r3, #4
  403af0:	460d      	mov	r5, r1
  403af2:	4674      	mov	r4, lr
  403af4:	3c04      	subs	r4, #4
  403af6:	f855 7b04 	ldr.w	r7, [r5], #4
  403afa:	f846 7f04 	str.w	r7, [r6, #4]!
  403afe:	2c03      	cmp	r4, #3
  403b00:	d8f8      	bhi.n	403af4 <memmove+0x84>
  403b02:	f1ae 0404 	sub.w	r4, lr, #4
  403b06:	f024 0403 	bic.w	r4, r4, #3
  403b0a:	3404      	adds	r4, #4
  403b0c:	4421      	add	r1, r4
  403b0e:	4423      	add	r3, r4
  403b10:	f002 0203 	and.w	r2, r2, #3
  403b14:	b162      	cbz	r2, 403b30 <memmove+0xc0>
  403b16:	3b01      	subs	r3, #1
  403b18:	440a      	add	r2, r1
  403b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
  403b1e:	f803 4f01 	strb.w	r4, [r3, #1]!
  403b22:	428a      	cmp	r2, r1
  403b24:	d1f9      	bne.n	403b1a <memmove+0xaa>
  403b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403b28:	4603      	mov	r3, r0
  403b2a:	e7f3      	b.n	403b14 <memmove+0xa4>
  403b2c:	4603      	mov	r3, r0
  403b2e:	e7f2      	b.n	403b16 <memmove+0xa6>
  403b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403b32:	4672      	mov	r2, lr
  403b34:	e7ee      	b.n	403b14 <memmove+0xa4>
  403b36:	bf00      	nop

00403b38 <__malloc_lock>:
  403b38:	4801      	ldr	r0, [pc, #4]	; (403b40 <__malloc_lock+0x8>)
  403b3a:	f7ff bbf9 	b.w	403330 <__retarget_lock_acquire_recursive>
  403b3e:	bf00      	nop
  403b40:	204014b8 	.word	0x204014b8

00403b44 <__malloc_unlock>:
  403b44:	4801      	ldr	r0, [pc, #4]	; (403b4c <__malloc_unlock+0x8>)
  403b46:	f7ff bbf5 	b.w	403334 <__retarget_lock_release_recursive>
  403b4a:	bf00      	nop
  403b4c:	204014b8 	.word	0x204014b8

00403b50 <_realloc_r>:
  403b50:	2900      	cmp	r1, #0
  403b52:	f000 8095 	beq.w	403c80 <_realloc_r+0x130>
  403b56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b5a:	460d      	mov	r5, r1
  403b5c:	4616      	mov	r6, r2
  403b5e:	b083      	sub	sp, #12
  403b60:	4680      	mov	r8, r0
  403b62:	f106 070b 	add.w	r7, r6, #11
  403b66:	f7ff ffe7 	bl	403b38 <__malloc_lock>
  403b6a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  403b6e:	2f16      	cmp	r7, #22
  403b70:	f02e 0403 	bic.w	r4, lr, #3
  403b74:	f1a5 0908 	sub.w	r9, r5, #8
  403b78:	d83c      	bhi.n	403bf4 <_realloc_r+0xa4>
  403b7a:	2210      	movs	r2, #16
  403b7c:	4617      	mov	r7, r2
  403b7e:	42be      	cmp	r6, r7
  403b80:	d83d      	bhi.n	403bfe <_realloc_r+0xae>
  403b82:	4294      	cmp	r4, r2
  403b84:	da43      	bge.n	403c0e <_realloc_r+0xbe>
  403b86:	4bc4      	ldr	r3, [pc, #784]	; (403e98 <_realloc_r+0x348>)
  403b88:	6899      	ldr	r1, [r3, #8]
  403b8a:	eb09 0004 	add.w	r0, r9, r4
  403b8e:	4288      	cmp	r0, r1
  403b90:	f000 80b4 	beq.w	403cfc <_realloc_r+0x1ac>
  403b94:	6843      	ldr	r3, [r0, #4]
  403b96:	f023 0101 	bic.w	r1, r3, #1
  403b9a:	4401      	add	r1, r0
  403b9c:	6849      	ldr	r1, [r1, #4]
  403b9e:	07c9      	lsls	r1, r1, #31
  403ba0:	d54c      	bpl.n	403c3c <_realloc_r+0xec>
  403ba2:	f01e 0f01 	tst.w	lr, #1
  403ba6:	f000 809b 	beq.w	403ce0 <_realloc_r+0x190>
  403baa:	4631      	mov	r1, r6
  403bac:	4640      	mov	r0, r8
  403bae:	f7ff fc43 	bl	403438 <_malloc_r>
  403bb2:	4606      	mov	r6, r0
  403bb4:	2800      	cmp	r0, #0
  403bb6:	d03a      	beq.n	403c2e <_realloc_r+0xde>
  403bb8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403bbc:	f023 0301 	bic.w	r3, r3, #1
  403bc0:	444b      	add	r3, r9
  403bc2:	f1a0 0208 	sub.w	r2, r0, #8
  403bc6:	429a      	cmp	r2, r3
  403bc8:	f000 8121 	beq.w	403e0e <_realloc_r+0x2be>
  403bcc:	1f22      	subs	r2, r4, #4
  403bce:	2a24      	cmp	r2, #36	; 0x24
  403bd0:	f200 8107 	bhi.w	403de2 <_realloc_r+0x292>
  403bd4:	2a13      	cmp	r2, #19
  403bd6:	f200 80db 	bhi.w	403d90 <_realloc_r+0x240>
  403bda:	4603      	mov	r3, r0
  403bdc:	462a      	mov	r2, r5
  403bde:	6811      	ldr	r1, [r2, #0]
  403be0:	6019      	str	r1, [r3, #0]
  403be2:	6851      	ldr	r1, [r2, #4]
  403be4:	6059      	str	r1, [r3, #4]
  403be6:	6892      	ldr	r2, [r2, #8]
  403be8:	609a      	str	r2, [r3, #8]
  403bea:	4629      	mov	r1, r5
  403bec:	4640      	mov	r0, r8
  403bee:	f7ff f905 	bl	402dfc <_free_r>
  403bf2:	e01c      	b.n	403c2e <_realloc_r+0xde>
  403bf4:	f027 0707 	bic.w	r7, r7, #7
  403bf8:	2f00      	cmp	r7, #0
  403bfa:	463a      	mov	r2, r7
  403bfc:	dabf      	bge.n	403b7e <_realloc_r+0x2e>
  403bfe:	2600      	movs	r6, #0
  403c00:	230c      	movs	r3, #12
  403c02:	4630      	mov	r0, r6
  403c04:	f8c8 3000 	str.w	r3, [r8]
  403c08:	b003      	add	sp, #12
  403c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c0e:	462e      	mov	r6, r5
  403c10:	1be3      	subs	r3, r4, r7
  403c12:	2b0f      	cmp	r3, #15
  403c14:	d81e      	bhi.n	403c54 <_realloc_r+0x104>
  403c16:	f8d9 3004 	ldr.w	r3, [r9, #4]
  403c1a:	f003 0301 	and.w	r3, r3, #1
  403c1e:	4323      	orrs	r3, r4
  403c20:	444c      	add	r4, r9
  403c22:	f8c9 3004 	str.w	r3, [r9, #4]
  403c26:	6863      	ldr	r3, [r4, #4]
  403c28:	f043 0301 	orr.w	r3, r3, #1
  403c2c:	6063      	str	r3, [r4, #4]
  403c2e:	4640      	mov	r0, r8
  403c30:	f7ff ff88 	bl	403b44 <__malloc_unlock>
  403c34:	4630      	mov	r0, r6
  403c36:	b003      	add	sp, #12
  403c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c3c:	f023 0303 	bic.w	r3, r3, #3
  403c40:	18e1      	adds	r1, r4, r3
  403c42:	4291      	cmp	r1, r2
  403c44:	db1f      	blt.n	403c86 <_realloc_r+0x136>
  403c46:	68c3      	ldr	r3, [r0, #12]
  403c48:	6882      	ldr	r2, [r0, #8]
  403c4a:	462e      	mov	r6, r5
  403c4c:	60d3      	str	r3, [r2, #12]
  403c4e:	460c      	mov	r4, r1
  403c50:	609a      	str	r2, [r3, #8]
  403c52:	e7dd      	b.n	403c10 <_realloc_r+0xc0>
  403c54:	f8d9 2004 	ldr.w	r2, [r9, #4]
  403c58:	eb09 0107 	add.w	r1, r9, r7
  403c5c:	f002 0201 	and.w	r2, r2, #1
  403c60:	444c      	add	r4, r9
  403c62:	f043 0301 	orr.w	r3, r3, #1
  403c66:	4317      	orrs	r7, r2
  403c68:	f8c9 7004 	str.w	r7, [r9, #4]
  403c6c:	604b      	str	r3, [r1, #4]
  403c6e:	6863      	ldr	r3, [r4, #4]
  403c70:	f043 0301 	orr.w	r3, r3, #1
  403c74:	3108      	adds	r1, #8
  403c76:	6063      	str	r3, [r4, #4]
  403c78:	4640      	mov	r0, r8
  403c7a:	f7ff f8bf 	bl	402dfc <_free_r>
  403c7e:	e7d6      	b.n	403c2e <_realloc_r+0xde>
  403c80:	4611      	mov	r1, r2
  403c82:	f7ff bbd9 	b.w	403438 <_malloc_r>
  403c86:	f01e 0f01 	tst.w	lr, #1
  403c8a:	d18e      	bne.n	403baa <_realloc_r+0x5a>
  403c8c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403c90:	eba9 0a01 	sub.w	sl, r9, r1
  403c94:	f8da 1004 	ldr.w	r1, [sl, #4]
  403c98:	f021 0103 	bic.w	r1, r1, #3
  403c9c:	440b      	add	r3, r1
  403c9e:	4423      	add	r3, r4
  403ca0:	4293      	cmp	r3, r2
  403ca2:	db25      	blt.n	403cf0 <_realloc_r+0x1a0>
  403ca4:	68c2      	ldr	r2, [r0, #12]
  403ca6:	6881      	ldr	r1, [r0, #8]
  403ca8:	4656      	mov	r6, sl
  403caa:	60ca      	str	r2, [r1, #12]
  403cac:	6091      	str	r1, [r2, #8]
  403cae:	f8da 100c 	ldr.w	r1, [sl, #12]
  403cb2:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403cb6:	1f22      	subs	r2, r4, #4
  403cb8:	2a24      	cmp	r2, #36	; 0x24
  403cba:	60c1      	str	r1, [r0, #12]
  403cbc:	6088      	str	r0, [r1, #8]
  403cbe:	f200 8094 	bhi.w	403dea <_realloc_r+0x29a>
  403cc2:	2a13      	cmp	r2, #19
  403cc4:	d96f      	bls.n	403da6 <_realloc_r+0x256>
  403cc6:	6829      	ldr	r1, [r5, #0]
  403cc8:	f8ca 1008 	str.w	r1, [sl, #8]
  403ccc:	6869      	ldr	r1, [r5, #4]
  403cce:	f8ca 100c 	str.w	r1, [sl, #12]
  403cd2:	2a1b      	cmp	r2, #27
  403cd4:	f200 80a2 	bhi.w	403e1c <_realloc_r+0x2cc>
  403cd8:	3508      	adds	r5, #8
  403cda:	f10a 0210 	add.w	r2, sl, #16
  403cde:	e063      	b.n	403da8 <_realloc_r+0x258>
  403ce0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  403ce4:	eba9 0a03 	sub.w	sl, r9, r3
  403ce8:	f8da 1004 	ldr.w	r1, [sl, #4]
  403cec:	f021 0103 	bic.w	r1, r1, #3
  403cf0:	1863      	adds	r3, r4, r1
  403cf2:	4293      	cmp	r3, r2
  403cf4:	f6ff af59 	blt.w	403baa <_realloc_r+0x5a>
  403cf8:	4656      	mov	r6, sl
  403cfa:	e7d8      	b.n	403cae <_realloc_r+0x15e>
  403cfc:	6841      	ldr	r1, [r0, #4]
  403cfe:	f021 0b03 	bic.w	fp, r1, #3
  403d02:	44a3      	add	fp, r4
  403d04:	f107 0010 	add.w	r0, r7, #16
  403d08:	4583      	cmp	fp, r0
  403d0a:	da56      	bge.n	403dba <_realloc_r+0x26a>
  403d0c:	f01e 0f01 	tst.w	lr, #1
  403d10:	f47f af4b 	bne.w	403baa <_realloc_r+0x5a>
  403d14:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403d18:	eba9 0a01 	sub.w	sl, r9, r1
  403d1c:	f8da 1004 	ldr.w	r1, [sl, #4]
  403d20:	f021 0103 	bic.w	r1, r1, #3
  403d24:	448b      	add	fp, r1
  403d26:	4558      	cmp	r0, fp
  403d28:	dce2      	bgt.n	403cf0 <_realloc_r+0x1a0>
  403d2a:	4656      	mov	r6, sl
  403d2c:	f8da 100c 	ldr.w	r1, [sl, #12]
  403d30:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403d34:	1f22      	subs	r2, r4, #4
  403d36:	2a24      	cmp	r2, #36	; 0x24
  403d38:	60c1      	str	r1, [r0, #12]
  403d3a:	6088      	str	r0, [r1, #8]
  403d3c:	f200 808f 	bhi.w	403e5e <_realloc_r+0x30e>
  403d40:	2a13      	cmp	r2, #19
  403d42:	f240 808a 	bls.w	403e5a <_realloc_r+0x30a>
  403d46:	6829      	ldr	r1, [r5, #0]
  403d48:	f8ca 1008 	str.w	r1, [sl, #8]
  403d4c:	6869      	ldr	r1, [r5, #4]
  403d4e:	f8ca 100c 	str.w	r1, [sl, #12]
  403d52:	2a1b      	cmp	r2, #27
  403d54:	f200 808a 	bhi.w	403e6c <_realloc_r+0x31c>
  403d58:	3508      	adds	r5, #8
  403d5a:	f10a 0210 	add.w	r2, sl, #16
  403d5e:	6829      	ldr	r1, [r5, #0]
  403d60:	6011      	str	r1, [r2, #0]
  403d62:	6869      	ldr	r1, [r5, #4]
  403d64:	6051      	str	r1, [r2, #4]
  403d66:	68a9      	ldr	r1, [r5, #8]
  403d68:	6091      	str	r1, [r2, #8]
  403d6a:	eb0a 0107 	add.w	r1, sl, r7
  403d6e:	ebab 0207 	sub.w	r2, fp, r7
  403d72:	f042 0201 	orr.w	r2, r2, #1
  403d76:	6099      	str	r1, [r3, #8]
  403d78:	604a      	str	r2, [r1, #4]
  403d7a:	f8da 3004 	ldr.w	r3, [sl, #4]
  403d7e:	f003 0301 	and.w	r3, r3, #1
  403d82:	431f      	orrs	r7, r3
  403d84:	4640      	mov	r0, r8
  403d86:	f8ca 7004 	str.w	r7, [sl, #4]
  403d8a:	f7ff fedb 	bl	403b44 <__malloc_unlock>
  403d8e:	e751      	b.n	403c34 <_realloc_r+0xe4>
  403d90:	682b      	ldr	r3, [r5, #0]
  403d92:	6003      	str	r3, [r0, #0]
  403d94:	686b      	ldr	r3, [r5, #4]
  403d96:	6043      	str	r3, [r0, #4]
  403d98:	2a1b      	cmp	r2, #27
  403d9a:	d82d      	bhi.n	403df8 <_realloc_r+0x2a8>
  403d9c:	f100 0308 	add.w	r3, r0, #8
  403da0:	f105 0208 	add.w	r2, r5, #8
  403da4:	e71b      	b.n	403bde <_realloc_r+0x8e>
  403da6:	4632      	mov	r2, r6
  403da8:	6829      	ldr	r1, [r5, #0]
  403daa:	6011      	str	r1, [r2, #0]
  403dac:	6869      	ldr	r1, [r5, #4]
  403dae:	6051      	str	r1, [r2, #4]
  403db0:	68a9      	ldr	r1, [r5, #8]
  403db2:	6091      	str	r1, [r2, #8]
  403db4:	461c      	mov	r4, r3
  403db6:	46d1      	mov	r9, sl
  403db8:	e72a      	b.n	403c10 <_realloc_r+0xc0>
  403dba:	eb09 0107 	add.w	r1, r9, r7
  403dbe:	ebab 0b07 	sub.w	fp, fp, r7
  403dc2:	f04b 0201 	orr.w	r2, fp, #1
  403dc6:	6099      	str	r1, [r3, #8]
  403dc8:	604a      	str	r2, [r1, #4]
  403dca:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403dce:	f003 0301 	and.w	r3, r3, #1
  403dd2:	431f      	orrs	r7, r3
  403dd4:	4640      	mov	r0, r8
  403dd6:	f845 7c04 	str.w	r7, [r5, #-4]
  403dda:	f7ff feb3 	bl	403b44 <__malloc_unlock>
  403dde:	462e      	mov	r6, r5
  403de0:	e728      	b.n	403c34 <_realloc_r+0xe4>
  403de2:	4629      	mov	r1, r5
  403de4:	f7ff fe44 	bl	403a70 <memmove>
  403de8:	e6ff      	b.n	403bea <_realloc_r+0x9a>
  403dea:	4629      	mov	r1, r5
  403dec:	4630      	mov	r0, r6
  403dee:	461c      	mov	r4, r3
  403df0:	46d1      	mov	r9, sl
  403df2:	f7ff fe3d 	bl	403a70 <memmove>
  403df6:	e70b      	b.n	403c10 <_realloc_r+0xc0>
  403df8:	68ab      	ldr	r3, [r5, #8]
  403dfa:	6083      	str	r3, [r0, #8]
  403dfc:	68eb      	ldr	r3, [r5, #12]
  403dfe:	60c3      	str	r3, [r0, #12]
  403e00:	2a24      	cmp	r2, #36	; 0x24
  403e02:	d017      	beq.n	403e34 <_realloc_r+0x2e4>
  403e04:	f100 0310 	add.w	r3, r0, #16
  403e08:	f105 0210 	add.w	r2, r5, #16
  403e0c:	e6e7      	b.n	403bde <_realloc_r+0x8e>
  403e0e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  403e12:	f023 0303 	bic.w	r3, r3, #3
  403e16:	441c      	add	r4, r3
  403e18:	462e      	mov	r6, r5
  403e1a:	e6f9      	b.n	403c10 <_realloc_r+0xc0>
  403e1c:	68a9      	ldr	r1, [r5, #8]
  403e1e:	f8ca 1010 	str.w	r1, [sl, #16]
  403e22:	68e9      	ldr	r1, [r5, #12]
  403e24:	f8ca 1014 	str.w	r1, [sl, #20]
  403e28:	2a24      	cmp	r2, #36	; 0x24
  403e2a:	d00c      	beq.n	403e46 <_realloc_r+0x2f6>
  403e2c:	3510      	adds	r5, #16
  403e2e:	f10a 0218 	add.w	r2, sl, #24
  403e32:	e7b9      	b.n	403da8 <_realloc_r+0x258>
  403e34:	692b      	ldr	r3, [r5, #16]
  403e36:	6103      	str	r3, [r0, #16]
  403e38:	696b      	ldr	r3, [r5, #20]
  403e3a:	6143      	str	r3, [r0, #20]
  403e3c:	f105 0218 	add.w	r2, r5, #24
  403e40:	f100 0318 	add.w	r3, r0, #24
  403e44:	e6cb      	b.n	403bde <_realloc_r+0x8e>
  403e46:	692a      	ldr	r2, [r5, #16]
  403e48:	f8ca 2018 	str.w	r2, [sl, #24]
  403e4c:	696a      	ldr	r2, [r5, #20]
  403e4e:	f8ca 201c 	str.w	r2, [sl, #28]
  403e52:	3518      	adds	r5, #24
  403e54:	f10a 0220 	add.w	r2, sl, #32
  403e58:	e7a6      	b.n	403da8 <_realloc_r+0x258>
  403e5a:	4632      	mov	r2, r6
  403e5c:	e77f      	b.n	403d5e <_realloc_r+0x20e>
  403e5e:	4629      	mov	r1, r5
  403e60:	4630      	mov	r0, r6
  403e62:	9301      	str	r3, [sp, #4]
  403e64:	f7ff fe04 	bl	403a70 <memmove>
  403e68:	9b01      	ldr	r3, [sp, #4]
  403e6a:	e77e      	b.n	403d6a <_realloc_r+0x21a>
  403e6c:	68a9      	ldr	r1, [r5, #8]
  403e6e:	f8ca 1010 	str.w	r1, [sl, #16]
  403e72:	68e9      	ldr	r1, [r5, #12]
  403e74:	f8ca 1014 	str.w	r1, [sl, #20]
  403e78:	2a24      	cmp	r2, #36	; 0x24
  403e7a:	d003      	beq.n	403e84 <_realloc_r+0x334>
  403e7c:	3510      	adds	r5, #16
  403e7e:	f10a 0218 	add.w	r2, sl, #24
  403e82:	e76c      	b.n	403d5e <_realloc_r+0x20e>
  403e84:	692a      	ldr	r2, [r5, #16]
  403e86:	f8ca 2018 	str.w	r2, [sl, #24]
  403e8a:	696a      	ldr	r2, [r5, #20]
  403e8c:	f8ca 201c 	str.w	r2, [sl, #28]
  403e90:	3518      	adds	r5, #24
  403e92:	f10a 0220 	add.w	r2, sl, #32
  403e96:	e762      	b.n	403d5e <_realloc_r+0x20e>
  403e98:	204005b0 	.word	0x204005b0

00403e9c <_sbrk_r>:
  403e9c:	b538      	push	{r3, r4, r5, lr}
  403e9e:	4c07      	ldr	r4, [pc, #28]	; (403ebc <_sbrk_r+0x20>)
  403ea0:	2300      	movs	r3, #0
  403ea2:	4605      	mov	r5, r0
  403ea4:	4608      	mov	r0, r1
  403ea6:	6023      	str	r3, [r4, #0]
  403ea8:	f7fd fbc8 	bl	40163c <_sbrk>
  403eac:	1c43      	adds	r3, r0, #1
  403eae:	d000      	beq.n	403eb2 <_sbrk_r+0x16>
  403eb0:	bd38      	pop	{r3, r4, r5, pc}
  403eb2:	6823      	ldr	r3, [r4, #0]
  403eb4:	2b00      	cmp	r3, #0
  403eb6:	d0fb      	beq.n	403eb0 <_sbrk_r+0x14>
  403eb8:	602b      	str	r3, [r5, #0]
  403eba:	bd38      	pop	{r3, r4, r5, pc}
  403ebc:	204014cc 	.word	0x204014cc

00403ec0 <_raise_r>:
  403ec0:	291f      	cmp	r1, #31
  403ec2:	d828      	bhi.n	403f16 <_raise_r+0x56>
  403ec4:	b520      	push	{r5, lr}
  403ec6:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
  403eca:	b082      	sub	sp, #8
  403ecc:	4605      	mov	r5, r0
  403ece:	b1aa      	cbz	r2, 403efc <_raise_r+0x3c>
  403ed0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  403ed4:	b193      	cbz	r3, 403efc <_raise_r+0x3c>
  403ed6:	2b01      	cmp	r3, #1
  403ed8:	d00e      	beq.n	403ef8 <_raise_r+0x38>
  403eda:	1c58      	adds	r0, r3, #1
  403edc:	d007      	beq.n	403eee <_raise_r+0x2e>
  403ede:	2500      	movs	r5, #0
  403ee0:	4608      	mov	r0, r1
  403ee2:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  403ee6:	4798      	blx	r3
  403ee8:	4628      	mov	r0, r5
  403eea:	b002      	add	sp, #8
  403eec:	bd20      	pop	{r5, pc}
  403eee:	2316      	movs	r3, #22
  403ef0:	2001      	movs	r0, #1
  403ef2:	602b      	str	r3, [r5, #0]
  403ef4:	b002      	add	sp, #8
  403ef6:	bd20      	pop	{r5, pc}
  403ef8:	2000      	movs	r0, #0
  403efa:	e7f6      	b.n	403eea <_raise_r+0x2a>
  403efc:	4628      	mov	r0, r5
  403efe:	9101      	str	r1, [sp, #4]
  403f00:	f000 f82a 	bl	403f58 <_getpid_r>
  403f04:	9901      	ldr	r1, [sp, #4]
  403f06:	460a      	mov	r2, r1
  403f08:	4601      	mov	r1, r0
  403f0a:	4628      	mov	r0, r5
  403f0c:	b002      	add	sp, #8
  403f0e:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
  403f12:	f000 b80d 	b.w	403f30 <_kill_r>
  403f16:	2316      	movs	r3, #22
  403f18:	6003      	str	r3, [r0, #0]
  403f1a:	f04f 30ff 	mov.w	r0, #4294967295
  403f1e:	4770      	bx	lr

00403f20 <raise>:
  403f20:	4b02      	ldr	r3, [pc, #8]	; (403f2c <raise+0xc>)
  403f22:	4601      	mov	r1, r0
  403f24:	6818      	ldr	r0, [r3, #0]
  403f26:	f7ff bfcb 	b.w	403ec0 <_raise_r>
  403f2a:	bf00      	nop
  403f2c:	20400014 	.word	0x20400014

00403f30 <_kill_r>:
  403f30:	b538      	push	{r3, r4, r5, lr}
  403f32:	460b      	mov	r3, r1
  403f34:	4c07      	ldr	r4, [pc, #28]	; (403f54 <_kill_r+0x24>)
  403f36:	4605      	mov	r5, r0
  403f38:	4611      	mov	r1, r2
  403f3a:	4618      	mov	r0, r3
  403f3c:	2300      	movs	r3, #0
  403f3e:	6023      	str	r3, [r4, #0]
  403f40:	f7fd fba6 	bl	401690 <_kill>
  403f44:	1c43      	adds	r3, r0, #1
  403f46:	d000      	beq.n	403f4a <_kill_r+0x1a>
  403f48:	bd38      	pop	{r3, r4, r5, pc}
  403f4a:	6823      	ldr	r3, [r4, #0]
  403f4c:	2b00      	cmp	r3, #0
  403f4e:	d0fb      	beq.n	403f48 <_kill_r+0x18>
  403f50:	602b      	str	r3, [r5, #0]
  403f52:	bd38      	pop	{r3, r4, r5, pc}
  403f54:	204014cc 	.word	0x204014cc

00403f58 <_getpid_r>:
  403f58:	f7fd bb9b 	b.w	401692 <_getpid>

00403f5c <__sread>:
  403f5c:	b510      	push	{r4, lr}
  403f5e:	460c      	mov	r4, r1
  403f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403f64:	f000 fa72 	bl	40444c <_read_r>
  403f68:	2800      	cmp	r0, #0
  403f6a:	db03      	blt.n	403f74 <__sread+0x18>
  403f6c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403f6e:	4403      	add	r3, r0
  403f70:	6523      	str	r3, [r4, #80]	; 0x50
  403f72:	bd10      	pop	{r4, pc}
  403f74:	89a3      	ldrh	r3, [r4, #12]
  403f76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403f7a:	81a3      	strh	r3, [r4, #12]
  403f7c:	bd10      	pop	{r4, pc}
  403f7e:	bf00      	nop

00403f80 <__swrite>:
  403f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403f84:	4616      	mov	r6, r2
  403f86:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403f8a:	461f      	mov	r7, r3
  403f8c:	05d3      	lsls	r3, r2, #23
  403f8e:	460c      	mov	r4, r1
  403f90:	4605      	mov	r5, r0
  403f92:	d507      	bpl.n	403fa4 <__swrite+0x24>
  403f94:	2200      	movs	r2, #0
  403f96:	2302      	movs	r3, #2
  403f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403f9c:	f000 fa40 	bl	404420 <_lseek_r>
  403fa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403fa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403fa8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403fac:	81a2      	strh	r2, [r4, #12]
  403fae:	463b      	mov	r3, r7
  403fb0:	4632      	mov	r2, r6
  403fb2:	4628      	mov	r0, r5
  403fb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403fb8:	f000 b920 	b.w	4041fc <_write_r>

00403fbc <__sseek>:
  403fbc:	b510      	push	{r4, lr}
  403fbe:	460c      	mov	r4, r1
  403fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403fc4:	f000 fa2c 	bl	404420 <_lseek_r>
  403fc8:	89a3      	ldrh	r3, [r4, #12]
  403fca:	1c42      	adds	r2, r0, #1
  403fcc:	bf0e      	itee	eq
  403fce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403fd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403fd6:	6520      	strne	r0, [r4, #80]	; 0x50
  403fd8:	81a3      	strh	r3, [r4, #12]
  403fda:	bd10      	pop	{r4, pc}

00403fdc <__sclose>:
  403fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403fe0:	f000 b984 	b.w	4042ec <_close_r>
	...

00404000 <strlen>:
  404000:	f890 f000 	pld	[r0]
  404004:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404008:	f020 0107 	bic.w	r1, r0, #7
  40400c:	f06f 0c00 	mvn.w	ip, #0
  404010:	f010 0407 	ands.w	r4, r0, #7
  404014:	f891 f020 	pld	[r1, #32]
  404018:	f040 8049 	bne.w	4040ae <strlen+0xae>
  40401c:	f04f 0400 	mov.w	r4, #0
  404020:	f06f 0007 	mvn.w	r0, #7
  404024:	e9d1 2300 	ldrd	r2, r3, [r1]
  404028:	f891 f040 	pld	[r1, #64]	; 0x40
  40402c:	f100 0008 	add.w	r0, r0, #8
  404030:	fa82 f24c 	uadd8	r2, r2, ip
  404034:	faa4 f28c 	sel	r2, r4, ip
  404038:	fa83 f34c 	uadd8	r3, r3, ip
  40403c:	faa2 f38c 	sel	r3, r2, ip
  404040:	bb4b      	cbnz	r3, 404096 <strlen+0x96>
  404042:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404046:	fa82 f24c 	uadd8	r2, r2, ip
  40404a:	f100 0008 	add.w	r0, r0, #8
  40404e:	faa4 f28c 	sel	r2, r4, ip
  404052:	fa83 f34c 	uadd8	r3, r3, ip
  404056:	faa2 f38c 	sel	r3, r2, ip
  40405a:	b9e3      	cbnz	r3, 404096 <strlen+0x96>
  40405c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404060:	fa82 f24c 	uadd8	r2, r2, ip
  404064:	f100 0008 	add.w	r0, r0, #8
  404068:	faa4 f28c 	sel	r2, r4, ip
  40406c:	fa83 f34c 	uadd8	r3, r3, ip
  404070:	faa2 f38c 	sel	r3, r2, ip
  404074:	b97b      	cbnz	r3, 404096 <strlen+0x96>
  404076:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40407a:	f101 0120 	add.w	r1, r1, #32
  40407e:	fa82 f24c 	uadd8	r2, r2, ip
  404082:	f100 0008 	add.w	r0, r0, #8
  404086:	faa4 f28c 	sel	r2, r4, ip
  40408a:	fa83 f34c 	uadd8	r3, r3, ip
  40408e:	faa2 f38c 	sel	r3, r2, ip
  404092:	2b00      	cmp	r3, #0
  404094:	d0c6      	beq.n	404024 <strlen+0x24>
  404096:	2a00      	cmp	r2, #0
  404098:	bf04      	itt	eq
  40409a:	3004      	addeq	r0, #4
  40409c:	461a      	moveq	r2, r3
  40409e:	ba12      	rev	r2, r2
  4040a0:	fab2 f282 	clz	r2, r2
  4040a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4040a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4040ac:	4770      	bx	lr
  4040ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4040b2:	f004 0503 	and.w	r5, r4, #3
  4040b6:	f1c4 0000 	rsb	r0, r4, #0
  4040ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4040be:	f014 0f04 	tst.w	r4, #4
  4040c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4040c6:	fa0c f505 	lsl.w	r5, ip, r5
  4040ca:	ea62 0205 	orn	r2, r2, r5
  4040ce:	bf1c      	itt	ne
  4040d0:	ea63 0305 	ornne	r3, r3, r5
  4040d4:	4662      	movne	r2, ip
  4040d6:	f04f 0400 	mov.w	r4, #0
  4040da:	e7a9      	b.n	404030 <strlen+0x30>

004040dc <__swbuf_r>:
  4040dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4040de:	460d      	mov	r5, r1
  4040e0:	4614      	mov	r4, r2
  4040e2:	4606      	mov	r6, r0
  4040e4:	b110      	cbz	r0, 4040ec <__swbuf_r+0x10>
  4040e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4040e8:	2b00      	cmp	r3, #0
  4040ea:	d04b      	beq.n	404184 <__swbuf_r+0xa8>
  4040ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4040f0:	69a3      	ldr	r3, [r4, #24]
  4040f2:	60a3      	str	r3, [r4, #8]
  4040f4:	b291      	uxth	r1, r2
  4040f6:	0708      	lsls	r0, r1, #28
  4040f8:	d539      	bpl.n	40416e <__swbuf_r+0x92>
  4040fa:	6923      	ldr	r3, [r4, #16]
  4040fc:	2b00      	cmp	r3, #0
  4040fe:	d036      	beq.n	40416e <__swbuf_r+0x92>
  404100:	b2ed      	uxtb	r5, r5
  404102:	0489      	lsls	r1, r1, #18
  404104:	462f      	mov	r7, r5
  404106:	d515      	bpl.n	404134 <__swbuf_r+0x58>
  404108:	6822      	ldr	r2, [r4, #0]
  40410a:	6961      	ldr	r1, [r4, #20]
  40410c:	1ad3      	subs	r3, r2, r3
  40410e:	428b      	cmp	r3, r1
  404110:	da1c      	bge.n	40414c <__swbuf_r+0x70>
  404112:	3301      	adds	r3, #1
  404114:	68a1      	ldr	r1, [r4, #8]
  404116:	1c50      	adds	r0, r2, #1
  404118:	3901      	subs	r1, #1
  40411a:	60a1      	str	r1, [r4, #8]
  40411c:	6020      	str	r0, [r4, #0]
  40411e:	7015      	strb	r5, [r2, #0]
  404120:	6962      	ldr	r2, [r4, #20]
  404122:	429a      	cmp	r2, r3
  404124:	d01a      	beq.n	40415c <__swbuf_r+0x80>
  404126:	89a3      	ldrh	r3, [r4, #12]
  404128:	07db      	lsls	r3, r3, #31
  40412a:	d501      	bpl.n	404130 <__swbuf_r+0x54>
  40412c:	2d0a      	cmp	r5, #10
  40412e:	d015      	beq.n	40415c <__swbuf_r+0x80>
  404130:	4638      	mov	r0, r7
  404132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404134:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404136:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40413a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40413e:	81a2      	strh	r2, [r4, #12]
  404140:	6822      	ldr	r2, [r4, #0]
  404142:	6661      	str	r1, [r4, #100]	; 0x64
  404144:	6961      	ldr	r1, [r4, #20]
  404146:	1ad3      	subs	r3, r2, r3
  404148:	428b      	cmp	r3, r1
  40414a:	dbe2      	blt.n	404112 <__swbuf_r+0x36>
  40414c:	4621      	mov	r1, r4
  40414e:	4630      	mov	r0, r6
  404150:	f7fe fcd6 	bl	402b00 <_fflush_r>
  404154:	b940      	cbnz	r0, 404168 <__swbuf_r+0x8c>
  404156:	6822      	ldr	r2, [r4, #0]
  404158:	2301      	movs	r3, #1
  40415a:	e7db      	b.n	404114 <__swbuf_r+0x38>
  40415c:	4621      	mov	r1, r4
  40415e:	4630      	mov	r0, r6
  404160:	f7fe fcce 	bl	402b00 <_fflush_r>
  404164:	2800      	cmp	r0, #0
  404166:	d0e3      	beq.n	404130 <__swbuf_r+0x54>
  404168:	f04f 37ff 	mov.w	r7, #4294967295
  40416c:	e7e0      	b.n	404130 <__swbuf_r+0x54>
  40416e:	4621      	mov	r1, r4
  404170:	4630      	mov	r0, r6
  404172:	f7fe fba9 	bl	4028c8 <__swsetup_r>
  404176:	2800      	cmp	r0, #0
  404178:	d1f6      	bne.n	404168 <__swbuf_r+0x8c>
  40417a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40417e:	6923      	ldr	r3, [r4, #16]
  404180:	b291      	uxth	r1, r2
  404182:	e7bd      	b.n	404100 <__swbuf_r+0x24>
  404184:	f7fe fd14 	bl	402bb0 <__sinit>
  404188:	e7b0      	b.n	4040ec <__swbuf_r+0x10>
  40418a:	bf00      	nop

0040418c <_wcrtomb_r>:
  40418c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40418e:	4606      	mov	r6, r0
  404190:	b085      	sub	sp, #20
  404192:	461f      	mov	r7, r3
  404194:	b189      	cbz	r1, 4041ba <_wcrtomb_r+0x2e>
  404196:	4c10      	ldr	r4, [pc, #64]	; (4041d8 <_wcrtomb_r+0x4c>)
  404198:	4d10      	ldr	r5, [pc, #64]	; (4041dc <_wcrtomb_r+0x50>)
  40419a:	6824      	ldr	r4, [r4, #0]
  40419c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40419e:	2c00      	cmp	r4, #0
  4041a0:	bf08      	it	eq
  4041a2:	462c      	moveq	r4, r5
  4041a4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4041a8:	47a0      	blx	r4
  4041aa:	1c43      	adds	r3, r0, #1
  4041ac:	d103      	bne.n	4041b6 <_wcrtomb_r+0x2a>
  4041ae:	2200      	movs	r2, #0
  4041b0:	238a      	movs	r3, #138	; 0x8a
  4041b2:	603a      	str	r2, [r7, #0]
  4041b4:	6033      	str	r3, [r6, #0]
  4041b6:	b005      	add	sp, #20
  4041b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4041ba:	460c      	mov	r4, r1
  4041bc:	4906      	ldr	r1, [pc, #24]	; (4041d8 <_wcrtomb_r+0x4c>)
  4041be:	4a07      	ldr	r2, [pc, #28]	; (4041dc <_wcrtomb_r+0x50>)
  4041c0:	6809      	ldr	r1, [r1, #0]
  4041c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4041c4:	2900      	cmp	r1, #0
  4041c6:	bf08      	it	eq
  4041c8:	4611      	moveq	r1, r2
  4041ca:	4622      	mov	r2, r4
  4041cc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4041d0:	a901      	add	r1, sp, #4
  4041d2:	47a0      	blx	r4
  4041d4:	e7e9      	b.n	4041aa <_wcrtomb_r+0x1e>
  4041d6:	bf00      	nop
  4041d8:	20400014 	.word	0x20400014
  4041dc:	20400444 	.word	0x20400444

004041e0 <__ascii_wctomb>:
  4041e0:	b121      	cbz	r1, 4041ec <__ascii_wctomb+0xc>
  4041e2:	2aff      	cmp	r2, #255	; 0xff
  4041e4:	d804      	bhi.n	4041f0 <__ascii_wctomb+0x10>
  4041e6:	700a      	strb	r2, [r1, #0]
  4041e8:	2001      	movs	r0, #1
  4041ea:	4770      	bx	lr
  4041ec:	4608      	mov	r0, r1
  4041ee:	4770      	bx	lr
  4041f0:	238a      	movs	r3, #138	; 0x8a
  4041f2:	6003      	str	r3, [r0, #0]
  4041f4:	f04f 30ff 	mov.w	r0, #4294967295
  4041f8:	4770      	bx	lr
  4041fa:	bf00      	nop

004041fc <_write_r>:
  4041fc:	b570      	push	{r4, r5, r6, lr}
  4041fe:	460d      	mov	r5, r1
  404200:	4c08      	ldr	r4, [pc, #32]	; (404224 <_write_r+0x28>)
  404202:	4611      	mov	r1, r2
  404204:	4606      	mov	r6, r0
  404206:	461a      	mov	r2, r3
  404208:	4628      	mov	r0, r5
  40420a:	2300      	movs	r3, #0
  40420c:	6023      	str	r3, [r4, #0]
  40420e:	f7fc fc71 	bl	400af4 <_write>
  404212:	1c43      	adds	r3, r0, #1
  404214:	d000      	beq.n	404218 <_write_r+0x1c>
  404216:	bd70      	pop	{r4, r5, r6, pc}
  404218:	6823      	ldr	r3, [r4, #0]
  40421a:	2b00      	cmp	r3, #0
  40421c:	d0fb      	beq.n	404216 <_write_r+0x1a>
  40421e:	6033      	str	r3, [r6, #0]
  404220:	bd70      	pop	{r4, r5, r6, pc}
  404222:	bf00      	nop
  404224:	204014cc 	.word	0x204014cc

00404228 <__register_exitproc>:
  404228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40422c:	4d2c      	ldr	r5, [pc, #176]	; (4042e0 <__register_exitproc+0xb8>)
  40422e:	4606      	mov	r6, r0
  404230:	6828      	ldr	r0, [r5, #0]
  404232:	4698      	mov	r8, r3
  404234:	460f      	mov	r7, r1
  404236:	4691      	mov	r9, r2
  404238:	f7ff f87a 	bl	403330 <__retarget_lock_acquire_recursive>
  40423c:	4b29      	ldr	r3, [pc, #164]	; (4042e4 <__register_exitproc+0xbc>)
  40423e:	681c      	ldr	r4, [r3, #0]
  404240:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  404244:	2b00      	cmp	r3, #0
  404246:	d03e      	beq.n	4042c6 <__register_exitproc+0x9e>
  404248:	685a      	ldr	r2, [r3, #4]
  40424a:	2a1f      	cmp	r2, #31
  40424c:	dc1c      	bgt.n	404288 <__register_exitproc+0x60>
  40424e:	f102 0e01 	add.w	lr, r2, #1
  404252:	b176      	cbz	r6, 404272 <__register_exitproc+0x4a>
  404254:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  404258:	2401      	movs	r4, #1
  40425a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40425e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  404262:	4094      	lsls	r4, r2
  404264:	4320      	orrs	r0, r4
  404266:	2e02      	cmp	r6, #2
  404268:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40426c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  404270:	d023      	beq.n	4042ba <__register_exitproc+0x92>
  404272:	3202      	adds	r2, #2
  404274:	f8c3 e004 	str.w	lr, [r3, #4]
  404278:	6828      	ldr	r0, [r5, #0]
  40427a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40427e:	f7ff f859 	bl	403334 <__retarget_lock_release_recursive>
  404282:	2000      	movs	r0, #0
  404284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404288:	4b17      	ldr	r3, [pc, #92]	; (4042e8 <__register_exitproc+0xc0>)
  40428a:	b30b      	cbz	r3, 4042d0 <__register_exitproc+0xa8>
  40428c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  404290:	f7ff f8ca 	bl	403428 <malloc>
  404294:	4603      	mov	r3, r0
  404296:	b1d8      	cbz	r0, 4042d0 <__register_exitproc+0xa8>
  404298:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40429c:	6002      	str	r2, [r0, #0]
  40429e:	2100      	movs	r1, #0
  4042a0:	6041      	str	r1, [r0, #4]
  4042a2:	460a      	mov	r2, r1
  4042a4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4042a8:	f04f 0e01 	mov.w	lr, #1
  4042ac:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4042b0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4042b4:	2e00      	cmp	r6, #0
  4042b6:	d0dc      	beq.n	404272 <__register_exitproc+0x4a>
  4042b8:	e7cc      	b.n	404254 <__register_exitproc+0x2c>
  4042ba:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4042be:	430c      	orrs	r4, r1
  4042c0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4042c4:	e7d5      	b.n	404272 <__register_exitproc+0x4a>
  4042c6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4042ca:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4042ce:	e7bb      	b.n	404248 <__register_exitproc+0x20>
  4042d0:	6828      	ldr	r0, [r5, #0]
  4042d2:	f7ff f82f 	bl	403334 <__retarget_lock_release_recursive>
  4042d6:	f04f 30ff 	mov.w	r0, #4294967295
  4042da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4042de:	bf00      	nop
  4042e0:	20400440 	.word	0x20400440
  4042e4:	00404c74 	.word	0x00404c74
  4042e8:	00403429 	.word	0x00403429

004042ec <_close_r>:
  4042ec:	b538      	push	{r3, r4, r5, lr}
  4042ee:	4c07      	ldr	r4, [pc, #28]	; (40430c <_close_r+0x20>)
  4042f0:	2300      	movs	r3, #0
  4042f2:	4605      	mov	r5, r0
  4042f4:	4608      	mov	r0, r1
  4042f6:	6023      	str	r3, [r4, #0]
  4042f8:	f7fd f9bc 	bl	401674 <_close>
  4042fc:	1c43      	adds	r3, r0, #1
  4042fe:	d000      	beq.n	404302 <_close_r+0x16>
  404300:	bd38      	pop	{r3, r4, r5, pc}
  404302:	6823      	ldr	r3, [r4, #0]
  404304:	2b00      	cmp	r3, #0
  404306:	d0fb      	beq.n	404300 <_close_r+0x14>
  404308:	602b      	str	r3, [r5, #0]
  40430a:	bd38      	pop	{r3, r4, r5, pc}
  40430c:	204014cc 	.word	0x204014cc

00404310 <_fclose_r>:
  404310:	b570      	push	{r4, r5, r6, lr}
  404312:	b159      	cbz	r1, 40432c <_fclose_r+0x1c>
  404314:	4605      	mov	r5, r0
  404316:	460c      	mov	r4, r1
  404318:	b110      	cbz	r0, 404320 <_fclose_r+0x10>
  40431a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40431c:	2b00      	cmp	r3, #0
  40431e:	d03c      	beq.n	40439a <_fclose_r+0x8a>
  404320:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404322:	07d8      	lsls	r0, r3, #31
  404324:	d505      	bpl.n	404332 <_fclose_r+0x22>
  404326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40432a:	b92b      	cbnz	r3, 404338 <_fclose_r+0x28>
  40432c:	2600      	movs	r6, #0
  40432e:	4630      	mov	r0, r6
  404330:	bd70      	pop	{r4, r5, r6, pc}
  404332:	89a3      	ldrh	r3, [r4, #12]
  404334:	0599      	lsls	r1, r3, #22
  404336:	d53c      	bpl.n	4043b2 <_fclose_r+0xa2>
  404338:	4621      	mov	r1, r4
  40433a:	4628      	mov	r0, r5
  40433c:	f7fe fb40 	bl	4029c0 <__sflush_r>
  404340:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404342:	4606      	mov	r6, r0
  404344:	b133      	cbz	r3, 404354 <_fclose_r+0x44>
  404346:	69e1      	ldr	r1, [r4, #28]
  404348:	4628      	mov	r0, r5
  40434a:	4798      	blx	r3
  40434c:	2800      	cmp	r0, #0
  40434e:	bfb8      	it	lt
  404350:	f04f 36ff 	movlt.w	r6, #4294967295
  404354:	89a3      	ldrh	r3, [r4, #12]
  404356:	061a      	lsls	r2, r3, #24
  404358:	d422      	bmi.n	4043a0 <_fclose_r+0x90>
  40435a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40435c:	b141      	cbz	r1, 404370 <_fclose_r+0x60>
  40435e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404362:	4299      	cmp	r1, r3
  404364:	d002      	beq.n	40436c <_fclose_r+0x5c>
  404366:	4628      	mov	r0, r5
  404368:	f7fe fd48 	bl	402dfc <_free_r>
  40436c:	2300      	movs	r3, #0
  40436e:	6323      	str	r3, [r4, #48]	; 0x30
  404370:	6c61      	ldr	r1, [r4, #68]	; 0x44
  404372:	b121      	cbz	r1, 40437e <_fclose_r+0x6e>
  404374:	4628      	mov	r0, r5
  404376:	f7fe fd41 	bl	402dfc <_free_r>
  40437a:	2300      	movs	r3, #0
  40437c:	6463      	str	r3, [r4, #68]	; 0x44
  40437e:	f7fe fc43 	bl	402c08 <__sfp_lock_acquire>
  404382:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404384:	2200      	movs	r2, #0
  404386:	07db      	lsls	r3, r3, #31
  404388:	81a2      	strh	r2, [r4, #12]
  40438a:	d50e      	bpl.n	4043aa <_fclose_r+0x9a>
  40438c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40438e:	f7fe ffcd 	bl	40332c <__retarget_lock_close_recursive>
  404392:	f7fe fc3f 	bl	402c14 <__sfp_lock_release>
  404396:	4630      	mov	r0, r6
  404398:	bd70      	pop	{r4, r5, r6, pc}
  40439a:	f7fe fc09 	bl	402bb0 <__sinit>
  40439e:	e7bf      	b.n	404320 <_fclose_r+0x10>
  4043a0:	6921      	ldr	r1, [r4, #16]
  4043a2:	4628      	mov	r0, r5
  4043a4:	f7fe fd2a 	bl	402dfc <_free_r>
  4043a8:	e7d7      	b.n	40435a <_fclose_r+0x4a>
  4043aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4043ac:	f7fe ffc2 	bl	403334 <__retarget_lock_release_recursive>
  4043b0:	e7ec      	b.n	40438c <_fclose_r+0x7c>
  4043b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4043b4:	f7fe ffbc 	bl	403330 <__retarget_lock_acquire_recursive>
  4043b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4043bc:	2b00      	cmp	r3, #0
  4043be:	d1bb      	bne.n	404338 <_fclose_r+0x28>
  4043c0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4043c2:	f016 0601 	ands.w	r6, r6, #1
  4043c6:	d1b1      	bne.n	40432c <_fclose_r+0x1c>
  4043c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4043ca:	f7fe ffb3 	bl	403334 <__retarget_lock_release_recursive>
  4043ce:	4630      	mov	r0, r6
  4043d0:	bd70      	pop	{r4, r5, r6, pc}
  4043d2:	bf00      	nop

004043d4 <_fstat_r>:
  4043d4:	b538      	push	{r3, r4, r5, lr}
  4043d6:	460b      	mov	r3, r1
  4043d8:	4c07      	ldr	r4, [pc, #28]	; (4043f8 <_fstat_r+0x24>)
  4043da:	4605      	mov	r5, r0
  4043dc:	4611      	mov	r1, r2
  4043de:	4618      	mov	r0, r3
  4043e0:	2300      	movs	r3, #0
  4043e2:	6023      	str	r3, [r4, #0]
  4043e4:	f7fd f949 	bl	40167a <_fstat>
  4043e8:	1c43      	adds	r3, r0, #1
  4043ea:	d000      	beq.n	4043ee <_fstat_r+0x1a>
  4043ec:	bd38      	pop	{r3, r4, r5, pc}
  4043ee:	6823      	ldr	r3, [r4, #0]
  4043f0:	2b00      	cmp	r3, #0
  4043f2:	d0fb      	beq.n	4043ec <_fstat_r+0x18>
  4043f4:	602b      	str	r3, [r5, #0]
  4043f6:	bd38      	pop	{r3, r4, r5, pc}
  4043f8:	204014cc 	.word	0x204014cc

004043fc <_isatty_r>:
  4043fc:	b538      	push	{r3, r4, r5, lr}
  4043fe:	4c07      	ldr	r4, [pc, #28]	; (40441c <_isatty_r+0x20>)
  404400:	2300      	movs	r3, #0
  404402:	4605      	mov	r5, r0
  404404:	4608      	mov	r0, r1
  404406:	6023      	str	r3, [r4, #0]
  404408:	f7fd f93c 	bl	401684 <_isatty>
  40440c:	1c43      	adds	r3, r0, #1
  40440e:	d000      	beq.n	404412 <_isatty_r+0x16>
  404410:	bd38      	pop	{r3, r4, r5, pc}
  404412:	6823      	ldr	r3, [r4, #0]
  404414:	2b00      	cmp	r3, #0
  404416:	d0fb      	beq.n	404410 <_isatty_r+0x14>
  404418:	602b      	str	r3, [r5, #0]
  40441a:	bd38      	pop	{r3, r4, r5, pc}
  40441c:	204014cc 	.word	0x204014cc

00404420 <_lseek_r>:
  404420:	b570      	push	{r4, r5, r6, lr}
  404422:	460d      	mov	r5, r1
  404424:	4c08      	ldr	r4, [pc, #32]	; (404448 <_lseek_r+0x28>)
  404426:	4611      	mov	r1, r2
  404428:	4606      	mov	r6, r0
  40442a:	461a      	mov	r2, r3
  40442c:	4628      	mov	r0, r5
  40442e:	2300      	movs	r3, #0
  404430:	6023      	str	r3, [r4, #0]
  404432:	f7fd f929 	bl	401688 <_lseek>
  404436:	1c43      	adds	r3, r0, #1
  404438:	d000      	beq.n	40443c <_lseek_r+0x1c>
  40443a:	bd70      	pop	{r4, r5, r6, pc}
  40443c:	6823      	ldr	r3, [r4, #0]
  40443e:	2b00      	cmp	r3, #0
  404440:	d0fb      	beq.n	40443a <_lseek_r+0x1a>
  404442:	6033      	str	r3, [r6, #0]
  404444:	bd70      	pop	{r4, r5, r6, pc}
  404446:	bf00      	nop
  404448:	204014cc 	.word	0x204014cc

0040444c <_read_r>:
  40444c:	b570      	push	{r4, r5, r6, lr}
  40444e:	460d      	mov	r5, r1
  404450:	4c08      	ldr	r4, [pc, #32]	; (404474 <_read_r+0x28>)
  404452:	4611      	mov	r1, r2
  404454:	4606      	mov	r6, r0
  404456:	461a      	mov	r2, r3
  404458:	4628      	mov	r0, r5
  40445a:	2300      	movs	r3, #0
  40445c:	6023      	str	r3, [r4, #0]
  40445e:	f7fc fb2b 	bl	400ab8 <_read>
  404462:	1c43      	adds	r3, r0, #1
  404464:	d000      	beq.n	404468 <_read_r+0x1c>
  404466:	bd70      	pop	{r4, r5, r6, pc}
  404468:	6823      	ldr	r3, [r4, #0]
  40446a:	2b00      	cmp	r3, #0
  40446c:	d0fb      	beq.n	404466 <_read_r+0x1a>
  40446e:	6033      	str	r3, [r6, #0]
  404470:	bd70      	pop	{r4, r5, r6, pc}
  404472:	bf00      	nop
  404474:	204014cc 	.word	0x204014cc

00404478 <__aeabi_uldivmod>:
  404478:	b953      	cbnz	r3, 404490 <__aeabi_uldivmod+0x18>
  40447a:	b94a      	cbnz	r2, 404490 <__aeabi_uldivmod+0x18>
  40447c:	2900      	cmp	r1, #0
  40447e:	bf08      	it	eq
  404480:	2800      	cmpeq	r0, #0
  404482:	bf1c      	itt	ne
  404484:	f04f 31ff 	movne.w	r1, #4294967295
  404488:	f04f 30ff 	movne.w	r0, #4294967295
  40448c:	f000 b97a 	b.w	404784 <__aeabi_idiv0>
  404490:	f1ad 0c08 	sub.w	ip, sp, #8
  404494:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404498:	f000 f806 	bl	4044a8 <__udivmoddi4>
  40449c:	f8dd e004 	ldr.w	lr, [sp, #4]
  4044a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4044a4:	b004      	add	sp, #16
  4044a6:	4770      	bx	lr

004044a8 <__udivmoddi4>:
  4044a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4044ac:	468c      	mov	ip, r1
  4044ae:	460d      	mov	r5, r1
  4044b0:	4604      	mov	r4, r0
  4044b2:	9e08      	ldr	r6, [sp, #32]
  4044b4:	2b00      	cmp	r3, #0
  4044b6:	d151      	bne.n	40455c <__udivmoddi4+0xb4>
  4044b8:	428a      	cmp	r2, r1
  4044ba:	4617      	mov	r7, r2
  4044bc:	d96d      	bls.n	40459a <__udivmoddi4+0xf2>
  4044be:	fab2 fe82 	clz	lr, r2
  4044c2:	f1be 0f00 	cmp.w	lr, #0
  4044c6:	d00b      	beq.n	4044e0 <__udivmoddi4+0x38>
  4044c8:	f1ce 0c20 	rsb	ip, lr, #32
  4044cc:	fa01 f50e 	lsl.w	r5, r1, lr
  4044d0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4044d4:	fa02 f70e 	lsl.w	r7, r2, lr
  4044d8:	ea4c 0c05 	orr.w	ip, ip, r5
  4044dc:	fa00 f40e 	lsl.w	r4, r0, lr
  4044e0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4044e4:	0c25      	lsrs	r5, r4, #16
  4044e6:	fbbc f8fa 	udiv	r8, ip, sl
  4044ea:	fa1f f987 	uxth.w	r9, r7
  4044ee:	fb0a cc18 	mls	ip, sl, r8, ip
  4044f2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4044f6:	fb08 f309 	mul.w	r3, r8, r9
  4044fa:	42ab      	cmp	r3, r5
  4044fc:	d90a      	bls.n	404514 <__udivmoddi4+0x6c>
  4044fe:	19ed      	adds	r5, r5, r7
  404500:	f108 32ff 	add.w	r2, r8, #4294967295
  404504:	f080 8123 	bcs.w	40474e <__udivmoddi4+0x2a6>
  404508:	42ab      	cmp	r3, r5
  40450a:	f240 8120 	bls.w	40474e <__udivmoddi4+0x2a6>
  40450e:	f1a8 0802 	sub.w	r8, r8, #2
  404512:	443d      	add	r5, r7
  404514:	1aed      	subs	r5, r5, r3
  404516:	b2a4      	uxth	r4, r4
  404518:	fbb5 f0fa 	udiv	r0, r5, sl
  40451c:	fb0a 5510 	mls	r5, sl, r0, r5
  404520:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  404524:	fb00 f909 	mul.w	r9, r0, r9
  404528:	45a1      	cmp	r9, r4
  40452a:	d909      	bls.n	404540 <__udivmoddi4+0x98>
  40452c:	19e4      	adds	r4, r4, r7
  40452e:	f100 33ff 	add.w	r3, r0, #4294967295
  404532:	f080 810a 	bcs.w	40474a <__udivmoddi4+0x2a2>
  404536:	45a1      	cmp	r9, r4
  404538:	f240 8107 	bls.w	40474a <__udivmoddi4+0x2a2>
  40453c:	3802      	subs	r0, #2
  40453e:	443c      	add	r4, r7
  404540:	eba4 0409 	sub.w	r4, r4, r9
  404544:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  404548:	2100      	movs	r1, #0
  40454a:	2e00      	cmp	r6, #0
  40454c:	d061      	beq.n	404612 <__udivmoddi4+0x16a>
  40454e:	fa24 f40e 	lsr.w	r4, r4, lr
  404552:	2300      	movs	r3, #0
  404554:	6034      	str	r4, [r6, #0]
  404556:	6073      	str	r3, [r6, #4]
  404558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40455c:	428b      	cmp	r3, r1
  40455e:	d907      	bls.n	404570 <__udivmoddi4+0xc8>
  404560:	2e00      	cmp	r6, #0
  404562:	d054      	beq.n	40460e <__udivmoddi4+0x166>
  404564:	2100      	movs	r1, #0
  404566:	e886 0021 	stmia.w	r6, {r0, r5}
  40456a:	4608      	mov	r0, r1
  40456c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404570:	fab3 f183 	clz	r1, r3
  404574:	2900      	cmp	r1, #0
  404576:	f040 808e 	bne.w	404696 <__udivmoddi4+0x1ee>
  40457a:	42ab      	cmp	r3, r5
  40457c:	d302      	bcc.n	404584 <__udivmoddi4+0xdc>
  40457e:	4282      	cmp	r2, r0
  404580:	f200 80fa 	bhi.w	404778 <__udivmoddi4+0x2d0>
  404584:	1a84      	subs	r4, r0, r2
  404586:	eb65 0503 	sbc.w	r5, r5, r3
  40458a:	2001      	movs	r0, #1
  40458c:	46ac      	mov	ip, r5
  40458e:	2e00      	cmp	r6, #0
  404590:	d03f      	beq.n	404612 <__udivmoddi4+0x16a>
  404592:	e886 1010 	stmia.w	r6, {r4, ip}
  404596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40459a:	b912      	cbnz	r2, 4045a2 <__udivmoddi4+0xfa>
  40459c:	2701      	movs	r7, #1
  40459e:	fbb7 f7f2 	udiv	r7, r7, r2
  4045a2:	fab7 fe87 	clz	lr, r7
  4045a6:	f1be 0f00 	cmp.w	lr, #0
  4045aa:	d134      	bne.n	404616 <__udivmoddi4+0x16e>
  4045ac:	1beb      	subs	r3, r5, r7
  4045ae:	0c3a      	lsrs	r2, r7, #16
  4045b0:	fa1f fc87 	uxth.w	ip, r7
  4045b4:	2101      	movs	r1, #1
  4045b6:	fbb3 f8f2 	udiv	r8, r3, r2
  4045ba:	0c25      	lsrs	r5, r4, #16
  4045bc:	fb02 3318 	mls	r3, r2, r8, r3
  4045c0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4045c4:	fb0c f308 	mul.w	r3, ip, r8
  4045c8:	42ab      	cmp	r3, r5
  4045ca:	d907      	bls.n	4045dc <__udivmoddi4+0x134>
  4045cc:	19ed      	adds	r5, r5, r7
  4045ce:	f108 30ff 	add.w	r0, r8, #4294967295
  4045d2:	d202      	bcs.n	4045da <__udivmoddi4+0x132>
  4045d4:	42ab      	cmp	r3, r5
  4045d6:	f200 80d1 	bhi.w	40477c <__udivmoddi4+0x2d4>
  4045da:	4680      	mov	r8, r0
  4045dc:	1aed      	subs	r5, r5, r3
  4045de:	b2a3      	uxth	r3, r4
  4045e0:	fbb5 f0f2 	udiv	r0, r5, r2
  4045e4:	fb02 5510 	mls	r5, r2, r0, r5
  4045e8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4045ec:	fb0c fc00 	mul.w	ip, ip, r0
  4045f0:	45a4      	cmp	ip, r4
  4045f2:	d907      	bls.n	404604 <__udivmoddi4+0x15c>
  4045f4:	19e4      	adds	r4, r4, r7
  4045f6:	f100 33ff 	add.w	r3, r0, #4294967295
  4045fa:	d202      	bcs.n	404602 <__udivmoddi4+0x15a>
  4045fc:	45a4      	cmp	ip, r4
  4045fe:	f200 80b8 	bhi.w	404772 <__udivmoddi4+0x2ca>
  404602:	4618      	mov	r0, r3
  404604:	eba4 040c 	sub.w	r4, r4, ip
  404608:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40460c:	e79d      	b.n	40454a <__udivmoddi4+0xa2>
  40460e:	4631      	mov	r1, r6
  404610:	4630      	mov	r0, r6
  404612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404616:	f1ce 0420 	rsb	r4, lr, #32
  40461a:	fa05 f30e 	lsl.w	r3, r5, lr
  40461e:	fa07 f70e 	lsl.w	r7, r7, lr
  404622:	fa20 f804 	lsr.w	r8, r0, r4
  404626:	0c3a      	lsrs	r2, r7, #16
  404628:	fa25 f404 	lsr.w	r4, r5, r4
  40462c:	ea48 0803 	orr.w	r8, r8, r3
  404630:	fbb4 f1f2 	udiv	r1, r4, r2
  404634:	ea4f 4518 	mov.w	r5, r8, lsr #16
  404638:	fb02 4411 	mls	r4, r2, r1, r4
  40463c:	fa1f fc87 	uxth.w	ip, r7
  404640:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  404644:	fb01 f30c 	mul.w	r3, r1, ip
  404648:	42ab      	cmp	r3, r5
  40464a:	fa00 f40e 	lsl.w	r4, r0, lr
  40464e:	d909      	bls.n	404664 <__udivmoddi4+0x1bc>
  404650:	19ed      	adds	r5, r5, r7
  404652:	f101 30ff 	add.w	r0, r1, #4294967295
  404656:	f080 808a 	bcs.w	40476e <__udivmoddi4+0x2c6>
  40465a:	42ab      	cmp	r3, r5
  40465c:	f240 8087 	bls.w	40476e <__udivmoddi4+0x2c6>
  404660:	3902      	subs	r1, #2
  404662:	443d      	add	r5, r7
  404664:	1aeb      	subs	r3, r5, r3
  404666:	fa1f f588 	uxth.w	r5, r8
  40466a:	fbb3 f0f2 	udiv	r0, r3, r2
  40466e:	fb02 3310 	mls	r3, r2, r0, r3
  404672:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404676:	fb00 f30c 	mul.w	r3, r0, ip
  40467a:	42ab      	cmp	r3, r5
  40467c:	d907      	bls.n	40468e <__udivmoddi4+0x1e6>
  40467e:	19ed      	adds	r5, r5, r7
  404680:	f100 38ff 	add.w	r8, r0, #4294967295
  404684:	d26f      	bcs.n	404766 <__udivmoddi4+0x2be>
  404686:	42ab      	cmp	r3, r5
  404688:	d96d      	bls.n	404766 <__udivmoddi4+0x2be>
  40468a:	3802      	subs	r0, #2
  40468c:	443d      	add	r5, r7
  40468e:	1aeb      	subs	r3, r5, r3
  404690:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  404694:	e78f      	b.n	4045b6 <__udivmoddi4+0x10e>
  404696:	f1c1 0720 	rsb	r7, r1, #32
  40469a:	fa22 f807 	lsr.w	r8, r2, r7
  40469e:	408b      	lsls	r3, r1
  4046a0:	fa05 f401 	lsl.w	r4, r5, r1
  4046a4:	ea48 0303 	orr.w	r3, r8, r3
  4046a8:	fa20 fe07 	lsr.w	lr, r0, r7
  4046ac:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4046b0:	40fd      	lsrs	r5, r7
  4046b2:	ea4e 0e04 	orr.w	lr, lr, r4
  4046b6:	fbb5 f9fc 	udiv	r9, r5, ip
  4046ba:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4046be:	fb0c 5519 	mls	r5, ip, r9, r5
  4046c2:	fa1f f883 	uxth.w	r8, r3
  4046c6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4046ca:	fb09 f408 	mul.w	r4, r9, r8
  4046ce:	42ac      	cmp	r4, r5
  4046d0:	fa02 f201 	lsl.w	r2, r2, r1
  4046d4:	fa00 fa01 	lsl.w	sl, r0, r1
  4046d8:	d908      	bls.n	4046ec <__udivmoddi4+0x244>
  4046da:	18ed      	adds	r5, r5, r3
  4046dc:	f109 30ff 	add.w	r0, r9, #4294967295
  4046e0:	d243      	bcs.n	40476a <__udivmoddi4+0x2c2>
  4046e2:	42ac      	cmp	r4, r5
  4046e4:	d941      	bls.n	40476a <__udivmoddi4+0x2c2>
  4046e6:	f1a9 0902 	sub.w	r9, r9, #2
  4046ea:	441d      	add	r5, r3
  4046ec:	1b2d      	subs	r5, r5, r4
  4046ee:	fa1f fe8e 	uxth.w	lr, lr
  4046f2:	fbb5 f0fc 	udiv	r0, r5, ip
  4046f6:	fb0c 5510 	mls	r5, ip, r0, r5
  4046fa:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4046fe:	fb00 f808 	mul.w	r8, r0, r8
  404702:	45a0      	cmp	r8, r4
  404704:	d907      	bls.n	404716 <__udivmoddi4+0x26e>
  404706:	18e4      	adds	r4, r4, r3
  404708:	f100 35ff 	add.w	r5, r0, #4294967295
  40470c:	d229      	bcs.n	404762 <__udivmoddi4+0x2ba>
  40470e:	45a0      	cmp	r8, r4
  404710:	d927      	bls.n	404762 <__udivmoddi4+0x2ba>
  404712:	3802      	subs	r0, #2
  404714:	441c      	add	r4, r3
  404716:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40471a:	eba4 0408 	sub.w	r4, r4, r8
  40471e:	fba0 8902 	umull	r8, r9, r0, r2
  404722:	454c      	cmp	r4, r9
  404724:	46c6      	mov	lr, r8
  404726:	464d      	mov	r5, r9
  404728:	d315      	bcc.n	404756 <__udivmoddi4+0x2ae>
  40472a:	d012      	beq.n	404752 <__udivmoddi4+0x2aa>
  40472c:	b156      	cbz	r6, 404744 <__udivmoddi4+0x29c>
  40472e:	ebba 030e 	subs.w	r3, sl, lr
  404732:	eb64 0405 	sbc.w	r4, r4, r5
  404736:	fa04 f707 	lsl.w	r7, r4, r7
  40473a:	40cb      	lsrs	r3, r1
  40473c:	431f      	orrs	r7, r3
  40473e:	40cc      	lsrs	r4, r1
  404740:	6037      	str	r7, [r6, #0]
  404742:	6074      	str	r4, [r6, #4]
  404744:	2100      	movs	r1, #0
  404746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40474a:	4618      	mov	r0, r3
  40474c:	e6f8      	b.n	404540 <__udivmoddi4+0x98>
  40474e:	4690      	mov	r8, r2
  404750:	e6e0      	b.n	404514 <__udivmoddi4+0x6c>
  404752:	45c2      	cmp	sl, r8
  404754:	d2ea      	bcs.n	40472c <__udivmoddi4+0x284>
  404756:	ebb8 0e02 	subs.w	lr, r8, r2
  40475a:	eb69 0503 	sbc.w	r5, r9, r3
  40475e:	3801      	subs	r0, #1
  404760:	e7e4      	b.n	40472c <__udivmoddi4+0x284>
  404762:	4628      	mov	r0, r5
  404764:	e7d7      	b.n	404716 <__udivmoddi4+0x26e>
  404766:	4640      	mov	r0, r8
  404768:	e791      	b.n	40468e <__udivmoddi4+0x1e6>
  40476a:	4681      	mov	r9, r0
  40476c:	e7be      	b.n	4046ec <__udivmoddi4+0x244>
  40476e:	4601      	mov	r1, r0
  404770:	e778      	b.n	404664 <__udivmoddi4+0x1bc>
  404772:	3802      	subs	r0, #2
  404774:	443c      	add	r4, r7
  404776:	e745      	b.n	404604 <__udivmoddi4+0x15c>
  404778:	4608      	mov	r0, r1
  40477a:	e708      	b.n	40458e <__udivmoddi4+0xe6>
  40477c:	f1a8 0802 	sub.w	r8, r8, #2
  404780:	443d      	add	r5, r7
  404782:	e72b      	b.n	4045dc <__udivmoddi4+0x134>

00404784 <__aeabi_idiv0>:
  404784:	4770      	bx	lr
  404786:	bf00      	nop

00404788 <__func__.5842>:
  404788:	6262 705f 726f 5f74 6573 5f74 6164 6174     bb_port_set_data
  404798:	645f 7269 6365 3174 0036 0000               _direct16...

004047a4 <__func__.5874>:
  4047a4:	6262 705f 726f 5f74 6567 5f74 6164 6174     bb_port_get_data
  4047b4:	645f 7269 6365 3374 0032 0000 6228 7479     _direct32...(byt
  4047c4:	4f65 6666 6573 4974 576e 726f 2064 2025     eOffsetInWord % 
  4047d4:	5532 2029 3d3d 3020 0000 0000 2e2e 622f     2U) == 0....../b
  4047e4:	616c 6b63 6f62 7261 2f64 6262 705f 726f     lackboard/bb_por
  4047f4:	2e74 0063 7962 6574 664f 7366 7465 6e49     t.c.byteOffsetIn
  404804:	6f57 6472 3d20 203d 0030 0000               Word == 0...

00404810 <can_spec_can_element_list>:
  404810:	0400 0000 49b4 0040 0064 0000 0004 0000     .....I@.d.......
  404820:	49c4 0040 0001 0004 0000 0000 0000 0000     .I@.............
	...
  404840:	0579 0040 0001 0000 0103 0000 0410 0000     y.@.............
  404850:	49d0 0040 0064 0000 0008 0000 49e4 0040     .I@.d........I@.
  404860:	0001 0002 49f8 0040 0201 0002 4a0c 0040     .....I@......J@.
  404870:	0401 0002 4a1c 0040 0601 0002 0000 0000     .....J@.........
  404880:	0000 0000 0001 0000 0460 0000 4a2c 0040     ........`...,J@.
  404890:	0064 0000 0001 0000 4a30 0040 0001 0001     d.......0J@.....
	...
  4048c0:	0001 0000 0470 0000 4a40 0040 0064 0000     ....p...@J@.d...
  4048d0:	0001 0000 4a54 0040 0001 0001 0000 0000     ....TJ@.........
	...
  4048fc:	0001 0000 0480 0000 4a64 0040 0064 0000     ........dJ@.d...
  40490c:	0001 0000 4a68 0040 0001 0001 0000 0000     ....hJ@.........
	...
  404938:	0001 0000 0630 0000 4a78 0040 0064 0000     ....0...xJ@.d...
  404948:	0001 0000 4a84 0040 0001 0001 0000 0000     .....J@.........
	...
  40496c:	0579 0040 0001 0000 0100 0000 0631 0000     y.@.........1...
  40497c:	4a90 0040 0064 0000 0008 0000 4a9c 0040     .J@.d........J@.
  40498c:	0001 0002 4aac 0040 0201 0002 4ac0 0040     .....J@......J@.
  40499c:	0401 0002 4acc 0040 0601 0002 0000 0000     .....J@.........
  4049ac:	0000 0000 0100 0000 4353 5f4d 7953 7473     ........SCM_Syst
  4049bc:	6d65 6142 6672 0079 6554 7473 6c46 6f6f     emBarfy.TestFloo
  4049cc:	7966 0000 4353 5f4d 6f4d 6f74 3172 6150     fy..SCM_Motor1Pa
  4049dc:	6172 736d 0031 0000 6f6d 6f74 3172 6341     rams1...motor1Ac
  4049ec:	6563 656c 6172 6974 6e6f 0000 6f6d 6f74     celeration..moto
  4049fc:	3172 6544 6563 656c 6172 6974 6e6f 0000     r1Deceleration..
  404a0c:	6f6d 6f74 3172 614d 5378 6570 6465 0000     motor1MaxSpeed..
  404a1c:	6f6d 6f74 3172 694d 536e 6570 6465 0000     motor1MinSpeed..
  404a2c:	4353 5f4d 6f4d 6f74 3172 6f43 746e 6f72     SCM_Motor1Contro
  404a3c:	006c 0000 4353 5f4d 6f4d 6f74 3172 6f43     l...SCM_Motor1Co
  404a4c:	746e 6f72 0032 0000 6f4d 6f74 3272 6f43     ntro2...Motor2Co
  404a5c:	746e 6f72 006c 0000 4353 5f4d 6f4d 6f74     ntrol...SCM_Moto
  404a6c:	3372 6f43 746e 6f72 006c 0000 4352 5f4d     r3Control...RCM_
  404a7c:	7953 7473 6d65 0000 6f4d 7564 656c 6449     System..ModuleId
  404a8c:	0000 0000 4352 5f4d 6553 736e 726f 0031     ....RCM_Sensor1.
  404a9c:	6553 736e 726f 5631 6c6f 6174 6567 0000     Sensor1Voltage..
  404aac:	6553 736e 726f 5431 6d65 6570 6172 7574     Sensor1Temperatu
  404abc:	6572 0000 6553 736e 726f 4631 6f6f 0000     re..Sensor1Foo..
  404acc:	6553 736e 726f 4231 7261 0000 6574 7473     Sensor1Bar..test
  404adc:	6143 6c6c 6162 6b63 203a 4353 5f4d 5645     Callback: SCM_EV
  404aec:	4e45 5f54 4f46 3d4f 6425 202c 7872 6843     ENT_FOO=%d, rxCh
  404afc:	6e61 253d 2c64 7420 4378 6168 3d6e 6425     an=%d, txChan=%d
  404b0c:	202c 6f63 6e75 6574 3d72 6425 000a 0000     , counter=%d....

00404b1c <__func__.6478>:
  404b1c:	6373 5f6d 6163 5f6e 7274 6e61 0073 0000     scm_can_trans...
  404b2c:	656c 676e 6874 3c20 203d 614d 4278 7479     length <= MaxByt
  404b3c:	7365 6550 4372 6e61 734d 0067 2e2e 622f     esPerCanMsg.../b
  404b4c:	616c 6b63 6f62 7261 2f64 6373 5f6d 6163     lackboard/scm_ca
  404b5c:	5f6e 7274 6e61 2e73 0063 0000 7553 6363     n_trans.c...Succ
  404b6c:	7365 0073 203a 434d 4e41 6220 7375 6f20     ess.: MCAN bus o
  404b7c:	6666 6520 7272 726f 202c 6572 692d 696e     ff error, re-ini
  404b8c:	6974 6c61 7a69 7461 6f69 2e6e 0d20 0d0a     tialization. ...
  404b9c:	000a 0000 7250 746f 636f 6c6f 4120 4b43     ....Protocol ACK
  404bac:	6520 7272 726f 202c 6c70 6165 6573 6420      error, please d
  404bbc:	756f 6c62 2065 6863 6365 206b 6874 2065     ouble check the 
  404bcc:	6c63 636f 206b 6e69 7420 6f77 6220 616f     clock in two boa
  404bdc:	6472 2e73 0d20 0d0a 000a 0000 7250 746f     rds. .......Prot
  404bec:	636f 6c6f 6620 726f 616d 2074 7265 6f72     ocol format erro
  404bfc:	2c72 7020 656c 7361 2065 6f64 6275 656c     r, please double
  404c0c:	6320 6568 6b63 7420 6568 6320 6f6c 6b63      check the clock
  404c1c:	6920 206e 7774 206f 6f62 7261 7364 202e      in two boards. 
  404c2c:	0a0d 0a0d 0000 0000 202c 7566 636e 6974     ........, functi
  404c3c:	6e6f 203a 0000 0000 7361 6573 7472 6f69     on: ....assertio
  404c4c:	206e 2522 2273 6620 6961 656c 3a64 6620     n "%s" failed: f
  404c5c:	6c69 2065 2522 2273 202c 696c 656e 2520     ile "%s", line %
  404c6c:	2564 2573 0a73 0000                         d%s%s...

00404c74 <_global_impure_ptr>:
  404c74:	0018 2040 3130 3332 3534 3736 3938 4241     ..@ 0123456789AB
  404c84:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  404c94:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  404ca4:	296c 0000                                   l)..

00404ca8 <blanks.7217>:
  404ca8:	2020 2020 2020 2020 2020 2020 2020 2020                     

00404cb8 <zeroes.7218>:
  404cb8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  404cc8:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

00404cd8 <_ctype_>:
  404cd8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  404ce8:	2020 2020 2020 2020 2020 2020 2020 2020                     
  404cf8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  404d08:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  404d18:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  404d28:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  404d38:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  404d48:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  404d58:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00404ddc <_init>:
  404ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404dde:	bf00      	nop
  404de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404de2:	bc08      	pop	{r3}
  404de4:	469e      	mov	lr, r3
  404de6:	4770      	bx	lr

00404de8 <__init_array_start>:
  404de8:	00402991 	.word	0x00402991

00404dec <__frame_dummy_init_array_entry>:
  404dec:	0040018d                                ..@.

00404df0 <_fini>:
  404df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404df2:	bf00      	nop
  404df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404df6:	bc08      	pop	{r3}
  404df8:	469e      	mov	lr, r3
  404dfa:	4770      	bx	lr

00404dfc <__fini_array_start>:
  404dfc:	00400169 	.word	0x00400169
