
MCAN_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e40  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404e40  00404e40  00014e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00404e48  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000b10  204009c0  00405808  000209c0  2**2
                  ALLOC
  4 .stack        00002000  204014d0  00406318  000209c0  2**0
                  ALLOC
  5 .heap         00000200  204034d0  00408318  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001eb00  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000043f0  00000000  00000000  0003f547  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006eec  00000000  00000000  00043937  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000de8  00000000  00000000  0004a823  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e18  00000000  00000000  0004b60b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000235f7  00000000  00000000  0004c423  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000fffe  00000000  00000000  0006fa1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00098004  00000000  00000000  0007fa18  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002d40  00000000  00000000  00117a1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d0 34 40 20 01 14 40 00 ff 13 40 00 ff 13 40 00     .4@ ..@...@...@.
  400010:	ff 13 40 00 ff 13 40 00 ff 13 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	ff 13 40 00 ff 13 40 00 00 00 00 00 ff 13 40 00     ..@...@.......@.
  40003c:	ff 13 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  40004c:	ff 13 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  40005c:	ff 13 40 00 ff 13 40 00 00 00 00 00 c1 10 40 00     ..@...@.......@.
  40006c:	d5 10 40 00 e9 10 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  40007c:	ff 13 40 00 fd 10 40 00 11 11 40 00 ff 13 40 00     ..@...@...@...@.
  40008c:	ff 13 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  40009c:	ff 13 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  4000ac:	ff 13 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  4000bc:	ff 13 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  4000cc:	ff 13 40 00 ff 13 40 00 81 09 40 00 ff 13 40 00     ..@...@...@...@.
  4000dc:	ff 13 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  4000ec:	ff 13 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  4000fc:	ff 13 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  40010c:	ff 13 40 00 ff 13 40 00 ff 13 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ......@...@...@.
  40012c:	ff 13 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  40013c:	ff 13 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  40014c:	ff 13 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  40015c:	ff 13 40 00 ff 13 40 00 ff 13 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c0 	.word	0x204009c0
  400184:	00000000 	.word	0x00000000
  400188:	00404e48 	.word	0x00404e48

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00404e48 	.word	0x00404e48
  4001c8:	204009c4 	.word	0x204009c4
  4001cc:	00404e48 	.word	0x00404e48
  4001d0:	00000000 	.word	0x00000000

004001d4 <bb_elem_decrement_wakeup_offset>:
 * @return True if the wakeup offset was decremented, false if it was not
 */
bool_T bb_elem_decrement_wakeup_offset(BlackboardElement_T * bbElement, const uint32_t elapsedTicks)
{
    bool_T decremented = false;
    if (bbElement->wakeupOffset > elapsedTicks)
  4001d4:	68c3      	ldr	r3, [r0, #12]
  4001d6:	428b      	cmp	r3, r1
  4001d8:	d903      	bls.n	4001e2 <bb_elem_decrement_wakeup_offset+0xe>
    {
        bbElement->wakeupOffset = bbElement->wakeupOffset - elapsedTicks;
  4001da:	1a5b      	subs	r3, r3, r1
  4001dc:	60c3      	str	r3, [r0, #12]
        decremented = true;
  4001de:	2001      	movs	r0, #1
  4001e0:	4770      	bx	lr
    bool_T decremented = false;
  4001e2:	2000      	movs	r0, #0
    }
    return decremented;
}
  4001e4:	4770      	bx	lr
	...

004001e8 <bb_elem_get_data_for_can>:
 *
 * @param[out] data0 a pointer to a u32 that will be copied with the lower 4 bytes of data.
 * @param[out] data1 a pointer to a u32 that will be copied with the upper 4 bytes of data.
 */
void bb_elem_get_data_for_can(BlackboardElement_T const * bbElement, uint32_t * const data0, uint32_t * const data1)
{
  4001e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4001ea:	4606      	mov	r6, r0
  4001ec:	460f      	mov	r7, r1
  4001ee:	4615      	mov	r5, r2
    *data0 = bb_port_get_data_direct32(bbElement, 0U);
  4001f0:	2100      	movs	r1, #0
  4001f2:	4c04      	ldr	r4, [pc, #16]	; (400204 <bb_elem_get_data_for_can+0x1c>)
  4001f4:	47a0      	blx	r4
  4001f6:	6038      	str	r0, [r7, #0]
    *data1 = bb_port_get_data_direct32(bbElement, 4U);
  4001f8:	2104      	movs	r1, #4
  4001fa:	4630      	mov	r0, r6
  4001fc:	47a0      	blx	r4
  4001fe:	6028      	str	r0, [r5, #0]
  400200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400202:	bf00      	nop
  400204:	004003f9 	.word	0x004003f9

00400208 <bb_elem_update_last_tick_count>:
 * @brief updateLastTickCount updates last tick count to the current tick if the scheduler is running
 *
 * @return none
 */
void bb_elem_update_last_tick_count(BlackboardElement_T * bbElement)
{
  400208:	b510      	push	{r4, lr}
  40020a:	4604      	mov	r4, r0
    bbElement->lastUpdate_tick = bb_port_get_current_ticks();
  40020c:	4b01      	ldr	r3, [pc, #4]	; (400214 <bb_elem_update_last_tick_count+0xc>)
  40020e:	4798      	blx	r3
  400210:	60a0      	str	r0, [r4, #8]
  400212:	bd10      	pop	{r4, pc}
  400214:	004003b5 	.word	0x004003b5

00400218 <bb_elem_set_uint8_data>:
{
  400218:	b510      	push	{r4, lr}
  40021a:	4604      	mov	r4, r0
    bb_port_set_data_direct8(bbElement, data8, index);
  40021c:	4b02      	ldr	r3, [pc, #8]	; (400228 <bb_elem_set_uint8_data+0x10>)
  40021e:	4798      	blx	r3
    bb_elem_update_last_tick_count(bbElement);
  400220:	4620      	mov	r0, r4
  400222:	4b02      	ldr	r3, [pc, #8]	; (40022c <bb_elem_set_uint8_data+0x14>)
  400224:	4798      	blx	r3
  400226:	bd10      	pop	{r4, pc}
  400228:	004003c1 	.word	0x004003c1
  40022c:	00400209 	.word	0x00400209

00400230 <bb_elem_set_int8_data>:
{
  400230:	b508      	push	{r3, lr}
    bb_elem_set_uint8_data(bbElement, bb_utils_toUnsigned8(data8), index);
  400232:	b2c9      	uxtb	r1, r1
  400234:	4b01      	ldr	r3, [pc, #4]	; (40023c <bb_elem_set_int8_data+0xc>)
  400236:	4798      	blx	r3
  400238:	bd08      	pop	{r3, pc}
  40023a:	bf00      	nop
  40023c:	00400219 	.word	0x00400219

00400240 <bb_elem_set_uint16_data>:
{
  400240:	b510      	push	{r4, lr}
  400242:	4604      	mov	r4, r0
    bb_port_set_data_direct16(bbElement, data16, index);
  400244:	4b02      	ldr	r3, [pc, #8]	; (400250 <bb_elem_set_uint16_data+0x10>)
  400246:	4798      	blx	r3
    bb_elem_update_last_tick_count(bbElement);
  400248:	4620      	mov	r0, r4
  40024a:	4b02      	ldr	r3, [pc, #8]	; (400254 <bb_elem_set_uint16_data+0x14>)
  40024c:	4798      	blx	r3
  40024e:	bd10      	pop	{r4, pc}
  400250:	004003c5 	.word	0x004003c5
  400254:	00400209 	.word	0x00400209

00400258 <bb_elem_set_int16_data>:
{
  400258:	b508      	push	{r3, lr}
    bb_elem_set_uint16_data(bbElement, bb_utils_toUnsigned16(data16), index);
  40025a:	b289      	uxth	r1, r1
  40025c:	4b01      	ldr	r3, [pc, #4]	; (400264 <bb_elem_set_int16_data+0xc>)
  40025e:	4798      	blx	r3
  400260:	bd08      	pop	{r3, pc}
  400262:	bf00      	nop
  400264:	00400241 	.word	0x00400241

00400268 <bb_tx_proc_init>:
void bb_tx_proc_init(BlackboardTxProcessor_T * bbTxProc,
                     uint32_t maxDelay,
                     ICANTx_T* transmitters,
                     uint32_t numTransmitters,
                     uint32_t currTimestampTicks)
{
  400268:	b570      	push	{r4, r5, r6, lr}
  40026a:	9e04      	ldr	r6, [sp, #16]
    bbTxProc->maxDelay = maxDelay;
  40026c:	6001      	str	r1, [r0, #0]
    bbTxProc->transmitters = transmitters;
  40026e:	6042      	str	r2, [r0, #4]
    bbTxProc->numTransmitters = numTransmitters;
  400270:	6083      	str	r3, [r0, #8]

    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  400272:	2400      	movs	r4, #0
    {
        BlackboardElement_T * bbElement = bb_get_element((CANElementIndex_T)i);
  400274:	4d04      	ldr	r5, [pc, #16]	; (400288 <bb_tx_proc_init+0x20>)
  400276:	b2e0      	uxtb	r0, r4
  400278:	47a8      	blx	r5
        bb_elem_set_wakeup_offset(bbElement, currTimestampTicks + i);
  40027a:	1933      	adds	r3, r6, r4
 *
 * @param bbElement Pointer to the blackboard element struct to set the data of
 */
static inline void bb_elem_set_wakeup_offset(BlackboardElement_T * bbElement, const uint32_t wakeupOffset)
{
    bbElement->wakeupOffset = wakeupOffset;
  40027c:	60c3      	str	r3, [r0, #12]
    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  40027e:	3401      	adds	r4, #1
  400280:	2c07      	cmp	r4, #7
  400282:	d1f8      	bne.n	400276 <bb_tx_proc_init+0xe>
    }
}
  400284:	bd70      	pop	{r4, r5, r6, pc}
  400286:	bf00      	nop
  400288:	00400425 	.word	0x00400425

0040028c <bb_tx_proc_tx_message>:
                   const CANElement_T * canElement,
                   const BlackboardTxProcessor_T * const bbTxProc,
                   uint32_t canChannel,
                   uint32_t maskTxChannel,
                   uint32_t minimumOffsetTicks)
{
  40028c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40028e:	b083      	sub	sp, #12
  400290:	460f      	mov	r7, r1
  400292:	4615      	mov	r5, r2
  400294:	461e      	mov	r6, r3
    BlackboardElement_T * bbElement = bb_get_element((CANElementIndex_T)index);
  400296:	b2c0      	uxtb	r0, r0
  400298:	4b1c      	ldr	r3, [pc, #112]	; (40030c <bb_tx_proc_tx_message+0x80>)
  40029a:	4798      	blx	r3
  40029c:	4604      	mov	r4, r0
    if (!bb_elem_decrement_wakeup_offset(bbElement, elapsedTicks))
  40029e:	4639      	mov	r1, r7
  4002a0:	4b1b      	ldr	r3, [pc, #108]	; (400310 <bb_tx_proc_tx_message+0x84>)
  4002a2:	4798      	blx	r3
  4002a4:	b130      	cbz	r0, 4002b4 <bb_tx_proc_tx_message+0x28>
 *
 * @return The smaller of the current minimum offset and the blackboard element's wakeup offset
 */
static inline uint32_t bb_elem_compute_minimum_offset_ticks(BlackboardElement_T const * bbElement, const uint32_t minimumOffsetTicks)
{
    return (minimumOffsetTicks > bbElement->wakeupOffset) ? bbElement->wakeupOffset : minimumOffsetTicks;
  4002a6:	68e3      	ldr	r3, [r4, #12]
                                            CAN_NONE);                 // Rx Channel is N/A
        }
        // else Callback container is null, don't call
    }
    return bb_elem_compute_minimum_offset_ticks(bbElement, minimumOffsetTicks);
}
  4002a8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4002aa:	4298      	cmp	r0, r3
  4002ac:	bf28      	it	cs
  4002ae:	4618      	movcs	r0, r3
  4002b0:	b003      	add	sp, #12
  4002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        const uint32_t period_ticks = BB_PORT_MS_TO_TICKS(msgInfo->period_ms);
  4002b4:	68aa      	ldr	r2, [r5, #8]
  4002b6:	23c8      	movs	r3, #200	; 0xc8
  4002b8:	fb03 f302 	mul.w	r3, r3, r2
  4002bc:	4a15      	ldr	r2, [pc, #84]	; (400314 <bb_tx_proc_tx_message+0x88>)
  4002be:	fba2 2303 	umull	r2, r3, r2, r3
  4002c2:	099b      	lsrs	r3, r3, #6
    return elapsedTicks - bbElement->wakeupOffset;
  4002c4:	68e2      	ldr	r2, [r4, #12]
  4002c6:	1abf      	subs	r7, r7, r2
        bb_elem_set_wakeup_offset(bbElement, period_ticks - (overflow_ticks % period_ticks));
  4002c8:	fbb7 f2f3 	udiv	r2, r7, r3
  4002cc:	fb03 7712 	mls	r7, r3, r2, r7
  4002d0:	1bdb      	subs	r3, r3, r7
    bbElement->wakeupOffset = wakeupOffset;
  4002d2:	60e3      	str	r3, [r4, #12]
        uint32_t tx_data[2] = {0, 0};
  4002d4:	2300      	movs	r3, #0
  4002d6:	9300      	str	r3, [sp, #0]
  4002d8:	9301      	str	r3, [sp, #4]
        bb_elem_get_data_for_can(bbElement, &tx_data[0], &tx_data[1]);
  4002da:	aa01      	add	r2, sp, #4
  4002dc:	4669      	mov	r1, sp
  4002de:	4620      	mov	r0, r4
  4002e0:	4b0d      	ldr	r3, [pc, #52]	; (400318 <bb_tx_proc_tx_message+0x8c>)
  4002e2:	4798      	blx	r3
        const ICANTx_T * const transmitter = &bbTxProc->transmitters[canChannel];
  4002e4:	6873      	ldr	r3, [r6, #4]
  4002e6:	9a08      	ldr	r2, [sp, #32]
  4002e8:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
        transmitter->transmitFn(transmitter->context, msgInfo->id, (uint8_t *)(&tx_data[0]), (uint8_t)msgInfo->numBytes);
  4002ec:	f853 6032 	ldr.w	r6, [r3, r2, lsl #3]
  4002f0:	7b2b      	ldrb	r3, [r5, #12]
  4002f2:	466a      	mov	r2, sp
  4002f4:	6829      	ldr	r1, [r5, #0]
  4002f6:	6840      	ldr	r0, [r0, #4]
  4002f8:	47b0      	blx	r6
        if (canElement->callback.callbackFn != NULL)
  4002fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4002fc:	2b00      	cmp	r3, #0
  4002fe:	d0d2      	beq.n	4002a6 <bb_tx_proc_tx_message+0x1a>
            canElement->callback.callbackFn(canElement->callback.callbackCtx,
  400300:	2200      	movs	r2, #0
  400302:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
  400306:	6b68      	ldr	r0, [r5, #52]	; 0x34
  400308:	4798      	blx	r3
  40030a:	e7cc      	b.n	4002a6 <bb_tx_proc_tx_message+0x1a>
  40030c:	00400425 	.word	0x00400425
  400310:	004001d5 	.word	0x004001d5
  400314:	10624dd3 	.word	0x10624dd3
  400318:	004001e9 	.word	0x004001e9

0040031c <bb_tx_proc_process_tx>:
{
  40031c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400320:	b087      	sub	sp, #28
  400322:	4606      	mov	r6, r0
    const uint32_t elapsedTicks = currTimestampTicks - prevTimestampTicks;
  400324:	1a8b      	subs	r3, r1, r2
  400326:	9305      	str	r3, [sp, #20]
    uint32_t minimumOffsetTicks = bbTxProc->maxDelay;
  400328:	f8d0 9000 	ldr.w	r9, [r0]
    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  40032c:	2700      	movs	r7, #0
        const CANElement_T * canElement = can_elem_get_can_elem_idx((CANElementIndex_T)i);
  40032e:	f8df b05c 	ldr.w	fp, [pc, #92]	; 40038c <bb_tx_proc_process_tx+0x70>
                    minimumOffsetTicks = bb_tx_proc_tx_message(i, elapsedTicks, canElement, bbTxProc, canChannel, maskTxChannel, minimumOffsetTicks);
  400332:	f8df a05c 	ldr.w	sl, [pc, #92]	; 400390 <bb_tx_proc_process_tx+0x74>
  400336:	e017      	b.n	400368 <bb_tx_proc_process_tx+0x4c>
            for(uint32_t canChannel = 0U; canChannel < bbTxProc->numTransmitters; canChannel++)
  400338:	3401      	adds	r4, #1
  40033a:	68b3      	ldr	r3, [r6, #8]
  40033c:	42a3      	cmp	r3, r4
  40033e:	d910      	bls.n	400362 <bb_tx_proc_process_tx+0x46>
                const uint32_t maskTxChannel = (uint32_t)1U << canChannel;
  400340:	fa08 f304 	lsl.w	r3, r8, r4
                if (((uint32_t)canElement->txChan & maskTxChannel) > 0UL)
  400344:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
  400348:	421a      	tst	r2, r3
  40034a:	d0f5      	beq.n	400338 <bb_tx_proc_process_tx+0x1c>
                    minimumOffsetTicks = bb_tx_proc_tx_message(i, elapsedTicks, canElement, bbTxProc, canChannel, maskTxChannel, minimumOffsetTicks);
  40034c:	f8cd 9008 	str.w	r9, [sp, #8]
  400350:	9301      	str	r3, [sp, #4]
  400352:	9400      	str	r4, [sp, #0]
  400354:	4633      	mov	r3, r6
  400356:	462a      	mov	r2, r5
  400358:	9905      	ldr	r1, [sp, #20]
  40035a:	4638      	mov	r0, r7
  40035c:	47d0      	blx	sl
  40035e:	4681      	mov	r9, r0
  400360:	e7ea      	b.n	400338 <bb_tx_proc_process_tx+0x1c>
    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  400362:	3701      	adds	r7, #1
  400364:	2f07      	cmp	r7, #7
  400366:	d00d      	beq.n	400384 <bb_tx_proc_process_tx+0x68>
        const CANElement_T * canElement = can_elem_get_can_elem_idx((CANElementIndex_T)i);
  400368:	b2f8      	uxtb	r0, r7
  40036a:	47d8      	blx	fp
  40036c:	4605      	mov	r5, r0
        if ((uint32_t)canElement->txChan > 0UL)
  40036e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  400372:	2b00      	cmp	r3, #0
  400374:	d0f5      	beq.n	400362 <bb_tx_proc_process_tx+0x46>
            for(uint32_t canChannel = 0U; canChannel < bbTxProc->numTransmitters; canChannel++)
  400376:	68b3      	ldr	r3, [r6, #8]
  400378:	2b00      	cmp	r3, #0
  40037a:	d0f2      	beq.n	400362 <bb_tx_proc_process_tx+0x46>
  40037c:	2400      	movs	r4, #0
                const uint32_t maskTxChannel = (uint32_t)1U << canChannel;
  40037e:	f04f 0801 	mov.w	r8, #1
  400382:	e7dd      	b.n	400340 <bb_tx_proc_process_tx+0x24>
}
  400384:	4648      	mov	r0, r9
  400386:	b007      	add	sp, #28
  400388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40038c:	00400395 	.word	0x00400395
  400390:	0040028d 	.word	0x0040028d

00400394 <can_elem_get_can_elem_idx>:
 *
 * @return A pointer to the can element struct with the given index
 */
const CANElement_T * can_elem_get_can_elem_idx(const CANElementIndex_T idx)
{
    return &can_spec_can_element_list[idx];
  400394:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
}
  400398:	4b01      	ldr	r3, [pc, #4]	; (4003a0 <can_elem_get_can_elem_idx+0xc>)
  40039a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40039e:	4770      	bx	lr
  4003a0:	00404850 	.word	0x00404850

004003a4 <can_elem_get_can_msg_info_idx>:
 *
 * @return A pointer to the can msg info struct with the given index
 */
const CANMsgInfo_T * can_elem_get_can_msg_info_idx(const CANElementIndex_T idx)
{
    return &can_spec_can_element_list[idx].canMsgInfo;
  4003a4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
}
  4003a8:	4b01      	ldr	r3, [pc, #4]	; (4003b0 <can_elem_get_can_msg_info_idx+0xc>)
  4003aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4003ae:	4770      	bx	lr
  4003b0:	00404850 	.word	0x00404850

004003b4 <bb_port_get_current_ticks>:
 * g_tx_tick_count_ms.
 * @return the current time in ticks
 */
uint32_t bb_port_get_current_ticks(void)
{
  return g_tx_tick_count_ms;
  4003b4:	4b01      	ldr	r3, [pc, #4]	; (4003bc <bb_port_get_current_ticks+0x8>)
  4003b6:	6818      	ldr	r0, [r3, #0]
}
  4003b8:	4770      	bx	lr
  4003ba:	bf00      	nop
  4003bc:	20401464 	.word	0x20401464

004003c0 <bb_port_set_data_direct8>:
    const uint32_t byteOffsetInWord = (uint32_t)(byteIndexInElement) % 4U;
    const uint32_t wordIndex = (uint32_t)(byteIndexInElement) / 4U;

    volatile uint8_t * const dest8Ptr = (volatile uint8_t *)(&element->dataWords[wordIndex]) + byteOffsetInWord;

    *dest8Ptr = data8;
  4003c0:	5481      	strb	r1, [r0, r2]
  4003c2:	4770      	bx	lr

004003c4 <bb_port_set_data_direct16>:
 * perform an atomic write to the internal blackboard element storage.
 *
 * @see BlackboardPort.h for details on this method.
 */
void bb_port_set_data_direct16(BlackboardElement_T * element, const uint16_t data16, const uint8_t byteIndexInElement)
{
  4003c4:	b510      	push	{r4, lr}
    const uint32_t byteOffsetInWord = (uint32_t)(byteIndexInElement) % 4U;
    const uint32_t wordIndex = (uint32_t)(byteIndexInElement) / 4U;

    // Dereferencing a u16 pointer with a byte offset.  Make sure it is u16-aligned within the
    // element.
    SLI_ASSERT((byteOffsetInWord % 2U) == 0);
  4003c6:	f012 0f01 	tst.w	r2, #1
  4003ca:	d106      	bne.n	4003da <bb_port_set_data_direct16+0x16>
  4003cc:	f002 0303 	and.w	r3, r2, #3
  4003d0:	0894      	lsrs	r4, r2, #2
    volatile uint16_t * const dest16Ptr = (volatile uint16_t *)(((volatile uint8_t *)&element->dataWords[wordIndex]) + byteOffsetInWord);
  4003d2:	eb03 0384 	add.w	r3, r3, r4, lsl #2

    *dest16Ptr = data16;
  4003d6:	52c1      	strh	r1, [r0, r3]
  4003d8:	bd10      	pop	{r4, pc}
    SLI_ASSERT((byteOffsetInWord % 2U) == 0);
  4003da:	4b03      	ldr	r3, [pc, #12]	; (4003e8 <bb_port_set_data_direct16+0x24>)
  4003dc:	4a03      	ldr	r2, [pc, #12]	; (4003ec <bb_port_set_data_direct16+0x28>)
  4003de:	2176      	movs	r1, #118	; 0x76
  4003e0:	4803      	ldr	r0, [pc, #12]	; (4003f0 <bb_port_set_data_direct16+0x2c>)
  4003e2:	4c04      	ldr	r4, [pc, #16]	; (4003f4 <bb_port_set_data_direct16+0x30>)
  4003e4:	47a0      	blx	r4
  4003e6:	bf00      	nop
  4003e8:	00404800 	.word	0x00404800
  4003ec:	004047c8 	.word	0x004047c8
  4003f0:	00404820 	.word	0x00404820
  4003f4:	00401715 	.word	0x00401715

004003f8 <bb_port_get_data_direct32>:
    const uint32_t byteOffsetInWord = (uint32_t)(byteIndexInElement) % 4U;
    const uint32_t wordIndex = (uint32_t)(byteIndexInElement) / 4U;

    // Dereferencing a u32 pointer with a byte offset.  Make sure it is u32-aligned within the
    // element.
    SLI_ASSERT(byteOffsetInWord == 0);
  4003f8:	f011 0f03 	tst.w	r1, #3
  4003fc:	d103      	bne.n	400406 <bb_port_get_data_direct32+0xe>
  4003fe:	088b      	lsrs	r3, r1, #2
    volatile uint32_t * const src32Ptr = (volatile uint32_t *)(&element->dataWords[wordIndex]);

    return *src32Ptr;
  400400:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
  400404:	4770      	bx	lr
{
  400406:	b510      	push	{r4, lr}
    SLI_ASSERT(byteOffsetInWord == 0);
  400408:	4b02      	ldr	r3, [pc, #8]	; (400414 <bb_port_get_data_direct32+0x1c>)
  40040a:	4a03      	ldr	r2, [pc, #12]	; (400418 <bb_port_get_data_direct32+0x20>)
  40040c:	21c3      	movs	r1, #195	; 0xc3
  40040e:	4803      	ldr	r0, [pc, #12]	; (40041c <bb_port_get_data_direct32+0x24>)
  400410:	4c03      	ldr	r4, [pc, #12]	; (400420 <bb_port_get_data_direct32+0x28>)
  400412:	47a0      	blx	r4
  400414:	00404838 	.word	0x00404838
  400418:	004047e4 	.word	0x004047e4
  40041c:	00404820 	.word	0x00404820
  400420:	00401715 	.word	0x00401715

00400424 <bb_get_element>:
 */
BlackboardElement_T * bb_get_element(const CANElementIndex_T idx)
{
    static Blackboard_T theBB;
    return &theBB.elements[idx];
}
  400424:	4b01      	ldr	r3, [pc, #4]	; (40042c <bb_get_element+0x8>)
  400426:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  40042a:	4770      	bx	lr
  40042c:	204009dc 	.word	0x204009dc

00400430 <bb_set_SCM_motor1MaxSpeed>:
 * @brief Sets the SCM_motor1MaxSpeed value within the blackboard.
 * @see bb_get_SCM_motor1MaxSpeed for a description of this property.
 * @param value int16_t in step/s
 */
void bb_set_SCM_motor1MaxSpeed(const float32_T value)
{
  400430:	b500      	push	{lr}
  400432:	ed2d 8b02 	vpush	{d8}
  400436:	b083      	sub	sp, #12
  400438:	ee08 0a10 	vmov	s16, r0
    const CANMsgInfo_T * canMsgInfo = can_elem_get_can_msg_info_idx(CAN_ELEM_SCM_Motor1Params1);
  40043c:	2001      	movs	r0, #1
  40043e:	4b0a      	ldr	r3, [pc, #40]	; (400468 <bb_set_SCM_motor1MaxSpeed+0x38>)
  400440:	4798      	blx	r3
static inline int16_t bb_utils_floatToFixed16(const float32_T fvalue, const uint16_t bits)
{
    const uint32_t shift = 1UL << bits;
    const float32_T fshift = (float32_T)(shift);
    const float32_T fproduct = fvalue * fshift;
    return (int16_t)(fproduct);
  400442:	eef0 7a48 	vmov.f32	s15, s16
  400446:	eefe 7acf 	vcvt.s32.f32	s15, s15, #2
  40044a:	edcd 7a01 	vstr	s15, [sp, #4]
    BlackboardElement_T * bbElem = bb_get_element(CAN_ELEM_SCM_Motor1Params1);
    const CANDataInfo_T * dataInfo = &canMsgInfo->data_info[2];
    bb_elem_set_int16_data(bbElem, bb_utils_floatToFixed16(value, 2U), dataInfo->start_byte);
  40044e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
  400452:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
  400456:	4805      	ldr	r0, [pc, #20]	; (40046c <bb_set_SCM_motor1MaxSpeed+0x3c>)
  400458:	4b05      	ldr	r3, [pc, #20]	; (400470 <bb_set_SCM_motor1MaxSpeed+0x40>)
  40045a:	4798      	blx	r3
}
  40045c:	b003      	add	sp, #12
  40045e:	ecbd 8b02 	vpop	{d8}
  400462:	f85d fb04 	ldr.w	pc, [sp], #4
  400466:	bf00      	nop
  400468:	004003a5 	.word	0x004003a5
  40046c:	204009ec 	.word	0x204009ec
  400470:	00400259 	.word	0x00400259

00400474 <bb_set_SCM_motor1MinSpeed>:
 * @brief Sets the SCM_motor1MinSpeed value within the blackboard.
 * @see bb_get_SCM_motor1MinSpeed for a description of this property.
 * @param value int16_t in step/s
 */
void bb_set_SCM_motor1MinSpeed(const float32_T value)
{
  400474:	b500      	push	{lr}
  400476:	ed2d 8b02 	vpush	{d8}
  40047a:	b083      	sub	sp, #12
  40047c:	ee08 0a10 	vmov	s16, r0
    const CANMsgInfo_T * canMsgInfo = can_elem_get_can_msg_info_idx(CAN_ELEM_SCM_Motor1Params1);
  400480:	2001      	movs	r0, #1
  400482:	4b0a      	ldr	r3, [pc, #40]	; (4004ac <bb_set_SCM_motor1MinSpeed+0x38>)
  400484:	4798      	blx	r3
  400486:	eef0 7a48 	vmov.f32	s15, s16
  40048a:	eefe 7acf 	vcvt.s32.f32	s15, s15, #2
  40048e:	edcd 7a01 	vstr	s15, [sp, #4]
    BlackboardElement_T * bbElem = bb_get_element(CAN_ELEM_SCM_Motor1Params1);
    const CANDataInfo_T * dataInfo = &canMsgInfo->data_info[3];
    bb_elem_set_int16_data(bbElem, bb_utils_floatToFixed16(value, 2U), dataInfo->start_byte);
  400492:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
  400496:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
  40049a:	4805      	ldr	r0, [pc, #20]	; (4004b0 <bb_set_SCM_motor1MinSpeed+0x3c>)
  40049c:	4b05      	ldr	r3, [pc, #20]	; (4004b4 <bb_set_SCM_motor1MinSpeed+0x40>)
  40049e:	4798      	blx	r3
}
  4004a0:	b003      	add	sp, #12
  4004a2:	ecbd 8b02 	vpop	{d8}
  4004a6:	f85d fb04 	ldr.w	pc, [sp], #4
  4004aa:	bf00      	nop
  4004ac:	004003a5 	.word	0x004003a5
  4004b0:	204009ec 	.word	0x204009ec
  4004b4:	00400259 	.word	0x00400259

004004b8 <bb_set_SCM_Motor1Control>:
 * @brief Sets the SCM_Motor1Control value within the blackboard.
 * @see bb_get_SCM_Motor1Control for a description of this property.
 * @param value int8_t in steps
 */
void bb_set_SCM_Motor1Control(const int8_t value)
{
  4004b8:	b510      	push	{r4, lr}
  4004ba:	4604      	mov	r4, r0
    const CANMsgInfo_T * canMsgInfo = can_elem_get_can_msg_info_idx(CAN_ELEM_SCM_Motor1Control);
  4004bc:	2002      	movs	r0, #2
  4004be:	4b04      	ldr	r3, [pc, #16]	; (4004d0 <bb_set_SCM_Motor1Control+0x18>)
  4004c0:	4798      	blx	r3
    BlackboardElement_T * bbElem = bb_get_element(CAN_ELEM_SCM_Motor1Control);
    const CANDataInfo_T * dataInfo = &canMsgInfo->data_info[0];
    bb_elem_set_int8_data(bbElem, value, dataInfo->start_byte);
  4004c2:	7d42      	ldrb	r2, [r0, #21]
  4004c4:	4621      	mov	r1, r4
  4004c6:	4803      	ldr	r0, [pc, #12]	; (4004d4 <bb_set_SCM_Motor1Control+0x1c>)
  4004c8:	4b03      	ldr	r3, [pc, #12]	; (4004d8 <bb_set_SCM_Motor1Control+0x20>)
  4004ca:	4798      	blx	r3
  4004cc:	bd10      	pop	{r4, pc}
  4004ce:	bf00      	nop
  4004d0:	004003a5 	.word	0x004003a5
  4004d4:	204009fc 	.word	0x204009fc
  4004d8:	00400231 	.word	0x00400231

004004dc <bb_set_SCM_Motor3Control>:
 * @brief Sets the SCM_Motor3Control value within the blackboard.
 * @see bb_get_SCM_Motor3Control for a description of this property.
 * @param value int8_t in steps
 */
void bb_set_SCM_Motor3Control(const int8_t value)
{
  4004dc:	b510      	push	{r4, lr}
  4004de:	4604      	mov	r4, r0
    const CANMsgInfo_T * canMsgInfo = can_elem_get_can_msg_info_idx(CAN_ELEM_SCM_Motor3Control);
  4004e0:	2004      	movs	r0, #4
  4004e2:	4b04      	ldr	r3, [pc, #16]	; (4004f4 <bb_set_SCM_Motor3Control+0x18>)
  4004e4:	4798      	blx	r3
    BlackboardElement_T * bbElem = bb_get_element(CAN_ELEM_SCM_Motor3Control);
    const CANDataInfo_T * dataInfo = &canMsgInfo->data_info[0];
    bb_elem_set_int8_data(bbElem, value, dataInfo->start_byte);
  4004e6:	7d42      	ldrb	r2, [r0, #21]
  4004e8:	4621      	mov	r1, r4
  4004ea:	4803      	ldr	r0, [pc, #12]	; (4004f8 <bb_set_SCM_Motor3Control+0x1c>)
  4004ec:	4b03      	ldr	r3, [pc, #12]	; (4004fc <bb_set_SCM_Motor3Control+0x20>)
  4004ee:	4798      	blx	r3
  4004f0:	bd10      	pop	{r4, pc}
  4004f2:	bf00      	nop
  4004f4:	004003a5 	.word	0x004003a5
  4004f8:	20400a1c 	.word	0x20400a1c
  4004fc:	00400231 	.word	0x00400231

00400500 <CANTxTaskInit>:

static uint32_t prevTicks;
static uint32_t sleepTicks;

void CANTxTaskInit(void)
{
  400500:	b510      	push	{r4, lr}
  400502:	b082      	sub	sp, #8
	{
		{ &scm_can_trans, NULL }
	};

	const uint32_t MaxCanTxProcDelay = 10000UL;
	sleepTicks = 0U;
  400504:	2300      	movs	r3, #0
  400506:	4a07      	ldr	r2, [pc, #28]	; (400524 <CANTxTaskInit+0x24>)
  400508:	6013      	str	r3, [r2, #0]
	prevTicks = 0U;
  40050a:	4a07      	ldr	r2, [pc, #28]	; (400528 <CANTxTaskInit+0x28>)
  40050c:	6013      	str	r3, [r2, #0]
	bb_tx_proc_init(&bbtxProc, MaxCanTxProcDelay, icanHazTxers, (uint32_t)(sizeof(icanHazTxers)/sizeof(icanHazTxers[0])), 0U);
  40050e:	9300      	str	r3, [sp, #0]
  400510:	2301      	movs	r3, #1
  400512:	4a06      	ldr	r2, [pc, #24]	; (40052c <CANTxTaskInit+0x2c>)
  400514:	f242 7110 	movw	r1, #10000	; 0x2710
  400518:	4805      	ldr	r0, [pc, #20]	; (400530 <CANTxTaskInit+0x30>)
  40051a:	4c06      	ldr	r4, [pc, #24]	; (400534 <CANTxTaskInit+0x34>)
  40051c:	47a0      	blx	r4
}
  40051e:	b002      	add	sp, #8
  400520:	bd10      	pop	{r4, pc}
  400522:	bf00      	nop
  400524:	20400a5c 	.word	0x20400a5c
  400528:	20400a58 	.word	0x20400a58
  40052c:	20400000 	.word	0x20400000
  400530:	20400a4c 	.word	0x20400a4c
  400534:	00400269 	.word	0x00400269

00400538 <CANTxTask>:

void CANTxTask(uint32_t curr_tick_ms)
{
	if (curr_tick_ms >= (prevTicks + sleepTicks))
  400538:	4b09      	ldr	r3, [pc, #36]	; (400560 <CANTxTask+0x28>)
  40053a:	681a      	ldr	r2, [r3, #0]
  40053c:	4b09      	ldr	r3, [pc, #36]	; (400564 <CANTxTask+0x2c>)
  40053e:	681b      	ldr	r3, [r3, #0]
  400540:	4413      	add	r3, r2
  400542:	4283      	cmp	r3, r0
  400544:	d900      	bls.n	400548 <CANTxTask+0x10>
  400546:	4770      	bx	lr
{
  400548:	b510      	push	{r4, lr}
  40054a:	4604      	mov	r4, r0
	{
		sleepTicks = bb_tx_proc_process_tx(&bbtxProc, curr_tick_ms, prevTicks);
  40054c:	4601      	mov	r1, r0
  40054e:	4806      	ldr	r0, [pc, #24]	; (400568 <CANTxTask+0x30>)
  400550:	4b06      	ldr	r3, [pc, #24]	; (40056c <CANTxTask+0x34>)
  400552:	4798      	blx	r3
  400554:	4b03      	ldr	r3, [pc, #12]	; (400564 <CANTxTask+0x2c>)
  400556:	6018      	str	r0, [r3, #0]
		prevTicks = curr_tick_ms;
  400558:	4b01      	ldr	r3, [pc, #4]	; (400560 <CANTxTask+0x28>)
  40055a:	601c      	str	r4, [r3, #0]
  40055c:	bd10      	pop	{r4, pc}
  40055e:	bf00      	nop
  400560:	20400a58 	.word	0x20400a58
  400564:	20400a5c 	.word	0x20400a5c
  400568:	20400a4c 	.word	0x20400a4c
  40056c:	0040031d 	.word	0x0040031d

00400570 <testSCMCallback>:
#include <stdio.h>

static int hackyStickyCounter = 37;

void testSCMCallback(void * SCM_EVENT_FOO, CanChannel_T rxChan, CanChannel_T txChan)
{
  400570:	b530      	push	{r4, r5, lr}
  400572:	b083      	sub	sp, #12
    SCMEvent_T scmEvent = (SCMEvent_T)(uint32_t)(uint64_t)(SCM_EVENT_FOO);
    printf("testCallback: SCM_EVENT_FOO=%d, rxChan=%d, txChan=%d, counter=%d\n", scmEvent, rxChan, txChan, hackyStickyCounter++);
  400574:	4c06      	ldr	r4, [pc, #24]	; (400590 <testSCMCallback+0x20>)
  400576:	6823      	ldr	r3, [r4, #0]
  400578:	1c5d      	adds	r5, r3, #1
  40057a:	6025      	str	r5, [r4, #0]
  40057c:	9300      	str	r3, [sp, #0]
  40057e:	4613      	mov	r3, r2
  400580:	460a      	mov	r2, r1
  400582:	b2c1      	uxtb	r1, r0
  400584:	4803      	ldr	r0, [pc, #12]	; (400594 <testSCMCallback+0x24>)
  400586:	4c04      	ldr	r4, [pc, #16]	; (400598 <testSCMCallback+0x28>)
  400588:	47a0      	blx	r4
}
  40058a:	b003      	add	sp, #12
  40058c:	bd30      	pop	{r4, r5, pc}
  40058e:	bf00      	nop
  400590:	20400008 	.word	0x20400008
  400594:	00404b18 	.word	0x00404b18
  400598:	004017c9 	.word	0x004017c9

0040059c <CanMessageControl_Task>:


#include "sample.h"
#include "blackboard.h"

void CanMessageControl_Task(void){
  40059c:	b538      	push	{r3, r4, r5, lr}

    #ifndef TEST
  static uint16_t currentCount = (uint16_t)0;
  #endif

  if ((uint16_t)0 == currentCount)
  40059e:	4b14      	ldr	r3, [pc, #80]	; (4005f0 <CanMessageControl_Task+0x54>)
  4005a0:	881b      	ldrh	r3, [r3, #0]
  4005a2:	b1cb      	cbz	r3, 4005d8 <CanMessageControl_Task+0x3c>
  { // 20Hz (req >= 10Hz)
    bb_set_SCM_motor1MaxSpeed(4782.5);
  }
  if ((currentCount & (uint16_t)1) == (uint16_t)1)
  4005a4:	4b12      	ldr	r3, [pc, #72]	; (4005f0 <CanMessageControl_Task+0x54>)
  4005a6:	881b      	ldrh	r3, [r3, #0]
  4005a8:	f013 0f01 	tst.w	r3, #1
  4005ac:	d118      	bne.n	4005e0 <CanMessageControl_Task+0x44>
  { // 100Hz (req >= 50Hz)
    bb_set_SCM_motor1MinSpeed(2302);
  }
  // 200Hz (req >= 100Hz)

	bb_set_SCM_Motor1Control(add_1());
  4005ae:	4d11      	ldr	r5, [pc, #68]	; (4005f4 <CanMessageControl_Task+0x58>)
  4005b0:	47a8      	blx	r5
  4005b2:	4b11      	ldr	r3, [pc, #68]	; (4005f8 <CanMessageControl_Task+0x5c>)
  4005b4:	4798      	blx	r3
	bb_set_SCM_Motor3Control(add_1()+add_1());
  4005b6:	47a8      	blx	r5
  4005b8:	4604      	mov	r4, r0
  4005ba:	47a8      	blx	r5
  4005bc:	4420      	add	r0, r4
  4005be:	b240      	sxtb	r0, r0
  4005c0:	4b0e      	ldr	r3, [pc, #56]	; (4005fc <CanMessageControl_Task+0x60>)
  4005c2:	4798      	blx	r3

  ++currentCount;
  4005c4:	4b0a      	ldr	r3, [pc, #40]	; (4005f0 <CanMessageControl_Task+0x54>)
  4005c6:	881b      	ldrh	r3, [r3, #0]
  4005c8:	3301      	adds	r3, #1
  4005ca:	b29b      	uxth	r3, r3
  if ((uint16_t)10 <= currentCount)
  4005cc:	2b09      	cmp	r3, #9
  4005ce:	d90b      	bls.n	4005e8 <CanMessageControl_Task+0x4c>
  {
    currentCount = (uint16_t)0;
  4005d0:	2200      	movs	r2, #0
  4005d2:	4b07      	ldr	r3, [pc, #28]	; (4005f0 <CanMessageControl_Task+0x54>)
  4005d4:	801a      	strh	r2, [r3, #0]
  4005d6:	bd38      	pop	{r3, r4, r5, pc}
    bb_set_SCM_motor1MaxSpeed(4782.5);
  4005d8:	4809      	ldr	r0, [pc, #36]	; (400600 <CanMessageControl_Task+0x64>)
  4005da:	4b0a      	ldr	r3, [pc, #40]	; (400604 <CanMessageControl_Task+0x68>)
  4005dc:	4798      	blx	r3
  4005de:	e7e1      	b.n	4005a4 <CanMessageControl_Task+0x8>
    bb_set_SCM_motor1MinSpeed(2302);
  4005e0:	4809      	ldr	r0, [pc, #36]	; (400608 <CanMessageControl_Task+0x6c>)
  4005e2:	4b0a      	ldr	r3, [pc, #40]	; (40060c <CanMessageControl_Task+0x70>)
  4005e4:	4798      	blx	r3
  4005e6:	e7e2      	b.n	4005ae <CanMessageControl_Task+0x12>
  ++currentCount;
  4005e8:	4a01      	ldr	r2, [pc, #4]	; (4005f0 <CanMessageControl_Task+0x54>)
  4005ea:	8013      	strh	r3, [r2, #0]
  4005ec:	bd38      	pop	{r3, r4, r5, pc}
  4005ee:	bf00      	nop
  4005f0:	20400a60 	.word	0x20400a60
  4005f4:	00400621 	.word	0x00400621
  4005f8:	004004b9 	.word	0x004004b9
  4005fc:	004004dd 	.word	0x004004dd
  400600:	45957400 	.word	0x45957400
  400604:	00400431 	.word	0x00400431
  400608:	450fe000 	.word	0x450fe000
  40060c:	00400475 	.word	0x00400475

00400610 <sample_1>:
static uint16_t count_2=0;

void sample_init();
void sample_1(){

    count_1++;
  400610:	4a02      	ldr	r2, [pc, #8]	; (40061c <sample_1+0xc>)
  400612:	8813      	ldrh	r3, [r2, #0]
  400614:	3301      	adds	r3, #1
  400616:	8013      	strh	r3, [r2, #0]
  400618:	4770      	bx	lr
  40061a:	bf00      	nop
  40061c:	20400a62 	.word	0x20400a62

00400620 <add_1>:
 
};

uint8_t add_1(){
    return count_1;
  400620:	4b01      	ldr	r3, [pc, #4]	; (400628 <add_1+0x8>)
  400622:	7818      	ldrb	r0, [r3, #0]
  400624:	4770      	bx	lr
  400626:	bf00      	nop
  400628:	20400a62 	.word	0x20400a62

0040062c <scm_can_trans>:
* @param data CAN payload data, update to 8 bytes
* @param length Number of CAN data payload bytes to send
*/

void scm_can_trans(ICANTxCtx_T context, uint32_t msgID, uint8_t * data, uint8_t length)
{
  40062c:	b510      	push	{r4, lr}
	const uint8_t MaxBytesPerCanMsg = 8U; // TODO: Centralized definition for this?
	SLI_ASSERT(length <= MaxBytesPerCanMsg);
  40062e:	2b08      	cmp	r3, #8
  400630:	d80a      	bhi.n	400648 <scm_can_trans+0x1c>
  400632:	4608      	mov	r0, r1
  400634:	4611      	mov	r1, r2
	
	(void)context;    // Unused

	// CANDriver can track its own error counter
    (void)candriver_send(msgID, data, length);
  400636:	461a      	mov	r2, r3
  400638:	4b06      	ldr	r3, [pc, #24]	; (400654 <scm_can_trans+0x28>)
  40063a:	4798      	blx	r3

	candriver_error_poll();
  40063c:	4b06      	ldr	r3, [pc, #24]	; (400658 <scm_can_trans+0x2c>)
  40063e:	4798      	blx	r3
	printf("Success");
  400640:	4806      	ldr	r0, [pc, #24]	; (40065c <scm_can_trans+0x30>)
  400642:	4b07      	ldr	r3, [pc, #28]	; (400660 <scm_can_trans+0x34>)
  400644:	4798      	blx	r3
  400646:	bd10      	pop	{r4, pc}
	SLI_ASSERT(length <= MaxBytesPerCanMsg);
  400648:	4b06      	ldr	r3, [pc, #24]	; (400664 <scm_can_trans+0x38>)
  40064a:	4a07      	ldr	r2, [pc, #28]	; (400668 <scm_can_trans+0x3c>)
  40064c:	2123      	movs	r1, #35	; 0x23
  40064e:	4807      	ldr	r0, [pc, #28]	; (40066c <scm_can_trans+0x40>)
  400650:	4c07      	ldr	r4, [pc, #28]	; (400670 <scm_can_trans+0x44>)
  400652:	47a0      	blx	r4
  400654:	00400a09 	.word	0x00400a09
  400658:	00400a05 	.word	0x00400a05
  40065c:	00404ba8 	.word	0x00404ba8
  400660:	004017c9 	.word	0x004017c9
  400664:	00404b6c 	.word	0x00404b6c
  400668:	00404b5c 	.word	0x00404b5c
  40066c:	00404b88 	.word	0x00404b88
  400670:	00401715 	.word	0x00401715

00400674 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400674:	b5f0      	push	{r4, r5, r6, r7, lr}
  400676:	b083      	sub	sp, #12
  400678:	4605      	mov	r5, r0
  40067a:	460c      	mov	r4, r1
	uint32_t val = 0;
  40067c:	2300      	movs	r3, #0
  40067e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400680:	4b2a      	ldr	r3, [pc, #168]	; (40072c <usart_serial_getchar+0xb8>)
  400682:	4298      	cmp	r0, r3
  400684:	d013      	beq.n	4006ae <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400686:	4b2a      	ldr	r3, [pc, #168]	; (400730 <usart_serial_getchar+0xbc>)
  400688:	4298      	cmp	r0, r3
  40068a:	d018      	beq.n	4006be <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40068c:	4b29      	ldr	r3, [pc, #164]	; (400734 <usart_serial_getchar+0xc0>)
  40068e:	4298      	cmp	r0, r3
  400690:	d01d      	beq.n	4006ce <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400692:	4b29      	ldr	r3, [pc, #164]	; (400738 <usart_serial_getchar+0xc4>)
  400694:	429d      	cmp	r5, r3
  400696:	d022      	beq.n	4006de <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400698:	4b28      	ldr	r3, [pc, #160]	; (40073c <usart_serial_getchar+0xc8>)
  40069a:	429d      	cmp	r5, r3
  40069c:	d027      	beq.n	4006ee <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40069e:	4b28      	ldr	r3, [pc, #160]	; (400740 <usart_serial_getchar+0xcc>)
  4006a0:	429d      	cmp	r5, r3
  4006a2:	d02e      	beq.n	400702 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4006a4:	4b27      	ldr	r3, [pc, #156]	; (400744 <usart_serial_getchar+0xd0>)
  4006a6:	429d      	cmp	r5, r3
  4006a8:	d035      	beq.n	400716 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4006aa:	b003      	add	sp, #12
  4006ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4006ae:	461f      	mov	r7, r3
  4006b0:	4e25      	ldr	r6, [pc, #148]	; (400748 <usart_serial_getchar+0xd4>)
  4006b2:	4621      	mov	r1, r4
  4006b4:	4638      	mov	r0, r7
  4006b6:	47b0      	blx	r6
  4006b8:	2800      	cmp	r0, #0
  4006ba:	d1fa      	bne.n	4006b2 <usart_serial_getchar+0x3e>
  4006bc:	e7e9      	b.n	400692 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4006be:	461f      	mov	r7, r3
  4006c0:	4e21      	ldr	r6, [pc, #132]	; (400748 <usart_serial_getchar+0xd4>)
  4006c2:	4621      	mov	r1, r4
  4006c4:	4638      	mov	r0, r7
  4006c6:	47b0      	blx	r6
  4006c8:	2800      	cmp	r0, #0
  4006ca:	d1fa      	bne.n	4006c2 <usart_serial_getchar+0x4e>
  4006cc:	e7e4      	b.n	400698 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4006ce:	461f      	mov	r7, r3
  4006d0:	4e1d      	ldr	r6, [pc, #116]	; (400748 <usart_serial_getchar+0xd4>)
  4006d2:	4621      	mov	r1, r4
  4006d4:	4638      	mov	r0, r7
  4006d6:	47b0      	blx	r6
  4006d8:	2800      	cmp	r0, #0
  4006da:	d1fa      	bne.n	4006d2 <usart_serial_getchar+0x5e>
  4006dc:	e7df      	b.n	40069e <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4006de:	461f      	mov	r7, r3
  4006e0:	4e19      	ldr	r6, [pc, #100]	; (400748 <usart_serial_getchar+0xd4>)
  4006e2:	4621      	mov	r1, r4
  4006e4:	4638      	mov	r0, r7
  4006e6:	47b0      	blx	r6
  4006e8:	2800      	cmp	r0, #0
  4006ea:	d1fa      	bne.n	4006e2 <usart_serial_getchar+0x6e>
  4006ec:	e7da      	b.n	4006a4 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4006ee:	461e      	mov	r6, r3
  4006f0:	4d16      	ldr	r5, [pc, #88]	; (40074c <usart_serial_getchar+0xd8>)
  4006f2:	a901      	add	r1, sp, #4
  4006f4:	4630      	mov	r0, r6
  4006f6:	47a8      	blx	r5
  4006f8:	2800      	cmp	r0, #0
  4006fa:	d1fa      	bne.n	4006f2 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4006fc:	9b01      	ldr	r3, [sp, #4]
  4006fe:	7023      	strb	r3, [r4, #0]
  400700:	e7d3      	b.n	4006aa <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400702:	461e      	mov	r6, r3
  400704:	4d11      	ldr	r5, [pc, #68]	; (40074c <usart_serial_getchar+0xd8>)
  400706:	a901      	add	r1, sp, #4
  400708:	4630      	mov	r0, r6
  40070a:	47a8      	blx	r5
  40070c:	2800      	cmp	r0, #0
  40070e:	d1fa      	bne.n	400706 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  400710:	9b01      	ldr	r3, [sp, #4]
  400712:	7023      	strb	r3, [r4, #0]
  400714:	e7c9      	b.n	4006aa <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400716:	461e      	mov	r6, r3
  400718:	4d0c      	ldr	r5, [pc, #48]	; (40074c <usart_serial_getchar+0xd8>)
  40071a:	a901      	add	r1, sp, #4
  40071c:	4630      	mov	r0, r6
  40071e:	47a8      	blx	r5
  400720:	2800      	cmp	r0, #0
  400722:	d1fa      	bne.n	40071a <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  400724:	9b01      	ldr	r3, [sp, #4]
  400726:	7023      	strb	r3, [r4, #0]
}
  400728:	e7bf      	b.n	4006aa <usart_serial_getchar+0x36>
  40072a:	bf00      	nop
  40072c:	400e0800 	.word	0x400e0800
  400730:	400e0a00 	.word	0x400e0a00
  400734:	400e1a00 	.word	0x400e1a00
  400738:	400e1c00 	.word	0x400e1c00
  40073c:	40024000 	.word	0x40024000
  400740:	40028000 	.word	0x40028000
  400744:	4002c000 	.word	0x4002c000
  400748:	004012db 	.word	0x004012db
  40074c:	004013e7 	.word	0x004013e7

00400750 <usart_serial_putchar>:
{
  400750:	b570      	push	{r4, r5, r6, lr}
  400752:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400754:	4b2a      	ldr	r3, [pc, #168]	; (400800 <usart_serial_putchar+0xb0>)
  400756:	4298      	cmp	r0, r3
  400758:	d013      	beq.n	400782 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  40075a:	4b2a      	ldr	r3, [pc, #168]	; (400804 <usart_serial_putchar+0xb4>)
  40075c:	4298      	cmp	r0, r3
  40075e:	d019      	beq.n	400794 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  400760:	4b29      	ldr	r3, [pc, #164]	; (400808 <usart_serial_putchar+0xb8>)
  400762:	4298      	cmp	r0, r3
  400764:	d01f      	beq.n	4007a6 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  400766:	4b29      	ldr	r3, [pc, #164]	; (40080c <usart_serial_putchar+0xbc>)
  400768:	4298      	cmp	r0, r3
  40076a:	d025      	beq.n	4007b8 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  40076c:	4b28      	ldr	r3, [pc, #160]	; (400810 <usart_serial_putchar+0xc0>)
  40076e:	4298      	cmp	r0, r3
  400770:	d02b      	beq.n	4007ca <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  400772:	4b28      	ldr	r3, [pc, #160]	; (400814 <usart_serial_putchar+0xc4>)
  400774:	4298      	cmp	r0, r3
  400776:	d031      	beq.n	4007dc <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  400778:	4b27      	ldr	r3, [pc, #156]	; (400818 <usart_serial_putchar+0xc8>)
  40077a:	4298      	cmp	r0, r3
  40077c:	d037      	beq.n	4007ee <usart_serial_putchar+0x9e>
	return 0;
  40077e:	2000      	movs	r0, #0
}
  400780:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400782:	461e      	mov	r6, r3
  400784:	4d25      	ldr	r5, [pc, #148]	; (40081c <usart_serial_putchar+0xcc>)
  400786:	4621      	mov	r1, r4
  400788:	4630      	mov	r0, r6
  40078a:	47a8      	blx	r5
  40078c:	2800      	cmp	r0, #0
  40078e:	d1fa      	bne.n	400786 <usart_serial_putchar+0x36>
		return 1;
  400790:	2001      	movs	r0, #1
  400792:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400794:	461e      	mov	r6, r3
  400796:	4d21      	ldr	r5, [pc, #132]	; (40081c <usart_serial_putchar+0xcc>)
  400798:	4621      	mov	r1, r4
  40079a:	4630      	mov	r0, r6
  40079c:	47a8      	blx	r5
  40079e:	2800      	cmp	r0, #0
  4007a0:	d1fa      	bne.n	400798 <usart_serial_putchar+0x48>
		return 1;
  4007a2:	2001      	movs	r0, #1
  4007a4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4007a6:	461e      	mov	r6, r3
  4007a8:	4d1c      	ldr	r5, [pc, #112]	; (40081c <usart_serial_putchar+0xcc>)
  4007aa:	4621      	mov	r1, r4
  4007ac:	4630      	mov	r0, r6
  4007ae:	47a8      	blx	r5
  4007b0:	2800      	cmp	r0, #0
  4007b2:	d1fa      	bne.n	4007aa <usart_serial_putchar+0x5a>
		return 1;
  4007b4:	2001      	movs	r0, #1
  4007b6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4007b8:	461e      	mov	r6, r3
  4007ba:	4d18      	ldr	r5, [pc, #96]	; (40081c <usart_serial_putchar+0xcc>)
  4007bc:	4621      	mov	r1, r4
  4007be:	4630      	mov	r0, r6
  4007c0:	47a8      	blx	r5
  4007c2:	2800      	cmp	r0, #0
  4007c4:	d1fa      	bne.n	4007bc <usart_serial_putchar+0x6c>
		return 1;
  4007c6:	2001      	movs	r0, #1
  4007c8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4007ca:	461e      	mov	r6, r3
  4007cc:	4d14      	ldr	r5, [pc, #80]	; (400820 <usart_serial_putchar+0xd0>)
  4007ce:	4621      	mov	r1, r4
  4007d0:	4630      	mov	r0, r6
  4007d2:	47a8      	blx	r5
  4007d4:	2800      	cmp	r0, #0
  4007d6:	d1fa      	bne.n	4007ce <usart_serial_putchar+0x7e>
		return 1;
  4007d8:	2001      	movs	r0, #1
  4007da:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4007dc:	461e      	mov	r6, r3
  4007de:	4d10      	ldr	r5, [pc, #64]	; (400820 <usart_serial_putchar+0xd0>)
  4007e0:	4621      	mov	r1, r4
  4007e2:	4630      	mov	r0, r6
  4007e4:	47a8      	blx	r5
  4007e6:	2800      	cmp	r0, #0
  4007e8:	d1fa      	bne.n	4007e0 <usart_serial_putchar+0x90>
		return 1;
  4007ea:	2001      	movs	r0, #1
  4007ec:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4007ee:	461e      	mov	r6, r3
  4007f0:	4d0b      	ldr	r5, [pc, #44]	; (400820 <usart_serial_putchar+0xd0>)
  4007f2:	4621      	mov	r1, r4
  4007f4:	4630      	mov	r0, r6
  4007f6:	47a8      	blx	r5
  4007f8:	2800      	cmp	r0, #0
  4007fa:	d1fa      	bne.n	4007f2 <usart_serial_putchar+0xa2>
		return 1;
  4007fc:	2001      	movs	r0, #1
  4007fe:	bd70      	pop	{r4, r5, r6, pc}
  400800:	400e0800 	.word	0x400e0800
  400804:	400e0a00 	.word	0x400e0a00
  400808:	400e1a00 	.word	0x400e1a00
  40080c:	400e1c00 	.word	0x400e1c00
  400810:	40024000 	.word	0x40024000
  400814:	40028000 	.word	0x40028000
  400818:	4002c000 	.word	0x4002c000
  40081c:	004012c9 	.word	0x004012c9
  400820:	004013d1 	.word	0x004013d1

00400824 <configure_mcan>:
/**
 * \brief MCAN module initialization.
 *
 */
static void configure_mcan(void)
{
  400824:	b510      	push	{r4, lr}
  400826:	b08a      	sub	sp, #40	; 0x28
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->run_in_standby = false;
  400828:	2300      	movs	r3, #0
  40082a:	f88d 3004 	strb.w	r3, [sp, #4]
	config->watchdog_configuration = 0x00;
  40082e:	f88d 3005 	strb.w	r3, [sp, #5]
	config->transmit_pause = true;
  400832:	2201      	movs	r2, #1
  400834:	f88d 2006 	strb.w	r2, [sp, #6]
	config->edge_filtering = true;
  400838:	f88d 2007 	strb.w	r2, [sp, #7]
	config->protocol_exception_handling = true;
  40083c:	f88d 2008 	strb.w	r2, [sp, #8]
	config->automatic_retransmission = true;
  400840:	f88d 2009 	strb.w	r2, [sp, #9]
	config->clock_stop_request = false;
  400844:	f88d 300a 	strb.w	r3, [sp, #10]
	config->clock_stop_acknowledge = false;
  400848:	f88d 300b 	strb.w	r3, [sp, #11]
	config->timestamp_prescaler = 0;
  40084c:	f88d 300c 	strb.w	r3, [sp, #12]
	config->timeout_period = 0xFFFF;
  400850:	f64f 71ff 	movw	r1, #65535	; 0xffff
  400854:	f8ad 100e 	strh.w	r1, [sp, #14]
	config->timeout_mode = MCAN_TIMEOUT_CONTINUES;
  400858:	f88d 3010 	strb.w	r3, [sp, #16]
	config->timeout_enable = false;
  40085c:	f88d 3011 	strb.w	r3, [sp, #17]
	config->tdc_enable = false;
  400860:	f88d 3012 	strb.w	r3, [sp, #18]
	config->delay_compensation_offset = 0;
  400864:	f88d 3013 	strb.w	r3, [sp, #19]
#if (SAMV71B || SAME70B || SAMV70B)
	config->delay_compensation_filter_window_length = 0;
  400868:	f88d 3014 	strb.w	r3, [sp, #20]
#endif
	config->nonmatching_frames_action_standard = MCAN_NONMATCHING_FRAMES_REJECT;
  40086c:	2102      	movs	r1, #2
  40086e:	f88d 1015 	strb.w	r1, [sp, #21]
	config->nonmatching_frames_action_extended = MCAN_NONMATCHING_FRAMES_REJECT;
  400872:	f88d 1016 	strb.w	r1, [sp, #22]
	config->remote_frames_standard_reject = true;
  400876:	f88d 2017 	strb.w	r2, [sp, #23]
	config->remote_frames_extended_reject = true;
  40087a:	f88d 2018 	strb.w	r2, [sp, #24]
	config->extended_id_mask = 0x1FFFFFFF;
  40087e:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
  400882:	9107      	str	r1, [sp, #28]
	config->rx_fifo_0_overwrite = true;
  400884:	f88d 2020 	strb.w	r2, [sp, #32]
	config->rx_fifo_0_watermark = 0;
  400888:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	config->rx_fifo_1_overwrite = true;
  40088c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
	config->rx_fifo_1_watermark = 0;
  400890:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	config->tx_queue_mode = false;
  400894:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	config->tx_event_fifo_watermark = 0;
  400898:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	}

	/* Initialize the module. */
	struct mcan_config config_mcan;
	mcan_get_config_defaults(&config_mcan);
	mcan_init(&mcan_instance, MCAN_MODULE, &config_mcan);
  40089c:	4c0b      	ldr	r4, [pc, #44]	; (4008cc <configure_mcan+0xa8>)
  40089e:	aa01      	add	r2, sp, #4
  4008a0:	490b      	ldr	r1, [pc, #44]	; (4008d0 <configure_mcan+0xac>)
  4008a2:	4620      	mov	r0, r4
  4008a4:	4b0b      	ldr	r3, [pc, #44]	; (4008d4 <configure_mcan+0xb0>)
  4008a6:	4798      	blx	r3


	mcan_start(&mcan_instance);
  4008a8:	4620      	mov	r0, r4
  4008aa:	4b0b      	ldr	r3, [pc, #44]	; (4008d8 <configure_mcan+0xb4>)
  4008ac:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4008ae:	4b0b      	ldr	r3, [pc, #44]	; (4008dc <configure_mcan+0xb8>)
  4008b0:	2220      	movs	r2, #32
  4008b2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4008b6:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4008ba:	605a      	str	r2, [r3, #4]
 * \param[in] source  Interrupt source type
 */
static inline void mcan_enable_interrupt(struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
	module_inst->hw->MCAN_IE |= source;
  4008bc:	6822      	ldr	r2, [r4, #0]
  4008be:	6d53      	ldr	r3, [r2, #84]	; 0x54
  4008c0:	f043 43c4 	orr.w	r3, r3, #1644167168	; 0x62000000
  4008c4:	6553      	str	r3, [r2, #84]	; 0x54
	/* Enable interrupts for this MCAN module */
	irq_register_handler(MCAN1_INT0_IRQn, 1);
	mcan_enable_interrupt(&mcan_instance, MCAN_FORMAT_ERROR | MCAN_ACKNOWLEDGE_ERROR | MCAN_BUS_OFF);
}
  4008c6:	b00a      	add	sp, #40	; 0x28
  4008c8:	bd10      	pop	{r4, pc}
  4008ca:	bf00      	nop
  4008cc:	20400a64 	.word	0x20400a64
  4008d0:	40034000 	.word	0x40034000
  4008d4:	00400d4d 	.word	0x00400d4d
  4008d8:	00400fc1 	.word	0x00400fc1
  4008dc:	e000e100 	.word	0xe000e100

004008e0 <can_init>:

void can_init()
{
  4008e0:	b570      	push	{r4, r5, r6, lr}
  4008e2:	b086      	sub	sp, #24
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4008e4:	200e      	movs	r0, #14
  4008e6:	4e18      	ldr	r6, [pc, #96]	; (400948 <can_init+0x68>)
  4008e8:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4008ea:	4d18      	ldr	r5, [pc, #96]	; (40094c <can_init+0x6c>)
  4008ec:	4b18      	ldr	r3, [pc, #96]	; (400950 <can_init+0x70>)
  4008ee:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4008f0:	4a18      	ldr	r2, [pc, #96]	; (400954 <can_init+0x74>)
  4008f2:	4b19      	ldr	r3, [pc, #100]	; (400958 <can_init+0x78>)
  4008f4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4008f6:	4a19      	ldr	r2, [pc, #100]	; (40095c <can_init+0x7c>)
  4008f8:	4b19      	ldr	r3, [pc, #100]	; (400960 <can_init+0x80>)
  4008fa:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4008fc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400900:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  400902:	23c0      	movs	r3, #192	; 0xc0
  400904:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  400906:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40090a:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  40090c:	2400      	movs	r4, #0
  40090e:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  400910:	9404      	str	r4, [sp, #16]
  400912:	200e      	movs	r0, #14
  400914:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  400916:	4a13      	ldr	r2, [pc, #76]	; (400964 <can_init+0x84>)
  400918:	4669      	mov	r1, sp
  40091a:	4628      	mov	r0, r5
  40091c:	4b12      	ldr	r3, [pc, #72]	; (400968 <can_init+0x88>)
  40091e:	4798      	blx	r3
		usart_enable_tx(p_usart);
  400920:	4628      	mov	r0, r5
  400922:	4b12      	ldr	r3, [pc, #72]	; (40096c <can_init+0x8c>)
  400924:	4798      	blx	r3
		usart_enable_rx(p_usart);
  400926:	4628      	mov	r0, r5
  400928:	4b11      	ldr	r3, [pc, #68]	; (400970 <can_init+0x90>)
  40092a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40092c:	4e11      	ldr	r6, [pc, #68]	; (400974 <can_init+0x94>)
  40092e:	6833      	ldr	r3, [r6, #0]
  400930:	4621      	mov	r1, r4
  400932:	6898      	ldr	r0, [r3, #8]
  400934:	4d10      	ldr	r5, [pc, #64]	; (400978 <can_init+0x98>)
  400936:	47a8      	blx	r5
	setbuf(stdin, NULL);
  400938:	6833      	ldr	r3, [r6, #0]
  40093a:	4621      	mov	r1, r4
  40093c:	6858      	ldr	r0, [r3, #4]
  40093e:	47a8      	blx	r5
	configure_console();
	configure_mcan();
  400940:	4b0e      	ldr	r3, [pc, #56]	; (40097c <can_init+0x9c>)
  400942:	4798      	blx	r3
}
  400944:	b006      	add	sp, #24
  400946:	bd70      	pop	{r4, r5, r6, pc}
  400948:	00401245 	.word	0x00401245
  40094c:	40028000 	.word	0x40028000
  400950:	204014a4 	.word	0x204014a4
  400954:	00400751 	.word	0x00400751
  400958:	204014a0 	.word	0x204014a0
  40095c:	00400675 	.word	0x00400675
  400960:	2040149c 	.word	0x2040149c
  400964:	08f0d180 	.word	0x08f0d180
  400968:	00401371 	.word	0x00401371
  40096c:	004013c5 	.word	0x004013c5
  400970:	004013cb 	.word	0x004013cb
  400974:	20400014 	.word	0x20400014
  400978:	004019c1 	.word	0x004019c1
  40097c:	00400825 	.word	0x00400825

00400980 <MCAN1_INT0_Handler>:
/**
 * \brief Interrupt handler for MCAN,
 *   inlcuding RX,TX,ERROR and so on processes.
 */
void MCAN1_INT0_Handler(void)
{
  400980:	b500      	push	{lr}
  400982:	b083      	sub	sp, #12
 * \param[in] module_inst  Pointer to the MCAN software instance struct
 */
static inline uint32_t mcan_read_interrupt_status(
		struct mcan_module *const module_inst)
{
	return module_inst->hw->MCAN_IR;
  400984:	4b18      	ldr	r3, [pc, #96]	; (4009e8 <MCAN1_INT0_Handler+0x68>)
  400986:	681b      	ldr	r3, [r3, #0]
  400988:	6d1a      	ldr	r2, [r3, #80]	; 0x50
	volatile uint32_t status, i, rx_buffer_index;
	status = mcan_read_interrupt_status(&mcan_instance);
  40098a:	9201      	str	r2, [sp, #4]


	if (status & MCAN_BUS_OFF) {
  40098c:	9a01      	ldr	r2, [sp, #4]
  40098e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
  400992:	d10a      	bne.n	4009aa <MCAN1_INT0_Handler+0x2a>
		mcan_stop(&mcan_instance);
		printf(": MCAN bus off error, re-initialization. \r\n\r\n");
		configure_mcan();
	}

	if (status & MCAN_ACKNOWLEDGE_ERROR) {
  400994:	9b01      	ldr	r3, [sp, #4]
  400996:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  40099a:	d112      	bne.n	4009c2 <MCAN1_INT0_Handler+0x42>
		mcan_clear_interrupt_status(&mcan_instance, MCAN_ACKNOWLEDGE_ERROR);
		printf("Protocol ACK error, please double check the clock in two boards. \r\n\r\n");
	}

	if (status & MCAN_FORMAT_ERROR) {
  40099c:	9b01      	ldr	r3, [sp, #4]
  40099e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  4009a2:	d117      	bne.n	4009d4 <MCAN1_INT0_Handler+0x54>
		mcan_clear_interrupt_status(&mcan_instance, MCAN_FORMAT_ERROR);
		printf("Protocol format error, please double check the clock in two boards. \r\n\r\n");
	}
}
  4009a4:	b003      	add	sp, #12
  4009a6:	f85d fb04 	ldr.w	pc, [sp], #4
 */
static inline void mcan_clear_interrupt_status(
		struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
	module_inst->hw->MCAN_IR = source;
  4009aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4009ae:	651a      	str	r2, [r3, #80]	; 0x50
		mcan_stop(&mcan_instance);
  4009b0:	480d      	ldr	r0, [pc, #52]	; (4009e8 <MCAN1_INT0_Handler+0x68>)
  4009b2:	4b0e      	ldr	r3, [pc, #56]	; (4009ec <MCAN1_INT0_Handler+0x6c>)
  4009b4:	4798      	blx	r3
		printf(": MCAN bus off error, re-initialization. \r\n\r\n");
  4009b6:	480e      	ldr	r0, [pc, #56]	; (4009f0 <MCAN1_INT0_Handler+0x70>)
  4009b8:	4b0e      	ldr	r3, [pc, #56]	; (4009f4 <MCAN1_INT0_Handler+0x74>)
  4009ba:	4798      	blx	r3
		configure_mcan();
  4009bc:	4b0e      	ldr	r3, [pc, #56]	; (4009f8 <MCAN1_INT0_Handler+0x78>)
  4009be:	4798      	blx	r3
  4009c0:	e7e8      	b.n	400994 <MCAN1_INT0_Handler+0x14>
  4009c2:	4b09      	ldr	r3, [pc, #36]	; (4009e8 <MCAN1_INT0_Handler+0x68>)
  4009c4:	681b      	ldr	r3, [r3, #0]
  4009c6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4009ca:	651a      	str	r2, [r3, #80]	; 0x50
		printf("Protocol ACK error, please double check the clock in two boards. \r\n\r\n");
  4009cc:	480b      	ldr	r0, [pc, #44]	; (4009fc <MCAN1_INT0_Handler+0x7c>)
  4009ce:	4b09      	ldr	r3, [pc, #36]	; (4009f4 <MCAN1_INT0_Handler+0x74>)
  4009d0:	4798      	blx	r3
  4009d2:	e7e3      	b.n	40099c <MCAN1_INT0_Handler+0x1c>
  4009d4:	4b04      	ldr	r3, [pc, #16]	; (4009e8 <MCAN1_INT0_Handler+0x68>)
  4009d6:	681b      	ldr	r3, [r3, #0]
  4009d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4009dc:	651a      	str	r2, [r3, #80]	; 0x50
		printf("Protocol format error, please double check the clock in two boards. \r\n\r\n");
  4009de:	4808      	ldr	r0, [pc, #32]	; (400a00 <MCAN1_INT0_Handler+0x80>)
  4009e0:	4b04      	ldr	r3, [pc, #16]	; (4009f4 <MCAN1_INT0_Handler+0x74>)
  4009e2:	4798      	blx	r3
}
  4009e4:	e7de      	b.n	4009a4 <MCAN1_INT0_Handler+0x24>
  4009e6:	bf00      	nop
  4009e8:	20400a64 	.word	0x20400a64
  4009ec:	00400fd7 	.word	0x00400fd7
  4009f0:	00404bb0 	.word	0x00404bb0
  4009f4:	004017c9 	.word	0x004017c9
  4009f8:	00400825 	.word	0x00400825
  4009fc:	00404be0 	.word	0x00404be0
  400a00:	00404c28 	.word	0x00404c28

00400a04 <candriver_error_poll>:


void candriver_error_poll(void)
{
  400a04:	4770      	bx	lr
	...

00400a08 <candriver_send>:
 *  @param data_byte_length - the number of bytes sending
 *
 *  @post A message is sent if the CAN was not busy at the time of sending.
 */
bool candriver_send(uint32_t msg_id, uint8_t *msg_data, uint32_t data_byte_length)
{
  400a08:	b510      	push	{r4, lr}
  400a0a:	b084      	sub	sp, #16
	tx_element->T0.reg = 0;
  400a0c:	2300      	movs	r3, #0
  400a0e:	9300      	str	r3, [sp, #0]
	tx_element->T1.reg = MCAN_TX_ELEMENT_T1_EFC |
  400a10:	f44f 0308 	mov.w	r3, #8912896	; 0x880000
  400a14:	9301      	str	r3, [sp, #4]
	tx_element.T0.reg |= MCAN_TX_ELEMENT_T0_STANDARD_ID(id_value);
  400a16:	9c00      	ldr	r4, [sp, #0]
  400a18:	4b11      	ldr	r3, [pc, #68]	; (400a60 <candriver_send+0x58>)
  400a1a:	ea03 4080 	and.w	r0, r3, r0, lsl #18
  400a1e:	4320      	orrs	r0, r4
  400a20:	9000      	str	r0, [sp, #0]
	tx_element.T1.bit.DLC = data_length;
  400a22:	9b01      	ldr	r3, [sp, #4]
  400a24:	f362 4313 	bfi	r3, r2, #16, #4
  400a28:	9301      	str	r3, [sp, #4]
	for (i = 0; i < data_length; i++) {
  400a2a:	b142      	cbz	r2, 400a3e <candriver_send+0x36>
  400a2c:	460b      	mov	r3, r1
  400a2e:	a802      	add	r0, sp, #8
  400a30:	4411      	add	r1, r2
		tx_element.data[i] = *data;
  400a32:	f813 4b01 	ldrb.w	r4, [r3], #1
  400a36:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < data_length; i++) {
  400a3a:	428b      	cmp	r3, r1
  400a3c:	d1f9      	bne.n	400a32 <candriver_send+0x2a>
	mcan_set_tx_buffer_element(&mcan_instance, &tx_element,
  400a3e:	4c09      	ldr	r4, [pc, #36]	; (400a64 <candriver_send+0x5c>)
  400a40:	2200      	movs	r2, #0
  400a42:	4669      	mov	r1, sp
  400a44:	4620      	mov	r0, r4
  400a46:	4b08      	ldr	r3, [pc, #32]	; (400a68 <candriver_send+0x60>)
  400a48:	4798      	blx	r3
	if (module_inst->hw->MCAN_CCCR & MCAN_CCCR_CCE) {
  400a4a:	6823      	ldr	r3, [r4, #0]
  400a4c:	699a      	ldr	r2, [r3, #24]
  400a4e:	f012 0f02 	tst.w	r2, #2
  400a52:	d102      	bne.n	400a5a <candriver_send+0x52>
	module_inst->hw->MCAN_TXBAR = trig_mask;
  400a54:	2201      	movs	r2, #1
  400a56:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  mcan_send_standard_message(msg_id, msg_data,
					data_byte_length); 
  // return result;
  400a5a:	b004      	add	sp, #16
  400a5c:	bd10      	pop	{r4, pc}
  400a5e:	bf00      	nop
  400a60:	1ffc0000 	.word	0x1ffc0000
  400a64:	20400a64 	.word	0x20400a64
  400a68:	00400fed 	.word	0x00400fed

00400a6c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400a6c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  400a6e:	4810      	ldr	r0, [pc, #64]	; (400ab0 <sysclk_init+0x44>)
  400a70:	4b10      	ldr	r3, [pc, #64]	; (400ab4 <sysclk_init+0x48>)
  400a72:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400a74:	213e      	movs	r1, #62	; 0x3e
  400a76:	2000      	movs	r0, #0
  400a78:	4b0f      	ldr	r3, [pc, #60]	; (400ab8 <sysclk_init+0x4c>)
  400a7a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400a7c:	4c0f      	ldr	r4, [pc, #60]	; (400abc <sysclk_init+0x50>)
  400a7e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400a80:	2800      	cmp	r0, #0
  400a82:	d0fc      	beq.n	400a7e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400a84:	4b0e      	ldr	r3, [pc, #56]	; (400ac0 <sysclk_init+0x54>)
  400a86:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400a88:	4a0e      	ldr	r2, [pc, #56]	; (400ac4 <sysclk_init+0x58>)
  400a8a:	4b0f      	ldr	r3, [pc, #60]	; (400ac8 <sysclk_init+0x5c>)
  400a8c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400a8e:	4c0f      	ldr	r4, [pc, #60]	; (400acc <sysclk_init+0x60>)
  400a90:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400a92:	2800      	cmp	r0, #0
  400a94:	d0fc      	beq.n	400a90 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400a96:	2002      	movs	r0, #2
  400a98:	4b0d      	ldr	r3, [pc, #52]	; (400ad0 <sysclk_init+0x64>)
  400a9a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400a9c:	2000      	movs	r0, #0
  400a9e:	4b0d      	ldr	r3, [pc, #52]	; (400ad4 <sysclk_init+0x68>)
  400aa0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400aa2:	4b0d      	ldr	r3, [pc, #52]	; (400ad8 <sysclk_init+0x6c>)
  400aa4:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  400aa6:	4802      	ldr	r0, [pc, #8]	; (400ab0 <sysclk_init+0x44>)
  400aa8:	4b02      	ldr	r3, [pc, #8]	; (400ab4 <sysclk_init+0x48>)
  400aaa:	4798      	blx	r3
  400aac:	bd10      	pop	{r4, pc}
  400aae:	bf00      	nop
  400ab0:	08f0d180 	.word	0x08f0d180
  400ab4:	004015d5 	.word	0x004015d5
  400ab8:	004011c1 	.word	0x004011c1
  400abc:	00401215 	.word	0x00401215
  400ac0:	00401225 	.word	0x00401225
  400ac4:	20183f01 	.word	0x20183f01
  400ac8:	400e0600 	.word	0x400e0600
  400acc:	00401235 	.word	0x00401235
  400ad0:	00401125 	.word	0x00401125
  400ad4:	0040115d 	.word	0x0040115d
  400ad8:	004014c9 	.word	0x004014c9

00400adc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400ae0:	b980      	cbnz	r0, 400b04 <_read+0x28>
  400ae2:	460c      	mov	r4, r1
  400ae4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400ae6:	2a00      	cmp	r2, #0
  400ae8:	dd0f      	ble.n	400b0a <_read+0x2e>
  400aea:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400aec:	4e08      	ldr	r6, [pc, #32]	; (400b10 <_read+0x34>)
  400aee:	4d09      	ldr	r5, [pc, #36]	; (400b14 <_read+0x38>)
  400af0:	6830      	ldr	r0, [r6, #0]
  400af2:	4621      	mov	r1, r4
  400af4:	682b      	ldr	r3, [r5, #0]
  400af6:	4798      	blx	r3
		ptr++;
  400af8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400afa:	42bc      	cmp	r4, r7
  400afc:	d1f8      	bne.n	400af0 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400afe:	4640      	mov	r0, r8
  400b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400b04:	f04f 38ff 	mov.w	r8, #4294967295
  400b08:	e7f9      	b.n	400afe <_read+0x22>
	for (; len > 0; --len) {
  400b0a:	4680      	mov	r8, r0
  400b0c:	e7f7      	b.n	400afe <_read+0x22>
  400b0e:	bf00      	nop
  400b10:	204014a4 	.word	0x204014a4
  400b14:	2040149c 	.word	0x2040149c

00400b18 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400b18:	3801      	subs	r0, #1
  400b1a:	2802      	cmp	r0, #2
  400b1c:	d815      	bhi.n	400b4a <_write+0x32>
{
  400b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400b22:	460e      	mov	r6, r1
  400b24:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400b26:	b19a      	cbz	r2, 400b50 <_write+0x38>
  400b28:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400b2a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400b64 <_write+0x4c>
  400b2e:	4f0c      	ldr	r7, [pc, #48]	; (400b60 <_write+0x48>)
  400b30:	f8d8 0000 	ldr.w	r0, [r8]
  400b34:	f815 1b01 	ldrb.w	r1, [r5], #1
  400b38:	683b      	ldr	r3, [r7, #0]
  400b3a:	4798      	blx	r3
  400b3c:	2800      	cmp	r0, #0
  400b3e:	db0a      	blt.n	400b56 <_write+0x3e>
  400b40:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400b42:	3c01      	subs	r4, #1
  400b44:	d1f4      	bne.n	400b30 <_write+0x18>
  400b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400b4a:	f04f 30ff 	mov.w	r0, #4294967295
  400b4e:	4770      	bx	lr
	for (; len != 0; --len) {
  400b50:	4610      	mov	r0, r2
  400b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400b56:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400b5e:	bf00      	nop
  400b60:	204014a0 	.word	0x204014a0
  400b64:	204014a4 	.word	0x204014a4

00400b68 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400b68:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400b6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400b6e:	4b63      	ldr	r3, [pc, #396]	; (400cfc <board_init+0x194>)
  400b70:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400b72:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
  400b76:	4a62      	ldr	r2, [pc, #392]	; (400d00 <board_init+0x198>)
  400b78:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400b7a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  400b7e:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  400b80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400b84:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400b88:	4b5e      	ldr	r3, [pc, #376]	; (400d04 <board_init+0x19c>)
  400b8a:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400b8e:	f022 0201 	bic.w	r2, r2, #1
  400b92:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400b96:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400b9a:	f022 0201 	bic.w	r2, r2, #1
  400b9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  400ba2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400ba6:	f3bf 8f6f 	isb	sy
  400baa:	200a      	movs	r0, #10
  400bac:	4c56      	ldr	r4, [pc, #344]	; (400d08 <board_init+0x1a0>)
  400bae:	47a0      	blx	r4
  400bb0:	200b      	movs	r0, #11
  400bb2:	47a0      	blx	r4
  400bb4:	200c      	movs	r0, #12
  400bb6:	47a0      	blx	r4
  400bb8:	2010      	movs	r0, #16
  400bba:	47a0      	blx	r4
  400bbc:	2011      	movs	r0, #17
  400bbe:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400bc0:	4b52      	ldr	r3, [pc, #328]	; (400d0c <board_init+0x1a4>)
  400bc2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400bc6:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bc8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400bcc:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400bce:	4a50      	ldr	r2, [pc, #320]	; (400d10 <board_init+0x1a8>)
  400bd0:	f44f 7100 	mov.w	r1, #512	; 0x200
  400bd4:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bd6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400bda:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400bdc:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bde:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400be2:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400be4:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400be8:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400bea:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  400bec:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400bf0:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400bf2:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  400bf6:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400bf8:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400bfa:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  400bfe:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400c00:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400c04:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400c08:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400c0c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  400c10:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c12:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c16:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c18:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c1a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c1e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400c20:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  400c24:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c26:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400c28:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  400c2c:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c2e:	6059      	str	r1, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400c30:	4938      	ldr	r1, [pc, #224]	; (400d14 <board_init+0x1ac>)
  400c32:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
  400c36:	f043 0310 	orr.w	r3, r3, #16
  400c3a:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
		base->PIO_PUDR = mask;
  400c3e:	4b36      	ldr	r3, [pc, #216]	; (400d18 <board_init+0x1b0>)
  400c40:	2110      	movs	r1, #16
  400c42:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c44:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c48:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c4a:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c4c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400c50:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400c52:	4308      	orrs	r0, r1
  400c54:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400c56:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400c58:	4308      	orrs	r0, r1
  400c5a:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c5c:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  400c5e:	2108      	movs	r1, #8
  400c60:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c62:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c66:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c68:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c6a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c6e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400c70:	f020 0008 	bic.w	r0, r0, #8
  400c74:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c76:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400c78:	f020 0008 	bic.w	r0, r0, #8
  400c7c:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c7e:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  400c80:	2104      	movs	r1, #4
  400c82:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c84:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c88:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c8a:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c8c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c90:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400c92:	f020 0004 	bic.w	r0, r0, #4
  400c96:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c98:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400c9a:	f020 0004 	bic.w	r0, r0, #4
  400c9e:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400ca0:	6059      	str	r1, [r3, #4]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400ca2:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400ca6:	2101      	movs	r1, #1
  400ca8:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400caa:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400cae:	2102      	movs	r1, #2
  400cb0:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400cb2:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  400cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400cba:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400cc0:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400cc2:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400cc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400cc8:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400cca:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  400cce:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400cd0:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400cd2:	4319      	orrs	r1, r3
  400cd4:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400cd6:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  400cd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  400cdc:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ce2:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400ce4:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400ce6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400cea:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400cec:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  400cf0:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400cf2:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400cf4:	4319      	orrs	r1, r3
  400cf6:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400cf8:	6053      	str	r3, [r2, #4]
  400cfa:	bd10      	pop	{r4, pc}
  400cfc:	400e1850 	.word	0x400e1850
  400d00:	5a00080c 	.word	0x5a00080c
  400d04:	e000ed00 	.word	0xe000ed00
  400d08:	00401245 	.word	0x00401245
  400d0c:	400e0e00 	.word	0x400e0e00
  400d10:	400e1200 	.word	0x400e1200
  400d14:	40088000 	.word	0x40088000
  400d18:	400e1000 	.word	0x400e1000

00400d1c <_mcan_enable_peripheral_clock>:
 *
 * \param module_inst  MCAN instance
 *
 */
static void _mcan_enable_peripheral_clock(struct mcan_module *const module_inst)
{
  400d1c:	b508      	push	{r3, lr}
	if (module_inst->hw == MCAN0) {
  400d1e:	6803      	ldr	r3, [r0, #0]
  400d20:	4a07      	ldr	r2, [pc, #28]	; (400d40 <_mcan_enable_peripheral_clock+0x24>)
  400d22:	4293      	cmp	r3, r2
  400d24:	d003      	beq.n	400d2e <_mcan_enable_peripheral_clock+0x12>
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN0);
	} else if (module_inst->hw == MCAN1) {
  400d26:	4a07      	ldr	r2, [pc, #28]	; (400d44 <_mcan_enable_peripheral_clock+0x28>)
  400d28:	4293      	cmp	r3, r2
  400d2a:	d004      	beq.n	400d36 <_mcan_enable_peripheral_clock+0x1a>
  400d2c:	bd08      	pop	{r3, pc}
		pmc_enable_periph_clk(ID_MCAN0);
  400d2e:	2023      	movs	r0, #35	; 0x23
  400d30:	4b05      	ldr	r3, [pc, #20]	; (400d48 <_mcan_enable_peripheral_clock+0x2c>)
  400d32:	4798      	blx	r3
  400d34:	bd08      	pop	{r3, pc}
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN1);
  400d36:	2025      	movs	r0, #37	; 0x25
  400d38:	4b03      	ldr	r3, [pc, #12]	; (400d48 <_mcan_enable_peripheral_clock+0x2c>)
  400d3a:	4798      	blx	r3
	}
}
  400d3c:	e7f6      	b.n	400d2c <_mcan_enable_peripheral_clock+0x10>
  400d3e:	bf00      	nop
  400d40:	40030000 	.word	0x40030000
  400d44:	40034000 	.word	0x40034000
  400d48:	00401245 	.word	0x00401245

00400d4c <mcan_init>:
 * \param hw  Base address of MCAN.
 * \param config default configuration .
 */
void mcan_init(struct mcan_module *const module_inst, Mcan *hw,
		struct mcan_config *config)
{
  400d4c:	b570      	push	{r4, r5, r6, lr}
  400d4e:	4606      	mov	r6, r0
  400d50:	460c      	mov	r4, r1
  400d52:	4615      	mov	r5, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
  400d54:	6001      	str	r1, [r0, #0]

	pmc_disable_pck(PMC_PCK_5);
  400d56:	2005      	movs	r0, #5
  400d58:	4b82      	ldr	r3, [pc, #520]	; (400f64 <mcan_init+0x218>)
  400d5a:	4798      	blx	r3

	pmc_switch_pck_to_pllack(PMC_PCK_5, PMC_PCK_PRES(9));
  400d5c:	2190      	movs	r1, #144	; 0x90
  400d5e:	2005      	movs	r0, #5
  400d60:	4b81      	ldr	r3, [pc, #516]	; (400f68 <mcan_init+0x21c>)
  400d62:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_5);
  400d64:	2005      	movs	r0, #5
  400d66:	4b81      	ldr	r3, [pc, #516]	; (400f6c <mcan_init+0x220>)
  400d68:	4798      	blx	r3

	/* Enable peripheral clock */
	_mcan_enable_peripheral_clock(module_inst);
  400d6a:	4630      	mov	r0, r6
  400d6c:	4b80      	ldr	r3, [pc, #512]	; (400f70 <mcan_init+0x224>)
  400d6e:	4798      	blx	r3


	/* Configuration Change Enable. */
	hw->MCAN_CCCR |= MCAN_CCCR_CCE;
  400d70:	69a3      	ldr	r3, [r4, #24]
  400d72:	f043 0302 	orr.w	r3, r3, #2
  400d76:	61a3      	str	r3, [r4, #24]
	if (hw == MCAN0) {
  400d78:	4b7e      	ldr	r3, [pc, #504]	; (400f74 <mcan_init+0x228>)
  400d7a:	429c      	cmp	r4, r3
  400d7c:	f000 809c 	beq.w	400eb8 <mcan_init+0x16c>
	} else if (hw == MCAN1) {
  400d80:	4b7d      	ldr	r3, [pc, #500]	; (400f78 <mcan_init+0x22c>)
  400d82:	429c      	cmp	r4, r3
  400d84:	f000 80c3 	beq.w	400f0e <mcan_init+0x1c2>
		hw->MCAN_RXESC = MCAN_RXESC_RBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4) |
  400d88:	2300      	movs	r3, #0
  400d8a:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		hw->MCAN_TXESC = MCAN_TXESC_TBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4);
  400d8e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	hw->MCAN_NBTP = MCAN_NBTP_NBRP(CONF_MCAN_NBTP_NBRP_VALUE) |
  400d92:	4b7a      	ldr	r3, [pc, #488]	; (400f7c <mcan_init+0x230>)
  400d94:	61e3      	str	r3, [r4, #28]
	hw->MCAN_DBTP = MCAN_DBTP_DBRP(CONF_MCAN_FBTP_FBRP_VALUE) |
  400d96:	4b7a      	ldr	r3, [pc, #488]	; (400f80 <mcan_init+0x234>)
  400d98:	60e3      	str	r3, [r4, #12]
	hw->MCAN_TDCR = MCAN_TDCR_TDCO(config->delay_compensation_offset) |
  400d9a:	7beb      	ldrb	r3, [r5, #15]
  400d9c:	021b      	lsls	r3, r3, #8
  400d9e:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
		    MCAN_TDCR_TDCF(config->delay_compensation_filter_window_length);
  400da2:	7c2a      	ldrb	r2, [r5, #16]
  400da4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	hw->MCAN_TDCR = MCAN_TDCR_TDCO(config->delay_compensation_offset) |
  400da8:	4313      	orrs	r3, r2
  400daa:	64a3      	str	r3, [r4, #72]	; 0x48
	if (config->tdc_enable) {
  400dac:	7bab      	ldrb	r3, [r5, #14]
  400dae:	b11b      	cbz	r3, 400db8 <mcan_init+0x6c>
		hw->MCAN_DBTP |= MCAN_DBTP_TDC_ENABLED;
  400db0:	68e3      	ldr	r3, [r4, #12]
  400db2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  400db6:	60e3      	str	r3, [r4, #12]
	hw->MCAN_RWD |= MCAN_RWD_WDC(config->watchdog_configuration);
  400db8:	6962      	ldr	r2, [r4, #20]
  400dba:	786b      	ldrb	r3, [r5, #1]
  400dbc:	4313      	orrs	r3, r2
  400dbe:	6163      	str	r3, [r4, #20]
	if (config->transmit_pause) {
  400dc0:	78ab      	ldrb	r3, [r5, #2]
  400dc2:	b11b      	cbz	r3, 400dcc <mcan_init+0x80>
		hw->MCAN_CCCR |= MCAN_CCCR_TXP;
  400dc4:	69a3      	ldr	r3, [r4, #24]
  400dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  400dca:	61a3      	str	r3, [r4, #24]
	if (!config->automatic_retransmission) {
  400dcc:	796b      	ldrb	r3, [r5, #5]
  400dce:	b91b      	cbnz	r3, 400dd8 <mcan_init+0x8c>
		hw->MCAN_CCCR |= MCAN_CCCR_DAR;
  400dd0:	69a3      	ldr	r3, [r4, #24]
  400dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400dd6:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_request) {
  400dd8:	79ab      	ldrb	r3, [r5, #6]
  400dda:	b11b      	cbz	r3, 400de4 <mcan_init+0x98>
		hw->MCAN_CCCR |= MCAN_CCCR_CSR;
  400ddc:	69a3      	ldr	r3, [r4, #24]
  400dde:	f043 0310 	orr.w	r3, r3, #16
  400de2:	61a3      	str	r3, [r4, #24]
	hw->MCAN_TSCC = MCAN_TSCC_TCP(config->timestamp_prescaler) |
  400de4:	7a2b      	ldrb	r3, [r5, #8]
  400de6:	041b      	lsls	r3, r3, #16
  400de8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  400dec:	f043 0301 	orr.w	r3, r3, #1
  400df0:	6223      	str	r3, [r4, #32]
			config->timeout_mode | config->timeout_enable;
  400df2:	7b2b      	ldrb	r3, [r5, #12]
  400df4:	7b6a      	ldrb	r2, [r5, #13]
  400df6:	4313      	orrs	r3, r2
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  400df8:	896a      	ldrh	r2, [r5, #10]
			config->timeout_mode | config->timeout_enable;
  400dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  400dfe:	62a3      	str	r3, [r4, #40]	; 0x28
	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  400e00:	7c6b      	ldrb	r3, [r5, #17]
  400e02:	011b      	lsls	r3, r3, #4
  400e04:	f003 0330 	and.w	r3, r3, #48	; 0x30
			MCAN_GFC_ANFE(config->nonmatching_frames_action_extended);
  400e08:	7caa      	ldrb	r2, [r5, #18]
  400e0a:	0092      	lsls	r2, r2, #2
  400e0c:	f002 020c 	and.w	r2, r2, #12
	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  400e10:	4313      	orrs	r3, r2
  400e12:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if (config->remote_frames_standard_reject) {
  400e16:	7ceb      	ldrb	r3, [r5, #19]
  400e18:	b12b      	cbz	r3, 400e26 <mcan_init+0xda>
		hw->MCAN_GFC |= MCAN_GFC_RRFS;
  400e1a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  400e1e:	f043 0302 	orr.w	r3, r3, #2
  400e22:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if (config->remote_frames_extended_reject) {
  400e26:	7d2b      	ldrb	r3, [r5, #20]
  400e28:	b12b      	cbz	r3, 400e36 <mcan_init+0xea>
		hw->MCAN_GFC|= MCAN_GFC_RRFE;
  400e2a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  400e2e:	f043 0301 	orr.w	r3, r3, #1
  400e32:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hw->MCAN_XIDAM = config->extended_id_mask;
  400e36:	69ab      	ldr	r3, [r5, #24]
  400e38:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	if (config->rx_fifo_0_overwrite) {
  400e3c:	7f2b      	ldrb	r3, [r5, #28]
  400e3e:	b12b      	cbz	r3, 400e4c <mcan_init+0x100>
		hw->MCAN_RXF0C |= MCAN_RXF0C_F0OM;
  400e40:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
  400e44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  400e48:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	hw->MCAN_RXF0C |= MCAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
  400e4c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
  400e50:	7f6b      	ldrb	r3, [r5, #29]
  400e52:	061b      	lsls	r3, r3, #24
  400e54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  400e58:	4313      	orrs	r3, r2
  400e5a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	if (config->rx_fifo_1_overwrite) {
  400e5e:	7fab      	ldrb	r3, [r5, #30]
  400e60:	b12b      	cbz	r3, 400e6e <mcan_init+0x122>
		hw->MCAN_RXF1C |= MCAN_RXF1C_F1OM;
  400e62:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
  400e66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  400e6a:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	hw->MCAN_RXF1C |= MCAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
  400e6e:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
  400e72:	7feb      	ldrb	r3, [r5, #31]
  400e74:	061b      	lsls	r3, r3, #24
  400e76:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  400e7a:	4313      	orrs	r3, r2
  400e7c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	if (config->tx_queue_mode) {
  400e80:	f895 3020 	ldrb.w	r3, [r5, #32]
  400e84:	b12b      	cbz	r3, 400e92 <mcan_init+0x146>
		hw->MCAN_TXBC |= MCAN_TXBC_TFQM;
  400e86:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
  400e8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  400e8e:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hw->MCAN_TXEFC |= MCAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
  400e92:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
  400e96:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
  400e9a:	061b      	lsls	r3, r3, #24
  400e9c:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  400ea0:	4313      	orrs	r3, r2
  400ea2:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0

	/* Set the configuration. */
	_mcan_set_configuration(hw, config);

	/* Enable the interrupt setting which no need change. */
	hw->MCAN_ILE = MCAN_ILE_EINT0 | MCAN_ILE_EINT1;
  400ea6:	2303      	movs	r3, #3
  400ea8:	65e3      	str	r3, [r4, #92]	; 0x5c
	hw->MCAN_TXBTIE = 0xFFFFFFFFul;
  400eaa:	f04f 33ff 	mov.w	r3, #4294967295
  400eae:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	hw->MCAN_TXBCIE = 0xFFFFFFFFul;
  400eb2:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
  400eb6:	bd70      	pop	{r4, r5, r6, pc}
		hw->MCAN_SIDFC = ((uint32_t)mcan0_rx_standard_filter & BIT_2_TO_15_MASK) |
  400eb8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  400ebc:	4931      	ldr	r1, [pc, #196]	; (400f84 <mcan_init+0x238>)
  400ebe:	4011      	ands	r1, r2
  400ec0:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  400ec4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		hw->MCAN_XIDFC = ((uint32_t)mcan0_rx_extended_filter & BIT_2_TO_15_MASK) |
  400ec8:	492f      	ldr	r1, [pc, #188]	; (400f88 <mcan_init+0x23c>)
  400eca:	4011      	ands	r1, r2
  400ecc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400ed0:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		hw->MCAN_RXF0C = ((uint32_t)mcan0_rx_fifo_0 & BIT_2_TO_15_MASK) |
  400ed4:	492d      	ldr	r1, [pc, #180]	; (400f8c <mcan_init+0x240>)
  400ed6:	4011      	ands	r1, r2
  400ed8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400edc:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		hw->MCAN_RXF1C = ((uint32_t)mcan0_rx_fifo_1 & BIT_2_TO_15_MASK) |
  400ee0:	492b      	ldr	r1, [pc, #172]	; (400f90 <mcan_init+0x244>)
  400ee2:	4011      	ands	r1, r2
  400ee4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400ee8:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		hw->MCAN_RXBC = ((uint32_t)mcan0_rx_buffer & BIT_2_TO_15_MASK);
  400eec:	4929      	ldr	r1, [pc, #164]	; (400f94 <mcan_init+0x248>)
  400eee:	4011      	ands	r1, r2
  400ef0:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  400ef4:	4828      	ldr	r0, [pc, #160]	; (400f98 <mcan_init+0x24c>)
  400ef6:	4010      	ands	r0, r2
				MCAN_TXBC_NDTB(CONF_MCAN0_TX_BUFFER_NUM) |
  400ef8:	4928      	ldr	r1, [pc, #160]	; (400f9c <mcan_init+0x250>)
  400efa:	4301      	orrs	r1, r0
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  400efc:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		hw->MCAN_TXEFC = ((uint32_t)mcan0_tx_event_fifo & BIT_2_TO_15_MASK) |
  400f00:	4927      	ldr	r1, [pc, #156]	; (400fa0 <mcan_init+0x254>)
  400f02:	400a      	ands	r2, r1
  400f04:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  400f08:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  400f0c:	e73c      	b.n	400d88 <mcan_init+0x3c>
		hw->MCAN_SIDFC = ((uint32_t)mcan1_rx_standard_filter & BIT_2_TO_15_MASK) |
  400f0e:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  400f12:	4924      	ldr	r1, [pc, #144]	; (400fa4 <mcan_init+0x258>)
  400f14:	4011      	ands	r1, r2
  400f16:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  400f1a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		hw->MCAN_XIDFC = ((uint32_t)mcan1_rx_extended_filter & BIT_2_TO_15_MASK) |
  400f1e:	4922      	ldr	r1, [pc, #136]	; (400fa8 <mcan_init+0x25c>)
  400f20:	4011      	ands	r1, r2
  400f22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400f26:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		hw->MCAN_RXF0C = ((uint32_t)mcan1_rx_fifo_0 & BIT_2_TO_15_MASK) |
  400f2a:	4920      	ldr	r1, [pc, #128]	; (400fac <mcan_init+0x260>)
  400f2c:	4011      	ands	r1, r2
  400f2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400f32:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		hw->MCAN_RXF1C = ((uint32_t)mcan1_rx_fifo_1 & BIT_2_TO_15_MASK) |
  400f36:	491e      	ldr	r1, [pc, #120]	; (400fb0 <mcan_init+0x264>)
  400f38:	4011      	ands	r1, r2
  400f3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400f3e:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		hw->MCAN_RXBC = ((uint32_t)mcan1_rx_buffer & BIT_2_TO_15_MASK);
  400f42:	491c      	ldr	r1, [pc, #112]	; (400fb4 <mcan_init+0x268>)
  400f44:	4011      	ands	r1, r2
  400f46:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  400f4a:	481b      	ldr	r0, [pc, #108]	; (400fb8 <mcan_init+0x26c>)
  400f4c:	4010      	ands	r0, r2
				MCAN_TXBC_NDTB(CONF_MCAN1_TX_BUFFER_NUM) |
  400f4e:	4913      	ldr	r1, [pc, #76]	; (400f9c <mcan_init+0x250>)
  400f50:	4301      	orrs	r1, r0
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  400f52:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		hw->MCAN_TXEFC = ((uint32_t)mcan1_tx_event_fifo & BIT_2_TO_15_MASK) |
  400f56:	4919      	ldr	r1, [pc, #100]	; (400fbc <mcan_init+0x270>)
  400f58:	400a      	ands	r2, r1
  400f5a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  400f5e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  400f62:	e711      	b.n	400d88 <mcan_init+0x3c>
  400f64:	004012b5 	.word	0x004012b5
  400f68:	00401265 	.word	0x00401265
  400f6c:	004012a1 	.word	0x004012a1
  400f70:	00400d1d 	.word	0x00400d1d
  400f74:	40030000 	.word	0x40030000
  400f78:	40034000 	.word	0x40034000
  400f7c:	06010507 	.word	0x06010507
  400f80:	00050a33 	.word	0x00050a33
  400f84:	20400de8 	.word	0x20400de8
  400f88:	20400b68 	.word	0x20400b68
  400f8c:	20400be8 	.word	0x20400be8
  400f90:	20400ce8 	.word	0x20400ce8
  400f94:	20400a68 	.word	0x20400a68
  400f98:	20400e68 	.word	0x20400e68
  400f9c:	04040000 	.word	0x04040000
  400fa0:	20400ee8 	.word	0x20400ee8
  400fa4:	204012a8 	.word	0x204012a8
  400fa8:	20401028 	.word	0x20401028
  400fac:	204010a8 	.word	0x204010a8
  400fb0:	204011a8 	.word	0x204011a8
  400fb4:	20400f28 	.word	0x20400f28
  400fb8:	20401328 	.word	0x20401328
  400fbc:	204013a8 	.word	0x204013a8

00400fc0 <mcan_start>:
 * \param module_inst  MCAN instance
 *
 */
void mcan_start(struct mcan_module *const module_inst)
{
	module_inst->hw->MCAN_CCCR &= ~MCAN_CCCR_INIT;
  400fc0:	6802      	ldr	r2, [r0, #0]
  400fc2:	6993      	ldr	r3, [r2, #24]
  400fc4:	f023 0301 	bic.w	r3, r3, #1
  400fc8:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT);
  400fca:	6802      	ldr	r2, [r0, #0]
  400fcc:	6993      	ldr	r3, [r2, #24]
  400fce:	f013 0f01 	tst.w	r3, #1
  400fd2:	d1fb      	bne.n	400fcc <mcan_start+0xc>
}
  400fd4:	4770      	bx	lr

00400fd6 <mcan_stop>:
 * \param module_inst  MCAN instance
 *
 */
void mcan_stop(struct mcan_module *const module_inst)
{
	module_inst->hw->MCAN_CCCR |= MCAN_CCCR_INIT;
  400fd6:	6802      	ldr	r2, [r0, #0]
  400fd8:	6993      	ldr	r3, [r2, #24]
  400fda:	f043 0301 	orr.w	r3, r3, #1
  400fde:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (!(module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT));
  400fe0:	6802      	ldr	r2, [r0, #0]
  400fe2:	6993      	ldr	r3, [r2, #24]
  400fe4:	f013 0f01 	tst.w	r3, #1
  400fe8:	d0fb      	beq.n	400fe2 <mcan_stop+0xc>
}
  400fea:	4770      	bx	lr

00400fec <mcan_set_tx_buffer_element>:
 * \return status code.
 */
enum status_code mcan_set_tx_buffer_element(
		struct mcan_module *const module_inst,
		struct mcan_tx_element *tx_element, uint32_t index)
{
  400fec:	b410      	push	{r4}
	uint32_t i;
	if (module_inst->hw == MCAN0) {
  400fee:	6803      	ldr	r3, [r0, #0]
  400ff0:	4819      	ldr	r0, [pc, #100]	; (401058 <mcan_set_tx_buffer_element+0x6c>)
  400ff2:	4283      	cmp	r3, r0
  400ff4:	d018      	beq.n	401028 <mcan_set_tx_buffer_element+0x3c>
		mcan0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
			mcan0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	} else if (module_inst->hw == MCAN1) {
  400ff6:	4819      	ldr	r0, [pc, #100]	; (40105c <mcan_set_tx_buffer_element+0x70>)
  400ff8:	4283      	cmp	r3, r0
  400ffa:	d129      	bne.n	401050 <mcan_set_tx_buffer_element+0x64>
		mcan1_tx_buffer[index].T0.reg = tx_element->T0.reg;
  400ffc:	680c      	ldr	r4, [r1, #0]
  400ffe:	4818      	ldr	r0, [pc, #96]	; (401060 <mcan_set_tx_buffer_element+0x74>)
  401000:	0112      	lsls	r2, r2, #4
  401002:	1883      	adds	r3, r0, r2
  401004:	5084      	str	r4, [r0, r2]
		mcan1_tx_buffer[index].T1.reg = tx_element->T1.reg;
  401006:	684c      	ldr	r4, [r1, #4]
  401008:	605c      	str	r4, [r3, #4]
  40100a:	f101 0308 	add.w	r3, r1, #8
  40100e:	3207      	adds	r2, #7
  401010:	4402      	add	r2, r0
  401012:	3110      	adds	r1, #16
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
			mcan1_tx_buffer[index].data[i] = tx_element->data[i];
  401014:	f813 0b01 	ldrb.w	r0, [r3], #1
  401018:	f802 0f01 	strb.w	r0, [r2, #1]!
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  40101c:	428b      	cmp	r3, r1
  40101e:	d1f9      	bne.n	401014 <mcan_set_tx_buffer_element+0x28>
		}
		return STATUS_OK;
  401020:	2000      	movs	r0, #0
	}
	return ERR_INVALID_ARG;
}
  401022:	f85d 4b04 	ldr.w	r4, [sp], #4
  401026:	4770      	bx	lr
		mcan0_tx_buffer[index].T0.reg = tx_element->T0.reg;
  401028:	680c      	ldr	r4, [r1, #0]
  40102a:	480e      	ldr	r0, [pc, #56]	; (401064 <mcan_set_tx_buffer_element+0x78>)
  40102c:	0112      	lsls	r2, r2, #4
  40102e:	1883      	adds	r3, r0, r2
  401030:	5084      	str	r4, [r0, r2]
		mcan0_tx_buffer[index].T1.reg = tx_element->T1.reg;
  401032:	684c      	ldr	r4, [r1, #4]
  401034:	605c      	str	r4, [r3, #4]
  401036:	f101 0308 	add.w	r3, r1, #8
  40103a:	3207      	adds	r2, #7
  40103c:	4402      	add	r2, r0
  40103e:	3110      	adds	r1, #16
			mcan0_tx_buffer[index].data[i] = tx_element->data[i];
  401040:	f813 0b01 	ldrb.w	r0, [r3], #1
  401044:	f802 0f01 	strb.w	r0, [r2, #1]!
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  401048:	428b      	cmp	r3, r1
  40104a:	d1f9      	bne.n	401040 <mcan_set_tx_buffer_element+0x54>
		return STATUS_OK;
  40104c:	2000      	movs	r0, #0
  40104e:	e7e8      	b.n	401022 <mcan_set_tx_buffer_element+0x36>
	return ERR_INVALID_ARG;
  401050:	f06f 0007 	mvn.w	r0, #7
  401054:	e7e5      	b.n	401022 <mcan_set_tx_buffer_element+0x36>
  401056:	bf00      	nop
  401058:	40030000 	.word	0x40030000
  40105c:	40034000 	.word	0x40034000
  401060:	20401328 	.word	0x20401328
  401064:	20400e68 	.word	0x20400e68

00401068 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401068:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40106a:	4770      	bx	lr

0040106c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40106c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40106e:	4770      	bx	lr

00401070 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401074:	4604      	mov	r4, r0
  401076:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401078:	4b0e      	ldr	r3, [pc, #56]	; (4010b4 <pio_handler_process+0x44>)
  40107a:	4798      	blx	r3
  40107c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40107e:	4620      	mov	r0, r4
  401080:	4b0d      	ldr	r3, [pc, #52]	; (4010b8 <pio_handler_process+0x48>)
  401082:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401084:	4005      	ands	r5, r0
  401086:	d013      	beq.n	4010b0 <pio_handler_process+0x40>
  401088:	4c0c      	ldr	r4, [pc, #48]	; (4010bc <pio_handler_process+0x4c>)
  40108a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40108e:	e003      	b.n	401098 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401090:	42b4      	cmp	r4, r6
  401092:	d00d      	beq.n	4010b0 <pio_handler_process+0x40>
  401094:	3410      	adds	r4, #16
		while (status != 0) {
  401096:	b15d      	cbz	r5, 4010b0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401098:	6820      	ldr	r0, [r4, #0]
  40109a:	4540      	cmp	r0, r8
  40109c:	d1f8      	bne.n	401090 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40109e:	6861      	ldr	r1, [r4, #4]
  4010a0:	4229      	tst	r1, r5
  4010a2:	d0f5      	beq.n	401090 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4010a4:	68e3      	ldr	r3, [r4, #12]
  4010a6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4010a8:	6863      	ldr	r3, [r4, #4]
  4010aa:	ea25 0503 	bic.w	r5, r5, r3
  4010ae:	e7ef      	b.n	401090 <pio_handler_process+0x20>
  4010b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4010b4:	00401069 	.word	0x00401069
  4010b8:	0040106d 	.word	0x0040106d
  4010bc:	204013e8 	.word	0x204013e8

004010c0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4010c0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4010c2:	210a      	movs	r1, #10
  4010c4:	4801      	ldr	r0, [pc, #4]	; (4010cc <PIOA_Handler+0xc>)
  4010c6:	4b02      	ldr	r3, [pc, #8]	; (4010d0 <PIOA_Handler+0x10>)
  4010c8:	4798      	blx	r3
  4010ca:	bd08      	pop	{r3, pc}
  4010cc:	400e0e00 	.word	0x400e0e00
  4010d0:	00401071 	.word	0x00401071

004010d4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4010d4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4010d6:	210b      	movs	r1, #11
  4010d8:	4801      	ldr	r0, [pc, #4]	; (4010e0 <PIOB_Handler+0xc>)
  4010da:	4b02      	ldr	r3, [pc, #8]	; (4010e4 <PIOB_Handler+0x10>)
  4010dc:	4798      	blx	r3
  4010de:	bd08      	pop	{r3, pc}
  4010e0:	400e1000 	.word	0x400e1000
  4010e4:	00401071 	.word	0x00401071

004010e8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4010e8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4010ea:	210c      	movs	r1, #12
  4010ec:	4801      	ldr	r0, [pc, #4]	; (4010f4 <PIOC_Handler+0xc>)
  4010ee:	4b02      	ldr	r3, [pc, #8]	; (4010f8 <PIOC_Handler+0x10>)
  4010f0:	4798      	blx	r3
  4010f2:	bd08      	pop	{r3, pc}
  4010f4:	400e1200 	.word	0x400e1200
  4010f8:	00401071 	.word	0x00401071

004010fc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4010fc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4010fe:	2110      	movs	r1, #16
  401100:	4801      	ldr	r0, [pc, #4]	; (401108 <PIOD_Handler+0xc>)
  401102:	4b02      	ldr	r3, [pc, #8]	; (40110c <PIOD_Handler+0x10>)
  401104:	4798      	blx	r3
  401106:	bd08      	pop	{r3, pc}
  401108:	400e1400 	.word	0x400e1400
  40110c:	00401071 	.word	0x00401071

00401110 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401110:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401112:	2111      	movs	r1, #17
  401114:	4801      	ldr	r0, [pc, #4]	; (40111c <PIOE_Handler+0xc>)
  401116:	4b02      	ldr	r3, [pc, #8]	; (401120 <PIOE_Handler+0x10>)
  401118:	4798      	blx	r3
  40111a:	bd08      	pop	{r3, pc}
  40111c:	400e1600 	.word	0x400e1600
  401120:	00401071 	.word	0x00401071

00401124 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401124:	2803      	cmp	r0, #3
  401126:	d011      	beq.n	40114c <pmc_mck_set_division+0x28>
  401128:	2804      	cmp	r0, #4
  40112a:	d012      	beq.n	401152 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40112c:	2802      	cmp	r0, #2
  40112e:	bf0c      	ite	eq
  401130:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401134:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401136:	4a08      	ldr	r2, [pc, #32]	; (401158 <pmc_mck_set_division+0x34>)
  401138:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40113a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40113e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401140:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401142:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401144:	f013 0f08 	tst.w	r3, #8
  401148:	d0fb      	beq.n	401142 <pmc_mck_set_division+0x1e>
}
  40114a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40114c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401150:	e7f1      	b.n	401136 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401152:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401156:	e7ee      	b.n	401136 <pmc_mck_set_division+0x12>
  401158:	400e0600 	.word	0x400e0600

0040115c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40115c:	4a17      	ldr	r2, [pc, #92]	; (4011bc <pmc_switch_mck_to_pllack+0x60>)
  40115e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401164:	4318      	orrs	r0, r3
  401166:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401168:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40116a:	f013 0f08 	tst.w	r3, #8
  40116e:	d10a      	bne.n	401186 <pmc_switch_mck_to_pllack+0x2a>
  401170:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401174:	4911      	ldr	r1, [pc, #68]	; (4011bc <pmc_switch_mck_to_pllack+0x60>)
  401176:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401178:	f012 0f08 	tst.w	r2, #8
  40117c:	d103      	bne.n	401186 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40117e:	3b01      	subs	r3, #1
  401180:	d1f9      	bne.n	401176 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401182:	2001      	movs	r0, #1
  401184:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401186:	4a0d      	ldr	r2, [pc, #52]	; (4011bc <pmc_switch_mck_to_pllack+0x60>)
  401188:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40118a:	f023 0303 	bic.w	r3, r3, #3
  40118e:	f043 0302 	orr.w	r3, r3, #2
  401192:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401194:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401196:	f013 0f08 	tst.w	r3, #8
  40119a:	d10a      	bne.n	4011b2 <pmc_switch_mck_to_pllack+0x56>
  40119c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4011a0:	4906      	ldr	r1, [pc, #24]	; (4011bc <pmc_switch_mck_to_pllack+0x60>)
  4011a2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4011a4:	f012 0f08 	tst.w	r2, #8
  4011a8:	d105      	bne.n	4011b6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011aa:	3b01      	subs	r3, #1
  4011ac:	d1f9      	bne.n	4011a2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4011ae:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4011b0:	4770      	bx	lr
	return 0;
  4011b2:	2000      	movs	r0, #0
  4011b4:	4770      	bx	lr
  4011b6:	2000      	movs	r0, #0
  4011b8:	4770      	bx	lr
  4011ba:	bf00      	nop
  4011bc:	400e0600 	.word	0x400e0600

004011c0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4011c0:	b9a0      	cbnz	r0, 4011ec <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4011c2:	480e      	ldr	r0, [pc, #56]	; (4011fc <pmc_switch_mainck_to_xtal+0x3c>)
  4011c4:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4011c6:	0209      	lsls	r1, r1, #8
  4011c8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4011ca:	4a0d      	ldr	r2, [pc, #52]	; (401200 <pmc_switch_mainck_to_xtal+0x40>)
  4011cc:	401a      	ands	r2, r3
  4011ce:	4b0d      	ldr	r3, [pc, #52]	; (401204 <pmc_switch_mainck_to_xtal+0x44>)
  4011d0:	4313      	orrs	r3, r2
  4011d2:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4011d4:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4011d6:	4602      	mov	r2, r0
  4011d8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011da:	f013 0f01 	tst.w	r3, #1
  4011de:	d0fb      	beq.n	4011d8 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4011e0:	4a06      	ldr	r2, [pc, #24]	; (4011fc <pmc_switch_mainck_to_xtal+0x3c>)
  4011e2:	6a11      	ldr	r1, [r2, #32]
  4011e4:	4b08      	ldr	r3, [pc, #32]	; (401208 <pmc_switch_mainck_to_xtal+0x48>)
  4011e6:	430b      	orrs	r3, r1
  4011e8:	6213      	str	r3, [r2, #32]
  4011ea:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4011ec:	4903      	ldr	r1, [pc, #12]	; (4011fc <pmc_switch_mainck_to_xtal+0x3c>)
  4011ee:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4011f0:	4a06      	ldr	r2, [pc, #24]	; (40120c <pmc_switch_mainck_to_xtal+0x4c>)
  4011f2:	401a      	ands	r2, r3
  4011f4:	4b06      	ldr	r3, [pc, #24]	; (401210 <pmc_switch_mainck_to_xtal+0x50>)
  4011f6:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4011f8:	620b      	str	r3, [r1, #32]
  4011fa:	4770      	bx	lr
  4011fc:	400e0600 	.word	0x400e0600
  401200:	ffc8fffc 	.word	0xffc8fffc
  401204:	00370001 	.word	0x00370001
  401208:	01370000 	.word	0x01370000
  40120c:	fec8fffc 	.word	0xfec8fffc
  401210:	01370002 	.word	0x01370002

00401214 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401214:	4b02      	ldr	r3, [pc, #8]	; (401220 <pmc_osc_is_ready_mainck+0xc>)
  401216:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401218:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40121c:	4770      	bx	lr
  40121e:	bf00      	nop
  401220:	400e0600 	.word	0x400e0600

00401224 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401224:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401228:	4b01      	ldr	r3, [pc, #4]	; (401230 <pmc_disable_pllack+0xc>)
  40122a:	629a      	str	r2, [r3, #40]	; 0x28
  40122c:	4770      	bx	lr
  40122e:	bf00      	nop
  401230:	400e0600 	.word	0x400e0600

00401234 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401234:	4b02      	ldr	r3, [pc, #8]	; (401240 <pmc_is_locked_pllack+0xc>)
  401236:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401238:	f000 0002 	and.w	r0, r0, #2
  40123c:	4770      	bx	lr
  40123e:	bf00      	nop
  401240:	400e0600 	.word	0x400e0600

00401244 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  401244:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  401248:	4b05      	ldr	r3, [pc, #20]	; (401260 <pmc_enable_periph_clk+0x1c>)
  40124a:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  40124e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  401252:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  401256:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40125a:	2000      	movs	r0, #0
  40125c:	4770      	bx	lr
  40125e:	bf00      	nop
  401260:	400e0600 	.word	0x400e0600

00401264 <pmc_switch_pck_to_pllack>:
 */
uint32_t pmc_switch_pck_to_pllack(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLA_CLK | ul_pres;
  401264:	f041 0102 	orr.w	r1, r1, #2
  401268:	4b0c      	ldr	r3, [pc, #48]	; (40129c <pmc_switch_pck_to_pllack+0x38>)
  40126a:	f100 0210 	add.w	r2, r0, #16
  40126e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  401272:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  401274:	f44f 7380 	mov.w	r3, #256	; 0x100
  401278:	fa03 f000 	lsl.w	r0, r3, r0
	for (ul_timeout = PMC_TIMEOUT;
  40127c:	4202      	tst	r2, r0
  40127e:	d109      	bne.n	401294 <pmc_switch_pck_to_pllack+0x30>
  401280:	f44f 6300 	mov.w	r3, #2048	; 0x800
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  401284:	4905      	ldr	r1, [pc, #20]	; (40129c <pmc_switch_pck_to_pllack+0x38>)
  401286:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	for (ul_timeout = PMC_TIMEOUT;
  401288:	4202      	tst	r2, r0
  40128a:	d105      	bne.n	401298 <pmc_switch_pck_to_pllack+0x34>
		if (ul_timeout == 0) {
  40128c:	3b01      	subs	r3, #1
  40128e:	d1fa      	bne.n	401286 <pmc_switch_pck_to_pllack+0x22>
			return 1;
  401290:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401292:	4770      	bx	lr
	return 0;
  401294:	2000      	movs	r0, #0
  401296:	4770      	bx	lr
  401298:	2000      	movs	r0, #0
  40129a:	4770      	bx	lr
  40129c:	400e0600 	.word	0x400e0600

004012a0 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  4012a0:	f44f 7380 	mov.w	r3, #256	; 0x100
  4012a4:	fa03 f000 	lsl.w	r0, r3, r0
  4012a8:	4b01      	ldr	r3, [pc, #4]	; (4012b0 <pmc_enable_pck+0x10>)
  4012aa:	6018      	str	r0, [r3, #0]
  4012ac:	4770      	bx	lr
  4012ae:	bf00      	nop
  4012b0:	400e0600 	.word	0x400e0600

004012b4 <pmc_disable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  4012b4:	f44f 7380 	mov.w	r3, #256	; 0x100
  4012b8:	fa03 f000 	lsl.w	r0, r3, r0
  4012bc:	4b01      	ldr	r3, [pc, #4]	; (4012c4 <pmc_disable_pck+0x10>)
  4012be:	6058      	str	r0, [r3, #4]
  4012c0:	4770      	bx	lr
  4012c2:	bf00      	nop
  4012c4:	400e0600 	.word	0x400e0600

004012c8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4012c8:	6943      	ldr	r3, [r0, #20]
  4012ca:	f013 0f02 	tst.w	r3, #2
  4012ce:	d002      	beq.n	4012d6 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4012d0:	61c1      	str	r1, [r0, #28]
	return 0;
  4012d2:	2000      	movs	r0, #0
  4012d4:	4770      	bx	lr
		return 1;
  4012d6:	2001      	movs	r0, #1
}
  4012d8:	4770      	bx	lr

004012da <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4012da:	6943      	ldr	r3, [r0, #20]
  4012dc:	f013 0f01 	tst.w	r3, #1
  4012e0:	d003      	beq.n	4012ea <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4012e2:	6983      	ldr	r3, [r0, #24]
  4012e4:	700b      	strb	r3, [r1, #0]
	return 0;
  4012e6:	2000      	movs	r0, #0
  4012e8:	4770      	bx	lr
		return 1;
  4012ea:	2001      	movs	r0, #1
}
  4012ec:	4770      	bx	lr

004012ee <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4012ee:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4012f0:	010b      	lsls	r3, r1, #4
  4012f2:	4293      	cmp	r3, r2
  4012f4:	d914      	bls.n	401320 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4012f6:	00c9      	lsls	r1, r1, #3
  4012f8:	084b      	lsrs	r3, r1, #1
  4012fa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4012fe:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401302:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401304:	1e5c      	subs	r4, r3, #1
  401306:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40130a:	428c      	cmp	r4, r1
  40130c:	d901      	bls.n	401312 <usart_set_async_baudrate+0x24>
		return 1;
  40130e:	2001      	movs	r0, #1
  401310:	e017      	b.n	401342 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401312:	6841      	ldr	r1, [r0, #4]
  401314:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401318:	6041      	str	r1, [r0, #4]
  40131a:	e00c      	b.n	401336 <usart_set_async_baudrate+0x48>
		return 1;
  40131c:	2001      	movs	r0, #1
  40131e:	e010      	b.n	401342 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401320:	0859      	lsrs	r1, r3, #1
  401322:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401326:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  40132a:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40132c:	1e5c      	subs	r4, r3, #1
  40132e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401332:	428c      	cmp	r4, r1
  401334:	d8f2      	bhi.n	40131c <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401336:	0412      	lsls	r2, r2, #16
  401338:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  40133c:	431a      	orrs	r2, r3
  40133e:	6202      	str	r2, [r0, #32]

	return 0;
  401340:	2000      	movs	r0, #0
}
  401342:	f85d 4b04 	ldr.w	r4, [sp], #4
  401346:	4770      	bx	lr

00401348 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401348:	4b08      	ldr	r3, [pc, #32]	; (40136c <usart_reset+0x24>)
  40134a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  40134e:	2300      	movs	r3, #0
  401350:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401352:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401354:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401356:	2388      	movs	r3, #136	; 0x88
  401358:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40135a:	2324      	movs	r3, #36	; 0x24
  40135c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40135e:	f44f 7380 	mov.w	r3, #256	; 0x100
  401362:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401364:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401368:	6003      	str	r3, [r0, #0]
  40136a:	4770      	bx	lr
  40136c:	55534100 	.word	0x55534100

00401370 <usart_init_rs232>:
{
  401370:	b570      	push	{r4, r5, r6, lr}
  401372:	4605      	mov	r5, r0
  401374:	460c      	mov	r4, r1
  401376:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401378:	4b0f      	ldr	r3, [pc, #60]	; (4013b8 <usart_init_rs232+0x48>)
  40137a:	4798      	blx	r3
	ul_reg_val = 0;
  40137c:	2200      	movs	r2, #0
  40137e:	4b0f      	ldr	r3, [pc, #60]	; (4013bc <usart_init_rs232+0x4c>)
  401380:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401382:	b1a4      	cbz	r4, 4013ae <usart_init_rs232+0x3e>
  401384:	4632      	mov	r2, r6
  401386:	6821      	ldr	r1, [r4, #0]
  401388:	4628      	mov	r0, r5
  40138a:	4b0d      	ldr	r3, [pc, #52]	; (4013c0 <usart_init_rs232+0x50>)
  40138c:	4798      	blx	r3
  40138e:	4602      	mov	r2, r0
  401390:	b978      	cbnz	r0, 4013b2 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401392:	6863      	ldr	r3, [r4, #4]
  401394:	68a1      	ldr	r1, [r4, #8]
  401396:	430b      	orrs	r3, r1
  401398:	6921      	ldr	r1, [r4, #16]
  40139a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40139c:	68e1      	ldr	r1, [r4, #12]
  40139e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4013a0:	4906      	ldr	r1, [pc, #24]	; (4013bc <usart_init_rs232+0x4c>)
  4013a2:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4013a4:	6869      	ldr	r1, [r5, #4]
  4013a6:	430b      	orrs	r3, r1
  4013a8:	606b      	str	r3, [r5, #4]
}
  4013aa:	4610      	mov	r0, r2
  4013ac:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4013ae:	2201      	movs	r2, #1
  4013b0:	e7fb      	b.n	4013aa <usart_init_rs232+0x3a>
  4013b2:	2201      	movs	r2, #1
  4013b4:	e7f9      	b.n	4013aa <usart_init_rs232+0x3a>
  4013b6:	bf00      	nop
  4013b8:	00401349 	.word	0x00401349
  4013bc:	20401458 	.word	0x20401458
  4013c0:	004012ef 	.word	0x004012ef

004013c4 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4013c4:	2340      	movs	r3, #64	; 0x40
  4013c6:	6003      	str	r3, [r0, #0]
  4013c8:	4770      	bx	lr

004013ca <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4013ca:	2310      	movs	r3, #16
  4013cc:	6003      	str	r3, [r0, #0]
  4013ce:	4770      	bx	lr

004013d0 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4013d0:	6943      	ldr	r3, [r0, #20]
  4013d2:	f013 0f02 	tst.w	r3, #2
  4013d6:	d004      	beq.n	4013e2 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4013d8:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4013dc:	61c1      	str	r1, [r0, #28]
	return 0;
  4013de:	2000      	movs	r0, #0
  4013e0:	4770      	bx	lr
		return 1;
  4013e2:	2001      	movs	r0, #1
}
  4013e4:	4770      	bx	lr

004013e6 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4013e6:	6943      	ldr	r3, [r0, #20]
  4013e8:	f013 0f01 	tst.w	r3, #1
  4013ec:	d005      	beq.n	4013fa <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4013ee:	6983      	ldr	r3, [r0, #24]
  4013f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4013f4:	600b      	str	r3, [r1, #0]
	return 0;
  4013f6:	2000      	movs	r0, #0
  4013f8:	4770      	bx	lr
		return 1;
  4013fa:	2001      	movs	r0, #1
}
  4013fc:	4770      	bx	lr

004013fe <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4013fe:	e7fe      	b.n	4013fe <Dummy_Handler>

00401400 <Reset_Handler>:
{
  401400:	b500      	push	{lr}
  401402:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401404:	4b25      	ldr	r3, [pc, #148]	; (40149c <Reset_Handler+0x9c>)
  401406:	4a26      	ldr	r2, [pc, #152]	; (4014a0 <Reset_Handler+0xa0>)
  401408:	429a      	cmp	r2, r3
  40140a:	d010      	beq.n	40142e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  40140c:	4b25      	ldr	r3, [pc, #148]	; (4014a4 <Reset_Handler+0xa4>)
  40140e:	4a23      	ldr	r2, [pc, #140]	; (40149c <Reset_Handler+0x9c>)
  401410:	429a      	cmp	r2, r3
  401412:	d20c      	bcs.n	40142e <Reset_Handler+0x2e>
  401414:	3b01      	subs	r3, #1
  401416:	1a9b      	subs	r3, r3, r2
  401418:	f023 0303 	bic.w	r3, r3, #3
  40141c:	3304      	adds	r3, #4
  40141e:	4413      	add	r3, r2
  401420:	491f      	ldr	r1, [pc, #124]	; (4014a0 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401422:	f851 0b04 	ldr.w	r0, [r1], #4
  401426:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40142a:	429a      	cmp	r2, r3
  40142c:	d1f9      	bne.n	401422 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40142e:	4b1e      	ldr	r3, [pc, #120]	; (4014a8 <Reset_Handler+0xa8>)
  401430:	4a1e      	ldr	r2, [pc, #120]	; (4014ac <Reset_Handler+0xac>)
  401432:	429a      	cmp	r2, r3
  401434:	d20a      	bcs.n	40144c <Reset_Handler+0x4c>
  401436:	3b01      	subs	r3, #1
  401438:	1a9b      	subs	r3, r3, r2
  40143a:	f023 0303 	bic.w	r3, r3, #3
  40143e:	3304      	adds	r3, #4
  401440:	4413      	add	r3, r2
                *pDest++ = 0;
  401442:	2100      	movs	r1, #0
  401444:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401448:	4293      	cmp	r3, r2
  40144a:	d1fb      	bne.n	401444 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40144c:	4a18      	ldr	r2, [pc, #96]	; (4014b0 <Reset_Handler+0xb0>)
  40144e:	4b19      	ldr	r3, [pc, #100]	; (4014b4 <Reset_Handler+0xb4>)
  401450:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401454:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401456:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40145a:	fab3 f383 	clz	r3, r3
  40145e:	095b      	lsrs	r3, r3, #5
  401460:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401462:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  401464:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401468:	2200      	movs	r2, #0
  40146a:	4b13      	ldr	r3, [pc, #76]	; (4014b8 <Reset_Handler+0xb8>)
  40146c:	701a      	strb	r2, [r3, #0]
	return flags;
  40146e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401470:	4a12      	ldr	r2, [pc, #72]	; (4014bc <Reset_Handler+0xbc>)
  401472:	6813      	ldr	r3, [r2, #0]
  401474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401478:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  40147a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40147e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401482:	b129      	cbz	r1, 401490 <Reset_Handler+0x90>
		cpu_irq_enable();
  401484:	2201      	movs	r2, #1
  401486:	4b0c      	ldr	r3, [pc, #48]	; (4014b8 <Reset_Handler+0xb8>)
  401488:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  40148a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40148e:	b662      	cpsie	i
        __libc_init_array();
  401490:	4b0b      	ldr	r3, [pc, #44]	; (4014c0 <Reset_Handler+0xc0>)
  401492:	4798      	blx	r3
        main();
  401494:	4b0b      	ldr	r3, [pc, #44]	; (4014c4 <Reset_Handler+0xc4>)
  401496:	4798      	blx	r3
  401498:	e7fe      	b.n	401498 <Reset_Handler+0x98>
  40149a:	bf00      	nop
  40149c:	20400000 	.word	0x20400000
  4014a0:	00404e48 	.word	0x00404e48
  4014a4:	204009c0 	.word	0x204009c0
  4014a8:	204014d0 	.word	0x204014d0
  4014ac:	204009c0 	.word	0x204009c0
  4014b0:	e000ed00 	.word	0xe000ed00
  4014b4:	00400000 	.word	0x00400000
  4014b8:	2040000c 	.word	0x2040000c
  4014bc:	e000ed88 	.word	0xe000ed88
  4014c0:	00401779 	.word	0x00401779
  4014c4:	004016bd 	.word	0x004016bd

004014c8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4014c8:	4b3b      	ldr	r3, [pc, #236]	; (4015b8 <SystemCoreClockUpdate+0xf0>)
  4014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4014cc:	f003 0303 	and.w	r3, r3, #3
  4014d0:	2b01      	cmp	r3, #1
  4014d2:	d01d      	beq.n	401510 <SystemCoreClockUpdate+0x48>
  4014d4:	b183      	cbz	r3, 4014f8 <SystemCoreClockUpdate+0x30>
  4014d6:	2b02      	cmp	r3, #2
  4014d8:	d036      	beq.n	401548 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4014da:	4b37      	ldr	r3, [pc, #220]	; (4015b8 <SystemCoreClockUpdate+0xf0>)
  4014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4014de:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4014e2:	2b70      	cmp	r3, #112	; 0x70
  4014e4:	d05f      	beq.n	4015a6 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4014e6:	4b34      	ldr	r3, [pc, #208]	; (4015b8 <SystemCoreClockUpdate+0xf0>)
  4014e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4014ea:	4934      	ldr	r1, [pc, #208]	; (4015bc <SystemCoreClockUpdate+0xf4>)
  4014ec:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4014f0:	680b      	ldr	r3, [r1, #0]
  4014f2:	40d3      	lsrs	r3, r2
  4014f4:	600b      	str	r3, [r1, #0]
  4014f6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4014f8:	4b31      	ldr	r3, [pc, #196]	; (4015c0 <SystemCoreClockUpdate+0xf8>)
  4014fa:	695b      	ldr	r3, [r3, #20]
  4014fc:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401500:	bf14      	ite	ne
  401502:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401506:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40150a:	4b2c      	ldr	r3, [pc, #176]	; (4015bc <SystemCoreClockUpdate+0xf4>)
  40150c:	601a      	str	r2, [r3, #0]
  40150e:	e7e4      	b.n	4014da <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401510:	4b29      	ldr	r3, [pc, #164]	; (4015b8 <SystemCoreClockUpdate+0xf0>)
  401512:	6a1b      	ldr	r3, [r3, #32]
  401514:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401518:	d003      	beq.n	401522 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40151a:	4a2a      	ldr	r2, [pc, #168]	; (4015c4 <SystemCoreClockUpdate+0xfc>)
  40151c:	4b27      	ldr	r3, [pc, #156]	; (4015bc <SystemCoreClockUpdate+0xf4>)
  40151e:	601a      	str	r2, [r3, #0]
  401520:	e7db      	b.n	4014da <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401522:	4a29      	ldr	r2, [pc, #164]	; (4015c8 <SystemCoreClockUpdate+0x100>)
  401524:	4b25      	ldr	r3, [pc, #148]	; (4015bc <SystemCoreClockUpdate+0xf4>)
  401526:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401528:	4b23      	ldr	r3, [pc, #140]	; (4015b8 <SystemCoreClockUpdate+0xf0>)
  40152a:	6a1b      	ldr	r3, [r3, #32]
  40152c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401530:	2b10      	cmp	r3, #16
  401532:	d005      	beq.n	401540 <SystemCoreClockUpdate+0x78>
  401534:	2b20      	cmp	r3, #32
  401536:	d1d0      	bne.n	4014da <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401538:	4a22      	ldr	r2, [pc, #136]	; (4015c4 <SystemCoreClockUpdate+0xfc>)
  40153a:	4b20      	ldr	r3, [pc, #128]	; (4015bc <SystemCoreClockUpdate+0xf4>)
  40153c:	601a      	str	r2, [r3, #0]
          break;
  40153e:	e7cc      	b.n	4014da <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401540:	4a22      	ldr	r2, [pc, #136]	; (4015cc <SystemCoreClockUpdate+0x104>)
  401542:	4b1e      	ldr	r3, [pc, #120]	; (4015bc <SystemCoreClockUpdate+0xf4>)
  401544:	601a      	str	r2, [r3, #0]
          break;
  401546:	e7c8      	b.n	4014da <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401548:	4b1b      	ldr	r3, [pc, #108]	; (4015b8 <SystemCoreClockUpdate+0xf0>)
  40154a:	6a1b      	ldr	r3, [r3, #32]
  40154c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401550:	d016      	beq.n	401580 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401552:	4a1c      	ldr	r2, [pc, #112]	; (4015c4 <SystemCoreClockUpdate+0xfc>)
  401554:	4b19      	ldr	r3, [pc, #100]	; (4015bc <SystemCoreClockUpdate+0xf4>)
  401556:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401558:	4b17      	ldr	r3, [pc, #92]	; (4015b8 <SystemCoreClockUpdate+0xf0>)
  40155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40155c:	f003 0303 	and.w	r3, r3, #3
  401560:	2b02      	cmp	r3, #2
  401562:	d1ba      	bne.n	4014da <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401564:	4a14      	ldr	r2, [pc, #80]	; (4015b8 <SystemCoreClockUpdate+0xf0>)
  401566:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401568:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40156a:	4814      	ldr	r0, [pc, #80]	; (4015bc <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40156c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401570:	6803      	ldr	r3, [r0, #0]
  401572:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401576:	b2d2      	uxtb	r2, r2
  401578:	fbb3 f3f2 	udiv	r3, r3, r2
  40157c:	6003      	str	r3, [r0, #0]
  40157e:	e7ac      	b.n	4014da <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401580:	4a11      	ldr	r2, [pc, #68]	; (4015c8 <SystemCoreClockUpdate+0x100>)
  401582:	4b0e      	ldr	r3, [pc, #56]	; (4015bc <SystemCoreClockUpdate+0xf4>)
  401584:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401586:	4b0c      	ldr	r3, [pc, #48]	; (4015b8 <SystemCoreClockUpdate+0xf0>)
  401588:	6a1b      	ldr	r3, [r3, #32]
  40158a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40158e:	2b10      	cmp	r3, #16
  401590:	d005      	beq.n	40159e <SystemCoreClockUpdate+0xd6>
  401592:	2b20      	cmp	r3, #32
  401594:	d1e0      	bne.n	401558 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401596:	4a0b      	ldr	r2, [pc, #44]	; (4015c4 <SystemCoreClockUpdate+0xfc>)
  401598:	4b08      	ldr	r3, [pc, #32]	; (4015bc <SystemCoreClockUpdate+0xf4>)
  40159a:	601a      	str	r2, [r3, #0]
          break;
  40159c:	e7dc      	b.n	401558 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40159e:	4a0b      	ldr	r2, [pc, #44]	; (4015cc <SystemCoreClockUpdate+0x104>)
  4015a0:	4b06      	ldr	r3, [pc, #24]	; (4015bc <SystemCoreClockUpdate+0xf4>)
  4015a2:	601a      	str	r2, [r3, #0]
          break;
  4015a4:	e7d8      	b.n	401558 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4015a6:	4a05      	ldr	r2, [pc, #20]	; (4015bc <SystemCoreClockUpdate+0xf4>)
  4015a8:	6813      	ldr	r3, [r2, #0]
  4015aa:	4909      	ldr	r1, [pc, #36]	; (4015d0 <SystemCoreClockUpdate+0x108>)
  4015ac:	fba1 1303 	umull	r1, r3, r1, r3
  4015b0:	085b      	lsrs	r3, r3, #1
  4015b2:	6013      	str	r3, [r2, #0]
  4015b4:	4770      	bx	lr
  4015b6:	bf00      	nop
  4015b8:	400e0600 	.word	0x400e0600
  4015bc:	20400010 	.word	0x20400010
  4015c0:	400e1810 	.word	0x400e1810
  4015c4:	00b71b00 	.word	0x00b71b00
  4015c8:	003d0900 	.word	0x003d0900
  4015cc:	007a1200 	.word	0x007a1200
  4015d0:	aaaaaaab 	.word	0xaaaaaaab

004015d4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4015d4:	4b16      	ldr	r3, [pc, #88]	; (401630 <system_init_flash+0x5c>)
  4015d6:	4298      	cmp	r0, r3
  4015d8:	d913      	bls.n	401602 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4015da:	4b16      	ldr	r3, [pc, #88]	; (401634 <system_init_flash+0x60>)
  4015dc:	4298      	cmp	r0, r3
  4015de:	d915      	bls.n	40160c <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4015e0:	4b15      	ldr	r3, [pc, #84]	; (401638 <system_init_flash+0x64>)
  4015e2:	4298      	cmp	r0, r3
  4015e4:	d916      	bls.n	401614 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4015e6:	4b15      	ldr	r3, [pc, #84]	; (40163c <system_init_flash+0x68>)
  4015e8:	4298      	cmp	r0, r3
  4015ea:	d917      	bls.n	40161c <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4015ec:	4b14      	ldr	r3, [pc, #80]	; (401640 <system_init_flash+0x6c>)
  4015ee:	4298      	cmp	r0, r3
  4015f0:	d918      	bls.n	401624 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4015f2:	4b14      	ldr	r3, [pc, #80]	; (401644 <system_init_flash+0x70>)
  4015f4:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4015f6:	bf94      	ite	ls
  4015f8:	4a13      	ldrls	r2, [pc, #76]	; (401648 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4015fa:	4a14      	ldrhi	r2, [pc, #80]	; (40164c <system_init_flash+0x78>)
  4015fc:	4b14      	ldr	r3, [pc, #80]	; (401650 <system_init_flash+0x7c>)
  4015fe:	601a      	str	r2, [r3, #0]
  401600:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401602:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401606:	4b12      	ldr	r3, [pc, #72]	; (401650 <system_init_flash+0x7c>)
  401608:	601a      	str	r2, [r3, #0]
  40160a:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40160c:	4a11      	ldr	r2, [pc, #68]	; (401654 <system_init_flash+0x80>)
  40160e:	4b10      	ldr	r3, [pc, #64]	; (401650 <system_init_flash+0x7c>)
  401610:	601a      	str	r2, [r3, #0]
  401612:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401614:	4a10      	ldr	r2, [pc, #64]	; (401658 <system_init_flash+0x84>)
  401616:	4b0e      	ldr	r3, [pc, #56]	; (401650 <system_init_flash+0x7c>)
  401618:	601a      	str	r2, [r3, #0]
  40161a:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40161c:	4a0f      	ldr	r2, [pc, #60]	; (40165c <system_init_flash+0x88>)
  40161e:	4b0c      	ldr	r3, [pc, #48]	; (401650 <system_init_flash+0x7c>)
  401620:	601a      	str	r2, [r3, #0]
  401622:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401624:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401628:	4b09      	ldr	r3, [pc, #36]	; (401650 <system_init_flash+0x7c>)
  40162a:	601a      	str	r2, [r3, #0]
  40162c:	4770      	bx	lr
  40162e:	bf00      	nop
  401630:	015ef3bf 	.word	0x015ef3bf
  401634:	02bde77f 	.word	0x02bde77f
  401638:	041cdb3f 	.word	0x041cdb3f
  40163c:	057bceff 	.word	0x057bceff
  401640:	06dac2bf 	.word	0x06dac2bf
  401644:	0839b67f 	.word	0x0839b67f
  401648:	04000500 	.word	0x04000500
  40164c:	04000600 	.word	0x04000600
  401650:	400e0c00 	.word	0x400e0c00
  401654:	04000100 	.word	0x04000100
  401658:	04000200 	.word	0x04000200
  40165c:	04000300 	.word	0x04000300

00401660 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401660:	4b0a      	ldr	r3, [pc, #40]	; (40168c <_sbrk+0x2c>)
  401662:	681b      	ldr	r3, [r3, #0]
  401664:	b153      	cbz	r3, 40167c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401666:	4b09      	ldr	r3, [pc, #36]	; (40168c <_sbrk+0x2c>)
  401668:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40166a:	181a      	adds	r2, r3, r0
  40166c:	4908      	ldr	r1, [pc, #32]	; (401690 <_sbrk+0x30>)
  40166e:	4291      	cmp	r1, r2
  401670:	db08      	blt.n	401684 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401672:	4610      	mov	r0, r2
  401674:	4a05      	ldr	r2, [pc, #20]	; (40168c <_sbrk+0x2c>)
  401676:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401678:	4618      	mov	r0, r3
  40167a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40167c:	4a05      	ldr	r2, [pc, #20]	; (401694 <_sbrk+0x34>)
  40167e:	4b03      	ldr	r3, [pc, #12]	; (40168c <_sbrk+0x2c>)
  401680:	601a      	str	r2, [r3, #0]
  401682:	e7f0      	b.n	401666 <_sbrk+0x6>
		return (caddr_t) -1;	
  401684:	f04f 30ff 	mov.w	r0, #4294967295
}
  401688:	4770      	bx	lr
  40168a:	bf00      	nop
  40168c:	2040145c 	.word	0x2040145c
  401690:	2045fffc 	.word	0x2045fffc
  401694:	204036d0 	.word	0x204036d0

00401698 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401698:	f04f 30ff 	mov.w	r0, #4294967295
  40169c:	4770      	bx	lr

0040169e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40169e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4016a2:	604b      	str	r3, [r1, #4]

	return 0;
}
  4016a4:	2000      	movs	r0, #0
  4016a6:	4770      	bx	lr

004016a8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4016a8:	2001      	movs	r0, #1
  4016aa:	4770      	bx	lr

004016ac <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4016ac:	2000      	movs	r0, #0
  4016ae:	4770      	bx	lr

004016b0 <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
  4016b0:	be00      	bkpt	0x0000
  4016b2:	e7fe      	b.n	4016b2 <_exit+0x2>

004016b4 <_kill>:
	for (;;);
}

extern void _kill(int pid, int sig)
{
  4016b4:	4770      	bx	lr

004016b6 <_getpid>:
}

extern int _getpid(void)
{
	return -1;
}
  4016b6:	f04f 30ff 	mov.w	r0, #4294967295
  4016ba:	4770      	bx	lr

004016bc <main>:
volatile uint64_t    g_tickTime_ms      = 0UL;
volatile uint32_t    g_tx_tick_count_ms = 0U;


 int main(void)
 {
  4016bc:	b508      	push	{r3, lr}
 	uint8_t key;

 	sysclk_init();
  4016be:	4b0c      	ldr	r3, [pc, #48]	; (4016f0 <main+0x34>)
  4016c0:	4798      	blx	r3
 	board_init();
  4016c2:	4b0c      	ldr	r3, [pc, #48]	; (4016f4 <main+0x38>)
  4016c4:	4798      	blx	r3

	// sample_init();
	
	g_tickCount = 0;
  4016c6:	2300      	movs	r3, #0
  4016c8:	4a0b      	ldr	r2, [pc, #44]	; (4016f8 <main+0x3c>)
  4016ca:	6013      	str	r3, [r2, #0]
	g_tx_tick_count_ms = 0;
  4016cc:	4a0b      	ldr	r2, [pc, #44]	; (4016fc <main+0x40>)
  4016ce:	6013      	str	r3, [r2, #0]

 	can_init();    // CAN1_Initialize();
  4016d0:	4b0b      	ldr	r3, [pc, #44]	; (401700 <main+0x44>)
  4016d2:	4798      	blx	r3
 	CANTxTaskInit();
  4016d4:	4b0b      	ldr	r3, [pc, #44]	; (401704 <main+0x48>)
  4016d6:	4798      	blx	r3
	
	while(1)
  {
	sample_1();
  4016d8:	4e0b      	ldr	r6, [pc, #44]	; (401708 <main+0x4c>)
    // CANRxTask();
    CANTxTask(g_tx_tick_count_ms);
  4016da:	4c08      	ldr	r4, [pc, #32]	; (4016fc <main+0x40>)
  4016dc:	4d0b      	ldr	r5, [pc, #44]	; (40170c <main+0x50>)
	sample_1();
  4016de:	47b0      	blx	r6
    CANTxTask(g_tx_tick_count_ms);
  4016e0:	6820      	ldr	r0, [r4, #0]
  4016e2:	47a8      	blx	r5
    g_tx_tick_count_ms++;
  4016e4:	6823      	ldr	r3, [r4, #0]
  4016e6:	3301      	adds	r3, #1
  4016e8:	6023      	str	r3, [r4, #0]
    CanMessageControl_Task();
  4016ea:	4b09      	ldr	r3, [pc, #36]	; (401710 <main+0x54>)
  4016ec:	4798      	blx	r3
  4016ee:	e7f6      	b.n	4016de <main+0x22>
  4016f0:	00400a6d 	.word	0x00400a6d
  4016f4:	00400b69 	.word	0x00400b69
  4016f8:	20401460 	.word	0x20401460
  4016fc:	20401464 	.word	0x20401464
  401700:	004008e1 	.word	0x004008e1
  401704:	00400501 	.word	0x00400501
  401708:	00400611 	.word	0x00400611
  40170c:	00400539 	.word	0x00400539
  401710:	0040059d 	.word	0x0040059d

00401714 <__assert_func>:
  401714:	b500      	push	{lr}
  401716:	4c0a      	ldr	r4, [pc, #40]	; (401740 <__assert_func+0x2c>)
  401718:	6826      	ldr	r6, [r4, #0]
  40171a:	4605      	mov	r5, r0
  40171c:	b085      	sub	sp, #20
  40171e:	461c      	mov	r4, r3
  401720:	68f0      	ldr	r0, [r6, #12]
  401722:	b152      	cbz	r2, 40173a <__assert_func+0x26>
  401724:	4b07      	ldr	r3, [pc, #28]	; (401744 <__assert_func+0x30>)
  401726:	9202      	str	r2, [sp, #8]
  401728:	e88d 000a 	stmia.w	sp, {r1, r3}
  40172c:	4622      	mov	r2, r4
  40172e:	462b      	mov	r3, r5
  401730:	4905      	ldr	r1, [pc, #20]	; (401748 <__assert_func+0x34>)
  401732:	f000 f80d 	bl	401750 <fiprintf>
  401736:	f001 f94b 	bl	4029d0 <abort>
  40173a:	4b04      	ldr	r3, [pc, #16]	; (40174c <__assert_func+0x38>)
  40173c:	461a      	mov	r2, r3
  40173e:	e7f2      	b.n	401726 <__assert_func+0x12>
  401740:	20400014 	.word	0x20400014
  401744:	00404c74 	.word	0x00404c74
  401748:	00404c84 	.word	0x00404c84
  40174c:	00404c70 	.word	0x00404c70

00401750 <fiprintf>:
  401750:	b40e      	push	{r1, r2, r3}
  401752:	b510      	push	{r4, lr}
  401754:	b083      	sub	sp, #12
  401756:	ab05      	add	r3, sp, #20
  401758:	4c06      	ldr	r4, [pc, #24]	; (401774 <fiprintf+0x24>)
  40175a:	f853 2b04 	ldr.w	r2, [r3], #4
  40175e:	9301      	str	r3, [sp, #4]
  401760:	4601      	mov	r1, r0
  401762:	6820      	ldr	r0, [r4, #0]
  401764:	f000 fa3c 	bl	401be0 <_vfiprintf_r>
  401768:	b003      	add	sp, #12
  40176a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40176e:	b003      	add	sp, #12
  401770:	4770      	bx	lr
  401772:	bf00      	nop
  401774:	20400014 	.word	0x20400014

00401778 <__libc_init_array>:
  401778:	b570      	push	{r4, r5, r6, lr}
  40177a:	4e0f      	ldr	r6, [pc, #60]	; (4017b8 <__libc_init_array+0x40>)
  40177c:	4d0f      	ldr	r5, [pc, #60]	; (4017bc <__libc_init_array+0x44>)
  40177e:	1b76      	subs	r6, r6, r5
  401780:	10b6      	asrs	r6, r6, #2
  401782:	bf18      	it	ne
  401784:	2400      	movne	r4, #0
  401786:	d005      	beq.n	401794 <__libc_init_array+0x1c>
  401788:	3401      	adds	r4, #1
  40178a:	f855 3b04 	ldr.w	r3, [r5], #4
  40178e:	4798      	blx	r3
  401790:	42a6      	cmp	r6, r4
  401792:	d1f9      	bne.n	401788 <__libc_init_array+0x10>
  401794:	4e0a      	ldr	r6, [pc, #40]	; (4017c0 <__libc_init_array+0x48>)
  401796:	4d0b      	ldr	r5, [pc, #44]	; (4017c4 <__libc_init_array+0x4c>)
  401798:	1b76      	subs	r6, r6, r5
  40179a:	f003 fb3f 	bl	404e1c <_init>
  40179e:	10b6      	asrs	r6, r6, #2
  4017a0:	bf18      	it	ne
  4017a2:	2400      	movne	r4, #0
  4017a4:	d006      	beq.n	4017b4 <__libc_init_array+0x3c>
  4017a6:	3401      	adds	r4, #1
  4017a8:	f855 3b04 	ldr.w	r3, [r5], #4
  4017ac:	4798      	blx	r3
  4017ae:	42a6      	cmp	r6, r4
  4017b0:	d1f9      	bne.n	4017a6 <__libc_init_array+0x2e>
  4017b2:	bd70      	pop	{r4, r5, r6, pc}
  4017b4:	bd70      	pop	{r4, r5, r6, pc}
  4017b6:	bf00      	nop
  4017b8:	00404e28 	.word	0x00404e28
  4017bc:	00404e28 	.word	0x00404e28
  4017c0:	00404e30 	.word	0x00404e30
  4017c4:	00404e28 	.word	0x00404e28

004017c8 <iprintf>:
  4017c8:	b40f      	push	{r0, r1, r2, r3}
  4017ca:	b500      	push	{lr}
  4017cc:	4907      	ldr	r1, [pc, #28]	; (4017ec <iprintf+0x24>)
  4017ce:	b083      	sub	sp, #12
  4017d0:	ab04      	add	r3, sp, #16
  4017d2:	6808      	ldr	r0, [r1, #0]
  4017d4:	f853 2b04 	ldr.w	r2, [r3], #4
  4017d8:	6881      	ldr	r1, [r0, #8]
  4017da:	9301      	str	r3, [sp, #4]
  4017dc:	f000 fa00 	bl	401be0 <_vfiprintf_r>
  4017e0:	b003      	add	sp, #12
  4017e2:	f85d eb04 	ldr.w	lr, [sp], #4
  4017e6:	b004      	add	sp, #16
  4017e8:	4770      	bx	lr
  4017ea:	bf00      	nop
  4017ec:	20400014 	.word	0x20400014

004017f0 <memcpy>:
  4017f0:	4684      	mov	ip, r0
  4017f2:	ea41 0300 	orr.w	r3, r1, r0
  4017f6:	f013 0303 	ands.w	r3, r3, #3
  4017fa:	d16d      	bne.n	4018d8 <memcpy+0xe8>
  4017fc:	3a40      	subs	r2, #64	; 0x40
  4017fe:	d341      	bcc.n	401884 <memcpy+0x94>
  401800:	f851 3b04 	ldr.w	r3, [r1], #4
  401804:	f840 3b04 	str.w	r3, [r0], #4
  401808:	f851 3b04 	ldr.w	r3, [r1], #4
  40180c:	f840 3b04 	str.w	r3, [r0], #4
  401810:	f851 3b04 	ldr.w	r3, [r1], #4
  401814:	f840 3b04 	str.w	r3, [r0], #4
  401818:	f851 3b04 	ldr.w	r3, [r1], #4
  40181c:	f840 3b04 	str.w	r3, [r0], #4
  401820:	f851 3b04 	ldr.w	r3, [r1], #4
  401824:	f840 3b04 	str.w	r3, [r0], #4
  401828:	f851 3b04 	ldr.w	r3, [r1], #4
  40182c:	f840 3b04 	str.w	r3, [r0], #4
  401830:	f851 3b04 	ldr.w	r3, [r1], #4
  401834:	f840 3b04 	str.w	r3, [r0], #4
  401838:	f851 3b04 	ldr.w	r3, [r1], #4
  40183c:	f840 3b04 	str.w	r3, [r0], #4
  401840:	f851 3b04 	ldr.w	r3, [r1], #4
  401844:	f840 3b04 	str.w	r3, [r0], #4
  401848:	f851 3b04 	ldr.w	r3, [r1], #4
  40184c:	f840 3b04 	str.w	r3, [r0], #4
  401850:	f851 3b04 	ldr.w	r3, [r1], #4
  401854:	f840 3b04 	str.w	r3, [r0], #4
  401858:	f851 3b04 	ldr.w	r3, [r1], #4
  40185c:	f840 3b04 	str.w	r3, [r0], #4
  401860:	f851 3b04 	ldr.w	r3, [r1], #4
  401864:	f840 3b04 	str.w	r3, [r0], #4
  401868:	f851 3b04 	ldr.w	r3, [r1], #4
  40186c:	f840 3b04 	str.w	r3, [r0], #4
  401870:	f851 3b04 	ldr.w	r3, [r1], #4
  401874:	f840 3b04 	str.w	r3, [r0], #4
  401878:	f851 3b04 	ldr.w	r3, [r1], #4
  40187c:	f840 3b04 	str.w	r3, [r0], #4
  401880:	3a40      	subs	r2, #64	; 0x40
  401882:	d2bd      	bcs.n	401800 <memcpy+0x10>
  401884:	3230      	adds	r2, #48	; 0x30
  401886:	d311      	bcc.n	4018ac <memcpy+0xbc>
  401888:	f851 3b04 	ldr.w	r3, [r1], #4
  40188c:	f840 3b04 	str.w	r3, [r0], #4
  401890:	f851 3b04 	ldr.w	r3, [r1], #4
  401894:	f840 3b04 	str.w	r3, [r0], #4
  401898:	f851 3b04 	ldr.w	r3, [r1], #4
  40189c:	f840 3b04 	str.w	r3, [r0], #4
  4018a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4018a4:	f840 3b04 	str.w	r3, [r0], #4
  4018a8:	3a10      	subs	r2, #16
  4018aa:	d2ed      	bcs.n	401888 <memcpy+0x98>
  4018ac:	320c      	adds	r2, #12
  4018ae:	d305      	bcc.n	4018bc <memcpy+0xcc>
  4018b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4018b4:	f840 3b04 	str.w	r3, [r0], #4
  4018b8:	3a04      	subs	r2, #4
  4018ba:	d2f9      	bcs.n	4018b0 <memcpy+0xc0>
  4018bc:	3204      	adds	r2, #4
  4018be:	d008      	beq.n	4018d2 <memcpy+0xe2>
  4018c0:	07d2      	lsls	r2, r2, #31
  4018c2:	bf1c      	itt	ne
  4018c4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4018c8:	f800 3b01 	strbne.w	r3, [r0], #1
  4018cc:	d301      	bcc.n	4018d2 <memcpy+0xe2>
  4018ce:	880b      	ldrh	r3, [r1, #0]
  4018d0:	8003      	strh	r3, [r0, #0]
  4018d2:	4660      	mov	r0, ip
  4018d4:	4770      	bx	lr
  4018d6:	bf00      	nop
  4018d8:	2a08      	cmp	r2, #8
  4018da:	d313      	bcc.n	401904 <memcpy+0x114>
  4018dc:	078b      	lsls	r3, r1, #30
  4018de:	d08d      	beq.n	4017fc <memcpy+0xc>
  4018e0:	f010 0303 	ands.w	r3, r0, #3
  4018e4:	d08a      	beq.n	4017fc <memcpy+0xc>
  4018e6:	f1c3 0304 	rsb	r3, r3, #4
  4018ea:	1ad2      	subs	r2, r2, r3
  4018ec:	07db      	lsls	r3, r3, #31
  4018ee:	bf1c      	itt	ne
  4018f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4018f4:	f800 3b01 	strbne.w	r3, [r0], #1
  4018f8:	d380      	bcc.n	4017fc <memcpy+0xc>
  4018fa:	f831 3b02 	ldrh.w	r3, [r1], #2
  4018fe:	f820 3b02 	strh.w	r3, [r0], #2
  401902:	e77b      	b.n	4017fc <memcpy+0xc>
  401904:	3a04      	subs	r2, #4
  401906:	d3d9      	bcc.n	4018bc <memcpy+0xcc>
  401908:	3a01      	subs	r2, #1
  40190a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40190e:	f800 3b01 	strb.w	r3, [r0], #1
  401912:	d2f9      	bcs.n	401908 <memcpy+0x118>
  401914:	780b      	ldrb	r3, [r1, #0]
  401916:	7003      	strb	r3, [r0, #0]
  401918:	784b      	ldrb	r3, [r1, #1]
  40191a:	7043      	strb	r3, [r0, #1]
  40191c:	788b      	ldrb	r3, [r1, #2]
  40191e:	7083      	strb	r3, [r0, #2]
  401920:	4660      	mov	r0, ip
  401922:	4770      	bx	lr

00401924 <memset>:
  401924:	b470      	push	{r4, r5, r6}
  401926:	0786      	lsls	r6, r0, #30
  401928:	d046      	beq.n	4019b8 <memset+0x94>
  40192a:	1e54      	subs	r4, r2, #1
  40192c:	2a00      	cmp	r2, #0
  40192e:	d041      	beq.n	4019b4 <memset+0x90>
  401930:	b2ca      	uxtb	r2, r1
  401932:	4603      	mov	r3, r0
  401934:	e002      	b.n	40193c <memset+0x18>
  401936:	f114 34ff 	adds.w	r4, r4, #4294967295
  40193a:	d33b      	bcc.n	4019b4 <memset+0x90>
  40193c:	f803 2b01 	strb.w	r2, [r3], #1
  401940:	079d      	lsls	r5, r3, #30
  401942:	d1f8      	bne.n	401936 <memset+0x12>
  401944:	2c03      	cmp	r4, #3
  401946:	d92e      	bls.n	4019a6 <memset+0x82>
  401948:	b2cd      	uxtb	r5, r1
  40194a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40194e:	2c0f      	cmp	r4, #15
  401950:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401954:	d919      	bls.n	40198a <memset+0x66>
  401956:	f103 0210 	add.w	r2, r3, #16
  40195a:	4626      	mov	r6, r4
  40195c:	3e10      	subs	r6, #16
  40195e:	2e0f      	cmp	r6, #15
  401960:	f842 5c10 	str.w	r5, [r2, #-16]
  401964:	f842 5c0c 	str.w	r5, [r2, #-12]
  401968:	f842 5c08 	str.w	r5, [r2, #-8]
  40196c:	f842 5c04 	str.w	r5, [r2, #-4]
  401970:	f102 0210 	add.w	r2, r2, #16
  401974:	d8f2      	bhi.n	40195c <memset+0x38>
  401976:	f1a4 0210 	sub.w	r2, r4, #16
  40197a:	f022 020f 	bic.w	r2, r2, #15
  40197e:	f004 040f 	and.w	r4, r4, #15
  401982:	3210      	adds	r2, #16
  401984:	2c03      	cmp	r4, #3
  401986:	4413      	add	r3, r2
  401988:	d90d      	bls.n	4019a6 <memset+0x82>
  40198a:	461e      	mov	r6, r3
  40198c:	4622      	mov	r2, r4
  40198e:	3a04      	subs	r2, #4
  401990:	2a03      	cmp	r2, #3
  401992:	f846 5b04 	str.w	r5, [r6], #4
  401996:	d8fa      	bhi.n	40198e <memset+0x6a>
  401998:	1f22      	subs	r2, r4, #4
  40199a:	f022 0203 	bic.w	r2, r2, #3
  40199e:	3204      	adds	r2, #4
  4019a0:	4413      	add	r3, r2
  4019a2:	f004 0403 	and.w	r4, r4, #3
  4019a6:	b12c      	cbz	r4, 4019b4 <memset+0x90>
  4019a8:	b2c9      	uxtb	r1, r1
  4019aa:	441c      	add	r4, r3
  4019ac:	f803 1b01 	strb.w	r1, [r3], #1
  4019b0:	429c      	cmp	r4, r3
  4019b2:	d1fb      	bne.n	4019ac <memset+0x88>
  4019b4:	bc70      	pop	{r4, r5, r6}
  4019b6:	4770      	bx	lr
  4019b8:	4614      	mov	r4, r2
  4019ba:	4603      	mov	r3, r0
  4019bc:	e7c2      	b.n	401944 <memset+0x20>
  4019be:	bf00      	nop

004019c0 <setbuf>:
  4019c0:	2900      	cmp	r1, #0
  4019c2:	bf0c      	ite	eq
  4019c4:	2202      	moveq	r2, #2
  4019c6:	2200      	movne	r2, #0
  4019c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4019cc:	f000 b800 	b.w	4019d0 <setvbuf>

004019d0 <setvbuf>:
  4019d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4019d4:	4c61      	ldr	r4, [pc, #388]	; (401b5c <setvbuf+0x18c>)
  4019d6:	6825      	ldr	r5, [r4, #0]
  4019d8:	b083      	sub	sp, #12
  4019da:	4604      	mov	r4, r0
  4019dc:	460f      	mov	r7, r1
  4019de:	4690      	mov	r8, r2
  4019e0:	461e      	mov	r6, r3
  4019e2:	b115      	cbz	r5, 4019ea <setvbuf+0x1a>
  4019e4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4019e6:	2b00      	cmp	r3, #0
  4019e8:	d064      	beq.n	401ab4 <setvbuf+0xe4>
  4019ea:	f1b8 0f02 	cmp.w	r8, #2
  4019ee:	d006      	beq.n	4019fe <setvbuf+0x2e>
  4019f0:	f1b8 0f01 	cmp.w	r8, #1
  4019f4:	f200 809f 	bhi.w	401b36 <setvbuf+0x166>
  4019f8:	2e00      	cmp	r6, #0
  4019fa:	f2c0 809c 	blt.w	401b36 <setvbuf+0x166>
  4019fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401a00:	07d8      	lsls	r0, r3, #31
  401a02:	d534      	bpl.n	401a6e <setvbuf+0x9e>
  401a04:	4621      	mov	r1, r4
  401a06:	4628      	mov	r0, r5
  401a08:	f001 f890 	bl	402b2c <_fflush_r>
  401a0c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401a0e:	b141      	cbz	r1, 401a22 <setvbuf+0x52>
  401a10:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401a14:	4299      	cmp	r1, r3
  401a16:	d002      	beq.n	401a1e <setvbuf+0x4e>
  401a18:	4628      	mov	r0, r5
  401a1a:	f001 fa05 	bl	402e28 <_free_r>
  401a1e:	2300      	movs	r3, #0
  401a20:	6323      	str	r3, [r4, #48]	; 0x30
  401a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401a26:	2200      	movs	r2, #0
  401a28:	61a2      	str	r2, [r4, #24]
  401a2a:	6062      	str	r2, [r4, #4]
  401a2c:	061a      	lsls	r2, r3, #24
  401a2e:	d43a      	bmi.n	401aa6 <setvbuf+0xd6>
  401a30:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401a34:	f023 0303 	bic.w	r3, r3, #3
  401a38:	f1b8 0f02 	cmp.w	r8, #2
  401a3c:	81a3      	strh	r3, [r4, #12]
  401a3e:	d01d      	beq.n	401a7c <setvbuf+0xac>
  401a40:	ab01      	add	r3, sp, #4
  401a42:	466a      	mov	r2, sp
  401a44:	4621      	mov	r1, r4
  401a46:	4628      	mov	r0, r5
  401a48:	f001 fc8c 	bl	403364 <__swhatbuf_r>
  401a4c:	89a3      	ldrh	r3, [r4, #12]
  401a4e:	4318      	orrs	r0, r3
  401a50:	81a0      	strh	r0, [r4, #12]
  401a52:	2e00      	cmp	r6, #0
  401a54:	d132      	bne.n	401abc <setvbuf+0xec>
  401a56:	9e00      	ldr	r6, [sp, #0]
  401a58:	4630      	mov	r0, r6
  401a5a:	f001 fcfb 	bl	403454 <malloc>
  401a5e:	4607      	mov	r7, r0
  401a60:	2800      	cmp	r0, #0
  401a62:	d06b      	beq.n	401b3c <setvbuf+0x16c>
  401a64:	89a3      	ldrh	r3, [r4, #12]
  401a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401a6a:	81a3      	strh	r3, [r4, #12]
  401a6c:	e028      	b.n	401ac0 <setvbuf+0xf0>
  401a6e:	89a3      	ldrh	r3, [r4, #12]
  401a70:	0599      	lsls	r1, r3, #22
  401a72:	d4c7      	bmi.n	401a04 <setvbuf+0x34>
  401a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401a76:	f001 fc71 	bl	40335c <__retarget_lock_acquire_recursive>
  401a7a:	e7c3      	b.n	401a04 <setvbuf+0x34>
  401a7c:	2500      	movs	r5, #0
  401a7e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401a80:	2600      	movs	r6, #0
  401a82:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401a86:	f043 0302 	orr.w	r3, r3, #2
  401a8a:	2001      	movs	r0, #1
  401a8c:	60a6      	str	r6, [r4, #8]
  401a8e:	07ce      	lsls	r6, r1, #31
  401a90:	81a3      	strh	r3, [r4, #12]
  401a92:	6022      	str	r2, [r4, #0]
  401a94:	6122      	str	r2, [r4, #16]
  401a96:	6160      	str	r0, [r4, #20]
  401a98:	d401      	bmi.n	401a9e <setvbuf+0xce>
  401a9a:	0598      	lsls	r0, r3, #22
  401a9c:	d53e      	bpl.n	401b1c <setvbuf+0x14c>
  401a9e:	4628      	mov	r0, r5
  401aa0:	b003      	add	sp, #12
  401aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401aa6:	6921      	ldr	r1, [r4, #16]
  401aa8:	4628      	mov	r0, r5
  401aaa:	f001 f9bd 	bl	402e28 <_free_r>
  401aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401ab2:	e7bd      	b.n	401a30 <setvbuf+0x60>
  401ab4:	4628      	mov	r0, r5
  401ab6:	f001 f891 	bl	402bdc <__sinit>
  401aba:	e796      	b.n	4019ea <setvbuf+0x1a>
  401abc:	2f00      	cmp	r7, #0
  401abe:	d0cb      	beq.n	401a58 <setvbuf+0x88>
  401ac0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401ac2:	2b00      	cmp	r3, #0
  401ac4:	d033      	beq.n	401b2e <setvbuf+0x15e>
  401ac6:	9b00      	ldr	r3, [sp, #0]
  401ac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401acc:	6027      	str	r7, [r4, #0]
  401ace:	429e      	cmp	r6, r3
  401ad0:	bf1c      	itt	ne
  401ad2:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  401ad6:	81a2      	strhne	r2, [r4, #12]
  401ad8:	f1b8 0f01 	cmp.w	r8, #1
  401adc:	bf04      	itt	eq
  401ade:	f042 0201 	orreq.w	r2, r2, #1
  401ae2:	81a2      	strheq	r2, [r4, #12]
  401ae4:	b292      	uxth	r2, r2
  401ae6:	f012 0308 	ands.w	r3, r2, #8
  401aea:	6127      	str	r7, [r4, #16]
  401aec:	6166      	str	r6, [r4, #20]
  401aee:	d00e      	beq.n	401b0e <setvbuf+0x13e>
  401af0:	07d1      	lsls	r1, r2, #31
  401af2:	d51a      	bpl.n	401b2a <setvbuf+0x15a>
  401af4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401af6:	4276      	negs	r6, r6
  401af8:	2300      	movs	r3, #0
  401afa:	f015 0501 	ands.w	r5, r5, #1
  401afe:	61a6      	str	r6, [r4, #24]
  401b00:	60a3      	str	r3, [r4, #8]
  401b02:	d009      	beq.n	401b18 <setvbuf+0x148>
  401b04:	2500      	movs	r5, #0
  401b06:	4628      	mov	r0, r5
  401b08:	b003      	add	sp, #12
  401b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401b0e:	60a3      	str	r3, [r4, #8]
  401b10:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401b12:	f015 0501 	ands.w	r5, r5, #1
  401b16:	d1f5      	bne.n	401b04 <setvbuf+0x134>
  401b18:	0593      	lsls	r3, r2, #22
  401b1a:	d4c0      	bmi.n	401a9e <setvbuf+0xce>
  401b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401b1e:	f001 fc1f 	bl	403360 <__retarget_lock_release_recursive>
  401b22:	4628      	mov	r0, r5
  401b24:	b003      	add	sp, #12
  401b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401b2a:	60a6      	str	r6, [r4, #8]
  401b2c:	e7f0      	b.n	401b10 <setvbuf+0x140>
  401b2e:	4628      	mov	r0, r5
  401b30:	f001 f854 	bl	402bdc <__sinit>
  401b34:	e7c7      	b.n	401ac6 <setvbuf+0xf6>
  401b36:	f04f 35ff 	mov.w	r5, #4294967295
  401b3a:	e7b0      	b.n	401a9e <setvbuf+0xce>
  401b3c:	f8dd 9000 	ldr.w	r9, [sp]
  401b40:	45b1      	cmp	r9, r6
  401b42:	d004      	beq.n	401b4e <setvbuf+0x17e>
  401b44:	4648      	mov	r0, r9
  401b46:	f001 fc85 	bl	403454 <malloc>
  401b4a:	4607      	mov	r7, r0
  401b4c:	b920      	cbnz	r0, 401b58 <setvbuf+0x188>
  401b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401b52:	f04f 35ff 	mov.w	r5, #4294967295
  401b56:	e792      	b.n	401a7e <setvbuf+0xae>
  401b58:	464e      	mov	r6, r9
  401b5a:	e783      	b.n	401a64 <setvbuf+0x94>
  401b5c:	20400014 	.word	0x20400014

00401b60 <__sprint_r.part.0>:
  401b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b64:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401b66:	049c      	lsls	r4, r3, #18
  401b68:	4693      	mov	fp, r2
  401b6a:	d52f      	bpl.n	401bcc <__sprint_r.part.0+0x6c>
  401b6c:	6893      	ldr	r3, [r2, #8]
  401b6e:	6812      	ldr	r2, [r2, #0]
  401b70:	b353      	cbz	r3, 401bc8 <__sprint_r.part.0+0x68>
  401b72:	460e      	mov	r6, r1
  401b74:	4607      	mov	r7, r0
  401b76:	f102 0908 	add.w	r9, r2, #8
  401b7a:	e919 0420 	ldmdb	r9, {r5, sl}
  401b7e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  401b82:	d017      	beq.n	401bb4 <__sprint_r.part.0+0x54>
  401b84:	3d04      	subs	r5, #4
  401b86:	2400      	movs	r4, #0
  401b88:	e001      	b.n	401b8e <__sprint_r.part.0+0x2e>
  401b8a:	45a0      	cmp	r8, r4
  401b8c:	d010      	beq.n	401bb0 <__sprint_r.part.0+0x50>
  401b8e:	4632      	mov	r2, r6
  401b90:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401b94:	4638      	mov	r0, r7
  401b96:	f001 f8c3 	bl	402d20 <_fputwc_r>
  401b9a:	1c43      	adds	r3, r0, #1
  401b9c:	f104 0401 	add.w	r4, r4, #1
  401ba0:	d1f3      	bne.n	401b8a <__sprint_r.part.0+0x2a>
  401ba2:	2300      	movs	r3, #0
  401ba4:	f8cb 3008 	str.w	r3, [fp, #8]
  401ba8:	f8cb 3004 	str.w	r3, [fp, #4]
  401bac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401bb0:	f8db 3008 	ldr.w	r3, [fp, #8]
  401bb4:	f02a 0a03 	bic.w	sl, sl, #3
  401bb8:	eba3 030a 	sub.w	r3, r3, sl
  401bbc:	f8cb 3008 	str.w	r3, [fp, #8]
  401bc0:	f109 0908 	add.w	r9, r9, #8
  401bc4:	2b00      	cmp	r3, #0
  401bc6:	d1d8      	bne.n	401b7a <__sprint_r.part.0+0x1a>
  401bc8:	2000      	movs	r0, #0
  401bca:	e7ea      	b.n	401ba2 <__sprint_r.part.0+0x42>
  401bcc:	f001 fa12 	bl	402ff4 <__sfvwrite_r>
  401bd0:	2300      	movs	r3, #0
  401bd2:	f8cb 3008 	str.w	r3, [fp, #8]
  401bd6:	f8cb 3004 	str.w	r3, [fp, #4]
  401bda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401bde:	bf00      	nop

00401be0 <_vfiprintf_r>:
  401be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401be4:	b0ad      	sub	sp, #180	; 0xb4
  401be6:	461d      	mov	r5, r3
  401be8:	468b      	mov	fp, r1
  401bea:	4690      	mov	r8, r2
  401bec:	9307      	str	r3, [sp, #28]
  401bee:	9006      	str	r0, [sp, #24]
  401bf0:	b118      	cbz	r0, 401bfa <_vfiprintf_r+0x1a>
  401bf2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401bf4:	2b00      	cmp	r3, #0
  401bf6:	f000 80f3 	beq.w	401de0 <_vfiprintf_r+0x200>
  401bfa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401bfe:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401c02:	07df      	lsls	r7, r3, #31
  401c04:	b281      	uxth	r1, r0
  401c06:	d402      	bmi.n	401c0e <_vfiprintf_r+0x2e>
  401c08:	058e      	lsls	r6, r1, #22
  401c0a:	f140 80fc 	bpl.w	401e06 <_vfiprintf_r+0x226>
  401c0e:	048c      	lsls	r4, r1, #18
  401c10:	d40a      	bmi.n	401c28 <_vfiprintf_r+0x48>
  401c12:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401c16:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  401c1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401c1e:	f8ab 100c 	strh.w	r1, [fp, #12]
  401c22:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  401c26:	b289      	uxth	r1, r1
  401c28:	0708      	lsls	r0, r1, #28
  401c2a:	f140 80b3 	bpl.w	401d94 <_vfiprintf_r+0x1b4>
  401c2e:	f8db 3010 	ldr.w	r3, [fp, #16]
  401c32:	2b00      	cmp	r3, #0
  401c34:	f000 80ae 	beq.w	401d94 <_vfiprintf_r+0x1b4>
  401c38:	f001 031a 	and.w	r3, r1, #26
  401c3c:	2b0a      	cmp	r3, #10
  401c3e:	f000 80b5 	beq.w	401dac <_vfiprintf_r+0x1cc>
  401c42:	2300      	movs	r3, #0
  401c44:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  401c48:	930b      	str	r3, [sp, #44]	; 0x2c
  401c4a:	9311      	str	r3, [sp, #68]	; 0x44
  401c4c:	9310      	str	r3, [sp, #64]	; 0x40
  401c4e:	9303      	str	r3, [sp, #12]
  401c50:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401c54:	46ca      	mov	sl, r9
  401c56:	f8cd b010 	str.w	fp, [sp, #16]
  401c5a:	f898 3000 	ldrb.w	r3, [r8]
  401c5e:	4644      	mov	r4, r8
  401c60:	b1fb      	cbz	r3, 401ca2 <_vfiprintf_r+0xc2>
  401c62:	2b25      	cmp	r3, #37	; 0x25
  401c64:	d102      	bne.n	401c6c <_vfiprintf_r+0x8c>
  401c66:	e01c      	b.n	401ca2 <_vfiprintf_r+0xc2>
  401c68:	2b25      	cmp	r3, #37	; 0x25
  401c6a:	d003      	beq.n	401c74 <_vfiprintf_r+0x94>
  401c6c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  401c70:	2b00      	cmp	r3, #0
  401c72:	d1f9      	bne.n	401c68 <_vfiprintf_r+0x88>
  401c74:	eba4 0508 	sub.w	r5, r4, r8
  401c78:	b19d      	cbz	r5, 401ca2 <_vfiprintf_r+0xc2>
  401c7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401c7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401c7e:	f8ca 8000 	str.w	r8, [sl]
  401c82:	3301      	adds	r3, #1
  401c84:	442a      	add	r2, r5
  401c86:	2b07      	cmp	r3, #7
  401c88:	f8ca 5004 	str.w	r5, [sl, #4]
  401c8c:	9211      	str	r2, [sp, #68]	; 0x44
  401c8e:	9310      	str	r3, [sp, #64]	; 0x40
  401c90:	dd7a      	ble.n	401d88 <_vfiprintf_r+0x1a8>
  401c92:	2a00      	cmp	r2, #0
  401c94:	f040 84b0 	bne.w	4025f8 <_vfiprintf_r+0xa18>
  401c98:	9b03      	ldr	r3, [sp, #12]
  401c9a:	9210      	str	r2, [sp, #64]	; 0x40
  401c9c:	442b      	add	r3, r5
  401c9e:	46ca      	mov	sl, r9
  401ca0:	9303      	str	r3, [sp, #12]
  401ca2:	7823      	ldrb	r3, [r4, #0]
  401ca4:	2b00      	cmp	r3, #0
  401ca6:	f000 83e0 	beq.w	40246a <_vfiprintf_r+0x88a>
  401caa:	2000      	movs	r0, #0
  401cac:	f04f 0300 	mov.w	r3, #0
  401cb0:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  401cb4:	f104 0801 	add.w	r8, r4, #1
  401cb8:	7862      	ldrb	r2, [r4, #1]
  401cba:	4605      	mov	r5, r0
  401cbc:	4606      	mov	r6, r0
  401cbe:	4603      	mov	r3, r0
  401cc0:	f04f 34ff 	mov.w	r4, #4294967295
  401cc4:	f108 0801 	add.w	r8, r8, #1
  401cc8:	f1a2 0120 	sub.w	r1, r2, #32
  401ccc:	2958      	cmp	r1, #88	; 0x58
  401cce:	f200 82de 	bhi.w	40228e <_vfiprintf_r+0x6ae>
  401cd2:	e8df f011 	tbh	[pc, r1, lsl #1]
  401cd6:	0221      	.short	0x0221
  401cd8:	02dc02dc 	.word	0x02dc02dc
  401cdc:	02dc0229 	.word	0x02dc0229
  401ce0:	02dc02dc 	.word	0x02dc02dc
  401ce4:	02dc02dc 	.word	0x02dc02dc
  401ce8:	028902dc 	.word	0x028902dc
  401cec:	02dc0295 	.word	0x02dc0295
  401cf0:	02bd00a2 	.word	0x02bd00a2
  401cf4:	019f02dc 	.word	0x019f02dc
  401cf8:	01a401a4 	.word	0x01a401a4
  401cfc:	01a401a4 	.word	0x01a401a4
  401d00:	01a401a4 	.word	0x01a401a4
  401d04:	01a401a4 	.word	0x01a401a4
  401d08:	02dc01a4 	.word	0x02dc01a4
  401d0c:	02dc02dc 	.word	0x02dc02dc
  401d10:	02dc02dc 	.word	0x02dc02dc
  401d14:	02dc02dc 	.word	0x02dc02dc
  401d18:	02dc02dc 	.word	0x02dc02dc
  401d1c:	01b202dc 	.word	0x01b202dc
  401d20:	02dc02dc 	.word	0x02dc02dc
  401d24:	02dc02dc 	.word	0x02dc02dc
  401d28:	02dc02dc 	.word	0x02dc02dc
  401d2c:	02dc02dc 	.word	0x02dc02dc
  401d30:	02dc02dc 	.word	0x02dc02dc
  401d34:	02dc0197 	.word	0x02dc0197
  401d38:	02dc02dc 	.word	0x02dc02dc
  401d3c:	02dc02dc 	.word	0x02dc02dc
  401d40:	02dc019b 	.word	0x02dc019b
  401d44:	025302dc 	.word	0x025302dc
  401d48:	02dc02dc 	.word	0x02dc02dc
  401d4c:	02dc02dc 	.word	0x02dc02dc
  401d50:	02dc02dc 	.word	0x02dc02dc
  401d54:	02dc02dc 	.word	0x02dc02dc
  401d58:	02dc02dc 	.word	0x02dc02dc
  401d5c:	021b025a 	.word	0x021b025a
  401d60:	02dc02dc 	.word	0x02dc02dc
  401d64:	026e02dc 	.word	0x026e02dc
  401d68:	02dc021b 	.word	0x02dc021b
  401d6c:	027302dc 	.word	0x027302dc
  401d70:	01f502dc 	.word	0x01f502dc
  401d74:	02090182 	.word	0x02090182
  401d78:	02dc02d7 	.word	0x02dc02d7
  401d7c:	02dc029a 	.word	0x02dc029a
  401d80:	02dc00a7 	.word	0x02dc00a7
  401d84:	022e02dc 	.word	0x022e02dc
  401d88:	f10a 0a08 	add.w	sl, sl, #8
  401d8c:	9b03      	ldr	r3, [sp, #12]
  401d8e:	442b      	add	r3, r5
  401d90:	9303      	str	r3, [sp, #12]
  401d92:	e786      	b.n	401ca2 <_vfiprintf_r+0xc2>
  401d94:	4659      	mov	r1, fp
  401d96:	9806      	ldr	r0, [sp, #24]
  401d98:	f000 fdac 	bl	4028f4 <__swsetup_r>
  401d9c:	bb18      	cbnz	r0, 401de6 <_vfiprintf_r+0x206>
  401d9e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  401da2:	f001 031a 	and.w	r3, r1, #26
  401da6:	2b0a      	cmp	r3, #10
  401da8:	f47f af4b 	bne.w	401c42 <_vfiprintf_r+0x62>
  401dac:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  401db0:	2b00      	cmp	r3, #0
  401db2:	f6ff af46 	blt.w	401c42 <_vfiprintf_r+0x62>
  401db6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401dba:	07db      	lsls	r3, r3, #31
  401dbc:	d405      	bmi.n	401dca <_vfiprintf_r+0x1ea>
  401dbe:	058f      	lsls	r7, r1, #22
  401dc0:	d403      	bmi.n	401dca <_vfiprintf_r+0x1ea>
  401dc2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401dc6:	f001 facb 	bl	403360 <__retarget_lock_release_recursive>
  401dca:	462b      	mov	r3, r5
  401dcc:	4642      	mov	r2, r8
  401dce:	4659      	mov	r1, fp
  401dd0:	9806      	ldr	r0, [sp, #24]
  401dd2:	f000 fd4d 	bl	402870 <__sbprintf>
  401dd6:	9003      	str	r0, [sp, #12]
  401dd8:	9803      	ldr	r0, [sp, #12]
  401dda:	b02d      	add	sp, #180	; 0xb4
  401ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401de0:	f000 fefc 	bl	402bdc <__sinit>
  401de4:	e709      	b.n	401bfa <_vfiprintf_r+0x1a>
  401de6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401dea:	07d9      	lsls	r1, r3, #31
  401dec:	d404      	bmi.n	401df8 <_vfiprintf_r+0x218>
  401dee:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401df2:	059a      	lsls	r2, r3, #22
  401df4:	f140 84aa 	bpl.w	40274c <_vfiprintf_r+0xb6c>
  401df8:	f04f 33ff 	mov.w	r3, #4294967295
  401dfc:	9303      	str	r3, [sp, #12]
  401dfe:	9803      	ldr	r0, [sp, #12]
  401e00:	b02d      	add	sp, #180	; 0xb4
  401e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e06:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401e0a:	f001 faa7 	bl	40335c <__retarget_lock_acquire_recursive>
  401e0e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401e12:	b281      	uxth	r1, r0
  401e14:	e6fb      	b.n	401c0e <_vfiprintf_r+0x2e>
  401e16:	4276      	negs	r6, r6
  401e18:	9207      	str	r2, [sp, #28]
  401e1a:	f043 0304 	orr.w	r3, r3, #4
  401e1e:	f898 2000 	ldrb.w	r2, [r8]
  401e22:	e74f      	b.n	401cc4 <_vfiprintf_r+0xe4>
  401e24:	9608      	str	r6, [sp, #32]
  401e26:	069e      	lsls	r6, r3, #26
  401e28:	f100 8450 	bmi.w	4026cc <_vfiprintf_r+0xaec>
  401e2c:	9907      	ldr	r1, [sp, #28]
  401e2e:	06dd      	lsls	r5, r3, #27
  401e30:	460a      	mov	r2, r1
  401e32:	f100 83ef 	bmi.w	402614 <_vfiprintf_r+0xa34>
  401e36:	0658      	lsls	r0, r3, #25
  401e38:	f140 83ec 	bpl.w	402614 <_vfiprintf_r+0xa34>
  401e3c:	880e      	ldrh	r6, [r1, #0]
  401e3e:	3104      	adds	r1, #4
  401e40:	2700      	movs	r7, #0
  401e42:	2201      	movs	r2, #1
  401e44:	9107      	str	r1, [sp, #28]
  401e46:	f04f 0100 	mov.w	r1, #0
  401e4a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  401e4e:	2500      	movs	r5, #0
  401e50:	1c61      	adds	r1, r4, #1
  401e52:	f000 8116 	beq.w	402082 <_vfiprintf_r+0x4a2>
  401e56:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  401e5a:	9102      	str	r1, [sp, #8]
  401e5c:	ea56 0107 	orrs.w	r1, r6, r7
  401e60:	f040 8114 	bne.w	40208c <_vfiprintf_r+0x4ac>
  401e64:	2c00      	cmp	r4, #0
  401e66:	f040 835c 	bne.w	402522 <_vfiprintf_r+0x942>
  401e6a:	2a00      	cmp	r2, #0
  401e6c:	f040 83b7 	bne.w	4025de <_vfiprintf_r+0x9fe>
  401e70:	f013 0301 	ands.w	r3, r3, #1
  401e74:	9305      	str	r3, [sp, #20]
  401e76:	f000 8457 	beq.w	402728 <_vfiprintf_r+0xb48>
  401e7a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  401e7e:	2330      	movs	r3, #48	; 0x30
  401e80:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  401e84:	9b05      	ldr	r3, [sp, #20]
  401e86:	42a3      	cmp	r3, r4
  401e88:	bfb8      	it	lt
  401e8a:	4623      	movlt	r3, r4
  401e8c:	9301      	str	r3, [sp, #4]
  401e8e:	b10d      	cbz	r5, 401e94 <_vfiprintf_r+0x2b4>
  401e90:	3301      	adds	r3, #1
  401e92:	9301      	str	r3, [sp, #4]
  401e94:	9b02      	ldr	r3, [sp, #8]
  401e96:	f013 0302 	ands.w	r3, r3, #2
  401e9a:	9309      	str	r3, [sp, #36]	; 0x24
  401e9c:	d002      	beq.n	401ea4 <_vfiprintf_r+0x2c4>
  401e9e:	9b01      	ldr	r3, [sp, #4]
  401ea0:	3302      	adds	r3, #2
  401ea2:	9301      	str	r3, [sp, #4]
  401ea4:	9b02      	ldr	r3, [sp, #8]
  401ea6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  401eaa:	930a      	str	r3, [sp, #40]	; 0x28
  401eac:	f040 8217 	bne.w	4022de <_vfiprintf_r+0x6fe>
  401eb0:	9b08      	ldr	r3, [sp, #32]
  401eb2:	9a01      	ldr	r2, [sp, #4]
  401eb4:	1a9d      	subs	r5, r3, r2
  401eb6:	2d00      	cmp	r5, #0
  401eb8:	f340 8211 	ble.w	4022de <_vfiprintf_r+0x6fe>
  401ebc:	2d10      	cmp	r5, #16
  401ebe:	f340 8490 	ble.w	4027e2 <_vfiprintf_r+0xc02>
  401ec2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401ec4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401ec6:	4ec4      	ldr	r6, [pc, #784]	; (4021d8 <_vfiprintf_r+0x5f8>)
  401ec8:	46d6      	mov	lr, sl
  401eca:	2710      	movs	r7, #16
  401ecc:	46a2      	mov	sl, r4
  401ece:	4619      	mov	r1, r3
  401ed0:	9c06      	ldr	r4, [sp, #24]
  401ed2:	e007      	b.n	401ee4 <_vfiprintf_r+0x304>
  401ed4:	f101 0c02 	add.w	ip, r1, #2
  401ed8:	f10e 0e08 	add.w	lr, lr, #8
  401edc:	4601      	mov	r1, r0
  401ede:	3d10      	subs	r5, #16
  401ee0:	2d10      	cmp	r5, #16
  401ee2:	dd11      	ble.n	401f08 <_vfiprintf_r+0x328>
  401ee4:	1c48      	adds	r0, r1, #1
  401ee6:	3210      	adds	r2, #16
  401ee8:	2807      	cmp	r0, #7
  401eea:	9211      	str	r2, [sp, #68]	; 0x44
  401eec:	e88e 00c0 	stmia.w	lr, {r6, r7}
  401ef0:	9010      	str	r0, [sp, #64]	; 0x40
  401ef2:	ddef      	ble.n	401ed4 <_vfiprintf_r+0x2f4>
  401ef4:	2a00      	cmp	r2, #0
  401ef6:	f040 81e4 	bne.w	4022c2 <_vfiprintf_r+0x6e2>
  401efa:	3d10      	subs	r5, #16
  401efc:	2d10      	cmp	r5, #16
  401efe:	4611      	mov	r1, r2
  401f00:	f04f 0c01 	mov.w	ip, #1
  401f04:	46ce      	mov	lr, r9
  401f06:	dced      	bgt.n	401ee4 <_vfiprintf_r+0x304>
  401f08:	4654      	mov	r4, sl
  401f0a:	4661      	mov	r1, ip
  401f0c:	46f2      	mov	sl, lr
  401f0e:	442a      	add	r2, r5
  401f10:	2907      	cmp	r1, #7
  401f12:	9211      	str	r2, [sp, #68]	; 0x44
  401f14:	f8ca 6000 	str.w	r6, [sl]
  401f18:	f8ca 5004 	str.w	r5, [sl, #4]
  401f1c:	9110      	str	r1, [sp, #64]	; 0x40
  401f1e:	f300 82ec 	bgt.w	4024fa <_vfiprintf_r+0x91a>
  401f22:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401f26:	f10a 0a08 	add.w	sl, sl, #8
  401f2a:	1c48      	adds	r0, r1, #1
  401f2c:	2d00      	cmp	r5, #0
  401f2e:	f040 81de 	bne.w	4022ee <_vfiprintf_r+0x70e>
  401f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401f34:	2b00      	cmp	r3, #0
  401f36:	f000 81f8 	beq.w	40232a <_vfiprintf_r+0x74a>
  401f3a:	3202      	adds	r2, #2
  401f3c:	a90e      	add	r1, sp, #56	; 0x38
  401f3e:	2302      	movs	r3, #2
  401f40:	2807      	cmp	r0, #7
  401f42:	9211      	str	r2, [sp, #68]	; 0x44
  401f44:	9010      	str	r0, [sp, #64]	; 0x40
  401f46:	e88a 000a 	stmia.w	sl, {r1, r3}
  401f4a:	f340 81ea 	ble.w	402322 <_vfiprintf_r+0x742>
  401f4e:	2a00      	cmp	r2, #0
  401f50:	f040 838c 	bne.w	40266c <_vfiprintf_r+0xa8c>
  401f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401f56:	2b80      	cmp	r3, #128	; 0x80
  401f58:	f04f 0001 	mov.w	r0, #1
  401f5c:	4611      	mov	r1, r2
  401f5e:	46ca      	mov	sl, r9
  401f60:	f040 81e7 	bne.w	402332 <_vfiprintf_r+0x752>
  401f64:	9b08      	ldr	r3, [sp, #32]
  401f66:	9d01      	ldr	r5, [sp, #4]
  401f68:	1b5e      	subs	r6, r3, r5
  401f6a:	2e00      	cmp	r6, #0
  401f6c:	f340 81e1 	ble.w	402332 <_vfiprintf_r+0x752>
  401f70:	2e10      	cmp	r6, #16
  401f72:	4d9a      	ldr	r5, [pc, #616]	; (4021dc <_vfiprintf_r+0x5fc>)
  401f74:	f340 8450 	ble.w	402818 <_vfiprintf_r+0xc38>
  401f78:	46d4      	mov	ip, sl
  401f7a:	2710      	movs	r7, #16
  401f7c:	46a2      	mov	sl, r4
  401f7e:	9c06      	ldr	r4, [sp, #24]
  401f80:	e007      	b.n	401f92 <_vfiprintf_r+0x3b2>
  401f82:	f101 0e02 	add.w	lr, r1, #2
  401f86:	f10c 0c08 	add.w	ip, ip, #8
  401f8a:	4601      	mov	r1, r0
  401f8c:	3e10      	subs	r6, #16
  401f8e:	2e10      	cmp	r6, #16
  401f90:	dd11      	ble.n	401fb6 <_vfiprintf_r+0x3d6>
  401f92:	1c48      	adds	r0, r1, #1
  401f94:	3210      	adds	r2, #16
  401f96:	2807      	cmp	r0, #7
  401f98:	9211      	str	r2, [sp, #68]	; 0x44
  401f9a:	e88c 00a0 	stmia.w	ip, {r5, r7}
  401f9e:	9010      	str	r0, [sp, #64]	; 0x40
  401fa0:	ddef      	ble.n	401f82 <_vfiprintf_r+0x3a2>
  401fa2:	2a00      	cmp	r2, #0
  401fa4:	f040 829d 	bne.w	4024e2 <_vfiprintf_r+0x902>
  401fa8:	3e10      	subs	r6, #16
  401faa:	2e10      	cmp	r6, #16
  401fac:	f04f 0e01 	mov.w	lr, #1
  401fb0:	4611      	mov	r1, r2
  401fb2:	46cc      	mov	ip, r9
  401fb4:	dced      	bgt.n	401f92 <_vfiprintf_r+0x3b2>
  401fb6:	4654      	mov	r4, sl
  401fb8:	46e2      	mov	sl, ip
  401fba:	4432      	add	r2, r6
  401fbc:	f1be 0f07 	cmp.w	lr, #7
  401fc0:	9211      	str	r2, [sp, #68]	; 0x44
  401fc2:	e88a 0060 	stmia.w	sl, {r5, r6}
  401fc6:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  401fca:	f300 8369 	bgt.w	4026a0 <_vfiprintf_r+0xac0>
  401fce:	f10a 0a08 	add.w	sl, sl, #8
  401fd2:	f10e 0001 	add.w	r0, lr, #1
  401fd6:	4671      	mov	r1, lr
  401fd8:	e1ab      	b.n	402332 <_vfiprintf_r+0x752>
  401fda:	9608      	str	r6, [sp, #32]
  401fdc:	f013 0220 	ands.w	r2, r3, #32
  401fe0:	f040 838c 	bne.w	4026fc <_vfiprintf_r+0xb1c>
  401fe4:	f013 0110 	ands.w	r1, r3, #16
  401fe8:	f040 831a 	bne.w	402620 <_vfiprintf_r+0xa40>
  401fec:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  401ff0:	f000 8316 	beq.w	402620 <_vfiprintf_r+0xa40>
  401ff4:	9807      	ldr	r0, [sp, #28]
  401ff6:	460a      	mov	r2, r1
  401ff8:	4601      	mov	r1, r0
  401ffa:	3104      	adds	r1, #4
  401ffc:	8806      	ldrh	r6, [r0, #0]
  401ffe:	9107      	str	r1, [sp, #28]
  402000:	2700      	movs	r7, #0
  402002:	e720      	b.n	401e46 <_vfiprintf_r+0x266>
  402004:	9608      	str	r6, [sp, #32]
  402006:	f043 0310 	orr.w	r3, r3, #16
  40200a:	e7e7      	b.n	401fdc <_vfiprintf_r+0x3fc>
  40200c:	9608      	str	r6, [sp, #32]
  40200e:	f043 0310 	orr.w	r3, r3, #16
  402012:	e708      	b.n	401e26 <_vfiprintf_r+0x246>
  402014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402018:	f898 2000 	ldrb.w	r2, [r8]
  40201c:	e652      	b.n	401cc4 <_vfiprintf_r+0xe4>
  40201e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402022:	2600      	movs	r6, #0
  402024:	f818 2b01 	ldrb.w	r2, [r8], #1
  402028:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40202c:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  402030:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402034:	2909      	cmp	r1, #9
  402036:	d9f5      	bls.n	402024 <_vfiprintf_r+0x444>
  402038:	e646      	b.n	401cc8 <_vfiprintf_r+0xe8>
  40203a:	9608      	str	r6, [sp, #32]
  40203c:	2800      	cmp	r0, #0
  40203e:	f040 8408 	bne.w	402852 <_vfiprintf_r+0xc72>
  402042:	f043 0310 	orr.w	r3, r3, #16
  402046:	069e      	lsls	r6, r3, #26
  402048:	f100 834c 	bmi.w	4026e4 <_vfiprintf_r+0xb04>
  40204c:	06dd      	lsls	r5, r3, #27
  40204e:	f100 82f3 	bmi.w	402638 <_vfiprintf_r+0xa58>
  402052:	0658      	lsls	r0, r3, #25
  402054:	f140 82f0 	bpl.w	402638 <_vfiprintf_r+0xa58>
  402058:	9d07      	ldr	r5, [sp, #28]
  40205a:	f9b5 6000 	ldrsh.w	r6, [r5]
  40205e:	462a      	mov	r2, r5
  402060:	17f7      	asrs	r7, r6, #31
  402062:	3204      	adds	r2, #4
  402064:	4630      	mov	r0, r6
  402066:	4639      	mov	r1, r7
  402068:	9207      	str	r2, [sp, #28]
  40206a:	2800      	cmp	r0, #0
  40206c:	f171 0200 	sbcs.w	r2, r1, #0
  402070:	f2c0 835d 	blt.w	40272e <_vfiprintf_r+0xb4e>
  402074:	1c61      	adds	r1, r4, #1
  402076:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40207a:	f04f 0201 	mov.w	r2, #1
  40207e:	f47f aeea 	bne.w	401e56 <_vfiprintf_r+0x276>
  402082:	ea56 0107 	orrs.w	r1, r6, r7
  402086:	f000 824d 	beq.w	402524 <_vfiprintf_r+0x944>
  40208a:	9302      	str	r3, [sp, #8]
  40208c:	2a01      	cmp	r2, #1
  40208e:	f000 828c 	beq.w	4025aa <_vfiprintf_r+0x9ca>
  402092:	2a02      	cmp	r2, #2
  402094:	f040 825c 	bne.w	402550 <_vfiprintf_r+0x970>
  402098:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40209a:	46cb      	mov	fp, r9
  40209c:	0933      	lsrs	r3, r6, #4
  40209e:	f006 010f 	and.w	r1, r6, #15
  4020a2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4020a6:	093a      	lsrs	r2, r7, #4
  4020a8:	461e      	mov	r6, r3
  4020aa:	4617      	mov	r7, r2
  4020ac:	5c43      	ldrb	r3, [r0, r1]
  4020ae:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4020b2:	ea56 0307 	orrs.w	r3, r6, r7
  4020b6:	d1f1      	bne.n	40209c <_vfiprintf_r+0x4bc>
  4020b8:	eba9 030b 	sub.w	r3, r9, fp
  4020bc:	9305      	str	r3, [sp, #20]
  4020be:	e6e1      	b.n	401e84 <_vfiprintf_r+0x2a4>
  4020c0:	2800      	cmp	r0, #0
  4020c2:	f040 83c0 	bne.w	402846 <_vfiprintf_r+0xc66>
  4020c6:	0699      	lsls	r1, r3, #26
  4020c8:	f100 8367 	bmi.w	40279a <_vfiprintf_r+0xbba>
  4020cc:	06da      	lsls	r2, r3, #27
  4020ce:	f100 80f1 	bmi.w	4022b4 <_vfiprintf_r+0x6d4>
  4020d2:	065b      	lsls	r3, r3, #25
  4020d4:	f140 80ee 	bpl.w	4022b4 <_vfiprintf_r+0x6d4>
  4020d8:	9a07      	ldr	r2, [sp, #28]
  4020da:	6813      	ldr	r3, [r2, #0]
  4020dc:	3204      	adds	r2, #4
  4020de:	9207      	str	r2, [sp, #28]
  4020e0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4020e4:	801a      	strh	r2, [r3, #0]
  4020e6:	e5b8      	b.n	401c5a <_vfiprintf_r+0x7a>
  4020e8:	9807      	ldr	r0, [sp, #28]
  4020ea:	4a3d      	ldr	r2, [pc, #244]	; (4021e0 <_vfiprintf_r+0x600>)
  4020ec:	9608      	str	r6, [sp, #32]
  4020ee:	920b      	str	r2, [sp, #44]	; 0x2c
  4020f0:	6806      	ldr	r6, [r0, #0]
  4020f2:	2278      	movs	r2, #120	; 0x78
  4020f4:	2130      	movs	r1, #48	; 0x30
  4020f6:	3004      	adds	r0, #4
  4020f8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4020fc:	f043 0302 	orr.w	r3, r3, #2
  402100:	9007      	str	r0, [sp, #28]
  402102:	2700      	movs	r7, #0
  402104:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402108:	2202      	movs	r2, #2
  40210a:	e69c      	b.n	401e46 <_vfiprintf_r+0x266>
  40210c:	9608      	str	r6, [sp, #32]
  40210e:	2800      	cmp	r0, #0
  402110:	d099      	beq.n	402046 <_vfiprintf_r+0x466>
  402112:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402116:	e796      	b.n	402046 <_vfiprintf_r+0x466>
  402118:	f898 2000 	ldrb.w	r2, [r8]
  40211c:	2d00      	cmp	r5, #0
  40211e:	f47f add1 	bne.w	401cc4 <_vfiprintf_r+0xe4>
  402122:	2001      	movs	r0, #1
  402124:	2520      	movs	r5, #32
  402126:	e5cd      	b.n	401cc4 <_vfiprintf_r+0xe4>
  402128:	f043 0301 	orr.w	r3, r3, #1
  40212c:	f898 2000 	ldrb.w	r2, [r8]
  402130:	e5c8      	b.n	401cc4 <_vfiprintf_r+0xe4>
  402132:	9608      	str	r6, [sp, #32]
  402134:	2800      	cmp	r0, #0
  402136:	f040 8393 	bne.w	402860 <_vfiprintf_r+0xc80>
  40213a:	4929      	ldr	r1, [pc, #164]	; (4021e0 <_vfiprintf_r+0x600>)
  40213c:	910b      	str	r1, [sp, #44]	; 0x2c
  40213e:	069f      	lsls	r7, r3, #26
  402140:	f100 82e8 	bmi.w	402714 <_vfiprintf_r+0xb34>
  402144:	9807      	ldr	r0, [sp, #28]
  402146:	06de      	lsls	r6, r3, #27
  402148:	4601      	mov	r1, r0
  40214a:	f100 8270 	bmi.w	40262e <_vfiprintf_r+0xa4e>
  40214e:	065d      	lsls	r5, r3, #25
  402150:	f140 826d 	bpl.w	40262e <_vfiprintf_r+0xa4e>
  402154:	3104      	adds	r1, #4
  402156:	8806      	ldrh	r6, [r0, #0]
  402158:	9107      	str	r1, [sp, #28]
  40215a:	2700      	movs	r7, #0
  40215c:	07d8      	lsls	r0, r3, #31
  40215e:	f140 8222 	bpl.w	4025a6 <_vfiprintf_r+0x9c6>
  402162:	ea56 0107 	orrs.w	r1, r6, r7
  402166:	f000 821e 	beq.w	4025a6 <_vfiprintf_r+0x9c6>
  40216a:	2130      	movs	r1, #48	; 0x30
  40216c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  402170:	f043 0302 	orr.w	r3, r3, #2
  402174:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402178:	2202      	movs	r2, #2
  40217a:	e664      	b.n	401e46 <_vfiprintf_r+0x266>
  40217c:	9608      	str	r6, [sp, #32]
  40217e:	2800      	cmp	r0, #0
  402180:	f040 836b 	bne.w	40285a <_vfiprintf_r+0xc7a>
  402184:	4917      	ldr	r1, [pc, #92]	; (4021e4 <_vfiprintf_r+0x604>)
  402186:	910b      	str	r1, [sp, #44]	; 0x2c
  402188:	e7d9      	b.n	40213e <_vfiprintf_r+0x55e>
  40218a:	9907      	ldr	r1, [sp, #28]
  40218c:	9608      	str	r6, [sp, #32]
  40218e:	680a      	ldr	r2, [r1, #0]
  402190:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  402194:	f04f 0000 	mov.w	r0, #0
  402198:	460a      	mov	r2, r1
  40219a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40219e:	3204      	adds	r2, #4
  4021a0:	2001      	movs	r0, #1
  4021a2:	9001      	str	r0, [sp, #4]
  4021a4:	9207      	str	r2, [sp, #28]
  4021a6:	9005      	str	r0, [sp, #20]
  4021a8:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4021ac:	9302      	str	r3, [sp, #8]
  4021ae:	2400      	movs	r4, #0
  4021b0:	e670      	b.n	401e94 <_vfiprintf_r+0x2b4>
  4021b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4021b6:	f898 2000 	ldrb.w	r2, [r8]
  4021ba:	e583      	b.n	401cc4 <_vfiprintf_r+0xe4>
  4021bc:	f898 2000 	ldrb.w	r2, [r8]
  4021c0:	2a6c      	cmp	r2, #108	; 0x6c
  4021c2:	bf03      	ittte	eq
  4021c4:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4021c8:	f043 0320 	orreq.w	r3, r3, #32
  4021cc:	f108 0801 	addeq.w	r8, r8, #1
  4021d0:	f043 0310 	orrne.w	r3, r3, #16
  4021d4:	e576      	b.n	401cc4 <_vfiprintf_r+0xe4>
  4021d6:	bf00      	nop
  4021d8:	00404ce8 	.word	0x00404ce8
  4021dc:	00404cf8 	.word	0x00404cf8
  4021e0:	00404ccc 	.word	0x00404ccc
  4021e4:	00404cb8 	.word	0x00404cb8
  4021e8:	9907      	ldr	r1, [sp, #28]
  4021ea:	680e      	ldr	r6, [r1, #0]
  4021ec:	460a      	mov	r2, r1
  4021ee:	2e00      	cmp	r6, #0
  4021f0:	f102 0204 	add.w	r2, r2, #4
  4021f4:	f6ff ae0f 	blt.w	401e16 <_vfiprintf_r+0x236>
  4021f8:	9207      	str	r2, [sp, #28]
  4021fa:	f898 2000 	ldrb.w	r2, [r8]
  4021fe:	e561      	b.n	401cc4 <_vfiprintf_r+0xe4>
  402200:	f898 2000 	ldrb.w	r2, [r8]
  402204:	2001      	movs	r0, #1
  402206:	252b      	movs	r5, #43	; 0x2b
  402208:	e55c      	b.n	401cc4 <_vfiprintf_r+0xe4>
  40220a:	9907      	ldr	r1, [sp, #28]
  40220c:	9608      	str	r6, [sp, #32]
  40220e:	f8d1 b000 	ldr.w	fp, [r1]
  402212:	f04f 0200 	mov.w	r2, #0
  402216:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40221a:	1d0e      	adds	r6, r1, #4
  40221c:	f1bb 0f00 	cmp.w	fp, #0
  402220:	f000 82e5 	beq.w	4027ee <_vfiprintf_r+0xc0e>
  402224:	1c67      	adds	r7, r4, #1
  402226:	f000 82c4 	beq.w	4027b2 <_vfiprintf_r+0xbd2>
  40222a:	4622      	mov	r2, r4
  40222c:	2100      	movs	r1, #0
  40222e:	4658      	mov	r0, fp
  402230:	9301      	str	r3, [sp, #4]
  402232:	f001 fbdd 	bl	4039f0 <memchr>
  402236:	9b01      	ldr	r3, [sp, #4]
  402238:	2800      	cmp	r0, #0
  40223a:	f000 82e5 	beq.w	402808 <_vfiprintf_r+0xc28>
  40223e:	eba0 020b 	sub.w	r2, r0, fp
  402242:	9205      	str	r2, [sp, #20]
  402244:	9607      	str	r6, [sp, #28]
  402246:	9302      	str	r3, [sp, #8]
  402248:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40224c:	2400      	movs	r4, #0
  40224e:	e619      	b.n	401e84 <_vfiprintf_r+0x2a4>
  402250:	f898 2000 	ldrb.w	r2, [r8]
  402254:	2a2a      	cmp	r2, #42	; 0x2a
  402256:	f108 0701 	add.w	r7, r8, #1
  40225a:	f000 82e9 	beq.w	402830 <_vfiprintf_r+0xc50>
  40225e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402262:	2909      	cmp	r1, #9
  402264:	46b8      	mov	r8, r7
  402266:	f04f 0400 	mov.w	r4, #0
  40226a:	f63f ad2d 	bhi.w	401cc8 <_vfiprintf_r+0xe8>
  40226e:	f818 2b01 	ldrb.w	r2, [r8], #1
  402272:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402276:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40227a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40227e:	2909      	cmp	r1, #9
  402280:	d9f5      	bls.n	40226e <_vfiprintf_r+0x68e>
  402282:	e521      	b.n	401cc8 <_vfiprintf_r+0xe8>
  402284:	f043 0320 	orr.w	r3, r3, #32
  402288:	f898 2000 	ldrb.w	r2, [r8]
  40228c:	e51a      	b.n	401cc4 <_vfiprintf_r+0xe4>
  40228e:	9608      	str	r6, [sp, #32]
  402290:	2800      	cmp	r0, #0
  402292:	f040 82db 	bne.w	40284c <_vfiprintf_r+0xc6c>
  402296:	2a00      	cmp	r2, #0
  402298:	f000 80e7 	beq.w	40246a <_vfiprintf_r+0x88a>
  40229c:	2101      	movs	r1, #1
  40229e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4022a2:	f04f 0200 	mov.w	r2, #0
  4022a6:	9101      	str	r1, [sp, #4]
  4022a8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4022ac:	9105      	str	r1, [sp, #20]
  4022ae:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4022b2:	e77b      	b.n	4021ac <_vfiprintf_r+0x5cc>
  4022b4:	9a07      	ldr	r2, [sp, #28]
  4022b6:	6813      	ldr	r3, [r2, #0]
  4022b8:	3204      	adds	r2, #4
  4022ba:	9207      	str	r2, [sp, #28]
  4022bc:	9a03      	ldr	r2, [sp, #12]
  4022be:	601a      	str	r2, [r3, #0]
  4022c0:	e4cb      	b.n	401c5a <_vfiprintf_r+0x7a>
  4022c2:	aa0f      	add	r2, sp, #60	; 0x3c
  4022c4:	9904      	ldr	r1, [sp, #16]
  4022c6:	4620      	mov	r0, r4
  4022c8:	f7ff fc4a 	bl	401b60 <__sprint_r.part.0>
  4022cc:	2800      	cmp	r0, #0
  4022ce:	f040 8139 	bne.w	402544 <_vfiprintf_r+0x964>
  4022d2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4022d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4022d6:	f101 0c01 	add.w	ip, r1, #1
  4022da:	46ce      	mov	lr, r9
  4022dc:	e5ff      	b.n	401ede <_vfiprintf_r+0x2fe>
  4022de:	9910      	ldr	r1, [sp, #64]	; 0x40
  4022e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4022e2:	1c48      	adds	r0, r1, #1
  4022e4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4022e8:	2d00      	cmp	r5, #0
  4022ea:	f43f ae22 	beq.w	401f32 <_vfiprintf_r+0x352>
  4022ee:	3201      	adds	r2, #1
  4022f0:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4022f4:	2101      	movs	r1, #1
  4022f6:	2807      	cmp	r0, #7
  4022f8:	9211      	str	r2, [sp, #68]	; 0x44
  4022fa:	9010      	str	r0, [sp, #64]	; 0x40
  4022fc:	f8ca 5000 	str.w	r5, [sl]
  402300:	f8ca 1004 	str.w	r1, [sl, #4]
  402304:	f340 8108 	ble.w	402518 <_vfiprintf_r+0x938>
  402308:	2a00      	cmp	r2, #0
  40230a:	f040 81bc 	bne.w	402686 <_vfiprintf_r+0xaa6>
  40230e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402310:	2b00      	cmp	r3, #0
  402312:	f43f ae1f 	beq.w	401f54 <_vfiprintf_r+0x374>
  402316:	ab0e      	add	r3, sp, #56	; 0x38
  402318:	2202      	movs	r2, #2
  40231a:	4608      	mov	r0, r1
  40231c:	931c      	str	r3, [sp, #112]	; 0x70
  40231e:	921d      	str	r2, [sp, #116]	; 0x74
  402320:	46ca      	mov	sl, r9
  402322:	4601      	mov	r1, r0
  402324:	f10a 0a08 	add.w	sl, sl, #8
  402328:	3001      	adds	r0, #1
  40232a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40232c:	2b80      	cmp	r3, #128	; 0x80
  40232e:	f43f ae19 	beq.w	401f64 <_vfiprintf_r+0x384>
  402332:	9b05      	ldr	r3, [sp, #20]
  402334:	1ae4      	subs	r4, r4, r3
  402336:	2c00      	cmp	r4, #0
  402338:	dd2e      	ble.n	402398 <_vfiprintf_r+0x7b8>
  40233a:	2c10      	cmp	r4, #16
  40233c:	4db3      	ldr	r5, [pc, #716]	; (40260c <_vfiprintf_r+0xa2c>)
  40233e:	dd1e      	ble.n	40237e <_vfiprintf_r+0x79e>
  402340:	46d6      	mov	lr, sl
  402342:	2610      	movs	r6, #16
  402344:	9f06      	ldr	r7, [sp, #24]
  402346:	f8dd a010 	ldr.w	sl, [sp, #16]
  40234a:	e006      	b.n	40235a <_vfiprintf_r+0x77a>
  40234c:	1c88      	adds	r0, r1, #2
  40234e:	f10e 0e08 	add.w	lr, lr, #8
  402352:	4619      	mov	r1, r3
  402354:	3c10      	subs	r4, #16
  402356:	2c10      	cmp	r4, #16
  402358:	dd10      	ble.n	40237c <_vfiprintf_r+0x79c>
  40235a:	1c4b      	adds	r3, r1, #1
  40235c:	3210      	adds	r2, #16
  40235e:	2b07      	cmp	r3, #7
  402360:	9211      	str	r2, [sp, #68]	; 0x44
  402362:	e88e 0060 	stmia.w	lr, {r5, r6}
  402366:	9310      	str	r3, [sp, #64]	; 0x40
  402368:	ddf0      	ble.n	40234c <_vfiprintf_r+0x76c>
  40236a:	2a00      	cmp	r2, #0
  40236c:	d165      	bne.n	40243a <_vfiprintf_r+0x85a>
  40236e:	3c10      	subs	r4, #16
  402370:	2c10      	cmp	r4, #16
  402372:	f04f 0001 	mov.w	r0, #1
  402376:	4611      	mov	r1, r2
  402378:	46ce      	mov	lr, r9
  40237a:	dcee      	bgt.n	40235a <_vfiprintf_r+0x77a>
  40237c:	46f2      	mov	sl, lr
  40237e:	4422      	add	r2, r4
  402380:	2807      	cmp	r0, #7
  402382:	9211      	str	r2, [sp, #68]	; 0x44
  402384:	f8ca 5000 	str.w	r5, [sl]
  402388:	f8ca 4004 	str.w	r4, [sl, #4]
  40238c:	9010      	str	r0, [sp, #64]	; 0x40
  40238e:	f300 8085 	bgt.w	40249c <_vfiprintf_r+0x8bc>
  402392:	f10a 0a08 	add.w	sl, sl, #8
  402396:	3001      	adds	r0, #1
  402398:	9905      	ldr	r1, [sp, #20]
  40239a:	f8ca b000 	str.w	fp, [sl]
  40239e:	440a      	add	r2, r1
  4023a0:	2807      	cmp	r0, #7
  4023a2:	9211      	str	r2, [sp, #68]	; 0x44
  4023a4:	f8ca 1004 	str.w	r1, [sl, #4]
  4023a8:	9010      	str	r0, [sp, #64]	; 0x40
  4023aa:	f340 8082 	ble.w	4024b2 <_vfiprintf_r+0x8d2>
  4023ae:	2a00      	cmp	r2, #0
  4023b0:	f040 8118 	bne.w	4025e4 <_vfiprintf_r+0xa04>
  4023b4:	9b02      	ldr	r3, [sp, #8]
  4023b6:	9210      	str	r2, [sp, #64]	; 0x40
  4023b8:	0758      	lsls	r0, r3, #29
  4023ba:	d535      	bpl.n	402428 <_vfiprintf_r+0x848>
  4023bc:	9b08      	ldr	r3, [sp, #32]
  4023be:	9901      	ldr	r1, [sp, #4]
  4023c0:	1a5c      	subs	r4, r3, r1
  4023c2:	2c00      	cmp	r4, #0
  4023c4:	f340 80e7 	ble.w	402596 <_vfiprintf_r+0x9b6>
  4023c8:	46ca      	mov	sl, r9
  4023ca:	2c10      	cmp	r4, #16
  4023cc:	f340 8218 	ble.w	402800 <_vfiprintf_r+0xc20>
  4023d0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4023d2:	4e8f      	ldr	r6, [pc, #572]	; (402610 <_vfiprintf_r+0xa30>)
  4023d4:	9f06      	ldr	r7, [sp, #24]
  4023d6:	f8dd b010 	ldr.w	fp, [sp, #16]
  4023da:	2510      	movs	r5, #16
  4023dc:	e006      	b.n	4023ec <_vfiprintf_r+0x80c>
  4023de:	1c88      	adds	r0, r1, #2
  4023e0:	f10a 0a08 	add.w	sl, sl, #8
  4023e4:	4619      	mov	r1, r3
  4023e6:	3c10      	subs	r4, #16
  4023e8:	2c10      	cmp	r4, #16
  4023ea:	dd11      	ble.n	402410 <_vfiprintf_r+0x830>
  4023ec:	1c4b      	adds	r3, r1, #1
  4023ee:	3210      	adds	r2, #16
  4023f0:	2b07      	cmp	r3, #7
  4023f2:	9211      	str	r2, [sp, #68]	; 0x44
  4023f4:	f8ca 6000 	str.w	r6, [sl]
  4023f8:	f8ca 5004 	str.w	r5, [sl, #4]
  4023fc:	9310      	str	r3, [sp, #64]	; 0x40
  4023fe:	ddee      	ble.n	4023de <_vfiprintf_r+0x7fe>
  402400:	bb42      	cbnz	r2, 402454 <_vfiprintf_r+0x874>
  402402:	3c10      	subs	r4, #16
  402404:	2c10      	cmp	r4, #16
  402406:	f04f 0001 	mov.w	r0, #1
  40240a:	4611      	mov	r1, r2
  40240c:	46ca      	mov	sl, r9
  40240e:	dced      	bgt.n	4023ec <_vfiprintf_r+0x80c>
  402410:	4422      	add	r2, r4
  402412:	2807      	cmp	r0, #7
  402414:	9211      	str	r2, [sp, #68]	; 0x44
  402416:	f8ca 6000 	str.w	r6, [sl]
  40241a:	f8ca 4004 	str.w	r4, [sl, #4]
  40241e:	9010      	str	r0, [sp, #64]	; 0x40
  402420:	dd51      	ble.n	4024c6 <_vfiprintf_r+0x8e6>
  402422:	2a00      	cmp	r2, #0
  402424:	f040 819b 	bne.w	40275e <_vfiprintf_r+0xb7e>
  402428:	9b03      	ldr	r3, [sp, #12]
  40242a:	9a08      	ldr	r2, [sp, #32]
  40242c:	9901      	ldr	r1, [sp, #4]
  40242e:	428a      	cmp	r2, r1
  402430:	bfac      	ite	ge
  402432:	189b      	addge	r3, r3, r2
  402434:	185b      	addlt	r3, r3, r1
  402436:	9303      	str	r3, [sp, #12]
  402438:	e04e      	b.n	4024d8 <_vfiprintf_r+0x8f8>
  40243a:	aa0f      	add	r2, sp, #60	; 0x3c
  40243c:	4651      	mov	r1, sl
  40243e:	4638      	mov	r0, r7
  402440:	f7ff fb8e 	bl	401b60 <__sprint_r.part.0>
  402444:	2800      	cmp	r0, #0
  402446:	f040 813f 	bne.w	4026c8 <_vfiprintf_r+0xae8>
  40244a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40244c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40244e:	1c48      	adds	r0, r1, #1
  402450:	46ce      	mov	lr, r9
  402452:	e77f      	b.n	402354 <_vfiprintf_r+0x774>
  402454:	aa0f      	add	r2, sp, #60	; 0x3c
  402456:	4659      	mov	r1, fp
  402458:	4638      	mov	r0, r7
  40245a:	f7ff fb81 	bl	401b60 <__sprint_r.part.0>
  40245e:	b960      	cbnz	r0, 40247a <_vfiprintf_r+0x89a>
  402460:	9910      	ldr	r1, [sp, #64]	; 0x40
  402462:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402464:	1c48      	adds	r0, r1, #1
  402466:	46ca      	mov	sl, r9
  402468:	e7bd      	b.n	4023e6 <_vfiprintf_r+0x806>
  40246a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40246c:	f8dd b010 	ldr.w	fp, [sp, #16]
  402470:	2b00      	cmp	r3, #0
  402472:	f040 81d4 	bne.w	40281e <_vfiprintf_r+0xc3e>
  402476:	2300      	movs	r3, #0
  402478:	9310      	str	r3, [sp, #64]	; 0x40
  40247a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40247e:	f013 0f01 	tst.w	r3, #1
  402482:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402486:	d102      	bne.n	40248e <_vfiprintf_r+0x8ae>
  402488:	059a      	lsls	r2, r3, #22
  40248a:	f140 80de 	bpl.w	40264a <_vfiprintf_r+0xa6a>
  40248e:	065b      	lsls	r3, r3, #25
  402490:	f53f acb2 	bmi.w	401df8 <_vfiprintf_r+0x218>
  402494:	9803      	ldr	r0, [sp, #12]
  402496:	b02d      	add	sp, #180	; 0xb4
  402498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40249c:	2a00      	cmp	r2, #0
  40249e:	f040 8106 	bne.w	4026ae <_vfiprintf_r+0xace>
  4024a2:	9a05      	ldr	r2, [sp, #20]
  4024a4:	921d      	str	r2, [sp, #116]	; 0x74
  4024a6:	2301      	movs	r3, #1
  4024a8:	9211      	str	r2, [sp, #68]	; 0x44
  4024aa:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4024ae:	9310      	str	r3, [sp, #64]	; 0x40
  4024b0:	46ca      	mov	sl, r9
  4024b2:	f10a 0a08 	add.w	sl, sl, #8
  4024b6:	9b02      	ldr	r3, [sp, #8]
  4024b8:	0759      	lsls	r1, r3, #29
  4024ba:	d504      	bpl.n	4024c6 <_vfiprintf_r+0x8e6>
  4024bc:	9b08      	ldr	r3, [sp, #32]
  4024be:	9901      	ldr	r1, [sp, #4]
  4024c0:	1a5c      	subs	r4, r3, r1
  4024c2:	2c00      	cmp	r4, #0
  4024c4:	dc81      	bgt.n	4023ca <_vfiprintf_r+0x7ea>
  4024c6:	9b03      	ldr	r3, [sp, #12]
  4024c8:	9908      	ldr	r1, [sp, #32]
  4024ca:	9801      	ldr	r0, [sp, #4]
  4024cc:	4281      	cmp	r1, r0
  4024ce:	bfac      	ite	ge
  4024d0:	185b      	addge	r3, r3, r1
  4024d2:	181b      	addlt	r3, r3, r0
  4024d4:	9303      	str	r3, [sp, #12]
  4024d6:	bb72      	cbnz	r2, 402536 <_vfiprintf_r+0x956>
  4024d8:	2300      	movs	r3, #0
  4024da:	9310      	str	r3, [sp, #64]	; 0x40
  4024dc:	46ca      	mov	sl, r9
  4024de:	f7ff bbbc 	b.w	401c5a <_vfiprintf_r+0x7a>
  4024e2:	aa0f      	add	r2, sp, #60	; 0x3c
  4024e4:	9904      	ldr	r1, [sp, #16]
  4024e6:	4620      	mov	r0, r4
  4024e8:	f7ff fb3a 	bl	401b60 <__sprint_r.part.0>
  4024ec:	bb50      	cbnz	r0, 402544 <_vfiprintf_r+0x964>
  4024ee:	9910      	ldr	r1, [sp, #64]	; 0x40
  4024f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4024f2:	f101 0e01 	add.w	lr, r1, #1
  4024f6:	46cc      	mov	ip, r9
  4024f8:	e548      	b.n	401f8c <_vfiprintf_r+0x3ac>
  4024fa:	2a00      	cmp	r2, #0
  4024fc:	f040 8140 	bne.w	402780 <_vfiprintf_r+0xba0>
  402500:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  402504:	2900      	cmp	r1, #0
  402506:	f000 811b 	beq.w	402740 <_vfiprintf_r+0xb60>
  40250a:	2201      	movs	r2, #1
  40250c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  402510:	4610      	mov	r0, r2
  402512:	921d      	str	r2, [sp, #116]	; 0x74
  402514:	911c      	str	r1, [sp, #112]	; 0x70
  402516:	46ca      	mov	sl, r9
  402518:	4601      	mov	r1, r0
  40251a:	f10a 0a08 	add.w	sl, sl, #8
  40251e:	3001      	adds	r0, #1
  402520:	e507      	b.n	401f32 <_vfiprintf_r+0x352>
  402522:	9b02      	ldr	r3, [sp, #8]
  402524:	2a01      	cmp	r2, #1
  402526:	f000 8098 	beq.w	40265a <_vfiprintf_r+0xa7a>
  40252a:	2a02      	cmp	r2, #2
  40252c:	d10d      	bne.n	40254a <_vfiprintf_r+0x96a>
  40252e:	9302      	str	r3, [sp, #8]
  402530:	2600      	movs	r6, #0
  402532:	2700      	movs	r7, #0
  402534:	e5b0      	b.n	402098 <_vfiprintf_r+0x4b8>
  402536:	aa0f      	add	r2, sp, #60	; 0x3c
  402538:	9904      	ldr	r1, [sp, #16]
  40253a:	9806      	ldr	r0, [sp, #24]
  40253c:	f7ff fb10 	bl	401b60 <__sprint_r.part.0>
  402540:	2800      	cmp	r0, #0
  402542:	d0c9      	beq.n	4024d8 <_vfiprintf_r+0x8f8>
  402544:	f8dd b010 	ldr.w	fp, [sp, #16]
  402548:	e797      	b.n	40247a <_vfiprintf_r+0x89a>
  40254a:	9302      	str	r3, [sp, #8]
  40254c:	2600      	movs	r6, #0
  40254e:	2700      	movs	r7, #0
  402550:	4649      	mov	r1, r9
  402552:	e000      	b.n	402556 <_vfiprintf_r+0x976>
  402554:	4659      	mov	r1, fp
  402556:	08f2      	lsrs	r2, r6, #3
  402558:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40255c:	08f8      	lsrs	r0, r7, #3
  40255e:	f006 0307 	and.w	r3, r6, #7
  402562:	4607      	mov	r7, r0
  402564:	4616      	mov	r6, r2
  402566:	3330      	adds	r3, #48	; 0x30
  402568:	ea56 0207 	orrs.w	r2, r6, r7
  40256c:	f801 3c01 	strb.w	r3, [r1, #-1]
  402570:	f101 3bff 	add.w	fp, r1, #4294967295
  402574:	d1ee      	bne.n	402554 <_vfiprintf_r+0x974>
  402576:	9a02      	ldr	r2, [sp, #8]
  402578:	07d6      	lsls	r6, r2, #31
  40257a:	f57f ad9d 	bpl.w	4020b8 <_vfiprintf_r+0x4d8>
  40257e:	2b30      	cmp	r3, #48	; 0x30
  402580:	f43f ad9a 	beq.w	4020b8 <_vfiprintf_r+0x4d8>
  402584:	3902      	subs	r1, #2
  402586:	2330      	movs	r3, #48	; 0x30
  402588:	f80b 3c01 	strb.w	r3, [fp, #-1]
  40258c:	eba9 0301 	sub.w	r3, r9, r1
  402590:	9305      	str	r3, [sp, #20]
  402592:	468b      	mov	fp, r1
  402594:	e476      	b.n	401e84 <_vfiprintf_r+0x2a4>
  402596:	9b03      	ldr	r3, [sp, #12]
  402598:	9a08      	ldr	r2, [sp, #32]
  40259a:	428a      	cmp	r2, r1
  40259c:	bfac      	ite	ge
  40259e:	189b      	addge	r3, r3, r2
  4025a0:	185b      	addlt	r3, r3, r1
  4025a2:	9303      	str	r3, [sp, #12]
  4025a4:	e798      	b.n	4024d8 <_vfiprintf_r+0x8f8>
  4025a6:	2202      	movs	r2, #2
  4025a8:	e44d      	b.n	401e46 <_vfiprintf_r+0x266>
  4025aa:	2f00      	cmp	r7, #0
  4025ac:	bf08      	it	eq
  4025ae:	2e0a      	cmpeq	r6, #10
  4025b0:	d352      	bcc.n	402658 <_vfiprintf_r+0xa78>
  4025b2:	46cb      	mov	fp, r9
  4025b4:	4630      	mov	r0, r6
  4025b6:	4639      	mov	r1, r7
  4025b8:	220a      	movs	r2, #10
  4025ba:	2300      	movs	r3, #0
  4025bc:	f001 ff7c 	bl	4044b8 <__aeabi_uldivmod>
  4025c0:	3230      	adds	r2, #48	; 0x30
  4025c2:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4025c6:	4630      	mov	r0, r6
  4025c8:	4639      	mov	r1, r7
  4025ca:	2300      	movs	r3, #0
  4025cc:	220a      	movs	r2, #10
  4025ce:	f001 ff73 	bl	4044b8 <__aeabi_uldivmod>
  4025d2:	4606      	mov	r6, r0
  4025d4:	460f      	mov	r7, r1
  4025d6:	ea56 0307 	orrs.w	r3, r6, r7
  4025da:	d1eb      	bne.n	4025b4 <_vfiprintf_r+0x9d4>
  4025dc:	e56c      	b.n	4020b8 <_vfiprintf_r+0x4d8>
  4025de:	9405      	str	r4, [sp, #20]
  4025e0:	46cb      	mov	fp, r9
  4025e2:	e44f      	b.n	401e84 <_vfiprintf_r+0x2a4>
  4025e4:	aa0f      	add	r2, sp, #60	; 0x3c
  4025e6:	9904      	ldr	r1, [sp, #16]
  4025e8:	9806      	ldr	r0, [sp, #24]
  4025ea:	f7ff fab9 	bl	401b60 <__sprint_r.part.0>
  4025ee:	2800      	cmp	r0, #0
  4025f0:	d1a8      	bne.n	402544 <_vfiprintf_r+0x964>
  4025f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4025f4:	46ca      	mov	sl, r9
  4025f6:	e75e      	b.n	4024b6 <_vfiprintf_r+0x8d6>
  4025f8:	aa0f      	add	r2, sp, #60	; 0x3c
  4025fa:	9904      	ldr	r1, [sp, #16]
  4025fc:	9806      	ldr	r0, [sp, #24]
  4025fe:	f7ff faaf 	bl	401b60 <__sprint_r.part.0>
  402602:	2800      	cmp	r0, #0
  402604:	d19e      	bne.n	402544 <_vfiprintf_r+0x964>
  402606:	46ca      	mov	sl, r9
  402608:	f7ff bbc0 	b.w	401d8c <_vfiprintf_r+0x1ac>
  40260c:	00404cf8 	.word	0x00404cf8
  402610:	00404ce8 	.word	0x00404ce8
  402614:	3104      	adds	r1, #4
  402616:	6816      	ldr	r6, [r2, #0]
  402618:	9107      	str	r1, [sp, #28]
  40261a:	2201      	movs	r2, #1
  40261c:	2700      	movs	r7, #0
  40261e:	e412      	b.n	401e46 <_vfiprintf_r+0x266>
  402620:	9807      	ldr	r0, [sp, #28]
  402622:	4601      	mov	r1, r0
  402624:	3104      	adds	r1, #4
  402626:	6806      	ldr	r6, [r0, #0]
  402628:	9107      	str	r1, [sp, #28]
  40262a:	2700      	movs	r7, #0
  40262c:	e40b      	b.n	401e46 <_vfiprintf_r+0x266>
  40262e:	680e      	ldr	r6, [r1, #0]
  402630:	3104      	adds	r1, #4
  402632:	9107      	str	r1, [sp, #28]
  402634:	2700      	movs	r7, #0
  402636:	e591      	b.n	40215c <_vfiprintf_r+0x57c>
  402638:	9907      	ldr	r1, [sp, #28]
  40263a:	680e      	ldr	r6, [r1, #0]
  40263c:	460a      	mov	r2, r1
  40263e:	17f7      	asrs	r7, r6, #31
  402640:	3204      	adds	r2, #4
  402642:	9207      	str	r2, [sp, #28]
  402644:	4630      	mov	r0, r6
  402646:	4639      	mov	r1, r7
  402648:	e50f      	b.n	40206a <_vfiprintf_r+0x48a>
  40264a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40264e:	f000 fe87 	bl	403360 <__retarget_lock_release_recursive>
  402652:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402656:	e71a      	b.n	40248e <_vfiprintf_r+0x8ae>
  402658:	9b02      	ldr	r3, [sp, #8]
  40265a:	9302      	str	r3, [sp, #8]
  40265c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  402660:	3630      	adds	r6, #48	; 0x30
  402662:	2301      	movs	r3, #1
  402664:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  402668:	9305      	str	r3, [sp, #20]
  40266a:	e40b      	b.n	401e84 <_vfiprintf_r+0x2a4>
  40266c:	aa0f      	add	r2, sp, #60	; 0x3c
  40266e:	9904      	ldr	r1, [sp, #16]
  402670:	9806      	ldr	r0, [sp, #24]
  402672:	f7ff fa75 	bl	401b60 <__sprint_r.part.0>
  402676:	2800      	cmp	r0, #0
  402678:	f47f af64 	bne.w	402544 <_vfiprintf_r+0x964>
  40267c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40267e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402680:	1c48      	adds	r0, r1, #1
  402682:	46ca      	mov	sl, r9
  402684:	e651      	b.n	40232a <_vfiprintf_r+0x74a>
  402686:	aa0f      	add	r2, sp, #60	; 0x3c
  402688:	9904      	ldr	r1, [sp, #16]
  40268a:	9806      	ldr	r0, [sp, #24]
  40268c:	f7ff fa68 	bl	401b60 <__sprint_r.part.0>
  402690:	2800      	cmp	r0, #0
  402692:	f47f af57 	bne.w	402544 <_vfiprintf_r+0x964>
  402696:	9910      	ldr	r1, [sp, #64]	; 0x40
  402698:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40269a:	1c48      	adds	r0, r1, #1
  40269c:	46ca      	mov	sl, r9
  40269e:	e448      	b.n	401f32 <_vfiprintf_r+0x352>
  4026a0:	2a00      	cmp	r2, #0
  4026a2:	f040 8091 	bne.w	4027c8 <_vfiprintf_r+0xbe8>
  4026a6:	2001      	movs	r0, #1
  4026a8:	4611      	mov	r1, r2
  4026aa:	46ca      	mov	sl, r9
  4026ac:	e641      	b.n	402332 <_vfiprintf_r+0x752>
  4026ae:	aa0f      	add	r2, sp, #60	; 0x3c
  4026b0:	9904      	ldr	r1, [sp, #16]
  4026b2:	9806      	ldr	r0, [sp, #24]
  4026b4:	f7ff fa54 	bl	401b60 <__sprint_r.part.0>
  4026b8:	2800      	cmp	r0, #0
  4026ba:	f47f af43 	bne.w	402544 <_vfiprintf_r+0x964>
  4026be:	9810      	ldr	r0, [sp, #64]	; 0x40
  4026c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4026c2:	3001      	adds	r0, #1
  4026c4:	46ca      	mov	sl, r9
  4026c6:	e667      	b.n	402398 <_vfiprintf_r+0x7b8>
  4026c8:	46d3      	mov	fp, sl
  4026ca:	e6d6      	b.n	40247a <_vfiprintf_r+0x89a>
  4026cc:	9e07      	ldr	r6, [sp, #28]
  4026ce:	3607      	adds	r6, #7
  4026d0:	f026 0207 	bic.w	r2, r6, #7
  4026d4:	f102 0108 	add.w	r1, r2, #8
  4026d8:	e9d2 6700 	ldrd	r6, r7, [r2]
  4026dc:	9107      	str	r1, [sp, #28]
  4026de:	2201      	movs	r2, #1
  4026e0:	f7ff bbb1 	b.w	401e46 <_vfiprintf_r+0x266>
  4026e4:	9e07      	ldr	r6, [sp, #28]
  4026e6:	3607      	adds	r6, #7
  4026e8:	f026 0607 	bic.w	r6, r6, #7
  4026ec:	e9d6 0100 	ldrd	r0, r1, [r6]
  4026f0:	f106 0208 	add.w	r2, r6, #8
  4026f4:	9207      	str	r2, [sp, #28]
  4026f6:	4606      	mov	r6, r0
  4026f8:	460f      	mov	r7, r1
  4026fa:	e4b6      	b.n	40206a <_vfiprintf_r+0x48a>
  4026fc:	9e07      	ldr	r6, [sp, #28]
  4026fe:	3607      	adds	r6, #7
  402700:	f026 0207 	bic.w	r2, r6, #7
  402704:	f102 0108 	add.w	r1, r2, #8
  402708:	e9d2 6700 	ldrd	r6, r7, [r2]
  40270c:	9107      	str	r1, [sp, #28]
  40270e:	2200      	movs	r2, #0
  402710:	f7ff bb99 	b.w	401e46 <_vfiprintf_r+0x266>
  402714:	9e07      	ldr	r6, [sp, #28]
  402716:	3607      	adds	r6, #7
  402718:	f026 0107 	bic.w	r1, r6, #7
  40271c:	f101 0008 	add.w	r0, r1, #8
  402720:	9007      	str	r0, [sp, #28]
  402722:	e9d1 6700 	ldrd	r6, r7, [r1]
  402726:	e519      	b.n	40215c <_vfiprintf_r+0x57c>
  402728:	46cb      	mov	fp, r9
  40272a:	f7ff bbab 	b.w	401e84 <_vfiprintf_r+0x2a4>
  40272e:	252d      	movs	r5, #45	; 0x2d
  402730:	4276      	negs	r6, r6
  402732:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  402736:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40273a:	2201      	movs	r2, #1
  40273c:	f7ff bb88 	b.w	401e50 <_vfiprintf_r+0x270>
  402740:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402742:	b9b3      	cbnz	r3, 402772 <_vfiprintf_r+0xb92>
  402744:	4611      	mov	r1, r2
  402746:	2001      	movs	r0, #1
  402748:	46ca      	mov	sl, r9
  40274a:	e5f2      	b.n	402332 <_vfiprintf_r+0x752>
  40274c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402750:	f000 fe06 	bl	403360 <__retarget_lock_release_recursive>
  402754:	f04f 33ff 	mov.w	r3, #4294967295
  402758:	9303      	str	r3, [sp, #12]
  40275a:	f7ff bb50 	b.w	401dfe <_vfiprintf_r+0x21e>
  40275e:	aa0f      	add	r2, sp, #60	; 0x3c
  402760:	9904      	ldr	r1, [sp, #16]
  402762:	9806      	ldr	r0, [sp, #24]
  402764:	f7ff f9fc 	bl	401b60 <__sprint_r.part.0>
  402768:	2800      	cmp	r0, #0
  40276a:	f47f aeeb 	bne.w	402544 <_vfiprintf_r+0x964>
  40276e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402770:	e6a9      	b.n	4024c6 <_vfiprintf_r+0x8e6>
  402772:	ab0e      	add	r3, sp, #56	; 0x38
  402774:	2202      	movs	r2, #2
  402776:	931c      	str	r3, [sp, #112]	; 0x70
  402778:	921d      	str	r2, [sp, #116]	; 0x74
  40277a:	2001      	movs	r0, #1
  40277c:	46ca      	mov	sl, r9
  40277e:	e5d0      	b.n	402322 <_vfiprintf_r+0x742>
  402780:	aa0f      	add	r2, sp, #60	; 0x3c
  402782:	9904      	ldr	r1, [sp, #16]
  402784:	9806      	ldr	r0, [sp, #24]
  402786:	f7ff f9eb 	bl	401b60 <__sprint_r.part.0>
  40278a:	2800      	cmp	r0, #0
  40278c:	f47f aeda 	bne.w	402544 <_vfiprintf_r+0x964>
  402790:	9910      	ldr	r1, [sp, #64]	; 0x40
  402792:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402794:	1c48      	adds	r0, r1, #1
  402796:	46ca      	mov	sl, r9
  402798:	e5a4      	b.n	4022e4 <_vfiprintf_r+0x704>
  40279a:	9a07      	ldr	r2, [sp, #28]
  40279c:	9903      	ldr	r1, [sp, #12]
  40279e:	6813      	ldr	r3, [r2, #0]
  4027a0:	17cd      	asrs	r5, r1, #31
  4027a2:	4608      	mov	r0, r1
  4027a4:	3204      	adds	r2, #4
  4027a6:	4629      	mov	r1, r5
  4027a8:	9207      	str	r2, [sp, #28]
  4027aa:	e9c3 0100 	strd	r0, r1, [r3]
  4027ae:	f7ff ba54 	b.w	401c5a <_vfiprintf_r+0x7a>
  4027b2:	4658      	mov	r0, fp
  4027b4:	9607      	str	r6, [sp, #28]
  4027b6:	9302      	str	r3, [sp, #8]
  4027b8:	f001 fc42 	bl	404040 <strlen>
  4027bc:	2400      	movs	r4, #0
  4027be:	9005      	str	r0, [sp, #20]
  4027c0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4027c4:	f7ff bb5e 	b.w	401e84 <_vfiprintf_r+0x2a4>
  4027c8:	aa0f      	add	r2, sp, #60	; 0x3c
  4027ca:	9904      	ldr	r1, [sp, #16]
  4027cc:	9806      	ldr	r0, [sp, #24]
  4027ce:	f7ff f9c7 	bl	401b60 <__sprint_r.part.0>
  4027d2:	2800      	cmp	r0, #0
  4027d4:	f47f aeb6 	bne.w	402544 <_vfiprintf_r+0x964>
  4027d8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4027da:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4027dc:	1c48      	adds	r0, r1, #1
  4027de:	46ca      	mov	sl, r9
  4027e0:	e5a7      	b.n	402332 <_vfiprintf_r+0x752>
  4027e2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4027e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4027e6:	4e20      	ldr	r6, [pc, #128]	; (402868 <_vfiprintf_r+0xc88>)
  4027e8:	3101      	adds	r1, #1
  4027ea:	f7ff bb90 	b.w	401f0e <_vfiprintf_r+0x32e>
  4027ee:	2c06      	cmp	r4, #6
  4027f0:	bf28      	it	cs
  4027f2:	2406      	movcs	r4, #6
  4027f4:	9405      	str	r4, [sp, #20]
  4027f6:	9607      	str	r6, [sp, #28]
  4027f8:	9401      	str	r4, [sp, #4]
  4027fa:	f8df b070 	ldr.w	fp, [pc, #112]	; 40286c <_vfiprintf_r+0xc8c>
  4027fe:	e4d5      	b.n	4021ac <_vfiprintf_r+0x5cc>
  402800:	9810      	ldr	r0, [sp, #64]	; 0x40
  402802:	4e19      	ldr	r6, [pc, #100]	; (402868 <_vfiprintf_r+0xc88>)
  402804:	3001      	adds	r0, #1
  402806:	e603      	b.n	402410 <_vfiprintf_r+0x830>
  402808:	9405      	str	r4, [sp, #20]
  40280a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40280e:	9607      	str	r6, [sp, #28]
  402810:	9302      	str	r3, [sp, #8]
  402812:	4604      	mov	r4, r0
  402814:	f7ff bb36 	b.w	401e84 <_vfiprintf_r+0x2a4>
  402818:	4686      	mov	lr, r0
  40281a:	f7ff bbce 	b.w	401fba <_vfiprintf_r+0x3da>
  40281e:	9806      	ldr	r0, [sp, #24]
  402820:	aa0f      	add	r2, sp, #60	; 0x3c
  402822:	4659      	mov	r1, fp
  402824:	f7ff f99c 	bl	401b60 <__sprint_r.part.0>
  402828:	2800      	cmp	r0, #0
  40282a:	f43f ae24 	beq.w	402476 <_vfiprintf_r+0x896>
  40282e:	e624      	b.n	40247a <_vfiprintf_r+0x89a>
  402830:	9907      	ldr	r1, [sp, #28]
  402832:	f898 2001 	ldrb.w	r2, [r8, #1]
  402836:	680c      	ldr	r4, [r1, #0]
  402838:	3104      	adds	r1, #4
  40283a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40283e:	46b8      	mov	r8, r7
  402840:	9107      	str	r1, [sp, #28]
  402842:	f7ff ba3f 	b.w	401cc4 <_vfiprintf_r+0xe4>
  402846:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40284a:	e43c      	b.n	4020c6 <_vfiprintf_r+0x4e6>
  40284c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402850:	e521      	b.n	402296 <_vfiprintf_r+0x6b6>
  402852:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402856:	f7ff bbf4 	b.w	402042 <_vfiprintf_r+0x462>
  40285a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40285e:	e491      	b.n	402184 <_vfiprintf_r+0x5a4>
  402860:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402864:	e469      	b.n	40213a <_vfiprintf_r+0x55a>
  402866:	bf00      	nop
  402868:	00404ce8 	.word	0x00404ce8
  40286c:	00404ce0 	.word	0x00404ce0

00402870 <__sbprintf>:
  402870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402874:	460c      	mov	r4, r1
  402876:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40287a:	8989      	ldrh	r1, [r1, #12]
  40287c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40287e:	89e5      	ldrh	r5, [r4, #14]
  402880:	9619      	str	r6, [sp, #100]	; 0x64
  402882:	f021 0102 	bic.w	r1, r1, #2
  402886:	4606      	mov	r6, r0
  402888:	69e0      	ldr	r0, [r4, #28]
  40288a:	f8ad 100c 	strh.w	r1, [sp, #12]
  40288e:	4617      	mov	r7, r2
  402890:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402894:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402896:	f8ad 500e 	strh.w	r5, [sp, #14]
  40289a:	4698      	mov	r8, r3
  40289c:	ad1a      	add	r5, sp, #104	; 0x68
  40289e:	2300      	movs	r3, #0
  4028a0:	9007      	str	r0, [sp, #28]
  4028a2:	a816      	add	r0, sp, #88	; 0x58
  4028a4:	9209      	str	r2, [sp, #36]	; 0x24
  4028a6:	9306      	str	r3, [sp, #24]
  4028a8:	9500      	str	r5, [sp, #0]
  4028aa:	9504      	str	r5, [sp, #16]
  4028ac:	9102      	str	r1, [sp, #8]
  4028ae:	9105      	str	r1, [sp, #20]
  4028b0:	f000 fd50 	bl	403354 <__retarget_lock_init_recursive>
  4028b4:	4643      	mov	r3, r8
  4028b6:	463a      	mov	r2, r7
  4028b8:	4669      	mov	r1, sp
  4028ba:	4630      	mov	r0, r6
  4028bc:	f7ff f990 	bl	401be0 <_vfiprintf_r>
  4028c0:	1e05      	subs	r5, r0, #0
  4028c2:	db07      	blt.n	4028d4 <__sbprintf+0x64>
  4028c4:	4630      	mov	r0, r6
  4028c6:	4669      	mov	r1, sp
  4028c8:	f000 f930 	bl	402b2c <_fflush_r>
  4028cc:	2800      	cmp	r0, #0
  4028ce:	bf18      	it	ne
  4028d0:	f04f 35ff 	movne.w	r5, #4294967295
  4028d4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4028d8:	065b      	lsls	r3, r3, #25
  4028da:	d503      	bpl.n	4028e4 <__sbprintf+0x74>
  4028dc:	89a3      	ldrh	r3, [r4, #12]
  4028de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4028e2:	81a3      	strh	r3, [r4, #12]
  4028e4:	9816      	ldr	r0, [sp, #88]	; 0x58
  4028e6:	f000 fd37 	bl	403358 <__retarget_lock_close_recursive>
  4028ea:	4628      	mov	r0, r5
  4028ec:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4028f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004028f4 <__swsetup_r>:
  4028f4:	b538      	push	{r3, r4, r5, lr}
  4028f6:	4b30      	ldr	r3, [pc, #192]	; (4029b8 <__swsetup_r+0xc4>)
  4028f8:	681b      	ldr	r3, [r3, #0]
  4028fa:	4605      	mov	r5, r0
  4028fc:	460c      	mov	r4, r1
  4028fe:	b113      	cbz	r3, 402906 <__swsetup_r+0x12>
  402900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402902:	2a00      	cmp	r2, #0
  402904:	d038      	beq.n	402978 <__swsetup_r+0x84>
  402906:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40290a:	b293      	uxth	r3, r2
  40290c:	0718      	lsls	r0, r3, #28
  40290e:	d50c      	bpl.n	40292a <__swsetup_r+0x36>
  402910:	6920      	ldr	r0, [r4, #16]
  402912:	b1a8      	cbz	r0, 402940 <__swsetup_r+0x4c>
  402914:	f013 0201 	ands.w	r2, r3, #1
  402918:	d01e      	beq.n	402958 <__swsetup_r+0x64>
  40291a:	6963      	ldr	r3, [r4, #20]
  40291c:	2200      	movs	r2, #0
  40291e:	425b      	negs	r3, r3
  402920:	61a3      	str	r3, [r4, #24]
  402922:	60a2      	str	r2, [r4, #8]
  402924:	b1f0      	cbz	r0, 402964 <__swsetup_r+0x70>
  402926:	2000      	movs	r0, #0
  402928:	bd38      	pop	{r3, r4, r5, pc}
  40292a:	06d9      	lsls	r1, r3, #27
  40292c:	d53c      	bpl.n	4029a8 <__swsetup_r+0xb4>
  40292e:	0758      	lsls	r0, r3, #29
  402930:	d426      	bmi.n	402980 <__swsetup_r+0x8c>
  402932:	6920      	ldr	r0, [r4, #16]
  402934:	f042 0308 	orr.w	r3, r2, #8
  402938:	81a3      	strh	r3, [r4, #12]
  40293a:	b29b      	uxth	r3, r3
  40293c:	2800      	cmp	r0, #0
  40293e:	d1e9      	bne.n	402914 <__swsetup_r+0x20>
  402940:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402944:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402948:	d0e4      	beq.n	402914 <__swsetup_r+0x20>
  40294a:	4628      	mov	r0, r5
  40294c:	4621      	mov	r1, r4
  40294e:	f000 fd37 	bl	4033c0 <__smakebuf_r>
  402952:	89a3      	ldrh	r3, [r4, #12]
  402954:	6920      	ldr	r0, [r4, #16]
  402956:	e7dd      	b.n	402914 <__swsetup_r+0x20>
  402958:	0799      	lsls	r1, r3, #30
  40295a:	bf58      	it	pl
  40295c:	6962      	ldrpl	r2, [r4, #20]
  40295e:	60a2      	str	r2, [r4, #8]
  402960:	2800      	cmp	r0, #0
  402962:	d1e0      	bne.n	402926 <__swsetup_r+0x32>
  402964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402968:	061a      	lsls	r2, r3, #24
  40296a:	d5dd      	bpl.n	402928 <__swsetup_r+0x34>
  40296c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402970:	81a3      	strh	r3, [r4, #12]
  402972:	f04f 30ff 	mov.w	r0, #4294967295
  402976:	bd38      	pop	{r3, r4, r5, pc}
  402978:	4618      	mov	r0, r3
  40297a:	f000 f92f 	bl	402bdc <__sinit>
  40297e:	e7c2      	b.n	402906 <__swsetup_r+0x12>
  402980:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402982:	b151      	cbz	r1, 40299a <__swsetup_r+0xa6>
  402984:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402988:	4299      	cmp	r1, r3
  40298a:	d004      	beq.n	402996 <__swsetup_r+0xa2>
  40298c:	4628      	mov	r0, r5
  40298e:	f000 fa4b 	bl	402e28 <_free_r>
  402992:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402996:	2300      	movs	r3, #0
  402998:	6323      	str	r3, [r4, #48]	; 0x30
  40299a:	2300      	movs	r3, #0
  40299c:	6920      	ldr	r0, [r4, #16]
  40299e:	6063      	str	r3, [r4, #4]
  4029a0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4029a4:	6020      	str	r0, [r4, #0]
  4029a6:	e7c5      	b.n	402934 <__swsetup_r+0x40>
  4029a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4029ac:	2309      	movs	r3, #9
  4029ae:	602b      	str	r3, [r5, #0]
  4029b0:	f04f 30ff 	mov.w	r0, #4294967295
  4029b4:	81a2      	strh	r2, [r4, #12]
  4029b6:	bd38      	pop	{r3, r4, r5, pc}
  4029b8:	20400014 	.word	0x20400014

004029bc <register_fini>:
  4029bc:	4b02      	ldr	r3, [pc, #8]	; (4029c8 <register_fini+0xc>)
  4029be:	b113      	cbz	r3, 4029c6 <register_fini+0xa>
  4029c0:	4802      	ldr	r0, [pc, #8]	; (4029cc <register_fini+0x10>)
  4029c2:	f000 b80d 	b.w	4029e0 <atexit>
  4029c6:	4770      	bx	lr
  4029c8:	00000000 	.word	0x00000000
  4029cc:	00402c4d 	.word	0x00402c4d

004029d0 <abort>:
  4029d0:	b508      	push	{r3, lr}
  4029d2:	2006      	movs	r0, #6
  4029d4:	f001 fab4 	bl	403f40 <raise>
  4029d8:	2001      	movs	r0, #1
  4029da:	f7fe fe69 	bl	4016b0 <_exit>
  4029de:	bf00      	nop

004029e0 <atexit>:
  4029e0:	2300      	movs	r3, #0
  4029e2:	4601      	mov	r1, r0
  4029e4:	461a      	mov	r2, r3
  4029e6:	4618      	mov	r0, r3
  4029e8:	f001 bc3e 	b.w	404268 <__register_exitproc>

004029ec <__sflush_r>:
  4029ec:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4029f0:	b29a      	uxth	r2, r3
  4029f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4029f6:	460d      	mov	r5, r1
  4029f8:	0711      	lsls	r1, r2, #28
  4029fa:	4680      	mov	r8, r0
  4029fc:	d43a      	bmi.n	402a74 <__sflush_r+0x88>
  4029fe:	686a      	ldr	r2, [r5, #4]
  402a00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402a04:	2a00      	cmp	r2, #0
  402a06:	81ab      	strh	r3, [r5, #12]
  402a08:	dd6f      	ble.n	402aea <__sflush_r+0xfe>
  402a0a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402a0c:	2c00      	cmp	r4, #0
  402a0e:	d049      	beq.n	402aa4 <__sflush_r+0xb8>
  402a10:	2200      	movs	r2, #0
  402a12:	b29b      	uxth	r3, r3
  402a14:	f8d8 6000 	ldr.w	r6, [r8]
  402a18:	f8c8 2000 	str.w	r2, [r8]
  402a1c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  402a20:	d067      	beq.n	402af2 <__sflush_r+0x106>
  402a22:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402a24:	075f      	lsls	r7, r3, #29
  402a26:	d505      	bpl.n	402a34 <__sflush_r+0x48>
  402a28:	6869      	ldr	r1, [r5, #4]
  402a2a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402a2c:	1a52      	subs	r2, r2, r1
  402a2e:	b10b      	cbz	r3, 402a34 <__sflush_r+0x48>
  402a30:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402a32:	1ad2      	subs	r2, r2, r3
  402a34:	2300      	movs	r3, #0
  402a36:	69e9      	ldr	r1, [r5, #28]
  402a38:	4640      	mov	r0, r8
  402a3a:	47a0      	blx	r4
  402a3c:	1c44      	adds	r4, r0, #1
  402a3e:	d03c      	beq.n	402aba <__sflush_r+0xce>
  402a40:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402a44:	692a      	ldr	r2, [r5, #16]
  402a46:	602a      	str	r2, [r5, #0]
  402a48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402a4c:	2200      	movs	r2, #0
  402a4e:	81ab      	strh	r3, [r5, #12]
  402a50:	04db      	lsls	r3, r3, #19
  402a52:	606a      	str	r2, [r5, #4]
  402a54:	d447      	bmi.n	402ae6 <__sflush_r+0xfa>
  402a56:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402a58:	f8c8 6000 	str.w	r6, [r8]
  402a5c:	b311      	cbz	r1, 402aa4 <__sflush_r+0xb8>
  402a5e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  402a62:	4299      	cmp	r1, r3
  402a64:	d002      	beq.n	402a6c <__sflush_r+0x80>
  402a66:	4640      	mov	r0, r8
  402a68:	f000 f9de 	bl	402e28 <_free_r>
  402a6c:	2000      	movs	r0, #0
  402a6e:	6328      	str	r0, [r5, #48]	; 0x30
  402a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402a74:	692e      	ldr	r6, [r5, #16]
  402a76:	b1ae      	cbz	r6, 402aa4 <__sflush_r+0xb8>
  402a78:	682c      	ldr	r4, [r5, #0]
  402a7a:	602e      	str	r6, [r5, #0]
  402a7c:	0791      	lsls	r1, r2, #30
  402a7e:	bf0c      	ite	eq
  402a80:	696b      	ldreq	r3, [r5, #20]
  402a82:	2300      	movne	r3, #0
  402a84:	1ba4      	subs	r4, r4, r6
  402a86:	60ab      	str	r3, [r5, #8]
  402a88:	e00a      	b.n	402aa0 <__sflush_r+0xb4>
  402a8a:	4623      	mov	r3, r4
  402a8c:	4632      	mov	r2, r6
  402a8e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402a90:	69e9      	ldr	r1, [r5, #28]
  402a92:	4640      	mov	r0, r8
  402a94:	47b8      	blx	r7
  402a96:	2800      	cmp	r0, #0
  402a98:	eba4 0400 	sub.w	r4, r4, r0
  402a9c:	4406      	add	r6, r0
  402a9e:	dd04      	ble.n	402aaa <__sflush_r+0xbe>
  402aa0:	2c00      	cmp	r4, #0
  402aa2:	dcf2      	bgt.n	402a8a <__sflush_r+0x9e>
  402aa4:	2000      	movs	r0, #0
  402aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402aaa:	89ab      	ldrh	r3, [r5, #12]
  402aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402ab0:	81ab      	strh	r3, [r5, #12]
  402ab2:	f04f 30ff 	mov.w	r0, #4294967295
  402ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402aba:	f8d8 4000 	ldr.w	r4, [r8]
  402abe:	2c1d      	cmp	r4, #29
  402ac0:	d8f3      	bhi.n	402aaa <__sflush_r+0xbe>
  402ac2:	4b19      	ldr	r3, [pc, #100]	; (402b28 <__sflush_r+0x13c>)
  402ac4:	40e3      	lsrs	r3, r4
  402ac6:	43db      	mvns	r3, r3
  402ac8:	f013 0301 	ands.w	r3, r3, #1
  402acc:	d1ed      	bne.n	402aaa <__sflush_r+0xbe>
  402ace:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  402ad2:	606b      	str	r3, [r5, #4]
  402ad4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402ad8:	6929      	ldr	r1, [r5, #16]
  402ada:	81ab      	strh	r3, [r5, #12]
  402adc:	04da      	lsls	r2, r3, #19
  402ade:	6029      	str	r1, [r5, #0]
  402ae0:	d5b9      	bpl.n	402a56 <__sflush_r+0x6a>
  402ae2:	2c00      	cmp	r4, #0
  402ae4:	d1b7      	bne.n	402a56 <__sflush_r+0x6a>
  402ae6:	6528      	str	r0, [r5, #80]	; 0x50
  402ae8:	e7b5      	b.n	402a56 <__sflush_r+0x6a>
  402aea:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402aec:	2a00      	cmp	r2, #0
  402aee:	dc8c      	bgt.n	402a0a <__sflush_r+0x1e>
  402af0:	e7d8      	b.n	402aa4 <__sflush_r+0xb8>
  402af2:	2301      	movs	r3, #1
  402af4:	69e9      	ldr	r1, [r5, #28]
  402af6:	4640      	mov	r0, r8
  402af8:	47a0      	blx	r4
  402afa:	1c43      	adds	r3, r0, #1
  402afc:	4602      	mov	r2, r0
  402afe:	d002      	beq.n	402b06 <__sflush_r+0x11a>
  402b00:	89ab      	ldrh	r3, [r5, #12]
  402b02:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402b04:	e78e      	b.n	402a24 <__sflush_r+0x38>
  402b06:	f8d8 3000 	ldr.w	r3, [r8]
  402b0a:	2b00      	cmp	r3, #0
  402b0c:	d0f8      	beq.n	402b00 <__sflush_r+0x114>
  402b0e:	2b1d      	cmp	r3, #29
  402b10:	d001      	beq.n	402b16 <__sflush_r+0x12a>
  402b12:	2b16      	cmp	r3, #22
  402b14:	d102      	bne.n	402b1c <__sflush_r+0x130>
  402b16:	f8c8 6000 	str.w	r6, [r8]
  402b1a:	e7c3      	b.n	402aa4 <__sflush_r+0xb8>
  402b1c:	89ab      	ldrh	r3, [r5, #12]
  402b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402b22:	81ab      	strh	r3, [r5, #12]
  402b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402b28:	20400001 	.word	0x20400001

00402b2c <_fflush_r>:
  402b2c:	b538      	push	{r3, r4, r5, lr}
  402b2e:	460d      	mov	r5, r1
  402b30:	4604      	mov	r4, r0
  402b32:	b108      	cbz	r0, 402b38 <_fflush_r+0xc>
  402b34:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402b36:	b1bb      	cbz	r3, 402b68 <_fflush_r+0x3c>
  402b38:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402b3c:	b188      	cbz	r0, 402b62 <_fflush_r+0x36>
  402b3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402b40:	07db      	lsls	r3, r3, #31
  402b42:	d401      	bmi.n	402b48 <_fflush_r+0x1c>
  402b44:	0581      	lsls	r1, r0, #22
  402b46:	d517      	bpl.n	402b78 <_fflush_r+0x4c>
  402b48:	4620      	mov	r0, r4
  402b4a:	4629      	mov	r1, r5
  402b4c:	f7ff ff4e 	bl	4029ec <__sflush_r>
  402b50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402b52:	07da      	lsls	r2, r3, #31
  402b54:	4604      	mov	r4, r0
  402b56:	d402      	bmi.n	402b5e <_fflush_r+0x32>
  402b58:	89ab      	ldrh	r3, [r5, #12]
  402b5a:	059b      	lsls	r3, r3, #22
  402b5c:	d507      	bpl.n	402b6e <_fflush_r+0x42>
  402b5e:	4620      	mov	r0, r4
  402b60:	bd38      	pop	{r3, r4, r5, pc}
  402b62:	4604      	mov	r4, r0
  402b64:	4620      	mov	r0, r4
  402b66:	bd38      	pop	{r3, r4, r5, pc}
  402b68:	f000 f838 	bl	402bdc <__sinit>
  402b6c:	e7e4      	b.n	402b38 <_fflush_r+0xc>
  402b6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402b70:	f000 fbf6 	bl	403360 <__retarget_lock_release_recursive>
  402b74:	4620      	mov	r0, r4
  402b76:	bd38      	pop	{r3, r4, r5, pc}
  402b78:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402b7a:	f000 fbef 	bl	40335c <__retarget_lock_acquire_recursive>
  402b7e:	e7e3      	b.n	402b48 <_fflush_r+0x1c>

00402b80 <_cleanup_r>:
  402b80:	4901      	ldr	r1, [pc, #4]	; (402b88 <_cleanup_r+0x8>)
  402b82:	f000 bbaf 	b.w	4032e4 <_fwalk_reent>
  402b86:	bf00      	nop
  402b88:	00404351 	.word	0x00404351

00402b8c <std.isra.0>:
  402b8c:	b510      	push	{r4, lr}
  402b8e:	2300      	movs	r3, #0
  402b90:	4604      	mov	r4, r0
  402b92:	8181      	strh	r1, [r0, #12]
  402b94:	81c2      	strh	r2, [r0, #14]
  402b96:	6003      	str	r3, [r0, #0]
  402b98:	6043      	str	r3, [r0, #4]
  402b9a:	6083      	str	r3, [r0, #8]
  402b9c:	6643      	str	r3, [r0, #100]	; 0x64
  402b9e:	6103      	str	r3, [r0, #16]
  402ba0:	6143      	str	r3, [r0, #20]
  402ba2:	6183      	str	r3, [r0, #24]
  402ba4:	4619      	mov	r1, r3
  402ba6:	2208      	movs	r2, #8
  402ba8:	305c      	adds	r0, #92	; 0x5c
  402baa:	f7fe febb 	bl	401924 <memset>
  402bae:	4807      	ldr	r0, [pc, #28]	; (402bcc <std.isra.0+0x40>)
  402bb0:	4907      	ldr	r1, [pc, #28]	; (402bd0 <std.isra.0+0x44>)
  402bb2:	4a08      	ldr	r2, [pc, #32]	; (402bd4 <std.isra.0+0x48>)
  402bb4:	4b08      	ldr	r3, [pc, #32]	; (402bd8 <std.isra.0+0x4c>)
  402bb6:	6220      	str	r0, [r4, #32]
  402bb8:	61e4      	str	r4, [r4, #28]
  402bba:	6261      	str	r1, [r4, #36]	; 0x24
  402bbc:	62a2      	str	r2, [r4, #40]	; 0x28
  402bbe:	62e3      	str	r3, [r4, #44]	; 0x2c
  402bc0:	f104 0058 	add.w	r0, r4, #88	; 0x58
  402bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402bc8:	f000 bbc4 	b.w	403354 <__retarget_lock_init_recursive>
  402bcc:	00403f7d 	.word	0x00403f7d
  402bd0:	00403fa1 	.word	0x00403fa1
  402bd4:	00403fdd 	.word	0x00403fdd
  402bd8:	00403ffd 	.word	0x00403ffd

00402bdc <__sinit>:
  402bdc:	b510      	push	{r4, lr}
  402bde:	4604      	mov	r4, r0
  402be0:	4812      	ldr	r0, [pc, #72]	; (402c2c <__sinit+0x50>)
  402be2:	f000 fbbb 	bl	40335c <__retarget_lock_acquire_recursive>
  402be6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402be8:	b9d2      	cbnz	r2, 402c20 <__sinit+0x44>
  402bea:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  402bee:	4810      	ldr	r0, [pc, #64]	; (402c30 <__sinit+0x54>)
  402bf0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  402bf4:	2103      	movs	r1, #3
  402bf6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  402bfa:	63e0      	str	r0, [r4, #60]	; 0x3c
  402bfc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  402c00:	6860      	ldr	r0, [r4, #4]
  402c02:	2104      	movs	r1, #4
  402c04:	f7ff ffc2 	bl	402b8c <std.isra.0>
  402c08:	2201      	movs	r2, #1
  402c0a:	2109      	movs	r1, #9
  402c0c:	68a0      	ldr	r0, [r4, #8]
  402c0e:	f7ff ffbd 	bl	402b8c <std.isra.0>
  402c12:	2202      	movs	r2, #2
  402c14:	2112      	movs	r1, #18
  402c16:	68e0      	ldr	r0, [r4, #12]
  402c18:	f7ff ffb8 	bl	402b8c <std.isra.0>
  402c1c:	2301      	movs	r3, #1
  402c1e:	63a3      	str	r3, [r4, #56]	; 0x38
  402c20:	4802      	ldr	r0, [pc, #8]	; (402c2c <__sinit+0x50>)
  402c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402c26:	f000 bb9b 	b.w	403360 <__retarget_lock_release_recursive>
  402c2a:	bf00      	nop
  402c2c:	204014b4 	.word	0x204014b4
  402c30:	00402b81 	.word	0x00402b81

00402c34 <__sfp_lock_acquire>:
  402c34:	4801      	ldr	r0, [pc, #4]	; (402c3c <__sfp_lock_acquire+0x8>)
  402c36:	f000 bb91 	b.w	40335c <__retarget_lock_acquire_recursive>
  402c3a:	bf00      	nop
  402c3c:	204014c8 	.word	0x204014c8

00402c40 <__sfp_lock_release>:
  402c40:	4801      	ldr	r0, [pc, #4]	; (402c48 <__sfp_lock_release+0x8>)
  402c42:	f000 bb8d 	b.w	403360 <__retarget_lock_release_recursive>
  402c46:	bf00      	nop
  402c48:	204014c8 	.word	0x204014c8

00402c4c <__libc_fini_array>:
  402c4c:	b538      	push	{r3, r4, r5, lr}
  402c4e:	4c0a      	ldr	r4, [pc, #40]	; (402c78 <__libc_fini_array+0x2c>)
  402c50:	4d0a      	ldr	r5, [pc, #40]	; (402c7c <__libc_fini_array+0x30>)
  402c52:	1b64      	subs	r4, r4, r5
  402c54:	10a4      	asrs	r4, r4, #2
  402c56:	d00a      	beq.n	402c6e <__libc_fini_array+0x22>
  402c58:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402c5c:	3b01      	subs	r3, #1
  402c5e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402c62:	3c01      	subs	r4, #1
  402c64:	f855 3904 	ldr.w	r3, [r5], #-4
  402c68:	4798      	blx	r3
  402c6a:	2c00      	cmp	r4, #0
  402c6c:	d1f9      	bne.n	402c62 <__libc_fini_array+0x16>
  402c6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402c72:	f002 b8dd 	b.w	404e30 <_fini>
  402c76:	bf00      	nop
  402c78:	00404e40 	.word	0x00404e40
  402c7c:	00404e3c 	.word	0x00404e3c

00402c80 <__fputwc>:
  402c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402c84:	b082      	sub	sp, #8
  402c86:	4680      	mov	r8, r0
  402c88:	4689      	mov	r9, r1
  402c8a:	4614      	mov	r4, r2
  402c8c:	f000 fb54 	bl	403338 <__locale_mb_cur_max>
  402c90:	2801      	cmp	r0, #1
  402c92:	d036      	beq.n	402d02 <__fputwc+0x82>
  402c94:	464a      	mov	r2, r9
  402c96:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402c9a:	a901      	add	r1, sp, #4
  402c9c:	4640      	mov	r0, r8
  402c9e:	f001 fa95 	bl	4041cc <_wcrtomb_r>
  402ca2:	1c42      	adds	r2, r0, #1
  402ca4:	4606      	mov	r6, r0
  402ca6:	d025      	beq.n	402cf4 <__fputwc+0x74>
  402ca8:	b3a8      	cbz	r0, 402d16 <__fputwc+0x96>
  402caa:	f89d e004 	ldrb.w	lr, [sp, #4]
  402cae:	2500      	movs	r5, #0
  402cb0:	f10d 0a04 	add.w	sl, sp, #4
  402cb4:	e009      	b.n	402cca <__fputwc+0x4a>
  402cb6:	6823      	ldr	r3, [r4, #0]
  402cb8:	1c5a      	adds	r2, r3, #1
  402cba:	6022      	str	r2, [r4, #0]
  402cbc:	f883 e000 	strb.w	lr, [r3]
  402cc0:	3501      	adds	r5, #1
  402cc2:	42b5      	cmp	r5, r6
  402cc4:	d227      	bcs.n	402d16 <__fputwc+0x96>
  402cc6:	f815 e00a 	ldrb.w	lr, [r5, sl]
  402cca:	68a3      	ldr	r3, [r4, #8]
  402ccc:	3b01      	subs	r3, #1
  402cce:	2b00      	cmp	r3, #0
  402cd0:	60a3      	str	r3, [r4, #8]
  402cd2:	daf0      	bge.n	402cb6 <__fputwc+0x36>
  402cd4:	69a7      	ldr	r7, [r4, #24]
  402cd6:	42bb      	cmp	r3, r7
  402cd8:	4671      	mov	r1, lr
  402cda:	4622      	mov	r2, r4
  402cdc:	4640      	mov	r0, r8
  402cde:	db02      	blt.n	402ce6 <__fputwc+0x66>
  402ce0:	f1be 0f0a 	cmp.w	lr, #10
  402ce4:	d1e7      	bne.n	402cb6 <__fputwc+0x36>
  402ce6:	f001 fa19 	bl	40411c <__swbuf_r>
  402cea:	1c43      	adds	r3, r0, #1
  402cec:	d1e8      	bne.n	402cc0 <__fputwc+0x40>
  402cee:	b002      	add	sp, #8
  402cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402cf4:	89a3      	ldrh	r3, [r4, #12]
  402cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402cfa:	81a3      	strh	r3, [r4, #12]
  402cfc:	b002      	add	sp, #8
  402cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d02:	f109 33ff 	add.w	r3, r9, #4294967295
  402d06:	2bfe      	cmp	r3, #254	; 0xfe
  402d08:	d8c4      	bhi.n	402c94 <__fputwc+0x14>
  402d0a:	fa5f fe89 	uxtb.w	lr, r9
  402d0e:	4606      	mov	r6, r0
  402d10:	f88d e004 	strb.w	lr, [sp, #4]
  402d14:	e7cb      	b.n	402cae <__fputwc+0x2e>
  402d16:	4648      	mov	r0, r9
  402d18:	b002      	add	sp, #8
  402d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d1e:	bf00      	nop

00402d20 <_fputwc_r>:
  402d20:	b530      	push	{r4, r5, lr}
  402d22:	6e53      	ldr	r3, [r2, #100]	; 0x64
  402d24:	f013 0f01 	tst.w	r3, #1
  402d28:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402d2c:	4614      	mov	r4, r2
  402d2e:	b083      	sub	sp, #12
  402d30:	4605      	mov	r5, r0
  402d32:	b29a      	uxth	r2, r3
  402d34:	d101      	bne.n	402d3a <_fputwc_r+0x1a>
  402d36:	0590      	lsls	r0, r2, #22
  402d38:	d51c      	bpl.n	402d74 <_fputwc_r+0x54>
  402d3a:	0490      	lsls	r0, r2, #18
  402d3c:	d406      	bmi.n	402d4c <_fputwc_r+0x2c>
  402d3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  402d40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402d44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402d48:	81a3      	strh	r3, [r4, #12]
  402d4a:	6662      	str	r2, [r4, #100]	; 0x64
  402d4c:	4628      	mov	r0, r5
  402d4e:	4622      	mov	r2, r4
  402d50:	f7ff ff96 	bl	402c80 <__fputwc>
  402d54:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402d56:	07da      	lsls	r2, r3, #31
  402d58:	4605      	mov	r5, r0
  402d5a:	d402      	bmi.n	402d62 <_fputwc_r+0x42>
  402d5c:	89a3      	ldrh	r3, [r4, #12]
  402d5e:	059b      	lsls	r3, r3, #22
  402d60:	d502      	bpl.n	402d68 <_fputwc_r+0x48>
  402d62:	4628      	mov	r0, r5
  402d64:	b003      	add	sp, #12
  402d66:	bd30      	pop	{r4, r5, pc}
  402d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402d6a:	f000 faf9 	bl	403360 <__retarget_lock_release_recursive>
  402d6e:	4628      	mov	r0, r5
  402d70:	b003      	add	sp, #12
  402d72:	bd30      	pop	{r4, r5, pc}
  402d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402d76:	9101      	str	r1, [sp, #4]
  402d78:	f000 faf0 	bl	40335c <__retarget_lock_acquire_recursive>
  402d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402d80:	9901      	ldr	r1, [sp, #4]
  402d82:	b29a      	uxth	r2, r3
  402d84:	e7d9      	b.n	402d3a <_fputwc_r+0x1a>
  402d86:	bf00      	nop

00402d88 <_malloc_trim_r>:
  402d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402d8a:	4f24      	ldr	r7, [pc, #144]	; (402e1c <_malloc_trim_r+0x94>)
  402d8c:	460c      	mov	r4, r1
  402d8e:	4606      	mov	r6, r0
  402d90:	f000 fee2 	bl	403b58 <__malloc_lock>
  402d94:	68bb      	ldr	r3, [r7, #8]
  402d96:	685d      	ldr	r5, [r3, #4]
  402d98:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402d9c:	310f      	adds	r1, #15
  402d9e:	f025 0503 	bic.w	r5, r5, #3
  402da2:	4429      	add	r1, r5
  402da4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402da8:	f021 010f 	bic.w	r1, r1, #15
  402dac:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  402db0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402db4:	db07      	blt.n	402dc6 <_malloc_trim_r+0x3e>
  402db6:	2100      	movs	r1, #0
  402db8:	4630      	mov	r0, r6
  402dba:	f001 f87f 	bl	403ebc <_sbrk_r>
  402dbe:	68bb      	ldr	r3, [r7, #8]
  402dc0:	442b      	add	r3, r5
  402dc2:	4298      	cmp	r0, r3
  402dc4:	d004      	beq.n	402dd0 <_malloc_trim_r+0x48>
  402dc6:	4630      	mov	r0, r6
  402dc8:	f000 fecc 	bl	403b64 <__malloc_unlock>
  402dcc:	2000      	movs	r0, #0
  402dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402dd0:	4261      	negs	r1, r4
  402dd2:	4630      	mov	r0, r6
  402dd4:	f001 f872 	bl	403ebc <_sbrk_r>
  402dd8:	3001      	adds	r0, #1
  402dda:	d00d      	beq.n	402df8 <_malloc_trim_r+0x70>
  402ddc:	4b10      	ldr	r3, [pc, #64]	; (402e20 <_malloc_trim_r+0x98>)
  402dde:	68ba      	ldr	r2, [r7, #8]
  402de0:	6819      	ldr	r1, [r3, #0]
  402de2:	1b2d      	subs	r5, r5, r4
  402de4:	f045 0501 	orr.w	r5, r5, #1
  402de8:	4630      	mov	r0, r6
  402dea:	1b09      	subs	r1, r1, r4
  402dec:	6055      	str	r5, [r2, #4]
  402dee:	6019      	str	r1, [r3, #0]
  402df0:	f000 feb8 	bl	403b64 <__malloc_unlock>
  402df4:	2001      	movs	r0, #1
  402df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402df8:	2100      	movs	r1, #0
  402dfa:	4630      	mov	r0, r6
  402dfc:	f001 f85e 	bl	403ebc <_sbrk_r>
  402e00:	68ba      	ldr	r2, [r7, #8]
  402e02:	1a83      	subs	r3, r0, r2
  402e04:	2b0f      	cmp	r3, #15
  402e06:	ddde      	ble.n	402dc6 <_malloc_trim_r+0x3e>
  402e08:	4c06      	ldr	r4, [pc, #24]	; (402e24 <_malloc_trim_r+0x9c>)
  402e0a:	4905      	ldr	r1, [pc, #20]	; (402e20 <_malloc_trim_r+0x98>)
  402e0c:	6824      	ldr	r4, [r4, #0]
  402e0e:	f043 0301 	orr.w	r3, r3, #1
  402e12:	1b00      	subs	r0, r0, r4
  402e14:	6053      	str	r3, [r2, #4]
  402e16:	6008      	str	r0, [r1, #0]
  402e18:	e7d5      	b.n	402dc6 <_malloc_trim_r+0x3e>
  402e1a:	bf00      	nop
  402e1c:	204005b0 	.word	0x204005b0
  402e20:	20401468 	.word	0x20401468
  402e24:	204009b8 	.word	0x204009b8

00402e28 <_free_r>:
  402e28:	2900      	cmp	r1, #0
  402e2a:	d044      	beq.n	402eb6 <_free_r+0x8e>
  402e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402e30:	460d      	mov	r5, r1
  402e32:	4680      	mov	r8, r0
  402e34:	f000 fe90 	bl	403b58 <__malloc_lock>
  402e38:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402e3c:	4969      	ldr	r1, [pc, #420]	; (402fe4 <_free_r+0x1bc>)
  402e3e:	f027 0301 	bic.w	r3, r7, #1
  402e42:	f1a5 0408 	sub.w	r4, r5, #8
  402e46:	18e2      	adds	r2, r4, r3
  402e48:	688e      	ldr	r6, [r1, #8]
  402e4a:	6850      	ldr	r0, [r2, #4]
  402e4c:	42b2      	cmp	r2, r6
  402e4e:	f020 0003 	bic.w	r0, r0, #3
  402e52:	d05e      	beq.n	402f12 <_free_r+0xea>
  402e54:	07fe      	lsls	r6, r7, #31
  402e56:	6050      	str	r0, [r2, #4]
  402e58:	d40b      	bmi.n	402e72 <_free_r+0x4a>
  402e5a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  402e5e:	1be4      	subs	r4, r4, r7
  402e60:	f101 0e08 	add.w	lr, r1, #8
  402e64:	68a5      	ldr	r5, [r4, #8]
  402e66:	4575      	cmp	r5, lr
  402e68:	443b      	add	r3, r7
  402e6a:	d06d      	beq.n	402f48 <_free_r+0x120>
  402e6c:	68e7      	ldr	r7, [r4, #12]
  402e6e:	60ef      	str	r7, [r5, #12]
  402e70:	60bd      	str	r5, [r7, #8]
  402e72:	1815      	adds	r5, r2, r0
  402e74:	686d      	ldr	r5, [r5, #4]
  402e76:	07ed      	lsls	r5, r5, #31
  402e78:	d53e      	bpl.n	402ef8 <_free_r+0xd0>
  402e7a:	f043 0201 	orr.w	r2, r3, #1
  402e7e:	6062      	str	r2, [r4, #4]
  402e80:	50e3      	str	r3, [r4, r3]
  402e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402e86:	d217      	bcs.n	402eb8 <_free_r+0x90>
  402e88:	08db      	lsrs	r3, r3, #3
  402e8a:	1c58      	adds	r0, r3, #1
  402e8c:	109a      	asrs	r2, r3, #2
  402e8e:	684d      	ldr	r5, [r1, #4]
  402e90:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  402e94:	60a7      	str	r7, [r4, #8]
  402e96:	2301      	movs	r3, #1
  402e98:	4093      	lsls	r3, r2
  402e9a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  402e9e:	432b      	orrs	r3, r5
  402ea0:	3a08      	subs	r2, #8
  402ea2:	60e2      	str	r2, [r4, #12]
  402ea4:	604b      	str	r3, [r1, #4]
  402ea6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  402eaa:	60fc      	str	r4, [r7, #12]
  402eac:	4640      	mov	r0, r8
  402eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402eb2:	f000 be57 	b.w	403b64 <__malloc_unlock>
  402eb6:	4770      	bx	lr
  402eb8:	0a5a      	lsrs	r2, r3, #9
  402eba:	2a04      	cmp	r2, #4
  402ebc:	d852      	bhi.n	402f64 <_free_r+0x13c>
  402ebe:	099a      	lsrs	r2, r3, #6
  402ec0:	f102 0739 	add.w	r7, r2, #57	; 0x39
  402ec4:	00ff      	lsls	r7, r7, #3
  402ec6:	f102 0538 	add.w	r5, r2, #56	; 0x38
  402eca:	19c8      	adds	r0, r1, r7
  402ecc:	59ca      	ldr	r2, [r1, r7]
  402ece:	3808      	subs	r0, #8
  402ed0:	4290      	cmp	r0, r2
  402ed2:	d04f      	beq.n	402f74 <_free_r+0x14c>
  402ed4:	6851      	ldr	r1, [r2, #4]
  402ed6:	f021 0103 	bic.w	r1, r1, #3
  402eda:	428b      	cmp	r3, r1
  402edc:	d232      	bcs.n	402f44 <_free_r+0x11c>
  402ede:	6892      	ldr	r2, [r2, #8]
  402ee0:	4290      	cmp	r0, r2
  402ee2:	d1f7      	bne.n	402ed4 <_free_r+0xac>
  402ee4:	68c3      	ldr	r3, [r0, #12]
  402ee6:	60a0      	str	r0, [r4, #8]
  402ee8:	60e3      	str	r3, [r4, #12]
  402eea:	609c      	str	r4, [r3, #8]
  402eec:	60c4      	str	r4, [r0, #12]
  402eee:	4640      	mov	r0, r8
  402ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402ef4:	f000 be36 	b.w	403b64 <__malloc_unlock>
  402ef8:	6895      	ldr	r5, [r2, #8]
  402efa:	4f3b      	ldr	r7, [pc, #236]	; (402fe8 <_free_r+0x1c0>)
  402efc:	42bd      	cmp	r5, r7
  402efe:	4403      	add	r3, r0
  402f00:	d040      	beq.n	402f84 <_free_r+0x15c>
  402f02:	68d0      	ldr	r0, [r2, #12]
  402f04:	60e8      	str	r0, [r5, #12]
  402f06:	f043 0201 	orr.w	r2, r3, #1
  402f0a:	6085      	str	r5, [r0, #8]
  402f0c:	6062      	str	r2, [r4, #4]
  402f0e:	50e3      	str	r3, [r4, r3]
  402f10:	e7b7      	b.n	402e82 <_free_r+0x5a>
  402f12:	07ff      	lsls	r7, r7, #31
  402f14:	4403      	add	r3, r0
  402f16:	d407      	bmi.n	402f28 <_free_r+0x100>
  402f18:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402f1c:	1aa4      	subs	r4, r4, r2
  402f1e:	4413      	add	r3, r2
  402f20:	68a0      	ldr	r0, [r4, #8]
  402f22:	68e2      	ldr	r2, [r4, #12]
  402f24:	60c2      	str	r2, [r0, #12]
  402f26:	6090      	str	r0, [r2, #8]
  402f28:	4a30      	ldr	r2, [pc, #192]	; (402fec <_free_r+0x1c4>)
  402f2a:	6812      	ldr	r2, [r2, #0]
  402f2c:	f043 0001 	orr.w	r0, r3, #1
  402f30:	4293      	cmp	r3, r2
  402f32:	6060      	str	r0, [r4, #4]
  402f34:	608c      	str	r4, [r1, #8]
  402f36:	d3b9      	bcc.n	402eac <_free_r+0x84>
  402f38:	4b2d      	ldr	r3, [pc, #180]	; (402ff0 <_free_r+0x1c8>)
  402f3a:	4640      	mov	r0, r8
  402f3c:	6819      	ldr	r1, [r3, #0]
  402f3e:	f7ff ff23 	bl	402d88 <_malloc_trim_r>
  402f42:	e7b3      	b.n	402eac <_free_r+0x84>
  402f44:	4610      	mov	r0, r2
  402f46:	e7cd      	b.n	402ee4 <_free_r+0xbc>
  402f48:	1811      	adds	r1, r2, r0
  402f4a:	6849      	ldr	r1, [r1, #4]
  402f4c:	07c9      	lsls	r1, r1, #31
  402f4e:	d444      	bmi.n	402fda <_free_r+0x1b2>
  402f50:	6891      	ldr	r1, [r2, #8]
  402f52:	68d2      	ldr	r2, [r2, #12]
  402f54:	60ca      	str	r2, [r1, #12]
  402f56:	4403      	add	r3, r0
  402f58:	f043 0001 	orr.w	r0, r3, #1
  402f5c:	6091      	str	r1, [r2, #8]
  402f5e:	6060      	str	r0, [r4, #4]
  402f60:	50e3      	str	r3, [r4, r3]
  402f62:	e7a3      	b.n	402eac <_free_r+0x84>
  402f64:	2a14      	cmp	r2, #20
  402f66:	d816      	bhi.n	402f96 <_free_r+0x16e>
  402f68:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402f6c:	00ff      	lsls	r7, r7, #3
  402f6e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  402f72:	e7aa      	b.n	402eca <_free_r+0xa2>
  402f74:	10aa      	asrs	r2, r5, #2
  402f76:	2301      	movs	r3, #1
  402f78:	684d      	ldr	r5, [r1, #4]
  402f7a:	4093      	lsls	r3, r2
  402f7c:	432b      	orrs	r3, r5
  402f7e:	604b      	str	r3, [r1, #4]
  402f80:	4603      	mov	r3, r0
  402f82:	e7b0      	b.n	402ee6 <_free_r+0xbe>
  402f84:	f043 0201 	orr.w	r2, r3, #1
  402f88:	614c      	str	r4, [r1, #20]
  402f8a:	610c      	str	r4, [r1, #16]
  402f8c:	60e5      	str	r5, [r4, #12]
  402f8e:	60a5      	str	r5, [r4, #8]
  402f90:	6062      	str	r2, [r4, #4]
  402f92:	50e3      	str	r3, [r4, r3]
  402f94:	e78a      	b.n	402eac <_free_r+0x84>
  402f96:	2a54      	cmp	r2, #84	; 0x54
  402f98:	d806      	bhi.n	402fa8 <_free_r+0x180>
  402f9a:	0b1a      	lsrs	r2, r3, #12
  402f9c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  402fa0:	00ff      	lsls	r7, r7, #3
  402fa2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  402fa6:	e790      	b.n	402eca <_free_r+0xa2>
  402fa8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402fac:	d806      	bhi.n	402fbc <_free_r+0x194>
  402fae:	0bda      	lsrs	r2, r3, #15
  402fb0:	f102 0778 	add.w	r7, r2, #120	; 0x78
  402fb4:	00ff      	lsls	r7, r7, #3
  402fb6:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402fba:	e786      	b.n	402eca <_free_r+0xa2>
  402fbc:	f240 5054 	movw	r0, #1364	; 0x554
  402fc0:	4282      	cmp	r2, r0
  402fc2:	d806      	bhi.n	402fd2 <_free_r+0x1aa>
  402fc4:	0c9a      	lsrs	r2, r3, #18
  402fc6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  402fca:	00ff      	lsls	r7, r7, #3
  402fcc:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  402fd0:	e77b      	b.n	402eca <_free_r+0xa2>
  402fd2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  402fd6:	257e      	movs	r5, #126	; 0x7e
  402fd8:	e777      	b.n	402eca <_free_r+0xa2>
  402fda:	f043 0101 	orr.w	r1, r3, #1
  402fde:	6061      	str	r1, [r4, #4]
  402fe0:	6013      	str	r3, [r2, #0]
  402fe2:	e763      	b.n	402eac <_free_r+0x84>
  402fe4:	204005b0 	.word	0x204005b0
  402fe8:	204005b8 	.word	0x204005b8
  402fec:	204009bc 	.word	0x204009bc
  402ff0:	20401498 	.word	0x20401498

00402ff4 <__sfvwrite_r>:
  402ff4:	6893      	ldr	r3, [r2, #8]
  402ff6:	2b00      	cmp	r3, #0
  402ff8:	d073      	beq.n	4030e2 <__sfvwrite_r+0xee>
  402ffa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402ffe:	898b      	ldrh	r3, [r1, #12]
  403000:	b083      	sub	sp, #12
  403002:	460c      	mov	r4, r1
  403004:	0719      	lsls	r1, r3, #28
  403006:	9000      	str	r0, [sp, #0]
  403008:	4616      	mov	r6, r2
  40300a:	d526      	bpl.n	40305a <__sfvwrite_r+0x66>
  40300c:	6922      	ldr	r2, [r4, #16]
  40300e:	b322      	cbz	r2, 40305a <__sfvwrite_r+0x66>
  403010:	f013 0002 	ands.w	r0, r3, #2
  403014:	6835      	ldr	r5, [r6, #0]
  403016:	d02c      	beq.n	403072 <__sfvwrite_r+0x7e>
  403018:	f04f 0900 	mov.w	r9, #0
  40301c:	4fb0      	ldr	r7, [pc, #704]	; (4032e0 <__sfvwrite_r+0x2ec>)
  40301e:	46c8      	mov	r8, r9
  403020:	46b2      	mov	sl, r6
  403022:	45b8      	cmp	r8, r7
  403024:	4643      	mov	r3, r8
  403026:	464a      	mov	r2, r9
  403028:	bf28      	it	cs
  40302a:	463b      	movcs	r3, r7
  40302c:	9800      	ldr	r0, [sp, #0]
  40302e:	f1b8 0f00 	cmp.w	r8, #0
  403032:	d050      	beq.n	4030d6 <__sfvwrite_r+0xe2>
  403034:	69e1      	ldr	r1, [r4, #28]
  403036:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403038:	47b0      	blx	r6
  40303a:	2800      	cmp	r0, #0
  40303c:	dd58      	ble.n	4030f0 <__sfvwrite_r+0xfc>
  40303e:	f8da 3008 	ldr.w	r3, [sl, #8]
  403042:	1a1b      	subs	r3, r3, r0
  403044:	4481      	add	r9, r0
  403046:	eba8 0800 	sub.w	r8, r8, r0
  40304a:	f8ca 3008 	str.w	r3, [sl, #8]
  40304e:	2b00      	cmp	r3, #0
  403050:	d1e7      	bne.n	403022 <__sfvwrite_r+0x2e>
  403052:	2000      	movs	r0, #0
  403054:	b003      	add	sp, #12
  403056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40305a:	4621      	mov	r1, r4
  40305c:	9800      	ldr	r0, [sp, #0]
  40305e:	f7ff fc49 	bl	4028f4 <__swsetup_r>
  403062:	2800      	cmp	r0, #0
  403064:	f040 8133 	bne.w	4032ce <__sfvwrite_r+0x2da>
  403068:	89a3      	ldrh	r3, [r4, #12]
  40306a:	6835      	ldr	r5, [r6, #0]
  40306c:	f013 0002 	ands.w	r0, r3, #2
  403070:	d1d2      	bne.n	403018 <__sfvwrite_r+0x24>
  403072:	f013 0901 	ands.w	r9, r3, #1
  403076:	d145      	bne.n	403104 <__sfvwrite_r+0x110>
  403078:	464f      	mov	r7, r9
  40307a:	9601      	str	r6, [sp, #4]
  40307c:	b337      	cbz	r7, 4030cc <__sfvwrite_r+0xd8>
  40307e:	059a      	lsls	r2, r3, #22
  403080:	f8d4 8008 	ldr.w	r8, [r4, #8]
  403084:	f140 8083 	bpl.w	40318e <__sfvwrite_r+0x19a>
  403088:	4547      	cmp	r7, r8
  40308a:	46c3      	mov	fp, r8
  40308c:	f0c0 80ab 	bcc.w	4031e6 <__sfvwrite_r+0x1f2>
  403090:	f413 6f90 	tst.w	r3, #1152	; 0x480
  403094:	f040 80ac 	bne.w	4031f0 <__sfvwrite_r+0x1fc>
  403098:	6820      	ldr	r0, [r4, #0]
  40309a:	46ba      	mov	sl, r7
  40309c:	465a      	mov	r2, fp
  40309e:	4649      	mov	r1, r9
  4030a0:	f000 fcf6 	bl	403a90 <memmove>
  4030a4:	68a2      	ldr	r2, [r4, #8]
  4030a6:	6823      	ldr	r3, [r4, #0]
  4030a8:	eba2 0208 	sub.w	r2, r2, r8
  4030ac:	445b      	add	r3, fp
  4030ae:	60a2      	str	r2, [r4, #8]
  4030b0:	6023      	str	r3, [r4, #0]
  4030b2:	9a01      	ldr	r2, [sp, #4]
  4030b4:	6893      	ldr	r3, [r2, #8]
  4030b6:	eba3 030a 	sub.w	r3, r3, sl
  4030ba:	44d1      	add	r9, sl
  4030bc:	eba7 070a 	sub.w	r7, r7, sl
  4030c0:	6093      	str	r3, [r2, #8]
  4030c2:	2b00      	cmp	r3, #0
  4030c4:	d0c5      	beq.n	403052 <__sfvwrite_r+0x5e>
  4030c6:	89a3      	ldrh	r3, [r4, #12]
  4030c8:	2f00      	cmp	r7, #0
  4030ca:	d1d8      	bne.n	40307e <__sfvwrite_r+0x8a>
  4030cc:	f8d5 9000 	ldr.w	r9, [r5]
  4030d0:	686f      	ldr	r7, [r5, #4]
  4030d2:	3508      	adds	r5, #8
  4030d4:	e7d2      	b.n	40307c <__sfvwrite_r+0x88>
  4030d6:	f8d5 9000 	ldr.w	r9, [r5]
  4030da:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4030de:	3508      	adds	r5, #8
  4030e0:	e79f      	b.n	403022 <__sfvwrite_r+0x2e>
  4030e2:	2000      	movs	r0, #0
  4030e4:	4770      	bx	lr
  4030e6:	4621      	mov	r1, r4
  4030e8:	9800      	ldr	r0, [sp, #0]
  4030ea:	f7ff fd1f 	bl	402b2c <_fflush_r>
  4030ee:	b370      	cbz	r0, 40314e <__sfvwrite_r+0x15a>
  4030f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4030f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4030f8:	f04f 30ff 	mov.w	r0, #4294967295
  4030fc:	81a3      	strh	r3, [r4, #12]
  4030fe:	b003      	add	sp, #12
  403100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403104:	4681      	mov	r9, r0
  403106:	4633      	mov	r3, r6
  403108:	464e      	mov	r6, r9
  40310a:	46a8      	mov	r8, r5
  40310c:	469a      	mov	sl, r3
  40310e:	464d      	mov	r5, r9
  403110:	b34e      	cbz	r6, 403166 <__sfvwrite_r+0x172>
  403112:	b380      	cbz	r0, 403176 <__sfvwrite_r+0x182>
  403114:	6820      	ldr	r0, [r4, #0]
  403116:	6923      	ldr	r3, [r4, #16]
  403118:	6962      	ldr	r2, [r4, #20]
  40311a:	45b1      	cmp	r9, r6
  40311c:	46cb      	mov	fp, r9
  40311e:	bf28      	it	cs
  403120:	46b3      	movcs	fp, r6
  403122:	4298      	cmp	r0, r3
  403124:	465f      	mov	r7, fp
  403126:	d904      	bls.n	403132 <__sfvwrite_r+0x13e>
  403128:	68a3      	ldr	r3, [r4, #8]
  40312a:	4413      	add	r3, r2
  40312c:	459b      	cmp	fp, r3
  40312e:	f300 80a6 	bgt.w	40327e <__sfvwrite_r+0x28a>
  403132:	4593      	cmp	fp, r2
  403134:	db4b      	blt.n	4031ce <__sfvwrite_r+0x1da>
  403136:	4613      	mov	r3, r2
  403138:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40313a:	69e1      	ldr	r1, [r4, #28]
  40313c:	9800      	ldr	r0, [sp, #0]
  40313e:	462a      	mov	r2, r5
  403140:	47b8      	blx	r7
  403142:	1e07      	subs	r7, r0, #0
  403144:	ddd4      	ble.n	4030f0 <__sfvwrite_r+0xfc>
  403146:	ebb9 0907 	subs.w	r9, r9, r7
  40314a:	d0cc      	beq.n	4030e6 <__sfvwrite_r+0xf2>
  40314c:	2001      	movs	r0, #1
  40314e:	f8da 3008 	ldr.w	r3, [sl, #8]
  403152:	1bdb      	subs	r3, r3, r7
  403154:	443d      	add	r5, r7
  403156:	1bf6      	subs	r6, r6, r7
  403158:	f8ca 3008 	str.w	r3, [sl, #8]
  40315c:	2b00      	cmp	r3, #0
  40315e:	f43f af78 	beq.w	403052 <__sfvwrite_r+0x5e>
  403162:	2e00      	cmp	r6, #0
  403164:	d1d5      	bne.n	403112 <__sfvwrite_r+0x11e>
  403166:	f108 0308 	add.w	r3, r8, #8
  40316a:	e913 0060 	ldmdb	r3, {r5, r6}
  40316e:	4698      	mov	r8, r3
  403170:	3308      	adds	r3, #8
  403172:	2e00      	cmp	r6, #0
  403174:	d0f9      	beq.n	40316a <__sfvwrite_r+0x176>
  403176:	4632      	mov	r2, r6
  403178:	210a      	movs	r1, #10
  40317a:	4628      	mov	r0, r5
  40317c:	f000 fc38 	bl	4039f0 <memchr>
  403180:	2800      	cmp	r0, #0
  403182:	f000 80a1 	beq.w	4032c8 <__sfvwrite_r+0x2d4>
  403186:	3001      	adds	r0, #1
  403188:	eba0 0905 	sub.w	r9, r0, r5
  40318c:	e7c2      	b.n	403114 <__sfvwrite_r+0x120>
  40318e:	6820      	ldr	r0, [r4, #0]
  403190:	6923      	ldr	r3, [r4, #16]
  403192:	4298      	cmp	r0, r3
  403194:	d802      	bhi.n	40319c <__sfvwrite_r+0x1a8>
  403196:	6963      	ldr	r3, [r4, #20]
  403198:	429f      	cmp	r7, r3
  40319a:	d25d      	bcs.n	403258 <__sfvwrite_r+0x264>
  40319c:	45b8      	cmp	r8, r7
  40319e:	bf28      	it	cs
  4031a0:	46b8      	movcs	r8, r7
  4031a2:	4642      	mov	r2, r8
  4031a4:	4649      	mov	r1, r9
  4031a6:	f000 fc73 	bl	403a90 <memmove>
  4031aa:	68a3      	ldr	r3, [r4, #8]
  4031ac:	6822      	ldr	r2, [r4, #0]
  4031ae:	eba3 0308 	sub.w	r3, r3, r8
  4031b2:	4442      	add	r2, r8
  4031b4:	60a3      	str	r3, [r4, #8]
  4031b6:	6022      	str	r2, [r4, #0]
  4031b8:	b10b      	cbz	r3, 4031be <__sfvwrite_r+0x1ca>
  4031ba:	46c2      	mov	sl, r8
  4031bc:	e779      	b.n	4030b2 <__sfvwrite_r+0xbe>
  4031be:	4621      	mov	r1, r4
  4031c0:	9800      	ldr	r0, [sp, #0]
  4031c2:	f7ff fcb3 	bl	402b2c <_fflush_r>
  4031c6:	2800      	cmp	r0, #0
  4031c8:	d192      	bne.n	4030f0 <__sfvwrite_r+0xfc>
  4031ca:	46c2      	mov	sl, r8
  4031cc:	e771      	b.n	4030b2 <__sfvwrite_r+0xbe>
  4031ce:	465a      	mov	r2, fp
  4031d0:	4629      	mov	r1, r5
  4031d2:	f000 fc5d 	bl	403a90 <memmove>
  4031d6:	68a2      	ldr	r2, [r4, #8]
  4031d8:	6823      	ldr	r3, [r4, #0]
  4031da:	eba2 020b 	sub.w	r2, r2, fp
  4031de:	445b      	add	r3, fp
  4031e0:	60a2      	str	r2, [r4, #8]
  4031e2:	6023      	str	r3, [r4, #0]
  4031e4:	e7af      	b.n	403146 <__sfvwrite_r+0x152>
  4031e6:	6820      	ldr	r0, [r4, #0]
  4031e8:	46b8      	mov	r8, r7
  4031ea:	46ba      	mov	sl, r7
  4031ec:	46bb      	mov	fp, r7
  4031ee:	e755      	b.n	40309c <__sfvwrite_r+0xa8>
  4031f0:	6962      	ldr	r2, [r4, #20]
  4031f2:	6820      	ldr	r0, [r4, #0]
  4031f4:	6921      	ldr	r1, [r4, #16]
  4031f6:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4031fa:	eba0 0a01 	sub.w	sl, r0, r1
  4031fe:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  403202:	f10a 0001 	add.w	r0, sl, #1
  403206:	ea4f 0868 	mov.w	r8, r8, asr #1
  40320a:	4438      	add	r0, r7
  40320c:	4540      	cmp	r0, r8
  40320e:	4642      	mov	r2, r8
  403210:	bf84      	itt	hi
  403212:	4680      	movhi	r8, r0
  403214:	4642      	movhi	r2, r8
  403216:	055b      	lsls	r3, r3, #21
  403218:	d544      	bpl.n	4032a4 <__sfvwrite_r+0x2b0>
  40321a:	4611      	mov	r1, r2
  40321c:	9800      	ldr	r0, [sp, #0]
  40321e:	f000 f921 	bl	403464 <_malloc_r>
  403222:	4683      	mov	fp, r0
  403224:	2800      	cmp	r0, #0
  403226:	d055      	beq.n	4032d4 <__sfvwrite_r+0x2e0>
  403228:	4652      	mov	r2, sl
  40322a:	6921      	ldr	r1, [r4, #16]
  40322c:	f7fe fae0 	bl	4017f0 <memcpy>
  403230:	89a3      	ldrh	r3, [r4, #12]
  403232:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  403236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40323a:	81a3      	strh	r3, [r4, #12]
  40323c:	eb0b 000a 	add.w	r0, fp, sl
  403240:	eba8 030a 	sub.w	r3, r8, sl
  403244:	f8c4 b010 	str.w	fp, [r4, #16]
  403248:	f8c4 8014 	str.w	r8, [r4, #20]
  40324c:	6020      	str	r0, [r4, #0]
  40324e:	60a3      	str	r3, [r4, #8]
  403250:	46b8      	mov	r8, r7
  403252:	46ba      	mov	sl, r7
  403254:	46bb      	mov	fp, r7
  403256:	e721      	b.n	40309c <__sfvwrite_r+0xa8>
  403258:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40325c:	42b9      	cmp	r1, r7
  40325e:	bf28      	it	cs
  403260:	4639      	movcs	r1, r7
  403262:	464a      	mov	r2, r9
  403264:	fb91 f1f3 	sdiv	r1, r1, r3
  403268:	9800      	ldr	r0, [sp, #0]
  40326a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40326c:	fb03 f301 	mul.w	r3, r3, r1
  403270:	69e1      	ldr	r1, [r4, #28]
  403272:	47b0      	blx	r6
  403274:	f1b0 0a00 	subs.w	sl, r0, #0
  403278:	f73f af1b 	bgt.w	4030b2 <__sfvwrite_r+0xbe>
  40327c:	e738      	b.n	4030f0 <__sfvwrite_r+0xfc>
  40327e:	461a      	mov	r2, r3
  403280:	4629      	mov	r1, r5
  403282:	9301      	str	r3, [sp, #4]
  403284:	f000 fc04 	bl	403a90 <memmove>
  403288:	6822      	ldr	r2, [r4, #0]
  40328a:	9b01      	ldr	r3, [sp, #4]
  40328c:	9800      	ldr	r0, [sp, #0]
  40328e:	441a      	add	r2, r3
  403290:	6022      	str	r2, [r4, #0]
  403292:	4621      	mov	r1, r4
  403294:	f7ff fc4a 	bl	402b2c <_fflush_r>
  403298:	9b01      	ldr	r3, [sp, #4]
  40329a:	2800      	cmp	r0, #0
  40329c:	f47f af28 	bne.w	4030f0 <__sfvwrite_r+0xfc>
  4032a0:	461f      	mov	r7, r3
  4032a2:	e750      	b.n	403146 <__sfvwrite_r+0x152>
  4032a4:	9800      	ldr	r0, [sp, #0]
  4032a6:	f000 fc63 	bl	403b70 <_realloc_r>
  4032aa:	4683      	mov	fp, r0
  4032ac:	2800      	cmp	r0, #0
  4032ae:	d1c5      	bne.n	40323c <__sfvwrite_r+0x248>
  4032b0:	9d00      	ldr	r5, [sp, #0]
  4032b2:	6921      	ldr	r1, [r4, #16]
  4032b4:	4628      	mov	r0, r5
  4032b6:	f7ff fdb7 	bl	402e28 <_free_r>
  4032ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4032be:	220c      	movs	r2, #12
  4032c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4032c4:	602a      	str	r2, [r5, #0]
  4032c6:	e715      	b.n	4030f4 <__sfvwrite_r+0x100>
  4032c8:	f106 0901 	add.w	r9, r6, #1
  4032cc:	e722      	b.n	403114 <__sfvwrite_r+0x120>
  4032ce:	f04f 30ff 	mov.w	r0, #4294967295
  4032d2:	e6bf      	b.n	403054 <__sfvwrite_r+0x60>
  4032d4:	9a00      	ldr	r2, [sp, #0]
  4032d6:	230c      	movs	r3, #12
  4032d8:	6013      	str	r3, [r2, #0]
  4032da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4032de:	e709      	b.n	4030f4 <__sfvwrite_r+0x100>
  4032e0:	7ffffc00 	.word	0x7ffffc00

004032e4 <_fwalk_reent>:
  4032e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4032e8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4032ec:	d01f      	beq.n	40332e <_fwalk_reent+0x4a>
  4032ee:	4688      	mov	r8, r1
  4032f0:	4606      	mov	r6, r0
  4032f2:	f04f 0900 	mov.w	r9, #0
  4032f6:	687d      	ldr	r5, [r7, #4]
  4032f8:	68bc      	ldr	r4, [r7, #8]
  4032fa:	3d01      	subs	r5, #1
  4032fc:	d411      	bmi.n	403322 <_fwalk_reent+0x3e>
  4032fe:	89a3      	ldrh	r3, [r4, #12]
  403300:	2b01      	cmp	r3, #1
  403302:	f105 35ff 	add.w	r5, r5, #4294967295
  403306:	d908      	bls.n	40331a <_fwalk_reent+0x36>
  403308:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40330c:	3301      	adds	r3, #1
  40330e:	4621      	mov	r1, r4
  403310:	4630      	mov	r0, r6
  403312:	d002      	beq.n	40331a <_fwalk_reent+0x36>
  403314:	47c0      	blx	r8
  403316:	ea49 0900 	orr.w	r9, r9, r0
  40331a:	1c6b      	adds	r3, r5, #1
  40331c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  403320:	d1ed      	bne.n	4032fe <_fwalk_reent+0x1a>
  403322:	683f      	ldr	r7, [r7, #0]
  403324:	2f00      	cmp	r7, #0
  403326:	d1e6      	bne.n	4032f6 <_fwalk_reent+0x12>
  403328:	4648      	mov	r0, r9
  40332a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40332e:	46b9      	mov	r9, r7
  403330:	4648      	mov	r0, r9
  403332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403336:	bf00      	nop

00403338 <__locale_mb_cur_max>:
  403338:	4b04      	ldr	r3, [pc, #16]	; (40334c <__locale_mb_cur_max+0x14>)
  40333a:	4a05      	ldr	r2, [pc, #20]	; (403350 <__locale_mb_cur_max+0x18>)
  40333c:	681b      	ldr	r3, [r3, #0]
  40333e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  403340:	2b00      	cmp	r3, #0
  403342:	bf08      	it	eq
  403344:	4613      	moveq	r3, r2
  403346:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40334a:	4770      	bx	lr
  40334c:	20400014 	.word	0x20400014
  403350:	20400444 	.word	0x20400444

00403354 <__retarget_lock_init_recursive>:
  403354:	4770      	bx	lr
  403356:	bf00      	nop

00403358 <__retarget_lock_close_recursive>:
  403358:	4770      	bx	lr
  40335a:	bf00      	nop

0040335c <__retarget_lock_acquire_recursive>:
  40335c:	4770      	bx	lr
  40335e:	bf00      	nop

00403360 <__retarget_lock_release_recursive>:
  403360:	4770      	bx	lr
  403362:	bf00      	nop

00403364 <__swhatbuf_r>:
  403364:	b570      	push	{r4, r5, r6, lr}
  403366:	460c      	mov	r4, r1
  403368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40336c:	2900      	cmp	r1, #0
  40336e:	b090      	sub	sp, #64	; 0x40
  403370:	4615      	mov	r5, r2
  403372:	461e      	mov	r6, r3
  403374:	db14      	blt.n	4033a0 <__swhatbuf_r+0x3c>
  403376:	aa01      	add	r2, sp, #4
  403378:	f001 f84c 	bl	404414 <_fstat_r>
  40337c:	2800      	cmp	r0, #0
  40337e:	db0f      	blt.n	4033a0 <__swhatbuf_r+0x3c>
  403380:	9a02      	ldr	r2, [sp, #8]
  403382:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403386:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40338a:	fab2 f282 	clz	r2, r2
  40338e:	0952      	lsrs	r2, r2, #5
  403390:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403394:	f44f 6000 	mov.w	r0, #2048	; 0x800
  403398:	6032      	str	r2, [r6, #0]
  40339a:	602b      	str	r3, [r5, #0]
  40339c:	b010      	add	sp, #64	; 0x40
  40339e:	bd70      	pop	{r4, r5, r6, pc}
  4033a0:	89a2      	ldrh	r2, [r4, #12]
  4033a2:	2300      	movs	r3, #0
  4033a4:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4033a8:	6033      	str	r3, [r6, #0]
  4033aa:	d004      	beq.n	4033b6 <__swhatbuf_r+0x52>
  4033ac:	2240      	movs	r2, #64	; 0x40
  4033ae:	4618      	mov	r0, r3
  4033b0:	602a      	str	r2, [r5, #0]
  4033b2:	b010      	add	sp, #64	; 0x40
  4033b4:	bd70      	pop	{r4, r5, r6, pc}
  4033b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4033ba:	602b      	str	r3, [r5, #0]
  4033bc:	b010      	add	sp, #64	; 0x40
  4033be:	bd70      	pop	{r4, r5, r6, pc}

004033c0 <__smakebuf_r>:
  4033c0:	898a      	ldrh	r2, [r1, #12]
  4033c2:	0792      	lsls	r2, r2, #30
  4033c4:	460b      	mov	r3, r1
  4033c6:	d506      	bpl.n	4033d6 <__smakebuf_r+0x16>
  4033c8:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4033cc:	2101      	movs	r1, #1
  4033ce:	601a      	str	r2, [r3, #0]
  4033d0:	611a      	str	r2, [r3, #16]
  4033d2:	6159      	str	r1, [r3, #20]
  4033d4:	4770      	bx	lr
  4033d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4033d8:	b083      	sub	sp, #12
  4033da:	ab01      	add	r3, sp, #4
  4033dc:	466a      	mov	r2, sp
  4033de:	460c      	mov	r4, r1
  4033e0:	4606      	mov	r6, r0
  4033e2:	f7ff ffbf 	bl	403364 <__swhatbuf_r>
  4033e6:	9900      	ldr	r1, [sp, #0]
  4033e8:	4605      	mov	r5, r0
  4033ea:	4630      	mov	r0, r6
  4033ec:	f000 f83a 	bl	403464 <_malloc_r>
  4033f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4033f4:	b1d8      	cbz	r0, 40342e <__smakebuf_r+0x6e>
  4033f6:	9a01      	ldr	r2, [sp, #4]
  4033f8:	4f15      	ldr	r7, [pc, #84]	; (403450 <__smakebuf_r+0x90>)
  4033fa:	9900      	ldr	r1, [sp, #0]
  4033fc:	63f7      	str	r7, [r6, #60]	; 0x3c
  4033fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403402:	81a3      	strh	r3, [r4, #12]
  403404:	6020      	str	r0, [r4, #0]
  403406:	6120      	str	r0, [r4, #16]
  403408:	6161      	str	r1, [r4, #20]
  40340a:	b91a      	cbnz	r2, 403414 <__smakebuf_r+0x54>
  40340c:	432b      	orrs	r3, r5
  40340e:	81a3      	strh	r3, [r4, #12]
  403410:	b003      	add	sp, #12
  403412:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403414:	4630      	mov	r0, r6
  403416:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40341a:	f001 f80f 	bl	40443c <_isatty_r>
  40341e:	b1a0      	cbz	r0, 40344a <__smakebuf_r+0x8a>
  403420:	89a3      	ldrh	r3, [r4, #12]
  403422:	f023 0303 	bic.w	r3, r3, #3
  403426:	f043 0301 	orr.w	r3, r3, #1
  40342a:	b21b      	sxth	r3, r3
  40342c:	e7ee      	b.n	40340c <__smakebuf_r+0x4c>
  40342e:	059a      	lsls	r2, r3, #22
  403430:	d4ee      	bmi.n	403410 <__smakebuf_r+0x50>
  403432:	f023 0303 	bic.w	r3, r3, #3
  403436:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40343a:	f043 0302 	orr.w	r3, r3, #2
  40343e:	2101      	movs	r1, #1
  403440:	81a3      	strh	r3, [r4, #12]
  403442:	6022      	str	r2, [r4, #0]
  403444:	6122      	str	r2, [r4, #16]
  403446:	6161      	str	r1, [r4, #20]
  403448:	e7e2      	b.n	403410 <__smakebuf_r+0x50>
  40344a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40344e:	e7dd      	b.n	40340c <__smakebuf_r+0x4c>
  403450:	00402b81 	.word	0x00402b81

00403454 <malloc>:
  403454:	4b02      	ldr	r3, [pc, #8]	; (403460 <malloc+0xc>)
  403456:	4601      	mov	r1, r0
  403458:	6818      	ldr	r0, [r3, #0]
  40345a:	f000 b803 	b.w	403464 <_malloc_r>
  40345e:	bf00      	nop
  403460:	20400014 	.word	0x20400014

00403464 <_malloc_r>:
  403464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403468:	f101 060b 	add.w	r6, r1, #11
  40346c:	2e16      	cmp	r6, #22
  40346e:	b083      	sub	sp, #12
  403470:	4605      	mov	r5, r0
  403472:	f240 809e 	bls.w	4035b2 <_malloc_r+0x14e>
  403476:	f036 0607 	bics.w	r6, r6, #7
  40347a:	f100 80bd 	bmi.w	4035f8 <_malloc_r+0x194>
  40347e:	42b1      	cmp	r1, r6
  403480:	f200 80ba 	bhi.w	4035f8 <_malloc_r+0x194>
  403484:	f000 fb68 	bl	403b58 <__malloc_lock>
  403488:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40348c:	f0c0 8293 	bcc.w	4039b6 <_malloc_r+0x552>
  403490:	0a73      	lsrs	r3, r6, #9
  403492:	f000 80b8 	beq.w	403606 <_malloc_r+0x1a2>
  403496:	2b04      	cmp	r3, #4
  403498:	f200 8179 	bhi.w	40378e <_malloc_r+0x32a>
  40349c:	09b3      	lsrs	r3, r6, #6
  40349e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4034a2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4034a6:	00c3      	lsls	r3, r0, #3
  4034a8:	4fbf      	ldr	r7, [pc, #764]	; (4037a8 <_malloc_r+0x344>)
  4034aa:	443b      	add	r3, r7
  4034ac:	f1a3 0108 	sub.w	r1, r3, #8
  4034b0:	685c      	ldr	r4, [r3, #4]
  4034b2:	42a1      	cmp	r1, r4
  4034b4:	d106      	bne.n	4034c4 <_malloc_r+0x60>
  4034b6:	e00c      	b.n	4034d2 <_malloc_r+0x6e>
  4034b8:	2a00      	cmp	r2, #0
  4034ba:	f280 80aa 	bge.w	403612 <_malloc_r+0x1ae>
  4034be:	68e4      	ldr	r4, [r4, #12]
  4034c0:	42a1      	cmp	r1, r4
  4034c2:	d006      	beq.n	4034d2 <_malloc_r+0x6e>
  4034c4:	6863      	ldr	r3, [r4, #4]
  4034c6:	f023 0303 	bic.w	r3, r3, #3
  4034ca:	1b9a      	subs	r2, r3, r6
  4034cc:	2a0f      	cmp	r2, #15
  4034ce:	ddf3      	ble.n	4034b8 <_malloc_r+0x54>
  4034d0:	4670      	mov	r0, lr
  4034d2:	693c      	ldr	r4, [r7, #16]
  4034d4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4037bc <_malloc_r+0x358>
  4034d8:	4574      	cmp	r4, lr
  4034da:	f000 81ab 	beq.w	403834 <_malloc_r+0x3d0>
  4034de:	6863      	ldr	r3, [r4, #4]
  4034e0:	f023 0303 	bic.w	r3, r3, #3
  4034e4:	1b9a      	subs	r2, r3, r6
  4034e6:	2a0f      	cmp	r2, #15
  4034e8:	f300 8190 	bgt.w	40380c <_malloc_r+0x3a8>
  4034ec:	2a00      	cmp	r2, #0
  4034ee:	f8c7 e014 	str.w	lr, [r7, #20]
  4034f2:	f8c7 e010 	str.w	lr, [r7, #16]
  4034f6:	f280 809d 	bge.w	403634 <_malloc_r+0x1d0>
  4034fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4034fe:	f080 8161 	bcs.w	4037c4 <_malloc_r+0x360>
  403502:	08db      	lsrs	r3, r3, #3
  403504:	f103 0c01 	add.w	ip, r3, #1
  403508:	1099      	asrs	r1, r3, #2
  40350a:	687a      	ldr	r2, [r7, #4]
  40350c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403510:	f8c4 8008 	str.w	r8, [r4, #8]
  403514:	2301      	movs	r3, #1
  403516:	408b      	lsls	r3, r1
  403518:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40351c:	4313      	orrs	r3, r2
  40351e:	3908      	subs	r1, #8
  403520:	60e1      	str	r1, [r4, #12]
  403522:	607b      	str	r3, [r7, #4]
  403524:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403528:	f8c8 400c 	str.w	r4, [r8, #12]
  40352c:	1082      	asrs	r2, r0, #2
  40352e:	2401      	movs	r4, #1
  403530:	4094      	lsls	r4, r2
  403532:	429c      	cmp	r4, r3
  403534:	f200 808b 	bhi.w	40364e <_malloc_r+0x1ea>
  403538:	421c      	tst	r4, r3
  40353a:	d106      	bne.n	40354a <_malloc_r+0xe6>
  40353c:	f020 0003 	bic.w	r0, r0, #3
  403540:	0064      	lsls	r4, r4, #1
  403542:	421c      	tst	r4, r3
  403544:	f100 0004 	add.w	r0, r0, #4
  403548:	d0fa      	beq.n	403540 <_malloc_r+0xdc>
  40354a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40354e:	46cc      	mov	ip, r9
  403550:	4680      	mov	r8, r0
  403552:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403556:	459c      	cmp	ip, r3
  403558:	d107      	bne.n	40356a <_malloc_r+0x106>
  40355a:	e16d      	b.n	403838 <_malloc_r+0x3d4>
  40355c:	2a00      	cmp	r2, #0
  40355e:	f280 817b 	bge.w	403858 <_malloc_r+0x3f4>
  403562:	68db      	ldr	r3, [r3, #12]
  403564:	459c      	cmp	ip, r3
  403566:	f000 8167 	beq.w	403838 <_malloc_r+0x3d4>
  40356a:	6859      	ldr	r1, [r3, #4]
  40356c:	f021 0103 	bic.w	r1, r1, #3
  403570:	1b8a      	subs	r2, r1, r6
  403572:	2a0f      	cmp	r2, #15
  403574:	ddf2      	ble.n	40355c <_malloc_r+0xf8>
  403576:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40357a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40357e:	9300      	str	r3, [sp, #0]
  403580:	199c      	adds	r4, r3, r6
  403582:	4628      	mov	r0, r5
  403584:	f046 0601 	orr.w	r6, r6, #1
  403588:	f042 0501 	orr.w	r5, r2, #1
  40358c:	605e      	str	r6, [r3, #4]
  40358e:	f8c8 c00c 	str.w	ip, [r8, #12]
  403592:	f8cc 8008 	str.w	r8, [ip, #8]
  403596:	617c      	str	r4, [r7, #20]
  403598:	613c      	str	r4, [r7, #16]
  40359a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40359e:	f8c4 e008 	str.w	lr, [r4, #8]
  4035a2:	6065      	str	r5, [r4, #4]
  4035a4:	505a      	str	r2, [r3, r1]
  4035a6:	f000 fadd 	bl	403b64 <__malloc_unlock>
  4035aa:	9b00      	ldr	r3, [sp, #0]
  4035ac:	f103 0408 	add.w	r4, r3, #8
  4035b0:	e01e      	b.n	4035f0 <_malloc_r+0x18c>
  4035b2:	2910      	cmp	r1, #16
  4035b4:	d820      	bhi.n	4035f8 <_malloc_r+0x194>
  4035b6:	f000 facf 	bl	403b58 <__malloc_lock>
  4035ba:	2610      	movs	r6, #16
  4035bc:	2318      	movs	r3, #24
  4035be:	2002      	movs	r0, #2
  4035c0:	4f79      	ldr	r7, [pc, #484]	; (4037a8 <_malloc_r+0x344>)
  4035c2:	443b      	add	r3, r7
  4035c4:	f1a3 0208 	sub.w	r2, r3, #8
  4035c8:	685c      	ldr	r4, [r3, #4]
  4035ca:	4294      	cmp	r4, r2
  4035cc:	f000 813d 	beq.w	40384a <_malloc_r+0x3e6>
  4035d0:	6863      	ldr	r3, [r4, #4]
  4035d2:	68e1      	ldr	r1, [r4, #12]
  4035d4:	68a6      	ldr	r6, [r4, #8]
  4035d6:	f023 0303 	bic.w	r3, r3, #3
  4035da:	4423      	add	r3, r4
  4035dc:	4628      	mov	r0, r5
  4035de:	685a      	ldr	r2, [r3, #4]
  4035e0:	60f1      	str	r1, [r6, #12]
  4035e2:	f042 0201 	orr.w	r2, r2, #1
  4035e6:	608e      	str	r6, [r1, #8]
  4035e8:	605a      	str	r2, [r3, #4]
  4035ea:	f000 fabb 	bl	403b64 <__malloc_unlock>
  4035ee:	3408      	adds	r4, #8
  4035f0:	4620      	mov	r0, r4
  4035f2:	b003      	add	sp, #12
  4035f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035f8:	2400      	movs	r4, #0
  4035fa:	230c      	movs	r3, #12
  4035fc:	4620      	mov	r0, r4
  4035fe:	602b      	str	r3, [r5, #0]
  403600:	b003      	add	sp, #12
  403602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403606:	2040      	movs	r0, #64	; 0x40
  403608:	f44f 7300 	mov.w	r3, #512	; 0x200
  40360c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403610:	e74a      	b.n	4034a8 <_malloc_r+0x44>
  403612:	4423      	add	r3, r4
  403614:	68e1      	ldr	r1, [r4, #12]
  403616:	685a      	ldr	r2, [r3, #4]
  403618:	68a6      	ldr	r6, [r4, #8]
  40361a:	f042 0201 	orr.w	r2, r2, #1
  40361e:	60f1      	str	r1, [r6, #12]
  403620:	4628      	mov	r0, r5
  403622:	608e      	str	r6, [r1, #8]
  403624:	605a      	str	r2, [r3, #4]
  403626:	f000 fa9d 	bl	403b64 <__malloc_unlock>
  40362a:	3408      	adds	r4, #8
  40362c:	4620      	mov	r0, r4
  40362e:	b003      	add	sp, #12
  403630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403634:	4423      	add	r3, r4
  403636:	4628      	mov	r0, r5
  403638:	685a      	ldr	r2, [r3, #4]
  40363a:	f042 0201 	orr.w	r2, r2, #1
  40363e:	605a      	str	r2, [r3, #4]
  403640:	f000 fa90 	bl	403b64 <__malloc_unlock>
  403644:	3408      	adds	r4, #8
  403646:	4620      	mov	r0, r4
  403648:	b003      	add	sp, #12
  40364a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40364e:	68bc      	ldr	r4, [r7, #8]
  403650:	6863      	ldr	r3, [r4, #4]
  403652:	f023 0803 	bic.w	r8, r3, #3
  403656:	45b0      	cmp	r8, r6
  403658:	d304      	bcc.n	403664 <_malloc_r+0x200>
  40365a:	eba8 0306 	sub.w	r3, r8, r6
  40365e:	2b0f      	cmp	r3, #15
  403660:	f300 8085 	bgt.w	40376e <_malloc_r+0x30a>
  403664:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4037c0 <_malloc_r+0x35c>
  403668:	4b50      	ldr	r3, [pc, #320]	; (4037ac <_malloc_r+0x348>)
  40366a:	f8d9 2000 	ldr.w	r2, [r9]
  40366e:	681b      	ldr	r3, [r3, #0]
  403670:	3201      	adds	r2, #1
  403672:	4433      	add	r3, r6
  403674:	eb04 0a08 	add.w	sl, r4, r8
  403678:	f000 8155 	beq.w	403926 <_malloc_r+0x4c2>
  40367c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403680:	330f      	adds	r3, #15
  403682:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403686:	f02b 0b0f 	bic.w	fp, fp, #15
  40368a:	4659      	mov	r1, fp
  40368c:	4628      	mov	r0, r5
  40368e:	f000 fc15 	bl	403ebc <_sbrk_r>
  403692:	1c41      	adds	r1, r0, #1
  403694:	4602      	mov	r2, r0
  403696:	f000 80fc 	beq.w	403892 <_malloc_r+0x42e>
  40369a:	4582      	cmp	sl, r0
  40369c:	f200 80f7 	bhi.w	40388e <_malloc_r+0x42a>
  4036a0:	4b43      	ldr	r3, [pc, #268]	; (4037b0 <_malloc_r+0x34c>)
  4036a2:	6819      	ldr	r1, [r3, #0]
  4036a4:	4459      	add	r1, fp
  4036a6:	6019      	str	r1, [r3, #0]
  4036a8:	f000 814d 	beq.w	403946 <_malloc_r+0x4e2>
  4036ac:	f8d9 0000 	ldr.w	r0, [r9]
  4036b0:	3001      	adds	r0, #1
  4036b2:	bf1b      	ittet	ne
  4036b4:	eba2 0a0a 	subne.w	sl, r2, sl
  4036b8:	4451      	addne	r1, sl
  4036ba:	f8c9 2000 	streq.w	r2, [r9]
  4036be:	6019      	strne	r1, [r3, #0]
  4036c0:	f012 0107 	ands.w	r1, r2, #7
  4036c4:	f000 8115 	beq.w	4038f2 <_malloc_r+0x48e>
  4036c8:	f1c1 0008 	rsb	r0, r1, #8
  4036cc:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4036d0:	4402      	add	r2, r0
  4036d2:	3108      	adds	r1, #8
  4036d4:	eb02 090b 	add.w	r9, r2, fp
  4036d8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4036dc:	eba1 0909 	sub.w	r9, r1, r9
  4036e0:	4649      	mov	r1, r9
  4036e2:	4628      	mov	r0, r5
  4036e4:	9301      	str	r3, [sp, #4]
  4036e6:	9200      	str	r2, [sp, #0]
  4036e8:	f000 fbe8 	bl	403ebc <_sbrk_r>
  4036ec:	1c43      	adds	r3, r0, #1
  4036ee:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4036f2:	f000 8143 	beq.w	40397c <_malloc_r+0x518>
  4036f6:	1a80      	subs	r0, r0, r2
  4036f8:	4448      	add	r0, r9
  4036fa:	f040 0001 	orr.w	r0, r0, #1
  4036fe:	6819      	ldr	r1, [r3, #0]
  403700:	60ba      	str	r2, [r7, #8]
  403702:	4449      	add	r1, r9
  403704:	42bc      	cmp	r4, r7
  403706:	6050      	str	r0, [r2, #4]
  403708:	6019      	str	r1, [r3, #0]
  40370a:	d017      	beq.n	40373c <_malloc_r+0x2d8>
  40370c:	f1b8 0f0f 	cmp.w	r8, #15
  403710:	f240 80fb 	bls.w	40390a <_malloc_r+0x4a6>
  403714:	6860      	ldr	r0, [r4, #4]
  403716:	f1a8 020c 	sub.w	r2, r8, #12
  40371a:	f022 0207 	bic.w	r2, r2, #7
  40371e:	eb04 0e02 	add.w	lr, r4, r2
  403722:	f000 0001 	and.w	r0, r0, #1
  403726:	f04f 0c05 	mov.w	ip, #5
  40372a:	4310      	orrs	r0, r2
  40372c:	2a0f      	cmp	r2, #15
  40372e:	6060      	str	r0, [r4, #4]
  403730:	f8ce c004 	str.w	ip, [lr, #4]
  403734:	f8ce c008 	str.w	ip, [lr, #8]
  403738:	f200 8117 	bhi.w	40396a <_malloc_r+0x506>
  40373c:	4b1d      	ldr	r3, [pc, #116]	; (4037b4 <_malloc_r+0x350>)
  40373e:	68bc      	ldr	r4, [r7, #8]
  403740:	681a      	ldr	r2, [r3, #0]
  403742:	4291      	cmp	r1, r2
  403744:	bf88      	it	hi
  403746:	6019      	strhi	r1, [r3, #0]
  403748:	4b1b      	ldr	r3, [pc, #108]	; (4037b8 <_malloc_r+0x354>)
  40374a:	681a      	ldr	r2, [r3, #0]
  40374c:	4291      	cmp	r1, r2
  40374e:	6862      	ldr	r2, [r4, #4]
  403750:	bf88      	it	hi
  403752:	6019      	strhi	r1, [r3, #0]
  403754:	f022 0203 	bic.w	r2, r2, #3
  403758:	4296      	cmp	r6, r2
  40375a:	eba2 0306 	sub.w	r3, r2, r6
  40375e:	d801      	bhi.n	403764 <_malloc_r+0x300>
  403760:	2b0f      	cmp	r3, #15
  403762:	dc04      	bgt.n	40376e <_malloc_r+0x30a>
  403764:	4628      	mov	r0, r5
  403766:	f000 f9fd 	bl	403b64 <__malloc_unlock>
  40376a:	2400      	movs	r4, #0
  40376c:	e740      	b.n	4035f0 <_malloc_r+0x18c>
  40376e:	19a2      	adds	r2, r4, r6
  403770:	f043 0301 	orr.w	r3, r3, #1
  403774:	f046 0601 	orr.w	r6, r6, #1
  403778:	6066      	str	r6, [r4, #4]
  40377a:	4628      	mov	r0, r5
  40377c:	60ba      	str	r2, [r7, #8]
  40377e:	6053      	str	r3, [r2, #4]
  403780:	f000 f9f0 	bl	403b64 <__malloc_unlock>
  403784:	3408      	adds	r4, #8
  403786:	4620      	mov	r0, r4
  403788:	b003      	add	sp, #12
  40378a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40378e:	2b14      	cmp	r3, #20
  403790:	d971      	bls.n	403876 <_malloc_r+0x412>
  403792:	2b54      	cmp	r3, #84	; 0x54
  403794:	f200 80a3 	bhi.w	4038de <_malloc_r+0x47a>
  403798:	0b33      	lsrs	r3, r6, #12
  40379a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40379e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4037a2:	00c3      	lsls	r3, r0, #3
  4037a4:	e680      	b.n	4034a8 <_malloc_r+0x44>
  4037a6:	bf00      	nop
  4037a8:	204005b0 	.word	0x204005b0
  4037ac:	20401498 	.word	0x20401498
  4037b0:	20401468 	.word	0x20401468
  4037b4:	20401490 	.word	0x20401490
  4037b8:	20401494 	.word	0x20401494
  4037bc:	204005b8 	.word	0x204005b8
  4037c0:	204009b8 	.word	0x204009b8
  4037c4:	0a5a      	lsrs	r2, r3, #9
  4037c6:	2a04      	cmp	r2, #4
  4037c8:	d95b      	bls.n	403882 <_malloc_r+0x41e>
  4037ca:	2a14      	cmp	r2, #20
  4037cc:	f200 80ae 	bhi.w	40392c <_malloc_r+0x4c8>
  4037d0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4037d4:	00c9      	lsls	r1, r1, #3
  4037d6:	325b      	adds	r2, #91	; 0x5b
  4037d8:	eb07 0c01 	add.w	ip, r7, r1
  4037dc:	5879      	ldr	r1, [r7, r1]
  4037de:	f1ac 0c08 	sub.w	ip, ip, #8
  4037e2:	458c      	cmp	ip, r1
  4037e4:	f000 8088 	beq.w	4038f8 <_malloc_r+0x494>
  4037e8:	684a      	ldr	r2, [r1, #4]
  4037ea:	f022 0203 	bic.w	r2, r2, #3
  4037ee:	4293      	cmp	r3, r2
  4037f0:	d273      	bcs.n	4038da <_malloc_r+0x476>
  4037f2:	6889      	ldr	r1, [r1, #8]
  4037f4:	458c      	cmp	ip, r1
  4037f6:	d1f7      	bne.n	4037e8 <_malloc_r+0x384>
  4037f8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4037fc:	687b      	ldr	r3, [r7, #4]
  4037fe:	60e2      	str	r2, [r4, #12]
  403800:	f8c4 c008 	str.w	ip, [r4, #8]
  403804:	6094      	str	r4, [r2, #8]
  403806:	f8cc 400c 	str.w	r4, [ip, #12]
  40380a:	e68f      	b.n	40352c <_malloc_r+0xc8>
  40380c:	19a1      	adds	r1, r4, r6
  40380e:	f046 0c01 	orr.w	ip, r6, #1
  403812:	f042 0601 	orr.w	r6, r2, #1
  403816:	f8c4 c004 	str.w	ip, [r4, #4]
  40381a:	4628      	mov	r0, r5
  40381c:	6179      	str	r1, [r7, #20]
  40381e:	6139      	str	r1, [r7, #16]
  403820:	f8c1 e00c 	str.w	lr, [r1, #12]
  403824:	f8c1 e008 	str.w	lr, [r1, #8]
  403828:	604e      	str	r6, [r1, #4]
  40382a:	50e2      	str	r2, [r4, r3]
  40382c:	f000 f99a 	bl	403b64 <__malloc_unlock>
  403830:	3408      	adds	r4, #8
  403832:	e6dd      	b.n	4035f0 <_malloc_r+0x18c>
  403834:	687b      	ldr	r3, [r7, #4]
  403836:	e679      	b.n	40352c <_malloc_r+0xc8>
  403838:	f108 0801 	add.w	r8, r8, #1
  40383c:	f018 0f03 	tst.w	r8, #3
  403840:	f10c 0c08 	add.w	ip, ip, #8
  403844:	f47f ae85 	bne.w	403552 <_malloc_r+0xee>
  403848:	e02d      	b.n	4038a6 <_malloc_r+0x442>
  40384a:	68dc      	ldr	r4, [r3, #12]
  40384c:	42a3      	cmp	r3, r4
  40384e:	bf08      	it	eq
  403850:	3002      	addeq	r0, #2
  403852:	f43f ae3e 	beq.w	4034d2 <_malloc_r+0x6e>
  403856:	e6bb      	b.n	4035d0 <_malloc_r+0x16c>
  403858:	4419      	add	r1, r3
  40385a:	461c      	mov	r4, r3
  40385c:	684a      	ldr	r2, [r1, #4]
  40385e:	68db      	ldr	r3, [r3, #12]
  403860:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403864:	f042 0201 	orr.w	r2, r2, #1
  403868:	604a      	str	r2, [r1, #4]
  40386a:	4628      	mov	r0, r5
  40386c:	60f3      	str	r3, [r6, #12]
  40386e:	609e      	str	r6, [r3, #8]
  403870:	f000 f978 	bl	403b64 <__malloc_unlock>
  403874:	e6bc      	b.n	4035f0 <_malloc_r+0x18c>
  403876:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40387a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40387e:	00c3      	lsls	r3, r0, #3
  403880:	e612      	b.n	4034a8 <_malloc_r+0x44>
  403882:	099a      	lsrs	r2, r3, #6
  403884:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403888:	00c9      	lsls	r1, r1, #3
  40388a:	3238      	adds	r2, #56	; 0x38
  40388c:	e7a4      	b.n	4037d8 <_malloc_r+0x374>
  40388e:	42bc      	cmp	r4, r7
  403890:	d054      	beq.n	40393c <_malloc_r+0x4d8>
  403892:	68bc      	ldr	r4, [r7, #8]
  403894:	6862      	ldr	r2, [r4, #4]
  403896:	f022 0203 	bic.w	r2, r2, #3
  40389a:	e75d      	b.n	403758 <_malloc_r+0x2f4>
  40389c:	f859 3908 	ldr.w	r3, [r9], #-8
  4038a0:	4599      	cmp	r9, r3
  4038a2:	f040 8086 	bne.w	4039b2 <_malloc_r+0x54e>
  4038a6:	f010 0f03 	tst.w	r0, #3
  4038aa:	f100 30ff 	add.w	r0, r0, #4294967295
  4038ae:	d1f5      	bne.n	40389c <_malloc_r+0x438>
  4038b0:	687b      	ldr	r3, [r7, #4]
  4038b2:	ea23 0304 	bic.w	r3, r3, r4
  4038b6:	607b      	str	r3, [r7, #4]
  4038b8:	0064      	lsls	r4, r4, #1
  4038ba:	429c      	cmp	r4, r3
  4038bc:	f63f aec7 	bhi.w	40364e <_malloc_r+0x1ea>
  4038c0:	2c00      	cmp	r4, #0
  4038c2:	f43f aec4 	beq.w	40364e <_malloc_r+0x1ea>
  4038c6:	421c      	tst	r4, r3
  4038c8:	4640      	mov	r0, r8
  4038ca:	f47f ae3e 	bne.w	40354a <_malloc_r+0xe6>
  4038ce:	0064      	lsls	r4, r4, #1
  4038d0:	421c      	tst	r4, r3
  4038d2:	f100 0004 	add.w	r0, r0, #4
  4038d6:	d0fa      	beq.n	4038ce <_malloc_r+0x46a>
  4038d8:	e637      	b.n	40354a <_malloc_r+0xe6>
  4038da:	468c      	mov	ip, r1
  4038dc:	e78c      	b.n	4037f8 <_malloc_r+0x394>
  4038de:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4038e2:	d815      	bhi.n	403910 <_malloc_r+0x4ac>
  4038e4:	0bf3      	lsrs	r3, r6, #15
  4038e6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4038ea:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4038ee:	00c3      	lsls	r3, r0, #3
  4038f0:	e5da      	b.n	4034a8 <_malloc_r+0x44>
  4038f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4038f6:	e6ed      	b.n	4036d4 <_malloc_r+0x270>
  4038f8:	687b      	ldr	r3, [r7, #4]
  4038fa:	1092      	asrs	r2, r2, #2
  4038fc:	2101      	movs	r1, #1
  4038fe:	fa01 f202 	lsl.w	r2, r1, r2
  403902:	4313      	orrs	r3, r2
  403904:	607b      	str	r3, [r7, #4]
  403906:	4662      	mov	r2, ip
  403908:	e779      	b.n	4037fe <_malloc_r+0x39a>
  40390a:	2301      	movs	r3, #1
  40390c:	6053      	str	r3, [r2, #4]
  40390e:	e729      	b.n	403764 <_malloc_r+0x300>
  403910:	f240 5254 	movw	r2, #1364	; 0x554
  403914:	4293      	cmp	r3, r2
  403916:	d822      	bhi.n	40395e <_malloc_r+0x4fa>
  403918:	0cb3      	lsrs	r3, r6, #18
  40391a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40391e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403922:	00c3      	lsls	r3, r0, #3
  403924:	e5c0      	b.n	4034a8 <_malloc_r+0x44>
  403926:	f103 0b10 	add.w	fp, r3, #16
  40392a:	e6ae      	b.n	40368a <_malloc_r+0x226>
  40392c:	2a54      	cmp	r2, #84	; 0x54
  40392e:	d829      	bhi.n	403984 <_malloc_r+0x520>
  403930:	0b1a      	lsrs	r2, r3, #12
  403932:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403936:	00c9      	lsls	r1, r1, #3
  403938:	326e      	adds	r2, #110	; 0x6e
  40393a:	e74d      	b.n	4037d8 <_malloc_r+0x374>
  40393c:	4b20      	ldr	r3, [pc, #128]	; (4039c0 <_malloc_r+0x55c>)
  40393e:	6819      	ldr	r1, [r3, #0]
  403940:	4459      	add	r1, fp
  403942:	6019      	str	r1, [r3, #0]
  403944:	e6b2      	b.n	4036ac <_malloc_r+0x248>
  403946:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40394a:	2800      	cmp	r0, #0
  40394c:	f47f aeae 	bne.w	4036ac <_malloc_r+0x248>
  403950:	eb08 030b 	add.w	r3, r8, fp
  403954:	68ba      	ldr	r2, [r7, #8]
  403956:	f043 0301 	orr.w	r3, r3, #1
  40395a:	6053      	str	r3, [r2, #4]
  40395c:	e6ee      	b.n	40373c <_malloc_r+0x2d8>
  40395e:	207f      	movs	r0, #127	; 0x7f
  403960:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403964:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403968:	e59e      	b.n	4034a8 <_malloc_r+0x44>
  40396a:	f104 0108 	add.w	r1, r4, #8
  40396e:	4628      	mov	r0, r5
  403970:	9300      	str	r3, [sp, #0]
  403972:	f7ff fa59 	bl	402e28 <_free_r>
  403976:	9b00      	ldr	r3, [sp, #0]
  403978:	6819      	ldr	r1, [r3, #0]
  40397a:	e6df      	b.n	40373c <_malloc_r+0x2d8>
  40397c:	2001      	movs	r0, #1
  40397e:	f04f 0900 	mov.w	r9, #0
  403982:	e6bc      	b.n	4036fe <_malloc_r+0x29a>
  403984:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403988:	d805      	bhi.n	403996 <_malloc_r+0x532>
  40398a:	0bda      	lsrs	r2, r3, #15
  40398c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403990:	00c9      	lsls	r1, r1, #3
  403992:	3277      	adds	r2, #119	; 0x77
  403994:	e720      	b.n	4037d8 <_malloc_r+0x374>
  403996:	f240 5154 	movw	r1, #1364	; 0x554
  40399a:	428a      	cmp	r2, r1
  40399c:	d805      	bhi.n	4039aa <_malloc_r+0x546>
  40399e:	0c9a      	lsrs	r2, r3, #18
  4039a0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4039a4:	00c9      	lsls	r1, r1, #3
  4039a6:	327c      	adds	r2, #124	; 0x7c
  4039a8:	e716      	b.n	4037d8 <_malloc_r+0x374>
  4039aa:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4039ae:	227e      	movs	r2, #126	; 0x7e
  4039b0:	e712      	b.n	4037d8 <_malloc_r+0x374>
  4039b2:	687b      	ldr	r3, [r7, #4]
  4039b4:	e780      	b.n	4038b8 <_malloc_r+0x454>
  4039b6:	08f0      	lsrs	r0, r6, #3
  4039b8:	f106 0308 	add.w	r3, r6, #8
  4039bc:	e600      	b.n	4035c0 <_malloc_r+0x15c>
  4039be:	bf00      	nop
  4039c0:	20401468 	.word	0x20401468

004039c4 <__ascii_mbtowc>:
  4039c4:	b082      	sub	sp, #8
  4039c6:	b149      	cbz	r1, 4039dc <__ascii_mbtowc+0x18>
  4039c8:	b15a      	cbz	r2, 4039e2 <__ascii_mbtowc+0x1e>
  4039ca:	b16b      	cbz	r3, 4039e8 <__ascii_mbtowc+0x24>
  4039cc:	7813      	ldrb	r3, [r2, #0]
  4039ce:	600b      	str	r3, [r1, #0]
  4039d0:	7812      	ldrb	r2, [r2, #0]
  4039d2:	1c10      	adds	r0, r2, #0
  4039d4:	bf18      	it	ne
  4039d6:	2001      	movne	r0, #1
  4039d8:	b002      	add	sp, #8
  4039da:	4770      	bx	lr
  4039dc:	a901      	add	r1, sp, #4
  4039de:	2a00      	cmp	r2, #0
  4039e0:	d1f3      	bne.n	4039ca <__ascii_mbtowc+0x6>
  4039e2:	4610      	mov	r0, r2
  4039e4:	b002      	add	sp, #8
  4039e6:	4770      	bx	lr
  4039e8:	f06f 0001 	mvn.w	r0, #1
  4039ec:	e7f4      	b.n	4039d8 <__ascii_mbtowc+0x14>
  4039ee:	bf00      	nop

004039f0 <memchr>:
  4039f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4039f4:	2a10      	cmp	r2, #16
  4039f6:	db2b      	blt.n	403a50 <memchr+0x60>
  4039f8:	f010 0f07 	tst.w	r0, #7
  4039fc:	d008      	beq.n	403a10 <memchr+0x20>
  4039fe:	f810 3b01 	ldrb.w	r3, [r0], #1
  403a02:	3a01      	subs	r2, #1
  403a04:	428b      	cmp	r3, r1
  403a06:	d02d      	beq.n	403a64 <memchr+0x74>
  403a08:	f010 0f07 	tst.w	r0, #7
  403a0c:	b342      	cbz	r2, 403a60 <memchr+0x70>
  403a0e:	d1f6      	bne.n	4039fe <memchr+0xe>
  403a10:	b4f0      	push	{r4, r5, r6, r7}
  403a12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403a16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  403a1a:	f022 0407 	bic.w	r4, r2, #7
  403a1e:	f07f 0700 	mvns.w	r7, #0
  403a22:	2300      	movs	r3, #0
  403a24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403a28:	3c08      	subs	r4, #8
  403a2a:	ea85 0501 	eor.w	r5, r5, r1
  403a2e:	ea86 0601 	eor.w	r6, r6, r1
  403a32:	fa85 f547 	uadd8	r5, r5, r7
  403a36:	faa3 f587 	sel	r5, r3, r7
  403a3a:	fa86 f647 	uadd8	r6, r6, r7
  403a3e:	faa5 f687 	sel	r6, r5, r7
  403a42:	b98e      	cbnz	r6, 403a68 <memchr+0x78>
  403a44:	d1ee      	bne.n	403a24 <memchr+0x34>
  403a46:	bcf0      	pop	{r4, r5, r6, r7}
  403a48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403a4c:	f002 0207 	and.w	r2, r2, #7
  403a50:	b132      	cbz	r2, 403a60 <memchr+0x70>
  403a52:	f810 3b01 	ldrb.w	r3, [r0], #1
  403a56:	3a01      	subs	r2, #1
  403a58:	ea83 0301 	eor.w	r3, r3, r1
  403a5c:	b113      	cbz	r3, 403a64 <memchr+0x74>
  403a5e:	d1f8      	bne.n	403a52 <memchr+0x62>
  403a60:	2000      	movs	r0, #0
  403a62:	4770      	bx	lr
  403a64:	3801      	subs	r0, #1
  403a66:	4770      	bx	lr
  403a68:	2d00      	cmp	r5, #0
  403a6a:	bf06      	itte	eq
  403a6c:	4635      	moveq	r5, r6
  403a6e:	3803      	subeq	r0, #3
  403a70:	3807      	subne	r0, #7
  403a72:	f015 0f01 	tst.w	r5, #1
  403a76:	d107      	bne.n	403a88 <memchr+0x98>
  403a78:	3001      	adds	r0, #1
  403a7a:	f415 7f80 	tst.w	r5, #256	; 0x100
  403a7e:	bf02      	ittt	eq
  403a80:	3001      	addeq	r0, #1
  403a82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403a86:	3001      	addeq	r0, #1
  403a88:	bcf0      	pop	{r4, r5, r6, r7}
  403a8a:	3801      	subs	r0, #1
  403a8c:	4770      	bx	lr
  403a8e:	bf00      	nop

00403a90 <memmove>:
  403a90:	4288      	cmp	r0, r1
  403a92:	b5f0      	push	{r4, r5, r6, r7, lr}
  403a94:	d90d      	bls.n	403ab2 <memmove+0x22>
  403a96:	188b      	adds	r3, r1, r2
  403a98:	4298      	cmp	r0, r3
  403a9a:	d20a      	bcs.n	403ab2 <memmove+0x22>
  403a9c:	1884      	adds	r4, r0, r2
  403a9e:	2a00      	cmp	r2, #0
  403aa0:	d051      	beq.n	403b46 <memmove+0xb6>
  403aa2:	4622      	mov	r2, r4
  403aa4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  403aa8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  403aac:	4299      	cmp	r1, r3
  403aae:	d1f9      	bne.n	403aa4 <memmove+0x14>
  403ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403ab2:	2a0f      	cmp	r2, #15
  403ab4:	d948      	bls.n	403b48 <memmove+0xb8>
  403ab6:	ea41 0300 	orr.w	r3, r1, r0
  403aba:	079b      	lsls	r3, r3, #30
  403abc:	d146      	bne.n	403b4c <memmove+0xbc>
  403abe:	f100 0410 	add.w	r4, r0, #16
  403ac2:	f101 0310 	add.w	r3, r1, #16
  403ac6:	4615      	mov	r5, r2
  403ac8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403acc:	f844 6c10 	str.w	r6, [r4, #-16]
  403ad0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403ad4:	f844 6c0c 	str.w	r6, [r4, #-12]
  403ad8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403adc:	f844 6c08 	str.w	r6, [r4, #-8]
  403ae0:	3d10      	subs	r5, #16
  403ae2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  403ae6:	f844 6c04 	str.w	r6, [r4, #-4]
  403aea:	2d0f      	cmp	r5, #15
  403aec:	f103 0310 	add.w	r3, r3, #16
  403af0:	f104 0410 	add.w	r4, r4, #16
  403af4:	d8e8      	bhi.n	403ac8 <memmove+0x38>
  403af6:	f1a2 0310 	sub.w	r3, r2, #16
  403afa:	f023 030f 	bic.w	r3, r3, #15
  403afe:	f002 0e0f 	and.w	lr, r2, #15
  403b02:	3310      	adds	r3, #16
  403b04:	f1be 0f03 	cmp.w	lr, #3
  403b08:	4419      	add	r1, r3
  403b0a:	4403      	add	r3, r0
  403b0c:	d921      	bls.n	403b52 <memmove+0xc2>
  403b0e:	1f1e      	subs	r6, r3, #4
  403b10:	460d      	mov	r5, r1
  403b12:	4674      	mov	r4, lr
  403b14:	3c04      	subs	r4, #4
  403b16:	f855 7b04 	ldr.w	r7, [r5], #4
  403b1a:	f846 7f04 	str.w	r7, [r6, #4]!
  403b1e:	2c03      	cmp	r4, #3
  403b20:	d8f8      	bhi.n	403b14 <memmove+0x84>
  403b22:	f1ae 0404 	sub.w	r4, lr, #4
  403b26:	f024 0403 	bic.w	r4, r4, #3
  403b2a:	3404      	adds	r4, #4
  403b2c:	4421      	add	r1, r4
  403b2e:	4423      	add	r3, r4
  403b30:	f002 0203 	and.w	r2, r2, #3
  403b34:	b162      	cbz	r2, 403b50 <memmove+0xc0>
  403b36:	3b01      	subs	r3, #1
  403b38:	440a      	add	r2, r1
  403b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
  403b3e:	f803 4f01 	strb.w	r4, [r3, #1]!
  403b42:	428a      	cmp	r2, r1
  403b44:	d1f9      	bne.n	403b3a <memmove+0xaa>
  403b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403b48:	4603      	mov	r3, r0
  403b4a:	e7f3      	b.n	403b34 <memmove+0xa4>
  403b4c:	4603      	mov	r3, r0
  403b4e:	e7f2      	b.n	403b36 <memmove+0xa6>
  403b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403b52:	4672      	mov	r2, lr
  403b54:	e7ee      	b.n	403b34 <memmove+0xa4>
  403b56:	bf00      	nop

00403b58 <__malloc_lock>:
  403b58:	4801      	ldr	r0, [pc, #4]	; (403b60 <__malloc_lock+0x8>)
  403b5a:	f7ff bbff 	b.w	40335c <__retarget_lock_acquire_recursive>
  403b5e:	bf00      	nop
  403b60:	204014b8 	.word	0x204014b8

00403b64 <__malloc_unlock>:
  403b64:	4801      	ldr	r0, [pc, #4]	; (403b6c <__malloc_unlock+0x8>)
  403b66:	f7ff bbfb 	b.w	403360 <__retarget_lock_release_recursive>
  403b6a:	bf00      	nop
  403b6c:	204014b8 	.word	0x204014b8

00403b70 <_realloc_r>:
  403b70:	2900      	cmp	r1, #0
  403b72:	f000 8095 	beq.w	403ca0 <_realloc_r+0x130>
  403b76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b7a:	460d      	mov	r5, r1
  403b7c:	4616      	mov	r6, r2
  403b7e:	b083      	sub	sp, #12
  403b80:	4680      	mov	r8, r0
  403b82:	f106 070b 	add.w	r7, r6, #11
  403b86:	f7ff ffe7 	bl	403b58 <__malloc_lock>
  403b8a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  403b8e:	2f16      	cmp	r7, #22
  403b90:	f02e 0403 	bic.w	r4, lr, #3
  403b94:	f1a5 0908 	sub.w	r9, r5, #8
  403b98:	d83c      	bhi.n	403c14 <_realloc_r+0xa4>
  403b9a:	2210      	movs	r2, #16
  403b9c:	4617      	mov	r7, r2
  403b9e:	42be      	cmp	r6, r7
  403ba0:	d83d      	bhi.n	403c1e <_realloc_r+0xae>
  403ba2:	4294      	cmp	r4, r2
  403ba4:	da43      	bge.n	403c2e <_realloc_r+0xbe>
  403ba6:	4bc4      	ldr	r3, [pc, #784]	; (403eb8 <_realloc_r+0x348>)
  403ba8:	6899      	ldr	r1, [r3, #8]
  403baa:	eb09 0004 	add.w	r0, r9, r4
  403bae:	4288      	cmp	r0, r1
  403bb0:	f000 80b4 	beq.w	403d1c <_realloc_r+0x1ac>
  403bb4:	6843      	ldr	r3, [r0, #4]
  403bb6:	f023 0101 	bic.w	r1, r3, #1
  403bba:	4401      	add	r1, r0
  403bbc:	6849      	ldr	r1, [r1, #4]
  403bbe:	07c9      	lsls	r1, r1, #31
  403bc0:	d54c      	bpl.n	403c5c <_realloc_r+0xec>
  403bc2:	f01e 0f01 	tst.w	lr, #1
  403bc6:	f000 809b 	beq.w	403d00 <_realloc_r+0x190>
  403bca:	4631      	mov	r1, r6
  403bcc:	4640      	mov	r0, r8
  403bce:	f7ff fc49 	bl	403464 <_malloc_r>
  403bd2:	4606      	mov	r6, r0
  403bd4:	2800      	cmp	r0, #0
  403bd6:	d03a      	beq.n	403c4e <_realloc_r+0xde>
  403bd8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403bdc:	f023 0301 	bic.w	r3, r3, #1
  403be0:	444b      	add	r3, r9
  403be2:	f1a0 0208 	sub.w	r2, r0, #8
  403be6:	429a      	cmp	r2, r3
  403be8:	f000 8121 	beq.w	403e2e <_realloc_r+0x2be>
  403bec:	1f22      	subs	r2, r4, #4
  403bee:	2a24      	cmp	r2, #36	; 0x24
  403bf0:	f200 8107 	bhi.w	403e02 <_realloc_r+0x292>
  403bf4:	2a13      	cmp	r2, #19
  403bf6:	f200 80db 	bhi.w	403db0 <_realloc_r+0x240>
  403bfa:	4603      	mov	r3, r0
  403bfc:	462a      	mov	r2, r5
  403bfe:	6811      	ldr	r1, [r2, #0]
  403c00:	6019      	str	r1, [r3, #0]
  403c02:	6851      	ldr	r1, [r2, #4]
  403c04:	6059      	str	r1, [r3, #4]
  403c06:	6892      	ldr	r2, [r2, #8]
  403c08:	609a      	str	r2, [r3, #8]
  403c0a:	4629      	mov	r1, r5
  403c0c:	4640      	mov	r0, r8
  403c0e:	f7ff f90b 	bl	402e28 <_free_r>
  403c12:	e01c      	b.n	403c4e <_realloc_r+0xde>
  403c14:	f027 0707 	bic.w	r7, r7, #7
  403c18:	2f00      	cmp	r7, #0
  403c1a:	463a      	mov	r2, r7
  403c1c:	dabf      	bge.n	403b9e <_realloc_r+0x2e>
  403c1e:	2600      	movs	r6, #0
  403c20:	230c      	movs	r3, #12
  403c22:	4630      	mov	r0, r6
  403c24:	f8c8 3000 	str.w	r3, [r8]
  403c28:	b003      	add	sp, #12
  403c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c2e:	462e      	mov	r6, r5
  403c30:	1be3      	subs	r3, r4, r7
  403c32:	2b0f      	cmp	r3, #15
  403c34:	d81e      	bhi.n	403c74 <_realloc_r+0x104>
  403c36:	f8d9 3004 	ldr.w	r3, [r9, #4]
  403c3a:	f003 0301 	and.w	r3, r3, #1
  403c3e:	4323      	orrs	r3, r4
  403c40:	444c      	add	r4, r9
  403c42:	f8c9 3004 	str.w	r3, [r9, #4]
  403c46:	6863      	ldr	r3, [r4, #4]
  403c48:	f043 0301 	orr.w	r3, r3, #1
  403c4c:	6063      	str	r3, [r4, #4]
  403c4e:	4640      	mov	r0, r8
  403c50:	f7ff ff88 	bl	403b64 <__malloc_unlock>
  403c54:	4630      	mov	r0, r6
  403c56:	b003      	add	sp, #12
  403c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c5c:	f023 0303 	bic.w	r3, r3, #3
  403c60:	18e1      	adds	r1, r4, r3
  403c62:	4291      	cmp	r1, r2
  403c64:	db1f      	blt.n	403ca6 <_realloc_r+0x136>
  403c66:	68c3      	ldr	r3, [r0, #12]
  403c68:	6882      	ldr	r2, [r0, #8]
  403c6a:	462e      	mov	r6, r5
  403c6c:	60d3      	str	r3, [r2, #12]
  403c6e:	460c      	mov	r4, r1
  403c70:	609a      	str	r2, [r3, #8]
  403c72:	e7dd      	b.n	403c30 <_realloc_r+0xc0>
  403c74:	f8d9 2004 	ldr.w	r2, [r9, #4]
  403c78:	eb09 0107 	add.w	r1, r9, r7
  403c7c:	f002 0201 	and.w	r2, r2, #1
  403c80:	444c      	add	r4, r9
  403c82:	f043 0301 	orr.w	r3, r3, #1
  403c86:	4317      	orrs	r7, r2
  403c88:	f8c9 7004 	str.w	r7, [r9, #4]
  403c8c:	604b      	str	r3, [r1, #4]
  403c8e:	6863      	ldr	r3, [r4, #4]
  403c90:	f043 0301 	orr.w	r3, r3, #1
  403c94:	3108      	adds	r1, #8
  403c96:	6063      	str	r3, [r4, #4]
  403c98:	4640      	mov	r0, r8
  403c9a:	f7ff f8c5 	bl	402e28 <_free_r>
  403c9e:	e7d6      	b.n	403c4e <_realloc_r+0xde>
  403ca0:	4611      	mov	r1, r2
  403ca2:	f7ff bbdf 	b.w	403464 <_malloc_r>
  403ca6:	f01e 0f01 	tst.w	lr, #1
  403caa:	d18e      	bne.n	403bca <_realloc_r+0x5a>
  403cac:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403cb0:	eba9 0a01 	sub.w	sl, r9, r1
  403cb4:	f8da 1004 	ldr.w	r1, [sl, #4]
  403cb8:	f021 0103 	bic.w	r1, r1, #3
  403cbc:	440b      	add	r3, r1
  403cbe:	4423      	add	r3, r4
  403cc0:	4293      	cmp	r3, r2
  403cc2:	db25      	blt.n	403d10 <_realloc_r+0x1a0>
  403cc4:	68c2      	ldr	r2, [r0, #12]
  403cc6:	6881      	ldr	r1, [r0, #8]
  403cc8:	4656      	mov	r6, sl
  403cca:	60ca      	str	r2, [r1, #12]
  403ccc:	6091      	str	r1, [r2, #8]
  403cce:	f8da 100c 	ldr.w	r1, [sl, #12]
  403cd2:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403cd6:	1f22      	subs	r2, r4, #4
  403cd8:	2a24      	cmp	r2, #36	; 0x24
  403cda:	60c1      	str	r1, [r0, #12]
  403cdc:	6088      	str	r0, [r1, #8]
  403cde:	f200 8094 	bhi.w	403e0a <_realloc_r+0x29a>
  403ce2:	2a13      	cmp	r2, #19
  403ce4:	d96f      	bls.n	403dc6 <_realloc_r+0x256>
  403ce6:	6829      	ldr	r1, [r5, #0]
  403ce8:	f8ca 1008 	str.w	r1, [sl, #8]
  403cec:	6869      	ldr	r1, [r5, #4]
  403cee:	f8ca 100c 	str.w	r1, [sl, #12]
  403cf2:	2a1b      	cmp	r2, #27
  403cf4:	f200 80a2 	bhi.w	403e3c <_realloc_r+0x2cc>
  403cf8:	3508      	adds	r5, #8
  403cfa:	f10a 0210 	add.w	r2, sl, #16
  403cfe:	e063      	b.n	403dc8 <_realloc_r+0x258>
  403d00:	f855 3c08 	ldr.w	r3, [r5, #-8]
  403d04:	eba9 0a03 	sub.w	sl, r9, r3
  403d08:	f8da 1004 	ldr.w	r1, [sl, #4]
  403d0c:	f021 0103 	bic.w	r1, r1, #3
  403d10:	1863      	adds	r3, r4, r1
  403d12:	4293      	cmp	r3, r2
  403d14:	f6ff af59 	blt.w	403bca <_realloc_r+0x5a>
  403d18:	4656      	mov	r6, sl
  403d1a:	e7d8      	b.n	403cce <_realloc_r+0x15e>
  403d1c:	6841      	ldr	r1, [r0, #4]
  403d1e:	f021 0b03 	bic.w	fp, r1, #3
  403d22:	44a3      	add	fp, r4
  403d24:	f107 0010 	add.w	r0, r7, #16
  403d28:	4583      	cmp	fp, r0
  403d2a:	da56      	bge.n	403dda <_realloc_r+0x26a>
  403d2c:	f01e 0f01 	tst.w	lr, #1
  403d30:	f47f af4b 	bne.w	403bca <_realloc_r+0x5a>
  403d34:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403d38:	eba9 0a01 	sub.w	sl, r9, r1
  403d3c:	f8da 1004 	ldr.w	r1, [sl, #4]
  403d40:	f021 0103 	bic.w	r1, r1, #3
  403d44:	448b      	add	fp, r1
  403d46:	4558      	cmp	r0, fp
  403d48:	dce2      	bgt.n	403d10 <_realloc_r+0x1a0>
  403d4a:	4656      	mov	r6, sl
  403d4c:	f8da 100c 	ldr.w	r1, [sl, #12]
  403d50:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403d54:	1f22      	subs	r2, r4, #4
  403d56:	2a24      	cmp	r2, #36	; 0x24
  403d58:	60c1      	str	r1, [r0, #12]
  403d5a:	6088      	str	r0, [r1, #8]
  403d5c:	f200 808f 	bhi.w	403e7e <_realloc_r+0x30e>
  403d60:	2a13      	cmp	r2, #19
  403d62:	f240 808a 	bls.w	403e7a <_realloc_r+0x30a>
  403d66:	6829      	ldr	r1, [r5, #0]
  403d68:	f8ca 1008 	str.w	r1, [sl, #8]
  403d6c:	6869      	ldr	r1, [r5, #4]
  403d6e:	f8ca 100c 	str.w	r1, [sl, #12]
  403d72:	2a1b      	cmp	r2, #27
  403d74:	f200 808a 	bhi.w	403e8c <_realloc_r+0x31c>
  403d78:	3508      	adds	r5, #8
  403d7a:	f10a 0210 	add.w	r2, sl, #16
  403d7e:	6829      	ldr	r1, [r5, #0]
  403d80:	6011      	str	r1, [r2, #0]
  403d82:	6869      	ldr	r1, [r5, #4]
  403d84:	6051      	str	r1, [r2, #4]
  403d86:	68a9      	ldr	r1, [r5, #8]
  403d88:	6091      	str	r1, [r2, #8]
  403d8a:	eb0a 0107 	add.w	r1, sl, r7
  403d8e:	ebab 0207 	sub.w	r2, fp, r7
  403d92:	f042 0201 	orr.w	r2, r2, #1
  403d96:	6099      	str	r1, [r3, #8]
  403d98:	604a      	str	r2, [r1, #4]
  403d9a:	f8da 3004 	ldr.w	r3, [sl, #4]
  403d9e:	f003 0301 	and.w	r3, r3, #1
  403da2:	431f      	orrs	r7, r3
  403da4:	4640      	mov	r0, r8
  403da6:	f8ca 7004 	str.w	r7, [sl, #4]
  403daa:	f7ff fedb 	bl	403b64 <__malloc_unlock>
  403dae:	e751      	b.n	403c54 <_realloc_r+0xe4>
  403db0:	682b      	ldr	r3, [r5, #0]
  403db2:	6003      	str	r3, [r0, #0]
  403db4:	686b      	ldr	r3, [r5, #4]
  403db6:	6043      	str	r3, [r0, #4]
  403db8:	2a1b      	cmp	r2, #27
  403dba:	d82d      	bhi.n	403e18 <_realloc_r+0x2a8>
  403dbc:	f100 0308 	add.w	r3, r0, #8
  403dc0:	f105 0208 	add.w	r2, r5, #8
  403dc4:	e71b      	b.n	403bfe <_realloc_r+0x8e>
  403dc6:	4632      	mov	r2, r6
  403dc8:	6829      	ldr	r1, [r5, #0]
  403dca:	6011      	str	r1, [r2, #0]
  403dcc:	6869      	ldr	r1, [r5, #4]
  403dce:	6051      	str	r1, [r2, #4]
  403dd0:	68a9      	ldr	r1, [r5, #8]
  403dd2:	6091      	str	r1, [r2, #8]
  403dd4:	461c      	mov	r4, r3
  403dd6:	46d1      	mov	r9, sl
  403dd8:	e72a      	b.n	403c30 <_realloc_r+0xc0>
  403dda:	eb09 0107 	add.w	r1, r9, r7
  403dde:	ebab 0b07 	sub.w	fp, fp, r7
  403de2:	f04b 0201 	orr.w	r2, fp, #1
  403de6:	6099      	str	r1, [r3, #8]
  403de8:	604a      	str	r2, [r1, #4]
  403dea:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403dee:	f003 0301 	and.w	r3, r3, #1
  403df2:	431f      	orrs	r7, r3
  403df4:	4640      	mov	r0, r8
  403df6:	f845 7c04 	str.w	r7, [r5, #-4]
  403dfa:	f7ff feb3 	bl	403b64 <__malloc_unlock>
  403dfe:	462e      	mov	r6, r5
  403e00:	e728      	b.n	403c54 <_realloc_r+0xe4>
  403e02:	4629      	mov	r1, r5
  403e04:	f7ff fe44 	bl	403a90 <memmove>
  403e08:	e6ff      	b.n	403c0a <_realloc_r+0x9a>
  403e0a:	4629      	mov	r1, r5
  403e0c:	4630      	mov	r0, r6
  403e0e:	461c      	mov	r4, r3
  403e10:	46d1      	mov	r9, sl
  403e12:	f7ff fe3d 	bl	403a90 <memmove>
  403e16:	e70b      	b.n	403c30 <_realloc_r+0xc0>
  403e18:	68ab      	ldr	r3, [r5, #8]
  403e1a:	6083      	str	r3, [r0, #8]
  403e1c:	68eb      	ldr	r3, [r5, #12]
  403e1e:	60c3      	str	r3, [r0, #12]
  403e20:	2a24      	cmp	r2, #36	; 0x24
  403e22:	d017      	beq.n	403e54 <_realloc_r+0x2e4>
  403e24:	f100 0310 	add.w	r3, r0, #16
  403e28:	f105 0210 	add.w	r2, r5, #16
  403e2c:	e6e7      	b.n	403bfe <_realloc_r+0x8e>
  403e2e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  403e32:	f023 0303 	bic.w	r3, r3, #3
  403e36:	441c      	add	r4, r3
  403e38:	462e      	mov	r6, r5
  403e3a:	e6f9      	b.n	403c30 <_realloc_r+0xc0>
  403e3c:	68a9      	ldr	r1, [r5, #8]
  403e3e:	f8ca 1010 	str.w	r1, [sl, #16]
  403e42:	68e9      	ldr	r1, [r5, #12]
  403e44:	f8ca 1014 	str.w	r1, [sl, #20]
  403e48:	2a24      	cmp	r2, #36	; 0x24
  403e4a:	d00c      	beq.n	403e66 <_realloc_r+0x2f6>
  403e4c:	3510      	adds	r5, #16
  403e4e:	f10a 0218 	add.w	r2, sl, #24
  403e52:	e7b9      	b.n	403dc8 <_realloc_r+0x258>
  403e54:	692b      	ldr	r3, [r5, #16]
  403e56:	6103      	str	r3, [r0, #16]
  403e58:	696b      	ldr	r3, [r5, #20]
  403e5a:	6143      	str	r3, [r0, #20]
  403e5c:	f105 0218 	add.w	r2, r5, #24
  403e60:	f100 0318 	add.w	r3, r0, #24
  403e64:	e6cb      	b.n	403bfe <_realloc_r+0x8e>
  403e66:	692a      	ldr	r2, [r5, #16]
  403e68:	f8ca 2018 	str.w	r2, [sl, #24]
  403e6c:	696a      	ldr	r2, [r5, #20]
  403e6e:	f8ca 201c 	str.w	r2, [sl, #28]
  403e72:	3518      	adds	r5, #24
  403e74:	f10a 0220 	add.w	r2, sl, #32
  403e78:	e7a6      	b.n	403dc8 <_realloc_r+0x258>
  403e7a:	4632      	mov	r2, r6
  403e7c:	e77f      	b.n	403d7e <_realloc_r+0x20e>
  403e7e:	4629      	mov	r1, r5
  403e80:	4630      	mov	r0, r6
  403e82:	9301      	str	r3, [sp, #4]
  403e84:	f7ff fe04 	bl	403a90 <memmove>
  403e88:	9b01      	ldr	r3, [sp, #4]
  403e8a:	e77e      	b.n	403d8a <_realloc_r+0x21a>
  403e8c:	68a9      	ldr	r1, [r5, #8]
  403e8e:	f8ca 1010 	str.w	r1, [sl, #16]
  403e92:	68e9      	ldr	r1, [r5, #12]
  403e94:	f8ca 1014 	str.w	r1, [sl, #20]
  403e98:	2a24      	cmp	r2, #36	; 0x24
  403e9a:	d003      	beq.n	403ea4 <_realloc_r+0x334>
  403e9c:	3510      	adds	r5, #16
  403e9e:	f10a 0218 	add.w	r2, sl, #24
  403ea2:	e76c      	b.n	403d7e <_realloc_r+0x20e>
  403ea4:	692a      	ldr	r2, [r5, #16]
  403ea6:	f8ca 2018 	str.w	r2, [sl, #24]
  403eaa:	696a      	ldr	r2, [r5, #20]
  403eac:	f8ca 201c 	str.w	r2, [sl, #28]
  403eb0:	3518      	adds	r5, #24
  403eb2:	f10a 0220 	add.w	r2, sl, #32
  403eb6:	e762      	b.n	403d7e <_realloc_r+0x20e>
  403eb8:	204005b0 	.word	0x204005b0

00403ebc <_sbrk_r>:
  403ebc:	b538      	push	{r3, r4, r5, lr}
  403ebe:	4c07      	ldr	r4, [pc, #28]	; (403edc <_sbrk_r+0x20>)
  403ec0:	2300      	movs	r3, #0
  403ec2:	4605      	mov	r5, r0
  403ec4:	4608      	mov	r0, r1
  403ec6:	6023      	str	r3, [r4, #0]
  403ec8:	f7fd fbca 	bl	401660 <_sbrk>
  403ecc:	1c43      	adds	r3, r0, #1
  403ece:	d000      	beq.n	403ed2 <_sbrk_r+0x16>
  403ed0:	bd38      	pop	{r3, r4, r5, pc}
  403ed2:	6823      	ldr	r3, [r4, #0]
  403ed4:	2b00      	cmp	r3, #0
  403ed6:	d0fb      	beq.n	403ed0 <_sbrk_r+0x14>
  403ed8:	602b      	str	r3, [r5, #0]
  403eda:	bd38      	pop	{r3, r4, r5, pc}
  403edc:	204014cc 	.word	0x204014cc

00403ee0 <_raise_r>:
  403ee0:	291f      	cmp	r1, #31
  403ee2:	d828      	bhi.n	403f36 <_raise_r+0x56>
  403ee4:	b520      	push	{r5, lr}
  403ee6:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
  403eea:	b082      	sub	sp, #8
  403eec:	4605      	mov	r5, r0
  403eee:	b1aa      	cbz	r2, 403f1c <_raise_r+0x3c>
  403ef0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  403ef4:	b193      	cbz	r3, 403f1c <_raise_r+0x3c>
  403ef6:	2b01      	cmp	r3, #1
  403ef8:	d00e      	beq.n	403f18 <_raise_r+0x38>
  403efa:	1c58      	adds	r0, r3, #1
  403efc:	d007      	beq.n	403f0e <_raise_r+0x2e>
  403efe:	2500      	movs	r5, #0
  403f00:	4608      	mov	r0, r1
  403f02:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  403f06:	4798      	blx	r3
  403f08:	4628      	mov	r0, r5
  403f0a:	b002      	add	sp, #8
  403f0c:	bd20      	pop	{r5, pc}
  403f0e:	2316      	movs	r3, #22
  403f10:	2001      	movs	r0, #1
  403f12:	602b      	str	r3, [r5, #0]
  403f14:	b002      	add	sp, #8
  403f16:	bd20      	pop	{r5, pc}
  403f18:	2000      	movs	r0, #0
  403f1a:	e7f6      	b.n	403f0a <_raise_r+0x2a>
  403f1c:	4628      	mov	r0, r5
  403f1e:	9101      	str	r1, [sp, #4]
  403f20:	f000 f82a 	bl	403f78 <_getpid_r>
  403f24:	9901      	ldr	r1, [sp, #4]
  403f26:	460a      	mov	r2, r1
  403f28:	4601      	mov	r1, r0
  403f2a:	4628      	mov	r0, r5
  403f2c:	b002      	add	sp, #8
  403f2e:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
  403f32:	f000 b80d 	b.w	403f50 <_kill_r>
  403f36:	2316      	movs	r3, #22
  403f38:	6003      	str	r3, [r0, #0]
  403f3a:	f04f 30ff 	mov.w	r0, #4294967295
  403f3e:	4770      	bx	lr

00403f40 <raise>:
  403f40:	4b02      	ldr	r3, [pc, #8]	; (403f4c <raise+0xc>)
  403f42:	4601      	mov	r1, r0
  403f44:	6818      	ldr	r0, [r3, #0]
  403f46:	f7ff bfcb 	b.w	403ee0 <_raise_r>
  403f4a:	bf00      	nop
  403f4c:	20400014 	.word	0x20400014

00403f50 <_kill_r>:
  403f50:	b538      	push	{r3, r4, r5, lr}
  403f52:	460b      	mov	r3, r1
  403f54:	4c07      	ldr	r4, [pc, #28]	; (403f74 <_kill_r+0x24>)
  403f56:	4605      	mov	r5, r0
  403f58:	4611      	mov	r1, r2
  403f5a:	4618      	mov	r0, r3
  403f5c:	2300      	movs	r3, #0
  403f5e:	6023      	str	r3, [r4, #0]
  403f60:	f7fd fba8 	bl	4016b4 <_kill>
  403f64:	1c43      	adds	r3, r0, #1
  403f66:	d000      	beq.n	403f6a <_kill_r+0x1a>
  403f68:	bd38      	pop	{r3, r4, r5, pc}
  403f6a:	6823      	ldr	r3, [r4, #0]
  403f6c:	2b00      	cmp	r3, #0
  403f6e:	d0fb      	beq.n	403f68 <_kill_r+0x18>
  403f70:	602b      	str	r3, [r5, #0]
  403f72:	bd38      	pop	{r3, r4, r5, pc}
  403f74:	204014cc 	.word	0x204014cc

00403f78 <_getpid_r>:
  403f78:	f7fd bb9d 	b.w	4016b6 <_getpid>

00403f7c <__sread>:
  403f7c:	b510      	push	{r4, lr}
  403f7e:	460c      	mov	r4, r1
  403f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403f84:	f000 fa82 	bl	40448c <_read_r>
  403f88:	2800      	cmp	r0, #0
  403f8a:	db03      	blt.n	403f94 <__sread+0x18>
  403f8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403f8e:	4403      	add	r3, r0
  403f90:	6523      	str	r3, [r4, #80]	; 0x50
  403f92:	bd10      	pop	{r4, pc}
  403f94:	89a3      	ldrh	r3, [r4, #12]
  403f96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403f9a:	81a3      	strh	r3, [r4, #12]
  403f9c:	bd10      	pop	{r4, pc}
  403f9e:	bf00      	nop

00403fa0 <__swrite>:
  403fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403fa4:	4616      	mov	r6, r2
  403fa6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403faa:	461f      	mov	r7, r3
  403fac:	05d3      	lsls	r3, r2, #23
  403fae:	460c      	mov	r4, r1
  403fb0:	4605      	mov	r5, r0
  403fb2:	d507      	bpl.n	403fc4 <__swrite+0x24>
  403fb4:	2200      	movs	r2, #0
  403fb6:	2302      	movs	r3, #2
  403fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403fbc:	f000 fa50 	bl	404460 <_lseek_r>
  403fc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403fc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403fc8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403fcc:	81a2      	strh	r2, [r4, #12]
  403fce:	463b      	mov	r3, r7
  403fd0:	4632      	mov	r2, r6
  403fd2:	4628      	mov	r0, r5
  403fd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403fd8:	f000 b930 	b.w	40423c <_write_r>

00403fdc <__sseek>:
  403fdc:	b510      	push	{r4, lr}
  403fde:	460c      	mov	r4, r1
  403fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403fe4:	f000 fa3c 	bl	404460 <_lseek_r>
  403fe8:	89a3      	ldrh	r3, [r4, #12]
  403fea:	1c42      	adds	r2, r0, #1
  403fec:	bf0e      	itee	eq
  403fee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403ff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403ff6:	6520      	strne	r0, [r4, #80]	; 0x50
  403ff8:	81a3      	strh	r3, [r4, #12]
  403ffa:	bd10      	pop	{r4, pc}

00403ffc <__sclose>:
  403ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404000:	f000 b994 	b.w	40432c <_close_r>
	...

00404040 <strlen>:
  404040:	f890 f000 	pld	[r0]
  404044:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404048:	f020 0107 	bic.w	r1, r0, #7
  40404c:	f06f 0c00 	mvn.w	ip, #0
  404050:	f010 0407 	ands.w	r4, r0, #7
  404054:	f891 f020 	pld	[r1, #32]
  404058:	f040 8049 	bne.w	4040ee <strlen+0xae>
  40405c:	f04f 0400 	mov.w	r4, #0
  404060:	f06f 0007 	mvn.w	r0, #7
  404064:	e9d1 2300 	ldrd	r2, r3, [r1]
  404068:	f891 f040 	pld	[r1, #64]	; 0x40
  40406c:	f100 0008 	add.w	r0, r0, #8
  404070:	fa82 f24c 	uadd8	r2, r2, ip
  404074:	faa4 f28c 	sel	r2, r4, ip
  404078:	fa83 f34c 	uadd8	r3, r3, ip
  40407c:	faa2 f38c 	sel	r3, r2, ip
  404080:	bb4b      	cbnz	r3, 4040d6 <strlen+0x96>
  404082:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404086:	fa82 f24c 	uadd8	r2, r2, ip
  40408a:	f100 0008 	add.w	r0, r0, #8
  40408e:	faa4 f28c 	sel	r2, r4, ip
  404092:	fa83 f34c 	uadd8	r3, r3, ip
  404096:	faa2 f38c 	sel	r3, r2, ip
  40409a:	b9e3      	cbnz	r3, 4040d6 <strlen+0x96>
  40409c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4040a0:	fa82 f24c 	uadd8	r2, r2, ip
  4040a4:	f100 0008 	add.w	r0, r0, #8
  4040a8:	faa4 f28c 	sel	r2, r4, ip
  4040ac:	fa83 f34c 	uadd8	r3, r3, ip
  4040b0:	faa2 f38c 	sel	r3, r2, ip
  4040b4:	b97b      	cbnz	r3, 4040d6 <strlen+0x96>
  4040b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4040ba:	f101 0120 	add.w	r1, r1, #32
  4040be:	fa82 f24c 	uadd8	r2, r2, ip
  4040c2:	f100 0008 	add.w	r0, r0, #8
  4040c6:	faa4 f28c 	sel	r2, r4, ip
  4040ca:	fa83 f34c 	uadd8	r3, r3, ip
  4040ce:	faa2 f38c 	sel	r3, r2, ip
  4040d2:	2b00      	cmp	r3, #0
  4040d4:	d0c6      	beq.n	404064 <strlen+0x24>
  4040d6:	2a00      	cmp	r2, #0
  4040d8:	bf04      	itt	eq
  4040da:	3004      	addeq	r0, #4
  4040dc:	461a      	moveq	r2, r3
  4040de:	ba12      	rev	r2, r2
  4040e0:	fab2 f282 	clz	r2, r2
  4040e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4040e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4040ec:	4770      	bx	lr
  4040ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4040f2:	f004 0503 	and.w	r5, r4, #3
  4040f6:	f1c4 0000 	rsb	r0, r4, #0
  4040fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4040fe:	f014 0f04 	tst.w	r4, #4
  404102:	f891 f040 	pld	[r1, #64]	; 0x40
  404106:	fa0c f505 	lsl.w	r5, ip, r5
  40410a:	ea62 0205 	orn	r2, r2, r5
  40410e:	bf1c      	itt	ne
  404110:	ea63 0305 	ornne	r3, r3, r5
  404114:	4662      	movne	r2, ip
  404116:	f04f 0400 	mov.w	r4, #0
  40411a:	e7a9      	b.n	404070 <strlen+0x30>

0040411c <__swbuf_r>:
  40411c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40411e:	460d      	mov	r5, r1
  404120:	4614      	mov	r4, r2
  404122:	4606      	mov	r6, r0
  404124:	b110      	cbz	r0, 40412c <__swbuf_r+0x10>
  404126:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404128:	2b00      	cmp	r3, #0
  40412a:	d04b      	beq.n	4041c4 <__swbuf_r+0xa8>
  40412c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404130:	69a3      	ldr	r3, [r4, #24]
  404132:	60a3      	str	r3, [r4, #8]
  404134:	b291      	uxth	r1, r2
  404136:	0708      	lsls	r0, r1, #28
  404138:	d539      	bpl.n	4041ae <__swbuf_r+0x92>
  40413a:	6923      	ldr	r3, [r4, #16]
  40413c:	2b00      	cmp	r3, #0
  40413e:	d036      	beq.n	4041ae <__swbuf_r+0x92>
  404140:	b2ed      	uxtb	r5, r5
  404142:	0489      	lsls	r1, r1, #18
  404144:	462f      	mov	r7, r5
  404146:	d515      	bpl.n	404174 <__swbuf_r+0x58>
  404148:	6822      	ldr	r2, [r4, #0]
  40414a:	6961      	ldr	r1, [r4, #20]
  40414c:	1ad3      	subs	r3, r2, r3
  40414e:	428b      	cmp	r3, r1
  404150:	da1c      	bge.n	40418c <__swbuf_r+0x70>
  404152:	3301      	adds	r3, #1
  404154:	68a1      	ldr	r1, [r4, #8]
  404156:	1c50      	adds	r0, r2, #1
  404158:	3901      	subs	r1, #1
  40415a:	60a1      	str	r1, [r4, #8]
  40415c:	6020      	str	r0, [r4, #0]
  40415e:	7015      	strb	r5, [r2, #0]
  404160:	6962      	ldr	r2, [r4, #20]
  404162:	429a      	cmp	r2, r3
  404164:	d01a      	beq.n	40419c <__swbuf_r+0x80>
  404166:	89a3      	ldrh	r3, [r4, #12]
  404168:	07db      	lsls	r3, r3, #31
  40416a:	d501      	bpl.n	404170 <__swbuf_r+0x54>
  40416c:	2d0a      	cmp	r5, #10
  40416e:	d015      	beq.n	40419c <__swbuf_r+0x80>
  404170:	4638      	mov	r0, r7
  404172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404174:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404176:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40417a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40417e:	81a2      	strh	r2, [r4, #12]
  404180:	6822      	ldr	r2, [r4, #0]
  404182:	6661      	str	r1, [r4, #100]	; 0x64
  404184:	6961      	ldr	r1, [r4, #20]
  404186:	1ad3      	subs	r3, r2, r3
  404188:	428b      	cmp	r3, r1
  40418a:	dbe2      	blt.n	404152 <__swbuf_r+0x36>
  40418c:	4621      	mov	r1, r4
  40418e:	4630      	mov	r0, r6
  404190:	f7fe fccc 	bl	402b2c <_fflush_r>
  404194:	b940      	cbnz	r0, 4041a8 <__swbuf_r+0x8c>
  404196:	6822      	ldr	r2, [r4, #0]
  404198:	2301      	movs	r3, #1
  40419a:	e7db      	b.n	404154 <__swbuf_r+0x38>
  40419c:	4621      	mov	r1, r4
  40419e:	4630      	mov	r0, r6
  4041a0:	f7fe fcc4 	bl	402b2c <_fflush_r>
  4041a4:	2800      	cmp	r0, #0
  4041a6:	d0e3      	beq.n	404170 <__swbuf_r+0x54>
  4041a8:	f04f 37ff 	mov.w	r7, #4294967295
  4041ac:	e7e0      	b.n	404170 <__swbuf_r+0x54>
  4041ae:	4621      	mov	r1, r4
  4041b0:	4630      	mov	r0, r6
  4041b2:	f7fe fb9f 	bl	4028f4 <__swsetup_r>
  4041b6:	2800      	cmp	r0, #0
  4041b8:	d1f6      	bne.n	4041a8 <__swbuf_r+0x8c>
  4041ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4041be:	6923      	ldr	r3, [r4, #16]
  4041c0:	b291      	uxth	r1, r2
  4041c2:	e7bd      	b.n	404140 <__swbuf_r+0x24>
  4041c4:	f7fe fd0a 	bl	402bdc <__sinit>
  4041c8:	e7b0      	b.n	40412c <__swbuf_r+0x10>
  4041ca:	bf00      	nop

004041cc <_wcrtomb_r>:
  4041cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4041ce:	4606      	mov	r6, r0
  4041d0:	b085      	sub	sp, #20
  4041d2:	461f      	mov	r7, r3
  4041d4:	b189      	cbz	r1, 4041fa <_wcrtomb_r+0x2e>
  4041d6:	4c10      	ldr	r4, [pc, #64]	; (404218 <_wcrtomb_r+0x4c>)
  4041d8:	4d10      	ldr	r5, [pc, #64]	; (40421c <_wcrtomb_r+0x50>)
  4041da:	6824      	ldr	r4, [r4, #0]
  4041dc:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4041de:	2c00      	cmp	r4, #0
  4041e0:	bf08      	it	eq
  4041e2:	462c      	moveq	r4, r5
  4041e4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4041e8:	47a0      	blx	r4
  4041ea:	1c43      	adds	r3, r0, #1
  4041ec:	d103      	bne.n	4041f6 <_wcrtomb_r+0x2a>
  4041ee:	2200      	movs	r2, #0
  4041f0:	238a      	movs	r3, #138	; 0x8a
  4041f2:	603a      	str	r2, [r7, #0]
  4041f4:	6033      	str	r3, [r6, #0]
  4041f6:	b005      	add	sp, #20
  4041f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4041fa:	460c      	mov	r4, r1
  4041fc:	4906      	ldr	r1, [pc, #24]	; (404218 <_wcrtomb_r+0x4c>)
  4041fe:	4a07      	ldr	r2, [pc, #28]	; (40421c <_wcrtomb_r+0x50>)
  404200:	6809      	ldr	r1, [r1, #0]
  404202:	6b49      	ldr	r1, [r1, #52]	; 0x34
  404204:	2900      	cmp	r1, #0
  404206:	bf08      	it	eq
  404208:	4611      	moveq	r1, r2
  40420a:	4622      	mov	r2, r4
  40420c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  404210:	a901      	add	r1, sp, #4
  404212:	47a0      	blx	r4
  404214:	e7e9      	b.n	4041ea <_wcrtomb_r+0x1e>
  404216:	bf00      	nop
  404218:	20400014 	.word	0x20400014
  40421c:	20400444 	.word	0x20400444

00404220 <__ascii_wctomb>:
  404220:	b121      	cbz	r1, 40422c <__ascii_wctomb+0xc>
  404222:	2aff      	cmp	r2, #255	; 0xff
  404224:	d804      	bhi.n	404230 <__ascii_wctomb+0x10>
  404226:	700a      	strb	r2, [r1, #0]
  404228:	2001      	movs	r0, #1
  40422a:	4770      	bx	lr
  40422c:	4608      	mov	r0, r1
  40422e:	4770      	bx	lr
  404230:	238a      	movs	r3, #138	; 0x8a
  404232:	6003      	str	r3, [r0, #0]
  404234:	f04f 30ff 	mov.w	r0, #4294967295
  404238:	4770      	bx	lr
  40423a:	bf00      	nop

0040423c <_write_r>:
  40423c:	b570      	push	{r4, r5, r6, lr}
  40423e:	460d      	mov	r5, r1
  404240:	4c08      	ldr	r4, [pc, #32]	; (404264 <_write_r+0x28>)
  404242:	4611      	mov	r1, r2
  404244:	4606      	mov	r6, r0
  404246:	461a      	mov	r2, r3
  404248:	4628      	mov	r0, r5
  40424a:	2300      	movs	r3, #0
  40424c:	6023      	str	r3, [r4, #0]
  40424e:	f7fc fc63 	bl	400b18 <_write>
  404252:	1c43      	adds	r3, r0, #1
  404254:	d000      	beq.n	404258 <_write_r+0x1c>
  404256:	bd70      	pop	{r4, r5, r6, pc}
  404258:	6823      	ldr	r3, [r4, #0]
  40425a:	2b00      	cmp	r3, #0
  40425c:	d0fb      	beq.n	404256 <_write_r+0x1a>
  40425e:	6033      	str	r3, [r6, #0]
  404260:	bd70      	pop	{r4, r5, r6, pc}
  404262:	bf00      	nop
  404264:	204014cc 	.word	0x204014cc

00404268 <__register_exitproc>:
  404268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40426c:	4d2c      	ldr	r5, [pc, #176]	; (404320 <__register_exitproc+0xb8>)
  40426e:	4606      	mov	r6, r0
  404270:	6828      	ldr	r0, [r5, #0]
  404272:	4698      	mov	r8, r3
  404274:	460f      	mov	r7, r1
  404276:	4691      	mov	r9, r2
  404278:	f7ff f870 	bl	40335c <__retarget_lock_acquire_recursive>
  40427c:	4b29      	ldr	r3, [pc, #164]	; (404324 <__register_exitproc+0xbc>)
  40427e:	681c      	ldr	r4, [r3, #0]
  404280:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  404284:	2b00      	cmp	r3, #0
  404286:	d03e      	beq.n	404306 <__register_exitproc+0x9e>
  404288:	685a      	ldr	r2, [r3, #4]
  40428a:	2a1f      	cmp	r2, #31
  40428c:	dc1c      	bgt.n	4042c8 <__register_exitproc+0x60>
  40428e:	f102 0e01 	add.w	lr, r2, #1
  404292:	b176      	cbz	r6, 4042b2 <__register_exitproc+0x4a>
  404294:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  404298:	2401      	movs	r4, #1
  40429a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40429e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4042a2:	4094      	lsls	r4, r2
  4042a4:	4320      	orrs	r0, r4
  4042a6:	2e02      	cmp	r6, #2
  4042a8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4042ac:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4042b0:	d023      	beq.n	4042fa <__register_exitproc+0x92>
  4042b2:	3202      	adds	r2, #2
  4042b4:	f8c3 e004 	str.w	lr, [r3, #4]
  4042b8:	6828      	ldr	r0, [r5, #0]
  4042ba:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4042be:	f7ff f84f 	bl	403360 <__retarget_lock_release_recursive>
  4042c2:	2000      	movs	r0, #0
  4042c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4042c8:	4b17      	ldr	r3, [pc, #92]	; (404328 <__register_exitproc+0xc0>)
  4042ca:	b30b      	cbz	r3, 404310 <__register_exitproc+0xa8>
  4042cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4042d0:	f7ff f8c0 	bl	403454 <malloc>
  4042d4:	4603      	mov	r3, r0
  4042d6:	b1d8      	cbz	r0, 404310 <__register_exitproc+0xa8>
  4042d8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4042dc:	6002      	str	r2, [r0, #0]
  4042de:	2100      	movs	r1, #0
  4042e0:	6041      	str	r1, [r0, #4]
  4042e2:	460a      	mov	r2, r1
  4042e4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4042e8:	f04f 0e01 	mov.w	lr, #1
  4042ec:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4042f0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4042f4:	2e00      	cmp	r6, #0
  4042f6:	d0dc      	beq.n	4042b2 <__register_exitproc+0x4a>
  4042f8:	e7cc      	b.n	404294 <__register_exitproc+0x2c>
  4042fa:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4042fe:	430c      	orrs	r4, r1
  404300:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  404304:	e7d5      	b.n	4042b2 <__register_exitproc+0x4a>
  404306:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40430a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40430e:	e7bb      	b.n	404288 <__register_exitproc+0x20>
  404310:	6828      	ldr	r0, [r5, #0]
  404312:	f7ff f825 	bl	403360 <__retarget_lock_release_recursive>
  404316:	f04f 30ff 	mov.w	r0, #4294967295
  40431a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40431e:	bf00      	nop
  404320:	20400440 	.word	0x20400440
  404324:	00404cb4 	.word	0x00404cb4
  404328:	00403455 	.word	0x00403455

0040432c <_close_r>:
  40432c:	b538      	push	{r3, r4, r5, lr}
  40432e:	4c07      	ldr	r4, [pc, #28]	; (40434c <_close_r+0x20>)
  404330:	2300      	movs	r3, #0
  404332:	4605      	mov	r5, r0
  404334:	4608      	mov	r0, r1
  404336:	6023      	str	r3, [r4, #0]
  404338:	f7fd f9ae 	bl	401698 <_close>
  40433c:	1c43      	adds	r3, r0, #1
  40433e:	d000      	beq.n	404342 <_close_r+0x16>
  404340:	bd38      	pop	{r3, r4, r5, pc}
  404342:	6823      	ldr	r3, [r4, #0]
  404344:	2b00      	cmp	r3, #0
  404346:	d0fb      	beq.n	404340 <_close_r+0x14>
  404348:	602b      	str	r3, [r5, #0]
  40434a:	bd38      	pop	{r3, r4, r5, pc}
  40434c:	204014cc 	.word	0x204014cc

00404350 <_fclose_r>:
  404350:	b570      	push	{r4, r5, r6, lr}
  404352:	b159      	cbz	r1, 40436c <_fclose_r+0x1c>
  404354:	4605      	mov	r5, r0
  404356:	460c      	mov	r4, r1
  404358:	b110      	cbz	r0, 404360 <_fclose_r+0x10>
  40435a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40435c:	2b00      	cmp	r3, #0
  40435e:	d03c      	beq.n	4043da <_fclose_r+0x8a>
  404360:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404362:	07d8      	lsls	r0, r3, #31
  404364:	d505      	bpl.n	404372 <_fclose_r+0x22>
  404366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40436a:	b92b      	cbnz	r3, 404378 <_fclose_r+0x28>
  40436c:	2600      	movs	r6, #0
  40436e:	4630      	mov	r0, r6
  404370:	bd70      	pop	{r4, r5, r6, pc}
  404372:	89a3      	ldrh	r3, [r4, #12]
  404374:	0599      	lsls	r1, r3, #22
  404376:	d53c      	bpl.n	4043f2 <_fclose_r+0xa2>
  404378:	4621      	mov	r1, r4
  40437a:	4628      	mov	r0, r5
  40437c:	f7fe fb36 	bl	4029ec <__sflush_r>
  404380:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404382:	4606      	mov	r6, r0
  404384:	b133      	cbz	r3, 404394 <_fclose_r+0x44>
  404386:	69e1      	ldr	r1, [r4, #28]
  404388:	4628      	mov	r0, r5
  40438a:	4798      	blx	r3
  40438c:	2800      	cmp	r0, #0
  40438e:	bfb8      	it	lt
  404390:	f04f 36ff 	movlt.w	r6, #4294967295
  404394:	89a3      	ldrh	r3, [r4, #12]
  404396:	061a      	lsls	r2, r3, #24
  404398:	d422      	bmi.n	4043e0 <_fclose_r+0x90>
  40439a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40439c:	b141      	cbz	r1, 4043b0 <_fclose_r+0x60>
  40439e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4043a2:	4299      	cmp	r1, r3
  4043a4:	d002      	beq.n	4043ac <_fclose_r+0x5c>
  4043a6:	4628      	mov	r0, r5
  4043a8:	f7fe fd3e 	bl	402e28 <_free_r>
  4043ac:	2300      	movs	r3, #0
  4043ae:	6323      	str	r3, [r4, #48]	; 0x30
  4043b0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4043b2:	b121      	cbz	r1, 4043be <_fclose_r+0x6e>
  4043b4:	4628      	mov	r0, r5
  4043b6:	f7fe fd37 	bl	402e28 <_free_r>
  4043ba:	2300      	movs	r3, #0
  4043bc:	6463      	str	r3, [r4, #68]	; 0x44
  4043be:	f7fe fc39 	bl	402c34 <__sfp_lock_acquire>
  4043c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4043c4:	2200      	movs	r2, #0
  4043c6:	07db      	lsls	r3, r3, #31
  4043c8:	81a2      	strh	r2, [r4, #12]
  4043ca:	d50e      	bpl.n	4043ea <_fclose_r+0x9a>
  4043cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4043ce:	f7fe ffc3 	bl	403358 <__retarget_lock_close_recursive>
  4043d2:	f7fe fc35 	bl	402c40 <__sfp_lock_release>
  4043d6:	4630      	mov	r0, r6
  4043d8:	bd70      	pop	{r4, r5, r6, pc}
  4043da:	f7fe fbff 	bl	402bdc <__sinit>
  4043de:	e7bf      	b.n	404360 <_fclose_r+0x10>
  4043e0:	6921      	ldr	r1, [r4, #16]
  4043e2:	4628      	mov	r0, r5
  4043e4:	f7fe fd20 	bl	402e28 <_free_r>
  4043e8:	e7d7      	b.n	40439a <_fclose_r+0x4a>
  4043ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4043ec:	f7fe ffb8 	bl	403360 <__retarget_lock_release_recursive>
  4043f0:	e7ec      	b.n	4043cc <_fclose_r+0x7c>
  4043f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4043f4:	f7fe ffb2 	bl	40335c <__retarget_lock_acquire_recursive>
  4043f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4043fc:	2b00      	cmp	r3, #0
  4043fe:	d1bb      	bne.n	404378 <_fclose_r+0x28>
  404400:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404402:	f016 0601 	ands.w	r6, r6, #1
  404406:	d1b1      	bne.n	40436c <_fclose_r+0x1c>
  404408:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40440a:	f7fe ffa9 	bl	403360 <__retarget_lock_release_recursive>
  40440e:	4630      	mov	r0, r6
  404410:	bd70      	pop	{r4, r5, r6, pc}
  404412:	bf00      	nop

00404414 <_fstat_r>:
  404414:	b538      	push	{r3, r4, r5, lr}
  404416:	460b      	mov	r3, r1
  404418:	4c07      	ldr	r4, [pc, #28]	; (404438 <_fstat_r+0x24>)
  40441a:	4605      	mov	r5, r0
  40441c:	4611      	mov	r1, r2
  40441e:	4618      	mov	r0, r3
  404420:	2300      	movs	r3, #0
  404422:	6023      	str	r3, [r4, #0]
  404424:	f7fd f93b 	bl	40169e <_fstat>
  404428:	1c43      	adds	r3, r0, #1
  40442a:	d000      	beq.n	40442e <_fstat_r+0x1a>
  40442c:	bd38      	pop	{r3, r4, r5, pc}
  40442e:	6823      	ldr	r3, [r4, #0]
  404430:	2b00      	cmp	r3, #0
  404432:	d0fb      	beq.n	40442c <_fstat_r+0x18>
  404434:	602b      	str	r3, [r5, #0]
  404436:	bd38      	pop	{r3, r4, r5, pc}
  404438:	204014cc 	.word	0x204014cc

0040443c <_isatty_r>:
  40443c:	b538      	push	{r3, r4, r5, lr}
  40443e:	4c07      	ldr	r4, [pc, #28]	; (40445c <_isatty_r+0x20>)
  404440:	2300      	movs	r3, #0
  404442:	4605      	mov	r5, r0
  404444:	4608      	mov	r0, r1
  404446:	6023      	str	r3, [r4, #0]
  404448:	f7fd f92e 	bl	4016a8 <_isatty>
  40444c:	1c43      	adds	r3, r0, #1
  40444e:	d000      	beq.n	404452 <_isatty_r+0x16>
  404450:	bd38      	pop	{r3, r4, r5, pc}
  404452:	6823      	ldr	r3, [r4, #0]
  404454:	2b00      	cmp	r3, #0
  404456:	d0fb      	beq.n	404450 <_isatty_r+0x14>
  404458:	602b      	str	r3, [r5, #0]
  40445a:	bd38      	pop	{r3, r4, r5, pc}
  40445c:	204014cc 	.word	0x204014cc

00404460 <_lseek_r>:
  404460:	b570      	push	{r4, r5, r6, lr}
  404462:	460d      	mov	r5, r1
  404464:	4c08      	ldr	r4, [pc, #32]	; (404488 <_lseek_r+0x28>)
  404466:	4611      	mov	r1, r2
  404468:	4606      	mov	r6, r0
  40446a:	461a      	mov	r2, r3
  40446c:	4628      	mov	r0, r5
  40446e:	2300      	movs	r3, #0
  404470:	6023      	str	r3, [r4, #0]
  404472:	f7fd f91b 	bl	4016ac <_lseek>
  404476:	1c43      	adds	r3, r0, #1
  404478:	d000      	beq.n	40447c <_lseek_r+0x1c>
  40447a:	bd70      	pop	{r4, r5, r6, pc}
  40447c:	6823      	ldr	r3, [r4, #0]
  40447e:	2b00      	cmp	r3, #0
  404480:	d0fb      	beq.n	40447a <_lseek_r+0x1a>
  404482:	6033      	str	r3, [r6, #0]
  404484:	bd70      	pop	{r4, r5, r6, pc}
  404486:	bf00      	nop
  404488:	204014cc 	.word	0x204014cc

0040448c <_read_r>:
  40448c:	b570      	push	{r4, r5, r6, lr}
  40448e:	460d      	mov	r5, r1
  404490:	4c08      	ldr	r4, [pc, #32]	; (4044b4 <_read_r+0x28>)
  404492:	4611      	mov	r1, r2
  404494:	4606      	mov	r6, r0
  404496:	461a      	mov	r2, r3
  404498:	4628      	mov	r0, r5
  40449a:	2300      	movs	r3, #0
  40449c:	6023      	str	r3, [r4, #0]
  40449e:	f7fc fb1d 	bl	400adc <_read>
  4044a2:	1c43      	adds	r3, r0, #1
  4044a4:	d000      	beq.n	4044a8 <_read_r+0x1c>
  4044a6:	bd70      	pop	{r4, r5, r6, pc}
  4044a8:	6823      	ldr	r3, [r4, #0]
  4044aa:	2b00      	cmp	r3, #0
  4044ac:	d0fb      	beq.n	4044a6 <_read_r+0x1a>
  4044ae:	6033      	str	r3, [r6, #0]
  4044b0:	bd70      	pop	{r4, r5, r6, pc}
  4044b2:	bf00      	nop
  4044b4:	204014cc 	.word	0x204014cc

004044b8 <__aeabi_uldivmod>:
  4044b8:	b953      	cbnz	r3, 4044d0 <__aeabi_uldivmod+0x18>
  4044ba:	b94a      	cbnz	r2, 4044d0 <__aeabi_uldivmod+0x18>
  4044bc:	2900      	cmp	r1, #0
  4044be:	bf08      	it	eq
  4044c0:	2800      	cmpeq	r0, #0
  4044c2:	bf1c      	itt	ne
  4044c4:	f04f 31ff 	movne.w	r1, #4294967295
  4044c8:	f04f 30ff 	movne.w	r0, #4294967295
  4044cc:	f000 b97a 	b.w	4047c4 <__aeabi_idiv0>
  4044d0:	f1ad 0c08 	sub.w	ip, sp, #8
  4044d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4044d8:	f000 f806 	bl	4044e8 <__udivmoddi4>
  4044dc:	f8dd e004 	ldr.w	lr, [sp, #4]
  4044e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4044e4:	b004      	add	sp, #16
  4044e6:	4770      	bx	lr

004044e8 <__udivmoddi4>:
  4044e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4044ec:	468c      	mov	ip, r1
  4044ee:	460d      	mov	r5, r1
  4044f0:	4604      	mov	r4, r0
  4044f2:	9e08      	ldr	r6, [sp, #32]
  4044f4:	2b00      	cmp	r3, #0
  4044f6:	d151      	bne.n	40459c <__udivmoddi4+0xb4>
  4044f8:	428a      	cmp	r2, r1
  4044fa:	4617      	mov	r7, r2
  4044fc:	d96d      	bls.n	4045da <__udivmoddi4+0xf2>
  4044fe:	fab2 fe82 	clz	lr, r2
  404502:	f1be 0f00 	cmp.w	lr, #0
  404506:	d00b      	beq.n	404520 <__udivmoddi4+0x38>
  404508:	f1ce 0c20 	rsb	ip, lr, #32
  40450c:	fa01 f50e 	lsl.w	r5, r1, lr
  404510:	fa20 fc0c 	lsr.w	ip, r0, ip
  404514:	fa02 f70e 	lsl.w	r7, r2, lr
  404518:	ea4c 0c05 	orr.w	ip, ip, r5
  40451c:	fa00 f40e 	lsl.w	r4, r0, lr
  404520:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  404524:	0c25      	lsrs	r5, r4, #16
  404526:	fbbc f8fa 	udiv	r8, ip, sl
  40452a:	fa1f f987 	uxth.w	r9, r7
  40452e:	fb0a cc18 	mls	ip, sl, r8, ip
  404532:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  404536:	fb08 f309 	mul.w	r3, r8, r9
  40453a:	42ab      	cmp	r3, r5
  40453c:	d90a      	bls.n	404554 <__udivmoddi4+0x6c>
  40453e:	19ed      	adds	r5, r5, r7
  404540:	f108 32ff 	add.w	r2, r8, #4294967295
  404544:	f080 8123 	bcs.w	40478e <__udivmoddi4+0x2a6>
  404548:	42ab      	cmp	r3, r5
  40454a:	f240 8120 	bls.w	40478e <__udivmoddi4+0x2a6>
  40454e:	f1a8 0802 	sub.w	r8, r8, #2
  404552:	443d      	add	r5, r7
  404554:	1aed      	subs	r5, r5, r3
  404556:	b2a4      	uxth	r4, r4
  404558:	fbb5 f0fa 	udiv	r0, r5, sl
  40455c:	fb0a 5510 	mls	r5, sl, r0, r5
  404560:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  404564:	fb00 f909 	mul.w	r9, r0, r9
  404568:	45a1      	cmp	r9, r4
  40456a:	d909      	bls.n	404580 <__udivmoddi4+0x98>
  40456c:	19e4      	adds	r4, r4, r7
  40456e:	f100 33ff 	add.w	r3, r0, #4294967295
  404572:	f080 810a 	bcs.w	40478a <__udivmoddi4+0x2a2>
  404576:	45a1      	cmp	r9, r4
  404578:	f240 8107 	bls.w	40478a <__udivmoddi4+0x2a2>
  40457c:	3802      	subs	r0, #2
  40457e:	443c      	add	r4, r7
  404580:	eba4 0409 	sub.w	r4, r4, r9
  404584:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  404588:	2100      	movs	r1, #0
  40458a:	2e00      	cmp	r6, #0
  40458c:	d061      	beq.n	404652 <__udivmoddi4+0x16a>
  40458e:	fa24 f40e 	lsr.w	r4, r4, lr
  404592:	2300      	movs	r3, #0
  404594:	6034      	str	r4, [r6, #0]
  404596:	6073      	str	r3, [r6, #4]
  404598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40459c:	428b      	cmp	r3, r1
  40459e:	d907      	bls.n	4045b0 <__udivmoddi4+0xc8>
  4045a0:	2e00      	cmp	r6, #0
  4045a2:	d054      	beq.n	40464e <__udivmoddi4+0x166>
  4045a4:	2100      	movs	r1, #0
  4045a6:	e886 0021 	stmia.w	r6, {r0, r5}
  4045aa:	4608      	mov	r0, r1
  4045ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4045b0:	fab3 f183 	clz	r1, r3
  4045b4:	2900      	cmp	r1, #0
  4045b6:	f040 808e 	bne.w	4046d6 <__udivmoddi4+0x1ee>
  4045ba:	42ab      	cmp	r3, r5
  4045bc:	d302      	bcc.n	4045c4 <__udivmoddi4+0xdc>
  4045be:	4282      	cmp	r2, r0
  4045c0:	f200 80fa 	bhi.w	4047b8 <__udivmoddi4+0x2d0>
  4045c4:	1a84      	subs	r4, r0, r2
  4045c6:	eb65 0503 	sbc.w	r5, r5, r3
  4045ca:	2001      	movs	r0, #1
  4045cc:	46ac      	mov	ip, r5
  4045ce:	2e00      	cmp	r6, #0
  4045d0:	d03f      	beq.n	404652 <__udivmoddi4+0x16a>
  4045d2:	e886 1010 	stmia.w	r6, {r4, ip}
  4045d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4045da:	b912      	cbnz	r2, 4045e2 <__udivmoddi4+0xfa>
  4045dc:	2701      	movs	r7, #1
  4045de:	fbb7 f7f2 	udiv	r7, r7, r2
  4045e2:	fab7 fe87 	clz	lr, r7
  4045e6:	f1be 0f00 	cmp.w	lr, #0
  4045ea:	d134      	bne.n	404656 <__udivmoddi4+0x16e>
  4045ec:	1beb      	subs	r3, r5, r7
  4045ee:	0c3a      	lsrs	r2, r7, #16
  4045f0:	fa1f fc87 	uxth.w	ip, r7
  4045f4:	2101      	movs	r1, #1
  4045f6:	fbb3 f8f2 	udiv	r8, r3, r2
  4045fa:	0c25      	lsrs	r5, r4, #16
  4045fc:	fb02 3318 	mls	r3, r2, r8, r3
  404600:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404604:	fb0c f308 	mul.w	r3, ip, r8
  404608:	42ab      	cmp	r3, r5
  40460a:	d907      	bls.n	40461c <__udivmoddi4+0x134>
  40460c:	19ed      	adds	r5, r5, r7
  40460e:	f108 30ff 	add.w	r0, r8, #4294967295
  404612:	d202      	bcs.n	40461a <__udivmoddi4+0x132>
  404614:	42ab      	cmp	r3, r5
  404616:	f200 80d1 	bhi.w	4047bc <__udivmoddi4+0x2d4>
  40461a:	4680      	mov	r8, r0
  40461c:	1aed      	subs	r5, r5, r3
  40461e:	b2a3      	uxth	r3, r4
  404620:	fbb5 f0f2 	udiv	r0, r5, r2
  404624:	fb02 5510 	mls	r5, r2, r0, r5
  404628:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40462c:	fb0c fc00 	mul.w	ip, ip, r0
  404630:	45a4      	cmp	ip, r4
  404632:	d907      	bls.n	404644 <__udivmoddi4+0x15c>
  404634:	19e4      	adds	r4, r4, r7
  404636:	f100 33ff 	add.w	r3, r0, #4294967295
  40463a:	d202      	bcs.n	404642 <__udivmoddi4+0x15a>
  40463c:	45a4      	cmp	ip, r4
  40463e:	f200 80b8 	bhi.w	4047b2 <__udivmoddi4+0x2ca>
  404642:	4618      	mov	r0, r3
  404644:	eba4 040c 	sub.w	r4, r4, ip
  404648:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40464c:	e79d      	b.n	40458a <__udivmoddi4+0xa2>
  40464e:	4631      	mov	r1, r6
  404650:	4630      	mov	r0, r6
  404652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404656:	f1ce 0420 	rsb	r4, lr, #32
  40465a:	fa05 f30e 	lsl.w	r3, r5, lr
  40465e:	fa07 f70e 	lsl.w	r7, r7, lr
  404662:	fa20 f804 	lsr.w	r8, r0, r4
  404666:	0c3a      	lsrs	r2, r7, #16
  404668:	fa25 f404 	lsr.w	r4, r5, r4
  40466c:	ea48 0803 	orr.w	r8, r8, r3
  404670:	fbb4 f1f2 	udiv	r1, r4, r2
  404674:	ea4f 4518 	mov.w	r5, r8, lsr #16
  404678:	fb02 4411 	mls	r4, r2, r1, r4
  40467c:	fa1f fc87 	uxth.w	ip, r7
  404680:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  404684:	fb01 f30c 	mul.w	r3, r1, ip
  404688:	42ab      	cmp	r3, r5
  40468a:	fa00 f40e 	lsl.w	r4, r0, lr
  40468e:	d909      	bls.n	4046a4 <__udivmoddi4+0x1bc>
  404690:	19ed      	adds	r5, r5, r7
  404692:	f101 30ff 	add.w	r0, r1, #4294967295
  404696:	f080 808a 	bcs.w	4047ae <__udivmoddi4+0x2c6>
  40469a:	42ab      	cmp	r3, r5
  40469c:	f240 8087 	bls.w	4047ae <__udivmoddi4+0x2c6>
  4046a0:	3902      	subs	r1, #2
  4046a2:	443d      	add	r5, r7
  4046a4:	1aeb      	subs	r3, r5, r3
  4046a6:	fa1f f588 	uxth.w	r5, r8
  4046aa:	fbb3 f0f2 	udiv	r0, r3, r2
  4046ae:	fb02 3310 	mls	r3, r2, r0, r3
  4046b2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4046b6:	fb00 f30c 	mul.w	r3, r0, ip
  4046ba:	42ab      	cmp	r3, r5
  4046bc:	d907      	bls.n	4046ce <__udivmoddi4+0x1e6>
  4046be:	19ed      	adds	r5, r5, r7
  4046c0:	f100 38ff 	add.w	r8, r0, #4294967295
  4046c4:	d26f      	bcs.n	4047a6 <__udivmoddi4+0x2be>
  4046c6:	42ab      	cmp	r3, r5
  4046c8:	d96d      	bls.n	4047a6 <__udivmoddi4+0x2be>
  4046ca:	3802      	subs	r0, #2
  4046cc:	443d      	add	r5, r7
  4046ce:	1aeb      	subs	r3, r5, r3
  4046d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4046d4:	e78f      	b.n	4045f6 <__udivmoddi4+0x10e>
  4046d6:	f1c1 0720 	rsb	r7, r1, #32
  4046da:	fa22 f807 	lsr.w	r8, r2, r7
  4046de:	408b      	lsls	r3, r1
  4046e0:	fa05 f401 	lsl.w	r4, r5, r1
  4046e4:	ea48 0303 	orr.w	r3, r8, r3
  4046e8:	fa20 fe07 	lsr.w	lr, r0, r7
  4046ec:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4046f0:	40fd      	lsrs	r5, r7
  4046f2:	ea4e 0e04 	orr.w	lr, lr, r4
  4046f6:	fbb5 f9fc 	udiv	r9, r5, ip
  4046fa:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4046fe:	fb0c 5519 	mls	r5, ip, r9, r5
  404702:	fa1f f883 	uxth.w	r8, r3
  404706:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40470a:	fb09 f408 	mul.w	r4, r9, r8
  40470e:	42ac      	cmp	r4, r5
  404710:	fa02 f201 	lsl.w	r2, r2, r1
  404714:	fa00 fa01 	lsl.w	sl, r0, r1
  404718:	d908      	bls.n	40472c <__udivmoddi4+0x244>
  40471a:	18ed      	adds	r5, r5, r3
  40471c:	f109 30ff 	add.w	r0, r9, #4294967295
  404720:	d243      	bcs.n	4047aa <__udivmoddi4+0x2c2>
  404722:	42ac      	cmp	r4, r5
  404724:	d941      	bls.n	4047aa <__udivmoddi4+0x2c2>
  404726:	f1a9 0902 	sub.w	r9, r9, #2
  40472a:	441d      	add	r5, r3
  40472c:	1b2d      	subs	r5, r5, r4
  40472e:	fa1f fe8e 	uxth.w	lr, lr
  404732:	fbb5 f0fc 	udiv	r0, r5, ip
  404736:	fb0c 5510 	mls	r5, ip, r0, r5
  40473a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40473e:	fb00 f808 	mul.w	r8, r0, r8
  404742:	45a0      	cmp	r8, r4
  404744:	d907      	bls.n	404756 <__udivmoddi4+0x26e>
  404746:	18e4      	adds	r4, r4, r3
  404748:	f100 35ff 	add.w	r5, r0, #4294967295
  40474c:	d229      	bcs.n	4047a2 <__udivmoddi4+0x2ba>
  40474e:	45a0      	cmp	r8, r4
  404750:	d927      	bls.n	4047a2 <__udivmoddi4+0x2ba>
  404752:	3802      	subs	r0, #2
  404754:	441c      	add	r4, r3
  404756:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40475a:	eba4 0408 	sub.w	r4, r4, r8
  40475e:	fba0 8902 	umull	r8, r9, r0, r2
  404762:	454c      	cmp	r4, r9
  404764:	46c6      	mov	lr, r8
  404766:	464d      	mov	r5, r9
  404768:	d315      	bcc.n	404796 <__udivmoddi4+0x2ae>
  40476a:	d012      	beq.n	404792 <__udivmoddi4+0x2aa>
  40476c:	b156      	cbz	r6, 404784 <__udivmoddi4+0x29c>
  40476e:	ebba 030e 	subs.w	r3, sl, lr
  404772:	eb64 0405 	sbc.w	r4, r4, r5
  404776:	fa04 f707 	lsl.w	r7, r4, r7
  40477a:	40cb      	lsrs	r3, r1
  40477c:	431f      	orrs	r7, r3
  40477e:	40cc      	lsrs	r4, r1
  404780:	6037      	str	r7, [r6, #0]
  404782:	6074      	str	r4, [r6, #4]
  404784:	2100      	movs	r1, #0
  404786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40478a:	4618      	mov	r0, r3
  40478c:	e6f8      	b.n	404580 <__udivmoddi4+0x98>
  40478e:	4690      	mov	r8, r2
  404790:	e6e0      	b.n	404554 <__udivmoddi4+0x6c>
  404792:	45c2      	cmp	sl, r8
  404794:	d2ea      	bcs.n	40476c <__udivmoddi4+0x284>
  404796:	ebb8 0e02 	subs.w	lr, r8, r2
  40479a:	eb69 0503 	sbc.w	r5, r9, r3
  40479e:	3801      	subs	r0, #1
  4047a0:	e7e4      	b.n	40476c <__udivmoddi4+0x284>
  4047a2:	4628      	mov	r0, r5
  4047a4:	e7d7      	b.n	404756 <__udivmoddi4+0x26e>
  4047a6:	4640      	mov	r0, r8
  4047a8:	e791      	b.n	4046ce <__udivmoddi4+0x1e6>
  4047aa:	4681      	mov	r9, r0
  4047ac:	e7be      	b.n	40472c <__udivmoddi4+0x244>
  4047ae:	4601      	mov	r1, r0
  4047b0:	e778      	b.n	4046a4 <__udivmoddi4+0x1bc>
  4047b2:	3802      	subs	r0, #2
  4047b4:	443c      	add	r4, r7
  4047b6:	e745      	b.n	404644 <__udivmoddi4+0x15c>
  4047b8:	4608      	mov	r0, r1
  4047ba:	e708      	b.n	4045ce <__udivmoddi4+0xe6>
  4047bc:	f1a8 0802 	sub.w	r8, r8, #2
  4047c0:	443d      	add	r5, r7
  4047c2:	e72b      	b.n	40461c <__udivmoddi4+0x134>

004047c4 <__aeabi_idiv0>:
  4047c4:	4770      	bx	lr
  4047c6:	bf00      	nop

004047c8 <__func__.5842>:
  4047c8:	6262 705f 726f 5f74 6573 5f74 6164 6174     bb_port_set_data
  4047d8:	645f 7269 6365 3174 0036 0000               _direct16...

004047e4 <__func__.5874>:
  4047e4:	6262 705f 726f 5f74 6567 5f74 6164 6174     bb_port_get_data
  4047f4:	645f 7269 6365 3374 0032 0000 6228 7479     _direct32...(byt
  404804:	4f65 6666 6573 4974 576e 726f 2064 2025     eOffsetInWord % 
  404814:	5532 2029 3d3d 3020 0000 0000 2e2e 622f     2U) == 0....../b
  404824:	616c 6b63 6f62 7261 2f64 6262 705f 726f     lackboard/bb_por
  404834:	2e74 0063 7962 6574 664f 7366 7465 6e49     t.c.byteOffsetIn
  404844:	6f57 6472 3d20 203d 0030 0000               Word == 0...

00404850 <can_spec_can_element_list>:
  404850:	0400 0000 49f4 0040 0064 0000 0004 0000     .....I@.d.......
  404860:	4a04 0040 0001 0004 0000 0000 0000 0000     .J@.............
	...
  404880:	0571 0040 0001 0000 0103 0000 0410 0000     q.@.............
  404890:	4a10 0040 0064 0000 0008 0000 4a24 0040     .J@.d.......$J@.
  4048a0:	0001 0002 4a38 0040 0201 0002 4a4c 0040     ....8J@.....LJ@.
  4048b0:	0401 0002 4a5c 0040 0601 0002 0000 0000     ....\J@.........
  4048c0:	0000 0000 0001 0000 0460 0000 4a6c 0040     ........`...lJ@.
  4048d0:	0064 0000 0001 0000 4a70 0040 0001 0001     d.......pJ@.....
	...
  404900:	0001 0000 0470 0000 4a80 0040 0064 0000     ....p....J@.d...
  404910:	0001 0000 4a94 0040 0001 0001 0000 0000     .....J@.........
	...
  40493c:	0001 0000 0480 0000 4aa4 0040 0064 0000     .........J@.d...
  40494c:	0001 0000 4aa8 0040 0001 0001 0000 0000     .....J@.........
	...
  404978:	0001 0000 0630 0000 4ab8 0040 0064 0000     ....0....J@.d...
  404988:	0001 0000 4ac4 0040 0001 0001 0000 0000     .....J@.........
	...
  4049ac:	0571 0040 0001 0000 0100 0000 0631 0000     q.@.........1...
  4049bc:	4ad0 0040 0064 0000 0008 0000 4adc 0040     .J@.d........J@.
  4049cc:	0001 0002 4aec 0040 0201 0002 4b00 0040     .....J@......K@.
  4049dc:	0401 0002 4b0c 0040 0601 0002 0000 0000     .....K@.........
  4049ec:	0000 0000 0100 0000 4353 5f4d 7953 7473     ........SCM_Syst
  4049fc:	6d65 6142 6672 0079 6554 7473 6c46 6f6f     emBarfy.TestFloo
  404a0c:	7966 0000 4353 5f4d 6f4d 6f74 3172 6150     fy..SCM_Motor1Pa
  404a1c:	6172 736d 0031 0000 6f6d 6f74 3172 6341     rams1...motor1Ac
  404a2c:	6563 656c 6172 6974 6e6f 0000 6f6d 6f74     celeration..moto
  404a3c:	3172 6544 6563 656c 6172 6974 6e6f 0000     r1Deceleration..
  404a4c:	6f6d 6f74 3172 614d 5378 6570 6465 0000     motor1MaxSpeed..
  404a5c:	6f6d 6f74 3172 694d 536e 6570 6465 0000     motor1MinSpeed..
  404a6c:	4353 5f4d 6f4d 6f74 3172 6f43 746e 6f72     SCM_Motor1Contro
  404a7c:	006c 0000 4353 5f4d 6f4d 6f74 3172 6f43     l...SCM_Motor1Co
  404a8c:	746e 6f72 0032 0000 6f4d 6f74 3272 6f43     ntro2...Motor2Co
  404a9c:	746e 6f72 006c 0000 4353 5f4d 6f4d 6f74     ntrol...SCM_Moto
  404aac:	3372 6f43 746e 6f72 006c 0000 4352 5f4d     r3Control...RCM_
  404abc:	7953 7473 6d65 0000 6f4d 7564 656c 6449     System..ModuleId
  404acc:	0000 0000 4352 5f4d 6553 736e 726f 0031     ....RCM_Sensor1.
  404adc:	6553 736e 726f 5631 6c6f 6174 6567 0000     Sensor1Voltage..
  404aec:	6553 736e 726f 5431 6d65 6570 6172 7574     Sensor1Temperatu
  404afc:	6572 0000 6553 736e 726f 4631 6f6f 0000     re..Sensor1Foo..
  404b0c:	6553 736e 726f 4231 7261 0000 6574 7473     Sensor1Bar..test
  404b1c:	6143 6c6c 6162 6b63 203a 4353 5f4d 5645     Callback: SCM_EV
  404b2c:	4e45 5f54 4f46 3d4f 6425 202c 7872 6843     ENT_FOO=%d, rxCh
  404b3c:	6e61 253d 2c64 7420 4378 6168 3d6e 6425     an=%d, txChan=%d
  404b4c:	202c 6f63 6e75 6574 3d72 6425 000a 0000     , counter=%d....

00404b5c <__func__.6478>:
  404b5c:	6373 5f6d 6163 5f6e 7274 6e61 0073 0000     scm_can_trans...
  404b6c:	656c 676e 6874 3c20 203d 614d 4278 7479     length <= MaxByt
  404b7c:	7365 6550 4372 6e61 734d 0067 2e2e 622f     esPerCanMsg.../b
  404b8c:	616c 6b63 6f62 7261 2f64 6373 5f6d 6163     lackboard/scm_ca
  404b9c:	5f6e 7274 6e61 2e73 0063 0000 7553 6363     n_trans.c...Succ
  404bac:	7365 0073 203a 434d 4e41 6220 7375 6f20     ess.: MCAN bus o
  404bbc:	6666 6520 7272 726f 202c 6572 692d 696e     ff error, re-ini
  404bcc:	6974 6c61 7a69 7461 6f69 2e6e 0d20 0d0a     tialization. ...
  404bdc:	000a 0000 7250 746f 636f 6c6f 4120 4b43     ....Protocol ACK
  404bec:	6520 7272 726f 202c 6c70 6165 6573 6420      error, please d
  404bfc:	756f 6c62 2065 6863 6365 206b 6874 2065     ouble check the 
  404c0c:	6c63 636f 206b 6e69 7420 6f77 6220 616f     clock in two boa
  404c1c:	6472 2e73 0d20 0d0a 000a 0000 7250 746f     rds. .......Prot
  404c2c:	636f 6c6f 6620 726f 616d 2074 7265 6f72     ocol format erro
  404c3c:	2c72 7020 656c 7361 2065 6f64 6275 656c     r, please double
  404c4c:	6320 6568 6b63 7420 6568 6320 6f6c 6b63      check the clock
  404c5c:	6920 206e 7774 206f 6f62 7261 7364 202e      in two boards. 
  404c6c:	0a0d 0a0d 0000 0000 202c 7566 636e 6974     ........, functi
  404c7c:	6e6f 203a 0000 0000 7361 6573 7472 6f69     on: ....assertio
  404c8c:	206e 2522 2273 6620 6961 656c 3a64 6620     n "%s" failed: f
  404c9c:	6c69 2065 2522 2273 202c 696c 656e 2520     ile "%s", line %
  404cac:	2564 2573 0a73 0000                         d%s%s...

00404cb4 <_global_impure_ptr>:
  404cb4:	0018 2040 3130 3332 3534 3736 3938 4241     ..@ 0123456789AB
  404cc4:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  404cd4:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  404ce4:	296c 0000                                   l)..

00404ce8 <blanks.7217>:
  404ce8:	2020 2020 2020 2020 2020 2020 2020 2020                     

00404cf8 <zeroes.7218>:
  404cf8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  404d08:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

00404d18 <_ctype_>:
  404d18:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  404d28:	2020 2020 2020 2020 2020 2020 2020 2020                     
  404d38:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  404d48:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  404d58:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  404d68:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  404d78:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  404d88:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  404d98:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00404e1c <_init>:
  404e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404e1e:	bf00      	nop
  404e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404e22:	bc08      	pop	{r3}
  404e24:	469e      	mov	lr, r3
  404e26:	4770      	bx	lr

00404e28 <__init_array_start>:
  404e28:	004029bd 	.word	0x004029bd

00404e2c <__frame_dummy_init_array_entry>:
  404e2c:	0040018d                                ..@.

00404e30 <_fini>:
  404e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404e32:	bf00      	nop
  404e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404e36:	bc08      	pop	{r3}
  404e38:	469e      	mov	lr, r3
  404e3a:	4770      	bx	lr

00404e3c <__fini_array_start>:
  404e3c:	00400169 	.word	0x00400169
