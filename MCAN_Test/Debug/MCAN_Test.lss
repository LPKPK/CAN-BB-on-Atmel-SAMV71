
MCAN_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005244  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00405244  00405244  00015244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  0040524c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000b34  204009c0  00405c0c  000209c0  2**2
                  ALLOC
  4 .stack        00002004  204014f4  00406740  000209c0  2**0
                  ALLOC
  5 .heap         00000200  204034f8  00408744  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001ccc8  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003e63  00000000  00000000  0003d70f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000071a7  00000000  00000000  00041572  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d88  00000000  00000000  00048719  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e20  00000000  00000000  000494a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00022ae1  00000000  00000000  0004a2c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000ee96  00000000  00000000  0006cda2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009811c  00000000  00000000  0007bc38  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002d08  00000000  00000000  00113d54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f8 34 40 20 3d 10 40 00 3b 10 40 00 3b 10 40 00     .4@ =.@.;.@.;.@.
  400010:	3b 10 40 00 3b 10 40 00 3b 10 40 00 00 00 00 00     ;.@.;.@.;.@.....
	...
  40002c:	3b 10 40 00 3b 10 40 00 00 00 00 00 3b 10 40 00     ;.@.;.@.....;.@.
  40003c:	3b 10 40 00 3b 10 40 00 3b 10 40 00 3b 10 40 00     ;.@.;.@.;.@.;.@.
  40004c:	3b 10 40 00 3b 10 40 00 3b 10 40 00 3b 10 40 00     ;.@.;.@.;.@.;.@.
  40005c:	3b 10 40 00 3b 10 40 00 00 00 00 00 fd 0c 40 00     ;.@.;.@.......@.
  40006c:	11 0d 40 00 25 0d 40 00 3b 10 40 00 3b 10 40 00     ..@.%.@.;.@.;.@.
  40007c:	3b 10 40 00 39 0d 40 00 4d 0d 40 00 3b 10 40 00     ;.@.9.@.M.@.;.@.
  40008c:	3b 10 40 00 3b 10 40 00 3b 10 40 00 3b 10 40 00     ;.@.;.@.;.@.;.@.
  40009c:	3b 10 40 00 3b 10 40 00 3b 10 40 00 3b 10 40 00     ;.@.;.@.;.@.;.@.
  4000ac:	3b 10 40 00 3b 10 40 00 3b 10 40 00 3b 10 40 00     ;.@.;.@.;.@.;.@.
  4000bc:	3b 10 40 00 3b 10 40 00 3b 10 40 00 3b 10 40 00     ;.@.;.@.;.@.;.@.
  4000cc:	3b 10 40 00 3b 10 40 00 c1 16 40 00 3b 10 40 00     ;.@.;.@...@.;.@.
  4000dc:	3b 10 40 00 3b 10 40 00 3b 10 40 00 3b 10 40 00     ;.@.;.@.;.@.;.@.
  4000ec:	3b 10 40 00 3b 10 40 00 3b 10 40 00 3b 10 40 00     ;.@.;.@.;.@.;.@.
  4000fc:	3b 10 40 00 3b 10 40 00 3b 10 40 00 3b 10 40 00     ;.@.;.@.;.@.;.@.
  40010c:	3b 10 40 00 3b 10 40 00 3b 10 40 00 00 00 00 00     ;.@.;.@.;.@.....
  40011c:	00 00 00 00 3b 10 40 00 3b 10 40 00 3b 10 40 00     ....;.@.;.@.;.@.
  40012c:	3b 10 40 00 3b 10 40 00 3b 10 40 00 3b 10 40 00     ;.@.;.@.;.@.;.@.
  40013c:	3b 10 40 00 3b 10 40 00 3b 10 40 00 3b 10 40 00     ;.@.;.@.;.@.;.@.
  40014c:	3b 10 40 00 3b 10 40 00 3b 10 40 00 3b 10 40 00     ;.@.;.@.;.@.;.@.
  40015c:	3b 10 40 00 3b 10 40 00 3b 10 40 00                 ;.@.;.@.;.@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c0 	.word	0x204009c0
  400184:	00000000 	.word	0x00000000
  400188:	0040524c 	.word	0x0040524c

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	0040524c 	.word	0x0040524c
  4001c8:	204009c4 	.word	0x204009c4
  4001cc:	0040524c 	.word	0x0040524c
  4001d0:	00000000 	.word	0x00000000

004001d4 <bb_elem_decrement_wakeup_offset>:
 * @return True if the wakeup offset was decremented, false if it was not
 */
bool_T bb_elem_decrement_wakeup_offset(BlackboardElement_T * bbElement, const uint32_t elapsedTicks)
{
    bool_T decremented = false;
    if (bbElement->wakeupOffset > elapsedTicks)
  4001d4:	68c3      	ldr	r3, [r0, #12]
  4001d6:	428b      	cmp	r3, r1
  4001d8:	d903      	bls.n	4001e2 <bb_elem_decrement_wakeup_offset+0xe>
    {
        bbElement->wakeupOffset = bbElement->wakeupOffset - elapsedTicks;
  4001da:	1a5b      	subs	r3, r3, r1
  4001dc:	60c3      	str	r3, [r0, #12]
        decremented = true;
  4001de:	2001      	movs	r0, #1
  4001e0:	4770      	bx	lr
    bool_T decremented = false;
  4001e2:	2000      	movs	r0, #0
    }
    return decremented;
}
  4001e4:	4770      	bx	lr
	...

004001e8 <bb_elem_get_data_for_can>:
 *
 * @param[out] data0 a pointer to a u32 that will be copied with the lower 4 bytes of data.
 * @param[out] data1 a pointer to a u32 that will be copied with the upper 4 bytes of data.
 */
void bb_elem_get_data_for_can(BlackboardElement_T const * bbElement, uint32_t * const data0, uint32_t * const data1)
{
  4001e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4001ea:	4606      	mov	r6, r0
  4001ec:	460f      	mov	r7, r1
  4001ee:	4615      	mov	r5, r2
    *data0 = bb_port_get_data_direct32(bbElement, 0U);
  4001f0:	2100      	movs	r1, #0
  4001f2:	4c04      	ldr	r4, [pc, #16]	; (400204 <bb_elem_get_data_for_can+0x1c>)
  4001f4:	47a0      	blx	r4
  4001f6:	6038      	str	r0, [r7, #0]
    *data1 = bb_port_get_data_direct32(bbElement, 4U);
  4001f8:	2104      	movs	r1, #4
  4001fa:	4630      	mov	r0, r6
  4001fc:	47a0      	blx	r4
  4001fe:	6028      	str	r0, [r5, #0]
  400200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400202:	bf00      	nop
  400204:	0040046d 	.word	0x0040046d

00400208 <bb_elem_set_data_from_can>:
 * @param data0 a u32 that will be copied into the lower 4 bytes of this element's data.
 * @param data1 a u32 that will be copied into the upper 4 bytes of this element's data.
 */
void bb_elem_set_data_from_can(BlackboardElement_T * bbElement, const CANElementIndex_T idx,
    const uint32_t data0, const uint32_t data1)
{
  400208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40020a:	4606      	mov	r6, r0
  40020c:	460d      	mov	r5, r1
  40020e:	4611      	mov	r1, r2
  400210:	461f      	mov	r7, r3
    bb_port_set_data_direct32(bbElement, data0, 0U);
  400212:	2200      	movs	r2, #0
  400214:	4c08      	ldr	r4, [pc, #32]	; (400238 <bb_elem_set_data_from_can+0x30>)
  400216:	47a0      	blx	r4
    bb_port_set_data_direct32(bbElement, data1, 4U);
  400218:	2204      	movs	r2, #4
  40021a:	4639      	mov	r1, r7
  40021c:	4630      	mov	r0, r6
  40021e:	47a0      	blx	r4

    const CANElement_T * canElement = can_elem_get_can_elem_idx(idx);
  400220:	4628      	mov	r0, r5
  400222:	4b06      	ldr	r3, [pc, #24]	; (40023c <bb_elem_set_data_from_can+0x34>)
  400224:	4798      	blx	r3

    if (canElement->callback.callbackFn != NULL)
  400226:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400228:	b123      	cbz	r3, 400234 <bb_elem_set_data_from_can+0x2c>
    {
        canElement->callback.callbackFn(canElement->callback.callbackCtx,
  40022a:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
  40022e:	2100      	movs	r1, #0
  400230:	6b40      	ldr	r0, [r0, #52]	; 0x34
  400232:	4798      	blx	r3
  400234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400236:	bf00      	nop
  400238:	00400441 	.word	0x00400441
  40023c:	004003cd 	.word	0x004003cd

00400240 <bb_elem_update_last_tick_count>:
 * @brief updateLastTickCount updates last tick count to the current tick if the scheduler is running
 *
 * @return none
 */
void bb_elem_update_last_tick_count(BlackboardElement_T * bbElement)
{
  400240:	b510      	push	{r4, lr}
  400242:	4604      	mov	r4, r0
    bbElement->lastUpdate_tick = bb_port_get_current_ticks();
  400244:	4b01      	ldr	r3, [pc, #4]	; (40024c <bb_elem_update_last_tick_count+0xc>)
  400246:	4798      	blx	r3
  400248:	60a0      	str	r0, [r4, #8]
  40024a:	bd10      	pop	{r4, pc}
  40024c:	004003fd 	.word	0x004003fd

00400250 <bb_elem_set_uint8_data>:
{
  400250:	b510      	push	{r4, lr}
  400252:	4604      	mov	r4, r0
    bb_port_set_data_direct8(bbElement, data8, index);
  400254:	4b02      	ldr	r3, [pc, #8]	; (400260 <bb_elem_set_uint8_data+0x10>)
  400256:	4798      	blx	r3
    bb_elem_update_last_tick_count(bbElement);
  400258:	4620      	mov	r0, r4
  40025a:	4b02      	ldr	r3, [pc, #8]	; (400264 <bb_elem_set_uint8_data+0x14>)
  40025c:	4798      	blx	r3
  40025e:	bd10      	pop	{r4, pc}
  400260:	00400409 	.word	0x00400409
  400264:	00400241 	.word	0x00400241

00400268 <bb_elem_set_int8_data>:
{
  400268:	b508      	push	{r3, lr}
    bb_elem_set_uint8_data(bbElement, bb_utils_toUnsigned8(data8), index);
  40026a:	b2c9      	uxtb	r1, r1
  40026c:	4b01      	ldr	r3, [pc, #4]	; (400274 <bb_elem_set_int8_data+0xc>)
  40026e:	4798      	blx	r3
  400270:	bd08      	pop	{r3, pc}
  400272:	bf00      	nop
  400274:	00400251 	.word	0x00400251

00400278 <bb_elem_set_uint16_data>:
{
  400278:	b510      	push	{r4, lr}
  40027a:	4604      	mov	r4, r0
    bb_port_set_data_direct16(bbElement, data16, index);
  40027c:	4b02      	ldr	r3, [pc, #8]	; (400288 <bb_elem_set_uint16_data+0x10>)
  40027e:	4798      	blx	r3
    bb_elem_update_last_tick_count(bbElement);
  400280:	4620      	mov	r0, r4
  400282:	4b02      	ldr	r3, [pc, #8]	; (40028c <bb_elem_set_uint16_data+0x14>)
  400284:	4798      	blx	r3
  400286:	bd10      	pop	{r4, pc}
  400288:	0040040d 	.word	0x0040040d
  40028c:	00400241 	.word	0x00400241

00400290 <bb_elem_set_int16_data>:
{
  400290:	b508      	push	{r3, lr}
    bb_elem_set_uint16_data(bbElement, bb_utils_toUnsigned16(data16), index);
  400292:	b289      	uxth	r1, r1
  400294:	4b01      	ldr	r3, [pc, #4]	; (40029c <bb_elem_set_int16_data+0xc>)
  400296:	4798      	blx	r3
  400298:	bd08      	pop	{r3, pc}
  40029a:	bf00      	nop
  40029c:	00400279 	.word	0x00400279

004002a0 <bb_tx_proc_init>:
void bb_tx_proc_init(BlackboardTxProcessor_T * bbTxProc,
                     uint32_t maxDelay,
                     ICANTx_T* transmitters,
                     uint32_t numTransmitters,
                     uint32_t currTimestampTicks)
{
  4002a0:	b570      	push	{r4, r5, r6, lr}
  4002a2:	9e04      	ldr	r6, [sp, #16]
    bbTxProc->maxDelay = maxDelay;
  4002a4:	6001      	str	r1, [r0, #0]
    bbTxProc->transmitters = transmitters;
  4002a6:	6042      	str	r2, [r0, #4]
    bbTxProc->numTransmitters = numTransmitters;
  4002a8:	6083      	str	r3, [r0, #8]

    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  4002aa:	2400      	movs	r4, #0
    {
        BlackboardElement_T * bbElement = bb_get_element((CANElementIndex_T)i);
  4002ac:	4d04      	ldr	r5, [pc, #16]	; (4002c0 <bb_tx_proc_init+0x20>)
  4002ae:	b2e0      	uxtb	r0, r4
  4002b0:	47a8      	blx	r5
        bb_elem_set_wakeup_offset(bbElement, currTimestampTicks + i);
  4002b2:	1933      	adds	r3, r6, r4
 *
 * @param bbElement Pointer to the blackboard element struct to set the data of
 */
static inline void bb_elem_set_wakeup_offset(BlackboardElement_T * bbElement, const uint32_t wakeupOffset)
{
    bbElement->wakeupOffset = wakeupOffset;
  4002b4:	60c3      	str	r3, [r0, #12]
    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  4002b6:	3401      	adds	r4, #1
  4002b8:	2c07      	cmp	r4, #7
  4002ba:	d1f8      	bne.n	4002ae <bb_tx_proc_init+0xe>
    }
}
  4002bc:	bd70      	pop	{r4, r5, r6, pc}
  4002be:	bf00      	nop
  4002c0:	00400499 	.word	0x00400499

004002c4 <bb_tx_proc_tx_message>:
                   const CANElement_T * canElement,
                   const BlackboardTxProcessor_T * const bbTxProc,
                   uint32_t canChannel,
                   uint32_t maskTxChannel,
                   uint32_t minimumOffsetTicks)
{
  4002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4002c6:	b083      	sub	sp, #12
  4002c8:	460f      	mov	r7, r1
  4002ca:	4615      	mov	r5, r2
  4002cc:	461e      	mov	r6, r3
    BlackboardElement_T * bbElement = bb_get_element((CANElementIndex_T)index);
  4002ce:	b2c0      	uxtb	r0, r0
  4002d0:	4b1c      	ldr	r3, [pc, #112]	; (400344 <bb_tx_proc_tx_message+0x80>)
  4002d2:	4798      	blx	r3
  4002d4:	4604      	mov	r4, r0
    if (!bb_elem_decrement_wakeup_offset(bbElement, elapsedTicks))
  4002d6:	4639      	mov	r1, r7
  4002d8:	4b1b      	ldr	r3, [pc, #108]	; (400348 <bb_tx_proc_tx_message+0x84>)
  4002da:	4798      	blx	r3
  4002dc:	b130      	cbz	r0, 4002ec <bb_tx_proc_tx_message+0x28>
 *
 * @return The smaller of the current minimum offset and the blackboard element's wakeup offset
 */
static inline uint32_t bb_elem_compute_minimum_offset_ticks(BlackboardElement_T const * bbElement, const uint32_t minimumOffsetTicks)
{
    return (minimumOffsetTicks > bbElement->wakeupOffset) ? bbElement->wakeupOffset : minimumOffsetTicks;
  4002de:	68e3      	ldr	r3, [r4, #12]
                                            CAN_NONE);                 // Rx Channel is N/A
        }
        // else Callback container is null, don't call
    }
    return bb_elem_compute_minimum_offset_ticks(bbElement, minimumOffsetTicks);
}
  4002e0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4002e2:	4298      	cmp	r0, r3
  4002e4:	bf28      	it	cs
  4002e6:	4618      	movcs	r0, r3
  4002e8:	b003      	add	sp, #12
  4002ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        const uint32_t period_ticks = BB_PORT_MS_TO_TICKS(msgInfo->period_ms);
  4002ec:	68aa      	ldr	r2, [r5, #8]
  4002ee:	23c8      	movs	r3, #200	; 0xc8
  4002f0:	fb03 f302 	mul.w	r3, r3, r2
  4002f4:	4a15      	ldr	r2, [pc, #84]	; (40034c <bb_tx_proc_tx_message+0x88>)
  4002f6:	fba2 2303 	umull	r2, r3, r2, r3
  4002fa:	099b      	lsrs	r3, r3, #6
    return elapsedTicks - bbElement->wakeupOffset;
  4002fc:	68e2      	ldr	r2, [r4, #12]
  4002fe:	1abf      	subs	r7, r7, r2
        bb_elem_set_wakeup_offset(bbElement, period_ticks - (overflow_ticks % period_ticks));
  400300:	fbb7 f2f3 	udiv	r2, r7, r3
  400304:	fb03 7712 	mls	r7, r3, r2, r7
  400308:	1bdb      	subs	r3, r3, r7
    bbElement->wakeupOffset = wakeupOffset;
  40030a:	60e3      	str	r3, [r4, #12]
        uint32_t tx_data[2] = {0, 0};
  40030c:	2300      	movs	r3, #0
  40030e:	9300      	str	r3, [sp, #0]
  400310:	9301      	str	r3, [sp, #4]
        bb_elem_get_data_for_can(bbElement, &tx_data[0], &tx_data[1]);
  400312:	aa01      	add	r2, sp, #4
  400314:	4669      	mov	r1, sp
  400316:	4620      	mov	r0, r4
  400318:	4b0d      	ldr	r3, [pc, #52]	; (400350 <bb_tx_proc_tx_message+0x8c>)
  40031a:	4798      	blx	r3
        const ICANTx_T * const transmitter = &bbTxProc->transmitters[canChannel];
  40031c:	6873      	ldr	r3, [r6, #4]
  40031e:	9a08      	ldr	r2, [sp, #32]
  400320:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
        transmitter->transmitFn(transmitter->context, msgInfo->id, (uint8_t *)(&tx_data[0]), (uint8_t)msgInfo->numBytes);
  400324:	f853 6032 	ldr.w	r6, [r3, r2, lsl #3]
  400328:	7b2b      	ldrb	r3, [r5, #12]
  40032a:	466a      	mov	r2, sp
  40032c:	6829      	ldr	r1, [r5, #0]
  40032e:	6840      	ldr	r0, [r0, #4]
  400330:	47b0      	blx	r6
        if (canElement->callback.callbackFn != NULL)
  400332:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  400334:	2b00      	cmp	r3, #0
  400336:	d0d2      	beq.n	4002de <bb_tx_proc_tx_message+0x1a>
            canElement->callback.callbackFn(canElement->callback.callbackCtx,
  400338:	2200      	movs	r2, #0
  40033a:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
  40033e:	6b68      	ldr	r0, [r5, #52]	; 0x34
  400340:	4798      	blx	r3
  400342:	e7cc      	b.n	4002de <bb_tx_proc_tx_message+0x1a>
  400344:	00400499 	.word	0x00400499
  400348:	004001d5 	.word	0x004001d5
  40034c:	10624dd3 	.word	0x10624dd3
  400350:	004001e9 	.word	0x004001e9

00400354 <bb_tx_proc_process_tx>:
{
  400354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400358:	b087      	sub	sp, #28
  40035a:	4606      	mov	r6, r0
    const uint32_t elapsedTicks = currTimestampTicks - prevTimestampTicks;
  40035c:	1a8b      	subs	r3, r1, r2
  40035e:	9305      	str	r3, [sp, #20]
    uint32_t minimumOffsetTicks = bbTxProc->maxDelay;
  400360:	f8d0 9000 	ldr.w	r9, [r0]
    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  400364:	2700      	movs	r7, #0
        const CANElement_T * canElement = can_elem_get_can_elem_idx((CANElementIndex_T)i);
  400366:	f8df b05c 	ldr.w	fp, [pc, #92]	; 4003c4 <bb_tx_proc_process_tx+0x70>
                    minimumOffsetTicks = bb_tx_proc_tx_message(i, elapsedTicks, canElement, bbTxProc, canChannel, maskTxChannel, minimumOffsetTicks);
  40036a:	f8df a05c 	ldr.w	sl, [pc, #92]	; 4003c8 <bb_tx_proc_process_tx+0x74>
  40036e:	e017      	b.n	4003a0 <bb_tx_proc_process_tx+0x4c>
            for(uint32_t canChannel = 0U; canChannel < bbTxProc->numTransmitters; canChannel++)
  400370:	3401      	adds	r4, #1
  400372:	68b3      	ldr	r3, [r6, #8]
  400374:	42a3      	cmp	r3, r4
  400376:	d910      	bls.n	40039a <bb_tx_proc_process_tx+0x46>
                const uint32_t maskTxChannel = (uint32_t)1U << canChannel;
  400378:	fa08 f304 	lsl.w	r3, r8, r4
                if (((uint32_t)canElement->txChan & maskTxChannel) > 0UL)
  40037c:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
  400380:	421a      	tst	r2, r3
  400382:	d0f5      	beq.n	400370 <bb_tx_proc_process_tx+0x1c>
                    minimumOffsetTicks = bb_tx_proc_tx_message(i, elapsedTicks, canElement, bbTxProc, canChannel, maskTxChannel, minimumOffsetTicks);
  400384:	f8cd 9008 	str.w	r9, [sp, #8]
  400388:	9301      	str	r3, [sp, #4]
  40038a:	9400      	str	r4, [sp, #0]
  40038c:	4633      	mov	r3, r6
  40038e:	462a      	mov	r2, r5
  400390:	9905      	ldr	r1, [sp, #20]
  400392:	4638      	mov	r0, r7
  400394:	47d0      	blx	sl
  400396:	4681      	mov	r9, r0
  400398:	e7ea      	b.n	400370 <bb_tx_proc_process_tx+0x1c>
    for (uint32_t i = 0U; i < (uint32_t)(CAN_ELEM_LAST_MSG); ++i)
  40039a:	3701      	adds	r7, #1
  40039c:	2f07      	cmp	r7, #7
  40039e:	d00d      	beq.n	4003bc <bb_tx_proc_process_tx+0x68>
        const CANElement_T * canElement = can_elem_get_can_elem_idx((CANElementIndex_T)i);
  4003a0:	b2f8      	uxtb	r0, r7
  4003a2:	47d8      	blx	fp
  4003a4:	4605      	mov	r5, r0
        if ((uint32_t)canElement->txChan > 0UL)
  4003a6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  4003aa:	2b00      	cmp	r3, #0
  4003ac:	d0f5      	beq.n	40039a <bb_tx_proc_process_tx+0x46>
            for(uint32_t canChannel = 0U; canChannel < bbTxProc->numTransmitters; canChannel++)
  4003ae:	68b3      	ldr	r3, [r6, #8]
  4003b0:	2b00      	cmp	r3, #0
  4003b2:	d0f2      	beq.n	40039a <bb_tx_proc_process_tx+0x46>
  4003b4:	2400      	movs	r4, #0
                const uint32_t maskTxChannel = (uint32_t)1U << canChannel;
  4003b6:	f04f 0801 	mov.w	r8, #1
  4003ba:	e7dd      	b.n	400378 <bb_tx_proc_process_tx+0x24>
}
  4003bc:	4648      	mov	r0, r9
  4003be:	b007      	add	sp, #28
  4003c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4003c4:	004003cd 	.word	0x004003cd
  4003c8:	004002c5 	.word	0x004002c5

004003cc <can_elem_get_can_elem_idx>:
 *
 * @return A pointer to the can element struct with the given index
 */
const CANElement_T * can_elem_get_can_elem_idx(const CANElementIndex_T idx)
{
    return &can_spec_can_element_list[idx];
  4003cc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
}
  4003d0:	4b01      	ldr	r3, [pc, #4]	; (4003d8 <can_elem_get_can_elem_idx+0xc>)
  4003d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4003d6:	4770      	bx	lr
  4003d8:	00404b6c 	.word	0x00404b6c

004003dc <can_elem_get_can_msg_info_idx>:
 *
 * @return A pointer to the can msg info struct with the given index
 */
const CANMsgInfo_T * can_elem_get_can_msg_info_idx(const CANElementIndex_T idx)
{
    return &can_spec_can_element_list[idx].canMsgInfo;
  4003dc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
}
  4003e0:	4b01      	ldr	r3, [pc, #4]	; (4003e8 <can_elem_get_can_msg_info_idx+0xc>)
  4003e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4003e6:	4770      	bx	lr
  4003e8:	00404b6c 	.word	0x00404b6c

004003ec <bb_port_inc_ticks>:
#ifdef BB_UNIT_TEST
static int fakeTick = 0;

void bb_port_inc_ticks(uint32_t ticks)
{
    fakeTick += ticks;
  4003ec:	4a02      	ldr	r2, [pc, #8]	; (4003f8 <bb_port_inc_ticks+0xc>)
  4003ee:	6813      	ldr	r3, [r2, #0]
  4003f0:	4418      	add	r0, r3
  4003f2:	6010      	str	r0, [r2, #0]
  4003f4:	4770      	bx	lr
  4003f6:	bf00      	nop
  4003f8:	204009dc 	.word	0x204009dc

004003fc <bb_port_get_current_ticks>:
 * g_tx_tick_count_ms.
 * @return the current time in ticks
 */
uint32_t bb_port_get_current_ticks(void)
{
  return g_tx_tick_count_ms;
  4003fc:	4b01      	ldr	r3, [pc, #4]	; (400404 <bb_port_get_current_ticks+0x8>)
  4003fe:	6818      	ldr	r0, [r3, #0]
}
  400400:	4770      	bx	lr
  400402:	bf00      	nop
  400404:	20401450 	.word	0x20401450

00400408 <bb_port_set_data_direct8>:
    const uint32_t byteOffsetInWord = (uint32_t)(byteIndexInElement) % 4U;
    const uint32_t wordIndex = (uint32_t)(byteIndexInElement) / 4U;

    volatile uint8_t * const dest8Ptr = (volatile uint8_t *)(&element->dataWords[wordIndex]) + byteOffsetInWord;

    *dest8Ptr = data8;
  400408:	5481      	strb	r1, [r0, r2]
  40040a:	4770      	bx	lr

0040040c <bb_port_set_data_direct16>:
 * perform an atomic write to the internal blackboard element storage.
 *
 * @see BlackboardPort.h for details on this method.
 */
void bb_port_set_data_direct16(BlackboardElement_T * element, const uint16_t data16, const uint8_t byteIndexInElement)
{
  40040c:	b510      	push	{r4, lr}
    const uint32_t byteOffsetInWord = (uint32_t)(byteIndexInElement) % 4U;
    const uint32_t wordIndex = (uint32_t)(byteIndexInElement) / 4U;

    // Dereferencing a u16 pointer with a byte offset.  Make sure it is u16-aligned within the
    // element.
    SLI_ASSERT((byteOffsetInWord % 2U) == 0);
  40040e:	f012 0f01 	tst.w	r2, #1
  400412:	d106      	bne.n	400422 <bb_port_set_data_direct16+0x16>
  400414:	f002 0303 	and.w	r3, r2, #3
  400418:	0894      	lsrs	r4, r2, #2
    volatile uint16_t * const dest16Ptr = (volatile uint16_t *)(((volatile uint8_t *)&element->dataWords[wordIndex]) + byteOffsetInWord);
  40041a:	eb03 0384 	add.w	r3, r3, r4, lsl #2

    *dest16Ptr = data16;
  40041e:	52c1      	strh	r1, [r0, r3]
  400420:	bd10      	pop	{r4, pc}
    SLI_ASSERT((byteOffsetInWord % 2U) == 0);
  400422:	4b03      	ldr	r3, [pc, #12]	; (400430 <bb_port_set_data_direct16+0x24>)
  400424:	4a03      	ldr	r2, [pc, #12]	; (400434 <bb_port_set_data_direct16+0x28>)
  400426:	2176      	movs	r1, #118	; 0x76
  400428:	4803      	ldr	r0, [pc, #12]	; (400438 <bb_port_set_data_direct16+0x2c>)
  40042a:	4c04      	ldr	r4, [pc, #16]	; (40043c <bb_port_set_data_direct16+0x30>)
  40042c:	47a0      	blx	r4
  40042e:	bf00      	nop
  400430:	00404b1c 	.word	0x00404b1c
  400434:	00404ac8 	.word	0x00404ac8
  400438:	00404b3c 	.word	0x00404b3c
  40043c:	00401a21 	.word	0x00401a21

00400440 <bb_port_set_data_direct32>:
    const uint32_t byteOffsetInWord = (uint32_t)(byteIndexInElement) % 4U;
    const uint32_t wordIndex = (uint32_t)(byteIndexInElement) / 4U;

    // Dereferencing a u32 pointer with a byte offset.  Make sure it is u32-aligned within the
    // element.
    SLI_ASSERT(byteOffsetInWord == 0);
  400440:	f012 0f03 	tst.w	r2, #3
  400444:	d103      	bne.n	40044e <bb_port_set_data_direct32+0xe>
  400446:	0893      	lsrs	r3, r2, #2
    volatile uint32_t * const dest32Ptr = (volatile uint32_t *)(&element->dataWords[wordIndex]);

    *dest32Ptr = data32;
  400448:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
  40044c:	4770      	bx	lr
{
  40044e:	b510      	push	{r4, lr}
    SLI_ASSERT(byteOffsetInWord == 0);
  400450:	4b02      	ldr	r3, [pc, #8]	; (40045c <bb_port_set_data_direct32+0x1c>)
  400452:	4a03      	ldr	r2, [pc, #12]	; (400460 <bb_port_set_data_direct32+0x20>)
  400454:	218a      	movs	r1, #138	; 0x8a
  400456:	4803      	ldr	r0, [pc, #12]	; (400464 <bb_port_set_data_direct32+0x24>)
  400458:	4c03      	ldr	r4, [pc, #12]	; (400468 <bb_port_set_data_direct32+0x28>)
  40045a:	47a0      	blx	r4
  40045c:	00404b54 	.word	0x00404b54
  400460:	00404ae4 	.word	0x00404ae4
  400464:	00404b3c 	.word	0x00404b3c
  400468:	00401a21 	.word	0x00401a21

0040046c <bb_port_get_data_direct32>:
    const uint32_t byteOffsetInWord = (uint32_t)(byteIndexInElement) % 4U;
    const uint32_t wordIndex = (uint32_t)(byteIndexInElement) / 4U;

    // Dereferencing a u32 pointer with a byte offset.  Make sure it is u32-aligned within the
    // element.
    SLI_ASSERT(byteOffsetInWord == 0);
  40046c:	f011 0f03 	tst.w	r1, #3
  400470:	d103      	bne.n	40047a <bb_port_get_data_direct32+0xe>
  400472:	088b      	lsrs	r3, r1, #2
    volatile uint32_t * const src32Ptr = (volatile uint32_t *)(&element->dataWords[wordIndex]);

    return *src32Ptr;
  400474:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
  400478:	4770      	bx	lr
{
  40047a:	b510      	push	{r4, lr}
    SLI_ASSERT(byteOffsetInWord == 0);
  40047c:	4b02      	ldr	r3, [pc, #8]	; (400488 <bb_port_get_data_direct32+0x1c>)
  40047e:	4a03      	ldr	r2, [pc, #12]	; (40048c <bb_port_get_data_direct32+0x20>)
  400480:	21c3      	movs	r1, #195	; 0xc3
  400482:	4803      	ldr	r0, [pc, #12]	; (400490 <bb_port_get_data_direct32+0x24>)
  400484:	4c03      	ldr	r4, [pc, #12]	; (400494 <bb_port_get_data_direct32+0x28>)
  400486:	47a0      	blx	r4
  400488:	00404b54 	.word	0x00404b54
  40048c:	00404b00 	.word	0x00404b00
  400490:	00404b3c 	.word	0x00404b3c
  400494:	00401a21 	.word	0x00401a21

00400498 <bb_get_element>:
 */
BlackboardElement_T * bb_get_element(const CANElementIndex_T idx)
{
    static Blackboard_T theBB;
    return &theBB.elements[idx];
}
  400498:	4b01      	ldr	r3, [pc, #4]	; (4004a0 <bb_get_element+0x8>)
  40049a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  40049e:	4770      	bx	lr
  4004a0:	204009e0 	.word	0x204009e0

004004a4 <bb_set_SCM_motor1MaxSpeed>:
 * @brief Sets the SCM_motor1MaxSpeed value within the blackboard.
 * @see bb_get_SCM_motor1MaxSpeed for a description of this property.
 * @param value int16_t in step/s
 */
void bb_set_SCM_motor1MaxSpeed(const float32_T value)
{
  4004a4:	b500      	push	{lr}
  4004a6:	ed2d 8b02 	vpush	{d8}
  4004aa:	b083      	sub	sp, #12
  4004ac:	ee08 0a10 	vmov	s16, r0
    const CANMsgInfo_T * canMsgInfo = can_elem_get_can_msg_info_idx(CAN_ELEM_SCM_Motor1Params1);
  4004b0:	2001      	movs	r0, #1
  4004b2:	4b0a      	ldr	r3, [pc, #40]	; (4004dc <bb_set_SCM_motor1MaxSpeed+0x38>)
  4004b4:	4798      	blx	r3
static inline int16_t bb_utils_floatToFixed16(const float32_T fvalue, const uint16_t bits)
{
    const uint32_t shift = 1UL << bits;
    const float32_T fshift = (float32_T)(shift);
    const float32_T fproduct = fvalue * fshift;
    return (int16_t)(fproduct);
  4004b6:	eef0 7a48 	vmov.f32	s15, s16
  4004ba:	eefe 7acf 	vcvt.s32.f32	s15, s15, #2
  4004be:	edcd 7a01 	vstr	s15, [sp, #4]
    BlackboardElement_T * bbElem = bb_get_element(CAN_ELEM_SCM_Motor1Params1);
    const CANDataInfo_T * dataInfo = &canMsgInfo->data_info[2];
    bb_elem_set_int16_data(bbElem, bb_utils_floatToFixed16(value, 2U), dataInfo->start_byte);
  4004c2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
  4004c6:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
  4004ca:	4805      	ldr	r0, [pc, #20]	; (4004e0 <bb_set_SCM_motor1MaxSpeed+0x3c>)
  4004cc:	4b05      	ldr	r3, [pc, #20]	; (4004e4 <bb_set_SCM_motor1MaxSpeed+0x40>)
  4004ce:	4798      	blx	r3
}
  4004d0:	b003      	add	sp, #12
  4004d2:	ecbd 8b02 	vpop	{d8}
  4004d6:	f85d fb04 	ldr.w	pc, [sp], #4
  4004da:	bf00      	nop
  4004dc:	004003dd 	.word	0x004003dd
  4004e0:	204009f0 	.word	0x204009f0
  4004e4:	00400291 	.word	0x00400291

004004e8 <bb_set_SCM_motor1MinSpeed>:
 * @brief Sets the SCM_motor1MinSpeed value within the blackboard.
 * @see bb_get_SCM_motor1MinSpeed for a description of this property.
 * @param value int16_t in step/s
 */
void bb_set_SCM_motor1MinSpeed(const float32_T value)
{
  4004e8:	b500      	push	{lr}
  4004ea:	ed2d 8b02 	vpush	{d8}
  4004ee:	b083      	sub	sp, #12
  4004f0:	ee08 0a10 	vmov	s16, r0
    const CANMsgInfo_T * canMsgInfo = can_elem_get_can_msg_info_idx(CAN_ELEM_SCM_Motor1Params1);
  4004f4:	2001      	movs	r0, #1
  4004f6:	4b0a      	ldr	r3, [pc, #40]	; (400520 <bb_set_SCM_motor1MinSpeed+0x38>)
  4004f8:	4798      	blx	r3
  4004fa:	eef0 7a48 	vmov.f32	s15, s16
  4004fe:	eefe 7acf 	vcvt.s32.f32	s15, s15, #2
  400502:	edcd 7a01 	vstr	s15, [sp, #4]
    BlackboardElement_T * bbElem = bb_get_element(CAN_ELEM_SCM_Motor1Params1);
    const CANDataInfo_T * dataInfo = &canMsgInfo->data_info[3];
    bb_elem_set_int16_data(bbElem, bb_utils_floatToFixed16(value, 2U), dataInfo->start_byte);
  400506:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
  40050a:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
  40050e:	4805      	ldr	r0, [pc, #20]	; (400524 <bb_set_SCM_motor1MinSpeed+0x3c>)
  400510:	4b05      	ldr	r3, [pc, #20]	; (400528 <bb_set_SCM_motor1MinSpeed+0x40>)
  400512:	4798      	blx	r3
}
  400514:	b003      	add	sp, #12
  400516:	ecbd 8b02 	vpop	{d8}
  40051a:	f85d fb04 	ldr.w	pc, [sp], #4
  40051e:	bf00      	nop
  400520:	004003dd 	.word	0x004003dd
  400524:	204009f0 	.word	0x204009f0
  400528:	00400291 	.word	0x00400291

0040052c <bb_set_SCM_Motor1Control>:
 * @brief Sets the SCM_Motor1Control value within the blackboard.
 * @see bb_get_SCM_Motor1Control for a description of this property.
 * @param value int8_t in steps
 */
void bb_set_SCM_Motor1Control(const int8_t value)
{
  40052c:	b510      	push	{r4, lr}
  40052e:	4604      	mov	r4, r0
    const CANMsgInfo_T * canMsgInfo = can_elem_get_can_msg_info_idx(CAN_ELEM_SCM_Motor1Control);
  400530:	2002      	movs	r0, #2
  400532:	4b04      	ldr	r3, [pc, #16]	; (400544 <bb_set_SCM_Motor1Control+0x18>)
  400534:	4798      	blx	r3
    BlackboardElement_T * bbElem = bb_get_element(CAN_ELEM_SCM_Motor1Control);
    const CANDataInfo_T * dataInfo = &canMsgInfo->data_info[0];
    bb_elem_set_int8_data(bbElem, value, dataInfo->start_byte);
  400536:	7d42      	ldrb	r2, [r0, #21]
  400538:	4621      	mov	r1, r4
  40053a:	4803      	ldr	r0, [pc, #12]	; (400548 <bb_set_SCM_Motor1Control+0x1c>)
  40053c:	4b03      	ldr	r3, [pc, #12]	; (40054c <bb_set_SCM_Motor1Control+0x20>)
  40053e:	4798      	blx	r3
  400540:	bd10      	pop	{r4, pc}
  400542:	bf00      	nop
  400544:	004003dd 	.word	0x004003dd
  400548:	20400a00 	.word	0x20400a00
  40054c:	00400269 	.word	0x00400269

00400550 <bb_set_SCM_Motor3Control>:
 * @brief Sets the SCM_Motor3Control value within the blackboard.
 * @see bb_get_SCM_Motor3Control for a description of this property.
 * @param value int8_t in steps
 */
void bb_set_SCM_Motor3Control(const int8_t value)
{
  400550:	b510      	push	{r4, lr}
  400552:	4604      	mov	r4, r0
    const CANMsgInfo_T * canMsgInfo = can_elem_get_can_msg_info_idx(CAN_ELEM_SCM_Motor3Control);
  400554:	2004      	movs	r0, #4
  400556:	4b04      	ldr	r3, [pc, #16]	; (400568 <bb_set_SCM_Motor3Control+0x18>)
  400558:	4798      	blx	r3
    BlackboardElement_T * bbElem = bb_get_element(CAN_ELEM_SCM_Motor3Control);
    const CANDataInfo_T * dataInfo = &canMsgInfo->data_info[0];
    bb_elem_set_int8_data(bbElem, value, dataInfo->start_byte);
  40055a:	7d42      	ldrb	r2, [r0, #21]
  40055c:	4621      	mov	r1, r4
  40055e:	4803      	ldr	r0, [pc, #12]	; (40056c <bb_set_SCM_Motor3Control+0x1c>)
  400560:	4b03      	ldr	r3, [pc, #12]	; (400570 <bb_set_SCM_Motor3Control+0x20>)
  400562:	4798      	blx	r3
  400564:	bd10      	pop	{r4, pc}
  400566:	bf00      	nop
  400568:	004003dd 	.word	0x004003dd
  40056c:	20400a20 	.word	0x20400a20
  400570:	00400269 	.word	0x00400269

00400574 <testSCMCallback>:
#include <stdio.h>

static int hackyStickyCounter = 37;

void testSCMCallback(void * SCM_EVENT_FOO, CanChannel_T rxChan, CanChannel_T txChan)
{
  400574:	b530      	push	{r4, r5, lr}
  400576:	b083      	sub	sp, #12
    SCMEvent_T scmEvent = (SCMEvent_T)(uint32_t)(uint64_t)(SCM_EVENT_FOO);
    printf("testCallback: SCM_EVENT_FOO=%d, rxChan=%d, txChan=%d, counter=%d\n", scmEvent, rxChan, txChan, hackyStickyCounter++);
  400578:	4c06      	ldr	r4, [pc, #24]	; (400594 <testSCMCallback+0x20>)
  40057a:	6823      	ldr	r3, [r4, #0]
  40057c:	1c5d      	adds	r5, r3, #1
  40057e:	6025      	str	r5, [r4, #0]
  400580:	9300      	str	r3, [sp, #0]
  400582:	4613      	mov	r3, r2
  400584:	460a      	mov	r2, r1
  400586:	b2c1      	uxtb	r1, r0
  400588:	4803      	ldr	r0, [pc, #12]	; (400598 <testSCMCallback+0x24>)
  40058a:	4c04      	ldr	r4, [pc, #16]	; (40059c <testSCMCallback+0x28>)
  40058c:	47a0      	blx	r4
}
  40058e:	b003      	add	sp, #12
  400590:	bd30      	pop	{r4, r5, pc}
  400592:	bf00      	nop
  400594:	20400000 	.word	0x20400000
  400598:	00404e34 	.word	0x00404e34
  40059c:	00401ad5 	.word	0x00401ad5

004005a0 <candriver_send>:
 *  @param data_byte_length - the number of bytes sending
 *
 *  @post A message is sent if the CAN was not busy at the time of sending.
 */
bool candriver_send(uint32_t msg_id, uint8_t *msg_data, uint32_t data_byte_length)
{
  4005a0:	b508      	push	{r3, lr}
  mcan_send_standard_message(msg_id, msg_data,
  4005a2:	4b01      	ldr	r3, [pc, #4]	; (4005a8 <candriver_send+0x8>)
  4005a4:	4798      	blx	r3
					data_byte_length); 
  // return result;
  4005a6:	bd08      	pop	{r3, pc}
  4005a8:	0040165d 	.word	0x0040165d

004005ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4005ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  4005ae:	4810      	ldr	r0, [pc, #64]	; (4005f0 <sysclk_init+0x44>)
  4005b0:	4b10      	ldr	r3, [pc, #64]	; (4005f4 <sysclk_init+0x48>)
  4005b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4005b4:	213e      	movs	r1, #62	; 0x3e
  4005b6:	2000      	movs	r0, #0
  4005b8:	4b0f      	ldr	r3, [pc, #60]	; (4005f8 <sysclk_init+0x4c>)
  4005ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4005bc:	4c0f      	ldr	r4, [pc, #60]	; (4005fc <sysclk_init+0x50>)
  4005be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4005c0:	2800      	cmp	r0, #0
  4005c2:	d0fc      	beq.n	4005be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4005c4:	4b0e      	ldr	r3, [pc, #56]	; (400600 <sysclk_init+0x54>)
  4005c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4005c8:	4a0e      	ldr	r2, [pc, #56]	; (400604 <sysclk_init+0x58>)
  4005ca:	4b0f      	ldr	r3, [pc, #60]	; (400608 <sysclk_init+0x5c>)
  4005cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4005ce:	4c0f      	ldr	r4, [pc, #60]	; (40060c <sysclk_init+0x60>)
  4005d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4005d2:	2800      	cmp	r0, #0
  4005d4:	d0fc      	beq.n	4005d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4005d6:	2002      	movs	r0, #2
  4005d8:	4b0d      	ldr	r3, [pc, #52]	; (400610 <sysclk_init+0x64>)
  4005da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4005dc:	2000      	movs	r0, #0
  4005de:	4b0d      	ldr	r3, [pc, #52]	; (400614 <sysclk_init+0x68>)
  4005e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4005e2:	4b0d      	ldr	r3, [pc, #52]	; (400618 <sysclk_init+0x6c>)
  4005e4:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  4005e6:	4802      	ldr	r0, [pc, #8]	; (4005f0 <sysclk_init+0x44>)
  4005e8:	4b02      	ldr	r3, [pc, #8]	; (4005f4 <sysclk_init+0x48>)
  4005ea:	4798      	blx	r3
  4005ec:	bd10      	pop	{r4, pc}
  4005ee:	bf00      	nop
  4005f0:	08f0d180 	.word	0x08f0d180
  4005f4:	00401211 	.word	0x00401211
  4005f8:	00400dfd 	.word	0x00400dfd
  4005fc:	00400e51 	.word	0x00400e51
  400600:	00400e61 	.word	0x00400e61
  400604:	20183f01 	.word	0x20183f01
  400608:	400e0600 	.word	0x400e0600
  40060c:	00400e71 	.word	0x00400e71
  400610:	00400d61 	.word	0x00400d61
  400614:	00400d99 	.word	0x00400d99
  400618:	00401105 	.word	0x00401105

0040061c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40061c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400620:	b980      	cbnz	r0, 400644 <_read+0x28>
  400622:	460c      	mov	r4, r1
  400624:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400626:	2a00      	cmp	r2, #0
  400628:	dd0f      	ble.n	40064a <_read+0x2e>
  40062a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40062c:	4e08      	ldr	r6, [pc, #32]	; (400650 <_read+0x34>)
  40062e:	4d09      	ldr	r5, [pc, #36]	; (400654 <_read+0x38>)
  400630:	6830      	ldr	r0, [r6, #0]
  400632:	4621      	mov	r1, r4
  400634:	682b      	ldr	r3, [r5, #0]
  400636:	4798      	blx	r3
		ptr++;
  400638:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40063a:	42bc      	cmp	r4, r7
  40063c:	d1f8      	bne.n	400630 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40063e:	4640      	mov	r0, r8
  400640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400644:	f04f 38ff 	mov.w	r8, #4294967295
  400648:	e7f9      	b.n	40063e <_read+0x22>
	for (; len > 0; --len) {
  40064a:	4680      	mov	r8, r0
  40064c:	e7f7      	b.n	40063e <_read+0x22>
  40064e:	bf00      	nop
  400650:	204014c8 	.word	0x204014c8
  400654:	204014c0 	.word	0x204014c0

00400658 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400658:	3801      	subs	r0, #1
  40065a:	2802      	cmp	r0, #2
  40065c:	d815      	bhi.n	40068a <_write+0x32>
{
  40065e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400662:	460e      	mov	r6, r1
  400664:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400666:	b19a      	cbz	r2, 400690 <_write+0x38>
  400668:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40066a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4006a4 <_write+0x4c>
  40066e:	4f0c      	ldr	r7, [pc, #48]	; (4006a0 <_write+0x48>)
  400670:	f8d8 0000 	ldr.w	r0, [r8]
  400674:	f815 1b01 	ldrb.w	r1, [r5], #1
  400678:	683b      	ldr	r3, [r7, #0]
  40067a:	4798      	blx	r3
  40067c:	2800      	cmp	r0, #0
  40067e:	db0a      	blt.n	400696 <_write+0x3e>
  400680:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400682:	3c01      	subs	r4, #1
  400684:	d1f4      	bne.n	400670 <_write+0x18>
  400686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40068a:	f04f 30ff 	mov.w	r0, #4294967295
  40068e:	4770      	bx	lr
	for (; len != 0; --len) {
  400690:	4610      	mov	r0, r2
  400692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400696:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40069a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40069e:	bf00      	nop
  4006a0:	204014c4 	.word	0x204014c4
  4006a4:	204014c8 	.word	0x204014c8

004006a8 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4006a8:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4006aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4006ae:	4b63      	ldr	r3, [pc, #396]	; (40083c <board_init+0x194>)
  4006b0:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4006b2:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
  4006b6:	4a62      	ldr	r2, [pc, #392]	; (400840 <board_init+0x198>)
  4006b8:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4006ba:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  4006be:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4006c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4006c4:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4006c8:	4b5e      	ldr	r3, [pc, #376]	; (400844 <board_init+0x19c>)
  4006ca:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4006ce:	f022 0201 	bic.w	r2, r2, #1
  4006d2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4006d6:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4006da:	f022 0201 	bic.w	r2, r2, #1
  4006de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  4006e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4006e6:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4006ea:	200a      	movs	r0, #10
  4006ec:	4c56      	ldr	r4, [pc, #344]	; (400848 <board_init+0x1a0>)
  4006ee:	47a0      	blx	r4
  4006f0:	200b      	movs	r0, #11
  4006f2:	47a0      	blx	r4
  4006f4:	200c      	movs	r0, #12
  4006f6:	47a0      	blx	r4
  4006f8:	2010      	movs	r0, #16
  4006fa:	47a0      	blx	r4
  4006fc:	2011      	movs	r0, #17
  4006fe:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400700:	4b52      	ldr	r3, [pc, #328]	; (40084c <board_init+0x1a4>)
  400702:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400706:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400708:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40070c:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40070e:	4a50      	ldr	r2, [pc, #320]	; (400850 <board_init+0x1a8>)
  400710:	f44f 7100 	mov.w	r1, #512	; 0x200
  400714:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400716:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40071a:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40071c:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40071e:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400722:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400724:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400728:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40072a:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  40072c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400730:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400732:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  400736:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400738:	6f58      	ldr	r0, [r3, #116]	; 0x74
  40073a:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  40073e:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400740:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400744:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400748:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  40074c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  400750:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400752:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400756:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400758:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40075a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40075e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400760:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  400764:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400766:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400768:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  40076c:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40076e:	6059      	str	r1, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400770:	4938      	ldr	r1, [pc, #224]	; (400854 <board_init+0x1ac>)
  400772:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
  400776:	f043 0310 	orr.w	r3, r3, #16
  40077a:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
		base->PIO_PUDR = mask;
  40077e:	4b36      	ldr	r3, [pc, #216]	; (400858 <board_init+0x1b0>)
  400780:	2110      	movs	r1, #16
  400782:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400784:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400788:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40078a:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40078c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400790:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400792:	4308      	orrs	r0, r1
  400794:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400796:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400798:	4308      	orrs	r0, r1
  40079a:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40079c:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  40079e:	2108      	movs	r1, #8
  4007a0:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4007a2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4007a6:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4007a8:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4007aa:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4007ae:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4007b0:	f020 0008 	bic.w	r0, r0, #8
  4007b4:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4007b6:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4007b8:	f020 0008 	bic.w	r0, r0, #8
  4007bc:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4007be:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  4007c0:	2104      	movs	r1, #4
  4007c2:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4007c4:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4007c8:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4007ca:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4007cc:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4007d0:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4007d2:	f020 0004 	bic.w	r0, r0, #4
  4007d6:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4007d8:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4007da:	f020 0004 	bic.w	r0, r0, #4
  4007de:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4007e0:	6059      	str	r1, [r3, #4]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4007e2:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  4007e6:	2101      	movs	r1, #1
  4007e8:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4007ea:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4007ee:	2102      	movs	r1, #2
  4007f0:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4007f2:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  4007f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4007fa:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4007fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400800:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400802:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400804:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400808:	6f11      	ldr	r1, [r2, #112]	; 0x70
  40080a:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  40080e:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400810:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400812:	4319      	orrs	r1, r3
  400814:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400816:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  400818:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  40081c:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40081e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400822:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400824:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400826:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40082a:	6f11      	ldr	r1, [r2, #112]	; 0x70
  40082c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  400830:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400832:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400834:	4319      	orrs	r1, r3
  400836:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400838:	6053      	str	r3, [r2, #4]
  40083a:	bd10      	pop	{r4, pc}
  40083c:	400e1850 	.word	0x400e1850
  400840:	5a00080c 	.word	0x5a00080c
  400844:	e000ed00 	.word	0xe000ed00
  400848:	00400e81 	.word	0x00400e81
  40084c:	400e0e00 	.word	0x400e0e00
  400850:	400e1200 	.word	0x400e1200
  400854:	40088000 	.word	0x40088000
  400858:	400e1000 	.word	0x400e1000

0040085c <_mcan_enable_peripheral_clock>:
 *
 * \param module_inst  MCAN instance
 *
 */
static void _mcan_enable_peripheral_clock(struct mcan_module *const module_inst)
{
  40085c:	b508      	push	{r3, lr}
	if (module_inst->hw == MCAN0) {
  40085e:	6803      	ldr	r3, [r0, #0]
  400860:	4a07      	ldr	r2, [pc, #28]	; (400880 <_mcan_enable_peripheral_clock+0x24>)
  400862:	4293      	cmp	r3, r2
  400864:	d003      	beq.n	40086e <_mcan_enable_peripheral_clock+0x12>
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN0);
	} else if (module_inst->hw == MCAN1) {
  400866:	4a07      	ldr	r2, [pc, #28]	; (400884 <_mcan_enable_peripheral_clock+0x28>)
  400868:	4293      	cmp	r3, r2
  40086a:	d004      	beq.n	400876 <_mcan_enable_peripheral_clock+0x1a>
  40086c:	bd08      	pop	{r3, pc}
		pmc_enable_periph_clk(ID_MCAN0);
  40086e:	2023      	movs	r0, #35	; 0x23
  400870:	4b05      	ldr	r3, [pc, #20]	; (400888 <_mcan_enable_peripheral_clock+0x2c>)
  400872:	4798      	blx	r3
  400874:	bd08      	pop	{r3, pc}
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN1);
  400876:	2025      	movs	r0, #37	; 0x25
  400878:	4b03      	ldr	r3, [pc, #12]	; (400888 <_mcan_enable_peripheral_clock+0x2c>)
  40087a:	4798      	blx	r3
	}
}
  40087c:	e7f6      	b.n	40086c <_mcan_enable_peripheral_clock+0x10>
  40087e:	bf00      	nop
  400880:	40030000 	.word	0x40030000
  400884:	40034000 	.word	0x40034000
  400888:	00400e81 	.word	0x00400e81

0040088c <mcan_init>:
 * \param hw  Base address of MCAN.
 * \param config default configuration .
 */
void mcan_init(struct mcan_module *const module_inst, Mcan *hw,
		struct mcan_config *config)
{
  40088c:	b570      	push	{r4, r5, r6, lr}
  40088e:	4606      	mov	r6, r0
  400890:	460c      	mov	r4, r1
  400892:	4615      	mov	r5, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
  400894:	6001      	str	r1, [r0, #0]

	pmc_disable_pck(PMC_PCK_5);
  400896:	2005      	movs	r0, #5
  400898:	4b82      	ldr	r3, [pc, #520]	; (400aa4 <mcan_init+0x218>)
  40089a:	4798      	blx	r3

	pmc_switch_pck_to_pllack(PMC_PCK_5, PMC_PCK_PRES(9));
  40089c:	2190      	movs	r1, #144	; 0x90
  40089e:	2005      	movs	r0, #5
  4008a0:	4b81      	ldr	r3, [pc, #516]	; (400aa8 <mcan_init+0x21c>)
  4008a2:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_5);
  4008a4:	2005      	movs	r0, #5
  4008a6:	4b81      	ldr	r3, [pc, #516]	; (400aac <mcan_init+0x220>)
  4008a8:	4798      	blx	r3

	/* Enable peripheral clock */
	_mcan_enable_peripheral_clock(module_inst);
  4008aa:	4630      	mov	r0, r6
  4008ac:	4b80      	ldr	r3, [pc, #512]	; (400ab0 <mcan_init+0x224>)
  4008ae:	4798      	blx	r3


	/* Configuration Change Enable. */
	hw->MCAN_CCCR |= MCAN_CCCR_CCE;
  4008b0:	69a3      	ldr	r3, [r4, #24]
  4008b2:	f043 0302 	orr.w	r3, r3, #2
  4008b6:	61a3      	str	r3, [r4, #24]
	if (hw == MCAN0) {
  4008b8:	4b7e      	ldr	r3, [pc, #504]	; (400ab4 <mcan_init+0x228>)
  4008ba:	429c      	cmp	r4, r3
  4008bc:	f000 809c 	beq.w	4009f8 <mcan_init+0x16c>
	} else if (hw == MCAN1) {
  4008c0:	4b7d      	ldr	r3, [pc, #500]	; (400ab8 <mcan_init+0x22c>)
  4008c2:	429c      	cmp	r4, r3
  4008c4:	f000 80c3 	beq.w	400a4e <mcan_init+0x1c2>
		hw->MCAN_RXESC = MCAN_RXESC_RBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4) |
  4008c8:	2300      	movs	r3, #0
  4008ca:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		hw->MCAN_TXESC = MCAN_TXESC_TBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4);
  4008ce:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	hw->MCAN_NBTP = MCAN_NBTP_NBRP(CONF_MCAN_NBTP_NBRP_VALUE) |
  4008d2:	4b7a      	ldr	r3, [pc, #488]	; (400abc <mcan_init+0x230>)
  4008d4:	61e3      	str	r3, [r4, #28]
	hw->MCAN_DBTP = MCAN_DBTP_DBRP(CONF_MCAN_FBTP_FBRP_VALUE) |
  4008d6:	4b7a      	ldr	r3, [pc, #488]	; (400ac0 <mcan_init+0x234>)
  4008d8:	60e3      	str	r3, [r4, #12]
	hw->MCAN_TDCR = MCAN_TDCR_TDCO(config->delay_compensation_offset) |
  4008da:	7beb      	ldrb	r3, [r5, #15]
  4008dc:	021b      	lsls	r3, r3, #8
  4008de:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
		    MCAN_TDCR_TDCF(config->delay_compensation_filter_window_length);
  4008e2:	7c2a      	ldrb	r2, [r5, #16]
  4008e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	hw->MCAN_TDCR = MCAN_TDCR_TDCO(config->delay_compensation_offset) |
  4008e8:	4313      	orrs	r3, r2
  4008ea:	64a3      	str	r3, [r4, #72]	; 0x48
	if (config->tdc_enable) {
  4008ec:	7bab      	ldrb	r3, [r5, #14]
  4008ee:	b11b      	cbz	r3, 4008f8 <mcan_init+0x6c>
		hw->MCAN_DBTP |= MCAN_DBTP_TDC_ENABLED;
  4008f0:	68e3      	ldr	r3, [r4, #12]
  4008f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  4008f6:	60e3      	str	r3, [r4, #12]
	hw->MCAN_RWD |= MCAN_RWD_WDC(config->watchdog_configuration);
  4008f8:	6962      	ldr	r2, [r4, #20]
  4008fa:	786b      	ldrb	r3, [r5, #1]
  4008fc:	4313      	orrs	r3, r2
  4008fe:	6163      	str	r3, [r4, #20]
	if (config->transmit_pause) {
  400900:	78ab      	ldrb	r3, [r5, #2]
  400902:	b11b      	cbz	r3, 40090c <mcan_init+0x80>
		hw->MCAN_CCCR |= MCAN_CCCR_TXP;
  400904:	69a3      	ldr	r3, [r4, #24]
  400906:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  40090a:	61a3      	str	r3, [r4, #24]
	if (!config->automatic_retransmission) {
  40090c:	796b      	ldrb	r3, [r5, #5]
  40090e:	b91b      	cbnz	r3, 400918 <mcan_init+0x8c>
		hw->MCAN_CCCR |= MCAN_CCCR_DAR;
  400910:	69a3      	ldr	r3, [r4, #24]
  400912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400916:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_request) {
  400918:	79ab      	ldrb	r3, [r5, #6]
  40091a:	b11b      	cbz	r3, 400924 <mcan_init+0x98>
		hw->MCAN_CCCR |= MCAN_CCCR_CSR;
  40091c:	69a3      	ldr	r3, [r4, #24]
  40091e:	f043 0310 	orr.w	r3, r3, #16
  400922:	61a3      	str	r3, [r4, #24]
	hw->MCAN_TSCC = MCAN_TSCC_TCP(config->timestamp_prescaler) |
  400924:	7a2b      	ldrb	r3, [r5, #8]
  400926:	041b      	lsls	r3, r3, #16
  400928:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  40092c:	f043 0301 	orr.w	r3, r3, #1
  400930:	6223      	str	r3, [r4, #32]
			config->timeout_mode | config->timeout_enable;
  400932:	7b2b      	ldrb	r3, [r5, #12]
  400934:	7b6a      	ldrb	r2, [r5, #13]
  400936:	4313      	orrs	r3, r2
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  400938:	896a      	ldrh	r2, [r5, #10]
			config->timeout_mode | config->timeout_enable;
  40093a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  40093e:	62a3      	str	r3, [r4, #40]	; 0x28
	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  400940:	7c6b      	ldrb	r3, [r5, #17]
  400942:	011b      	lsls	r3, r3, #4
  400944:	f003 0330 	and.w	r3, r3, #48	; 0x30
			MCAN_GFC_ANFE(config->nonmatching_frames_action_extended);
  400948:	7caa      	ldrb	r2, [r5, #18]
  40094a:	0092      	lsls	r2, r2, #2
  40094c:	f002 020c 	and.w	r2, r2, #12
	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  400950:	4313      	orrs	r3, r2
  400952:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if (config->remote_frames_standard_reject) {
  400956:	7ceb      	ldrb	r3, [r5, #19]
  400958:	b12b      	cbz	r3, 400966 <mcan_init+0xda>
		hw->MCAN_GFC |= MCAN_GFC_RRFS;
  40095a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  40095e:	f043 0302 	orr.w	r3, r3, #2
  400962:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if (config->remote_frames_extended_reject) {
  400966:	7d2b      	ldrb	r3, [r5, #20]
  400968:	b12b      	cbz	r3, 400976 <mcan_init+0xea>
		hw->MCAN_GFC|= MCAN_GFC_RRFE;
  40096a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  40096e:	f043 0301 	orr.w	r3, r3, #1
  400972:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hw->MCAN_XIDAM = config->extended_id_mask;
  400976:	69ab      	ldr	r3, [r5, #24]
  400978:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	if (config->rx_fifo_0_overwrite) {
  40097c:	7f2b      	ldrb	r3, [r5, #28]
  40097e:	b12b      	cbz	r3, 40098c <mcan_init+0x100>
		hw->MCAN_RXF0C |= MCAN_RXF0C_F0OM;
  400980:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
  400984:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  400988:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	hw->MCAN_RXF0C |= MCAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
  40098c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
  400990:	7f6b      	ldrb	r3, [r5, #29]
  400992:	061b      	lsls	r3, r3, #24
  400994:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  400998:	4313      	orrs	r3, r2
  40099a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	if (config->rx_fifo_1_overwrite) {
  40099e:	7fab      	ldrb	r3, [r5, #30]
  4009a0:	b12b      	cbz	r3, 4009ae <mcan_init+0x122>
		hw->MCAN_RXF1C |= MCAN_RXF1C_F1OM;
  4009a2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
  4009a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4009aa:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	hw->MCAN_RXF1C |= MCAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
  4009ae:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
  4009b2:	7feb      	ldrb	r3, [r5, #31]
  4009b4:	061b      	lsls	r3, r3, #24
  4009b6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  4009ba:	4313      	orrs	r3, r2
  4009bc:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	if (config->tx_queue_mode) {
  4009c0:	f895 3020 	ldrb.w	r3, [r5, #32]
  4009c4:	b12b      	cbz	r3, 4009d2 <mcan_init+0x146>
		hw->MCAN_TXBC |= MCAN_TXBC_TFQM;
  4009c6:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
  4009ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  4009ce:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hw->MCAN_TXEFC |= MCAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
  4009d2:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
  4009d6:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
  4009da:	061b      	lsls	r3, r3, #24
  4009dc:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  4009e0:	4313      	orrs	r3, r2
  4009e2:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0

	/* Set the configuration. */
	_mcan_set_configuration(hw, config);

	/* Enable the interrupt setting which no need change. */
	hw->MCAN_ILE = MCAN_ILE_EINT0 | MCAN_ILE_EINT1;
  4009e6:	2303      	movs	r3, #3
  4009e8:	65e3      	str	r3, [r4, #92]	; 0x5c
	hw->MCAN_TXBTIE = 0xFFFFFFFFul;
  4009ea:	f04f 33ff 	mov.w	r3, #4294967295
  4009ee:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	hw->MCAN_TXBCIE = 0xFFFFFFFFul;
  4009f2:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
  4009f6:	bd70      	pop	{r4, r5, r6, pc}
		hw->MCAN_SIDFC = ((uint32_t)mcan0_rx_standard_filter & BIT_2_TO_15_MASK) |
  4009f8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  4009fc:	4931      	ldr	r1, [pc, #196]	; (400ac4 <mcan_init+0x238>)
  4009fe:	4011      	ands	r1, r2
  400a00:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  400a04:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		hw->MCAN_XIDFC = ((uint32_t)mcan0_rx_extended_filter & BIT_2_TO_15_MASK) |
  400a08:	492f      	ldr	r1, [pc, #188]	; (400ac8 <mcan_init+0x23c>)
  400a0a:	4011      	ands	r1, r2
  400a0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400a10:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		hw->MCAN_RXF0C = ((uint32_t)mcan0_rx_fifo_0 & BIT_2_TO_15_MASK) |
  400a14:	492d      	ldr	r1, [pc, #180]	; (400acc <mcan_init+0x240>)
  400a16:	4011      	ands	r1, r2
  400a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400a1c:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		hw->MCAN_RXF1C = ((uint32_t)mcan0_rx_fifo_1 & BIT_2_TO_15_MASK) |
  400a20:	492b      	ldr	r1, [pc, #172]	; (400ad0 <mcan_init+0x244>)
  400a22:	4011      	ands	r1, r2
  400a24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400a28:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		hw->MCAN_RXBC = ((uint32_t)mcan0_rx_buffer & BIT_2_TO_15_MASK);
  400a2c:	4929      	ldr	r1, [pc, #164]	; (400ad4 <mcan_init+0x248>)
  400a2e:	4011      	ands	r1, r2
  400a30:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  400a34:	4828      	ldr	r0, [pc, #160]	; (400ad8 <mcan_init+0x24c>)
  400a36:	4010      	ands	r0, r2
				MCAN_TXBC_NDTB(CONF_MCAN0_TX_BUFFER_NUM) |
  400a38:	4928      	ldr	r1, [pc, #160]	; (400adc <mcan_init+0x250>)
  400a3a:	4301      	orrs	r1, r0
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  400a3c:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		hw->MCAN_TXEFC = ((uint32_t)mcan0_tx_event_fifo & BIT_2_TO_15_MASK) |
  400a40:	4927      	ldr	r1, [pc, #156]	; (400ae0 <mcan_init+0x254>)
  400a42:	400a      	ands	r2, r1
  400a44:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  400a48:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  400a4c:	e73c      	b.n	4008c8 <mcan_init+0x3c>
		hw->MCAN_SIDFC = ((uint32_t)mcan1_rx_standard_filter & BIT_2_TO_15_MASK) |
  400a4e:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  400a52:	4924      	ldr	r1, [pc, #144]	; (400ae4 <mcan_init+0x258>)
  400a54:	4011      	ands	r1, r2
  400a56:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  400a5a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		hw->MCAN_XIDFC = ((uint32_t)mcan1_rx_extended_filter & BIT_2_TO_15_MASK) |
  400a5e:	4922      	ldr	r1, [pc, #136]	; (400ae8 <mcan_init+0x25c>)
  400a60:	4011      	ands	r1, r2
  400a62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400a66:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		hw->MCAN_RXF0C = ((uint32_t)mcan1_rx_fifo_0 & BIT_2_TO_15_MASK) |
  400a6a:	4920      	ldr	r1, [pc, #128]	; (400aec <mcan_init+0x260>)
  400a6c:	4011      	ands	r1, r2
  400a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400a72:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		hw->MCAN_RXF1C = ((uint32_t)mcan1_rx_fifo_1 & BIT_2_TO_15_MASK) |
  400a76:	491e      	ldr	r1, [pc, #120]	; (400af0 <mcan_init+0x264>)
  400a78:	4011      	ands	r1, r2
  400a7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400a7e:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		hw->MCAN_RXBC = ((uint32_t)mcan1_rx_buffer & BIT_2_TO_15_MASK);
  400a82:	491c      	ldr	r1, [pc, #112]	; (400af4 <mcan_init+0x268>)
  400a84:	4011      	ands	r1, r2
  400a86:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  400a8a:	481b      	ldr	r0, [pc, #108]	; (400af8 <mcan_init+0x26c>)
  400a8c:	4010      	ands	r0, r2
				MCAN_TXBC_NDTB(CONF_MCAN1_TX_BUFFER_NUM) |
  400a8e:	4913      	ldr	r1, [pc, #76]	; (400adc <mcan_init+0x250>)
  400a90:	4301      	orrs	r1, r0
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  400a92:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		hw->MCAN_TXEFC = ((uint32_t)mcan1_tx_event_fifo & BIT_2_TO_15_MASK) |
  400a96:	4919      	ldr	r1, [pc, #100]	; (400afc <mcan_init+0x270>)
  400a98:	400a      	ands	r2, r1
  400a9a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  400a9e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  400aa2:	e711      	b.n	4008c8 <mcan_init+0x3c>
  400aa4:	00400ef1 	.word	0x00400ef1
  400aa8:	00400ea1 	.word	0x00400ea1
  400aac:	00400edd 	.word	0x00400edd
  400ab0:	0040085d 	.word	0x0040085d
  400ab4:	40030000 	.word	0x40030000
  400ab8:	40034000 	.word	0x40034000
  400abc:	06010507 	.word	0x06010507
  400ac0:	00050a33 	.word	0x00050a33
  400ac4:	20400dd0 	.word	0x20400dd0
  400ac8:	20400b50 	.word	0x20400b50
  400acc:	20400bd0 	.word	0x20400bd0
  400ad0:	20400cd0 	.word	0x20400cd0
  400ad4:	20400a50 	.word	0x20400a50
  400ad8:	20400e50 	.word	0x20400e50
  400adc:	04040000 	.word	0x04040000
  400ae0:	20400ed0 	.word	0x20400ed0
  400ae4:	20401290 	.word	0x20401290
  400ae8:	20401010 	.word	0x20401010
  400aec:	20401090 	.word	0x20401090
  400af0:	20401190 	.word	0x20401190
  400af4:	20400f10 	.word	0x20400f10
  400af8:	20401310 	.word	0x20401310
  400afc:	20401390 	.word	0x20401390

00400b00 <mcan_start>:
 * \param module_inst  MCAN instance
 *
 */
void mcan_start(struct mcan_module *const module_inst)
{
	module_inst->hw->MCAN_CCCR &= ~MCAN_CCCR_INIT;
  400b00:	6802      	ldr	r2, [r0, #0]
  400b02:	6993      	ldr	r3, [r2, #24]
  400b04:	f023 0301 	bic.w	r3, r3, #1
  400b08:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT);
  400b0a:	6802      	ldr	r2, [r0, #0]
  400b0c:	6993      	ldr	r3, [r2, #24]
  400b0e:	f013 0f01 	tst.w	r3, #1
  400b12:	d1fb      	bne.n	400b0c <mcan_start+0xc>
}
  400b14:	4770      	bx	lr

00400b16 <mcan_stop>:
 * \param module_inst  MCAN instance
 *
 */
void mcan_stop(struct mcan_module *const module_inst)
{
	module_inst->hw->MCAN_CCCR |= MCAN_CCCR_INIT;
  400b16:	6802      	ldr	r2, [r0, #0]
  400b18:	6993      	ldr	r3, [r2, #24]
  400b1a:	f043 0301 	orr.w	r3, r3, #1
  400b1e:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (!(module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT));
  400b20:	6802      	ldr	r2, [r0, #0]
  400b22:	6993      	ldr	r3, [r2, #24]
  400b24:	f013 0f01 	tst.w	r3, #1
  400b28:	d0fb      	beq.n	400b22 <mcan_stop+0xc>
}
  400b2a:	4770      	bx	lr

00400b2c <mcan_get_rx_buffer_element>:
 * \return status code.
 */
enum status_code mcan_get_rx_buffer_element(
		struct mcan_module *const module_inst,
		struct mcan_rx_element_buffer *rx_element, uint32_t index)
{
  400b2c:	b430      	push	{r4, r5}
  400b2e:	460d      	mov	r5, r1
	if (module_inst->hw == MCAN0) {
  400b30:	6803      	ldr	r3, [r0, #0]
  400b32:	490f      	ldr	r1, [pc, #60]	; (400b70 <mcan_get_rx_buffer_element+0x44>)
  400b34:	428b      	cmp	r3, r1
  400b36:	d00d      	beq.n	400b54 <mcan_get_rx_buffer_element+0x28>
		memcpy(rx_element, &mcan0_rx_buffer[index], sizeof(struct mcan_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == MCAN1) {
  400b38:	490e      	ldr	r1, [pc, #56]	; (400b74 <mcan_get_rx_buffer_element+0x48>)
  400b3a:	428b      	cmp	r3, r1
  400b3c:	d114      	bne.n	400b68 <mcan_get_rx_buffer_element+0x3c>
		memcpy(rx_element, &mcan1_rx_buffer[index], sizeof(struct mcan_rx_element_buffer));
  400b3e:	4c0e      	ldr	r4, [pc, #56]	; (400b78 <mcan_get_rx_buffer_element+0x4c>)
  400b40:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  400b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400b46:	6028      	str	r0, [r5, #0]
  400b48:	6069      	str	r1, [r5, #4]
  400b4a:	60aa      	str	r2, [r5, #8]
  400b4c:	60eb      	str	r3, [r5, #12]
		return STATUS_OK;
  400b4e:	2000      	movs	r0, #0
	}
	return ERR_INVALID_ARG;
}
  400b50:	bc30      	pop	{r4, r5}
  400b52:	4770      	bx	lr
		memcpy(rx_element, &mcan0_rx_buffer[index], sizeof(struct mcan_rx_element_buffer));
  400b54:	4c09      	ldr	r4, [pc, #36]	; (400b7c <mcan_get_rx_buffer_element+0x50>)
  400b56:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  400b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400b5c:	6028      	str	r0, [r5, #0]
  400b5e:	6069      	str	r1, [r5, #4]
  400b60:	60aa      	str	r2, [r5, #8]
  400b62:	60eb      	str	r3, [r5, #12]
		return STATUS_OK;
  400b64:	2000      	movs	r0, #0
  400b66:	e7f3      	b.n	400b50 <mcan_get_rx_buffer_element+0x24>
	return ERR_INVALID_ARG;
  400b68:	f06f 0007 	mvn.w	r0, #7
  400b6c:	e7f0      	b.n	400b50 <mcan_get_rx_buffer_element+0x24>
  400b6e:	bf00      	nop
  400b70:	40030000 	.word	0x40030000
  400b74:	40034000 	.word	0x40034000
  400b78:	20400f10 	.word	0x20400f10
  400b7c:	20400a50 	.word	0x20400a50

00400b80 <mcan_get_rx_fifo_0_element>:
 * \return status code.
 */
enum status_code mcan_get_rx_fifo_0_element(
		struct mcan_module *const module_inst,
		struct mcan_rx_element_fifo_0 *rx_element, uint32_t index)
{
  400b80:	b430      	push	{r4, r5}
  400b82:	460d      	mov	r5, r1
	if (module_inst->hw == MCAN0) {
  400b84:	6803      	ldr	r3, [r0, #0]
  400b86:	490f      	ldr	r1, [pc, #60]	; (400bc4 <mcan_get_rx_fifo_0_element+0x44>)
  400b88:	428b      	cmp	r3, r1
  400b8a:	d00d      	beq.n	400ba8 <mcan_get_rx_fifo_0_element+0x28>
		memcpy(rx_element, &mcan0_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == MCAN1) {
  400b8c:	490e      	ldr	r1, [pc, #56]	; (400bc8 <mcan_get_rx_fifo_0_element+0x48>)
  400b8e:	428b      	cmp	r3, r1
  400b90:	d114      	bne.n	400bbc <mcan_get_rx_fifo_0_element+0x3c>
		memcpy(rx_element, &mcan1_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
  400b92:	4c0e      	ldr	r4, [pc, #56]	; (400bcc <mcan_get_rx_fifo_0_element+0x4c>)
  400b94:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  400b98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400b9a:	6028      	str	r0, [r5, #0]
  400b9c:	6069      	str	r1, [r5, #4]
  400b9e:	60aa      	str	r2, [r5, #8]
  400ba0:	60eb      	str	r3, [r5, #12]
		return STATUS_OK;
  400ba2:	2000      	movs	r0, #0
	}
	return ERR_INVALID_ARG;
}
  400ba4:	bc30      	pop	{r4, r5}
  400ba6:	4770      	bx	lr
		memcpy(rx_element, &mcan0_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
  400ba8:	4c09      	ldr	r4, [pc, #36]	; (400bd0 <mcan_get_rx_fifo_0_element+0x50>)
  400baa:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  400bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400bb0:	6028      	str	r0, [r5, #0]
  400bb2:	6069      	str	r1, [r5, #4]
  400bb4:	60aa      	str	r2, [r5, #8]
  400bb6:	60eb      	str	r3, [r5, #12]
		return STATUS_OK;
  400bb8:	2000      	movs	r0, #0
  400bba:	e7f3      	b.n	400ba4 <mcan_get_rx_fifo_0_element+0x24>
	return ERR_INVALID_ARG;
  400bbc:	f06f 0007 	mvn.w	r0, #7
  400bc0:	e7f0      	b.n	400ba4 <mcan_get_rx_fifo_0_element+0x24>
  400bc2:	bf00      	nop
  400bc4:	40030000 	.word	0x40030000
  400bc8:	40034000 	.word	0x40034000
  400bcc:	20401090 	.word	0x20401090
  400bd0:	20400bd0 	.word	0x20400bd0

00400bd4 <mcan_get_rx_fifo_1_element>:
 * \return status code.
 */
enum status_code mcan_get_rx_fifo_1_element(
		struct mcan_module *const module_inst,
		struct mcan_rx_element_fifo_1 *rx_element, uint32_t index)
{
  400bd4:	b430      	push	{r4, r5}
  400bd6:	460d      	mov	r5, r1
	if (module_inst->hw == MCAN0) {
  400bd8:	6803      	ldr	r3, [r0, #0]
  400bda:	490f      	ldr	r1, [pc, #60]	; (400c18 <mcan_get_rx_fifo_1_element+0x44>)
  400bdc:	428b      	cmp	r3, r1
  400bde:	d00d      	beq.n	400bfc <mcan_get_rx_fifo_1_element+0x28>
		memcpy(rx_element, &mcan0_rx_fifo_1[index], sizeof(struct mcan_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == MCAN1) {
  400be0:	490e      	ldr	r1, [pc, #56]	; (400c1c <mcan_get_rx_fifo_1_element+0x48>)
  400be2:	428b      	cmp	r3, r1
  400be4:	d114      	bne.n	400c10 <mcan_get_rx_fifo_1_element+0x3c>
		memcpy(rx_element, &mcan1_rx_fifo_1[index], sizeof(struct mcan_rx_element_buffer));
  400be6:	4c0e      	ldr	r4, [pc, #56]	; (400c20 <mcan_get_rx_fifo_1_element+0x4c>)
  400be8:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  400bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400bee:	6028      	str	r0, [r5, #0]
  400bf0:	6069      	str	r1, [r5, #4]
  400bf2:	60aa      	str	r2, [r5, #8]
  400bf4:	60eb      	str	r3, [r5, #12]
		return STATUS_OK;
  400bf6:	2000      	movs	r0, #0
	}
	return ERR_INVALID_ARG;
}
  400bf8:	bc30      	pop	{r4, r5}
  400bfa:	4770      	bx	lr
		memcpy(rx_element, &mcan0_rx_fifo_1[index], sizeof(struct mcan_rx_element_buffer));
  400bfc:	4c09      	ldr	r4, [pc, #36]	; (400c24 <mcan_get_rx_fifo_1_element+0x50>)
  400bfe:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  400c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400c04:	6028      	str	r0, [r5, #0]
  400c06:	6069      	str	r1, [r5, #4]
  400c08:	60aa      	str	r2, [r5, #8]
  400c0a:	60eb      	str	r3, [r5, #12]
		return STATUS_OK;
  400c0c:	2000      	movs	r0, #0
  400c0e:	e7f3      	b.n	400bf8 <mcan_get_rx_fifo_1_element+0x24>
	return ERR_INVALID_ARG;
  400c10:	f06f 0007 	mvn.w	r0, #7
  400c14:	e7f0      	b.n	400bf8 <mcan_get_rx_fifo_1_element+0x24>
  400c16:	bf00      	nop
  400c18:	40030000 	.word	0x40030000
  400c1c:	40034000 	.word	0x40034000
  400c20:	20401190 	.word	0x20401190
  400c24:	20400cd0 	.word	0x20400cd0

00400c28 <mcan_set_tx_buffer_element>:
 * \return status code.
 */
enum status_code mcan_set_tx_buffer_element(
		struct mcan_module *const module_inst,
		struct mcan_tx_element *tx_element, uint32_t index)
{
  400c28:	b410      	push	{r4}
	uint32_t i;
	if (module_inst->hw == MCAN0) {
  400c2a:	6803      	ldr	r3, [r0, #0]
  400c2c:	4819      	ldr	r0, [pc, #100]	; (400c94 <mcan_set_tx_buffer_element+0x6c>)
  400c2e:	4283      	cmp	r3, r0
  400c30:	d018      	beq.n	400c64 <mcan_set_tx_buffer_element+0x3c>
		mcan0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
			mcan0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	} else if (module_inst->hw == MCAN1) {
  400c32:	4819      	ldr	r0, [pc, #100]	; (400c98 <mcan_set_tx_buffer_element+0x70>)
  400c34:	4283      	cmp	r3, r0
  400c36:	d129      	bne.n	400c8c <mcan_set_tx_buffer_element+0x64>
		mcan1_tx_buffer[index].T0.reg = tx_element->T0.reg;
  400c38:	680c      	ldr	r4, [r1, #0]
  400c3a:	4818      	ldr	r0, [pc, #96]	; (400c9c <mcan_set_tx_buffer_element+0x74>)
  400c3c:	0112      	lsls	r2, r2, #4
  400c3e:	1883      	adds	r3, r0, r2
  400c40:	5084      	str	r4, [r0, r2]
		mcan1_tx_buffer[index].T1.reg = tx_element->T1.reg;
  400c42:	684c      	ldr	r4, [r1, #4]
  400c44:	605c      	str	r4, [r3, #4]
  400c46:	f101 0308 	add.w	r3, r1, #8
  400c4a:	3207      	adds	r2, #7
  400c4c:	4402      	add	r2, r0
  400c4e:	3110      	adds	r1, #16
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
			mcan1_tx_buffer[index].data[i] = tx_element->data[i];
  400c50:	f813 0b01 	ldrb.w	r0, [r3], #1
  400c54:	f802 0f01 	strb.w	r0, [r2, #1]!
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  400c58:	428b      	cmp	r3, r1
  400c5a:	d1f9      	bne.n	400c50 <mcan_set_tx_buffer_element+0x28>
		}
		return STATUS_OK;
  400c5c:	2000      	movs	r0, #0
	}
	return ERR_INVALID_ARG;
}
  400c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400c62:	4770      	bx	lr
		mcan0_tx_buffer[index].T0.reg = tx_element->T0.reg;
  400c64:	680c      	ldr	r4, [r1, #0]
  400c66:	480e      	ldr	r0, [pc, #56]	; (400ca0 <mcan_set_tx_buffer_element+0x78>)
  400c68:	0112      	lsls	r2, r2, #4
  400c6a:	1883      	adds	r3, r0, r2
  400c6c:	5084      	str	r4, [r0, r2]
		mcan0_tx_buffer[index].T1.reg = tx_element->T1.reg;
  400c6e:	684c      	ldr	r4, [r1, #4]
  400c70:	605c      	str	r4, [r3, #4]
  400c72:	f101 0308 	add.w	r3, r1, #8
  400c76:	3207      	adds	r2, #7
  400c78:	4402      	add	r2, r0
  400c7a:	3110      	adds	r1, #16
			mcan0_tx_buffer[index].data[i] = tx_element->data[i];
  400c7c:	f813 0b01 	ldrb.w	r0, [r3], #1
  400c80:	f802 0f01 	strb.w	r0, [r2, #1]!
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  400c84:	428b      	cmp	r3, r1
  400c86:	d1f9      	bne.n	400c7c <mcan_set_tx_buffer_element+0x54>
		return STATUS_OK;
  400c88:	2000      	movs	r0, #0
  400c8a:	e7e8      	b.n	400c5e <mcan_set_tx_buffer_element+0x36>
	return ERR_INVALID_ARG;
  400c8c:	f06f 0007 	mvn.w	r0, #7
  400c90:	e7e5      	b.n	400c5e <mcan_set_tx_buffer_element+0x36>
  400c92:	bf00      	nop
  400c94:	40030000 	.word	0x40030000
  400c98:	40034000 	.word	0x40034000
  400c9c:	20401310 	.word	0x20401310
  400ca0:	20400e50 	.word	0x20400e50

00400ca4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400ca4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400ca6:	4770      	bx	lr

00400ca8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400ca8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400caa:	4770      	bx	lr

00400cac <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400cb0:	4604      	mov	r4, r0
  400cb2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400cb4:	4b0e      	ldr	r3, [pc, #56]	; (400cf0 <pio_handler_process+0x44>)
  400cb6:	4798      	blx	r3
  400cb8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400cba:	4620      	mov	r0, r4
  400cbc:	4b0d      	ldr	r3, [pc, #52]	; (400cf4 <pio_handler_process+0x48>)
  400cbe:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400cc0:	4005      	ands	r5, r0
  400cc2:	d013      	beq.n	400cec <pio_handler_process+0x40>
  400cc4:	4c0c      	ldr	r4, [pc, #48]	; (400cf8 <pio_handler_process+0x4c>)
  400cc6:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400cca:	e003      	b.n	400cd4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400ccc:	42b4      	cmp	r4, r6
  400cce:	d00d      	beq.n	400cec <pio_handler_process+0x40>
  400cd0:	3410      	adds	r4, #16
		while (status != 0) {
  400cd2:	b15d      	cbz	r5, 400cec <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400cd4:	6820      	ldr	r0, [r4, #0]
  400cd6:	4540      	cmp	r0, r8
  400cd8:	d1f8      	bne.n	400ccc <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400cda:	6861      	ldr	r1, [r4, #4]
  400cdc:	4229      	tst	r1, r5
  400cde:	d0f5      	beq.n	400ccc <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400ce0:	68e3      	ldr	r3, [r4, #12]
  400ce2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400ce4:	6863      	ldr	r3, [r4, #4]
  400ce6:	ea25 0503 	bic.w	r5, r5, r3
  400cea:	e7ef      	b.n	400ccc <pio_handler_process+0x20>
  400cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400cf0:	00400ca5 	.word	0x00400ca5
  400cf4:	00400ca9 	.word	0x00400ca9
  400cf8:	204013d0 	.word	0x204013d0

00400cfc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400cfc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400cfe:	210a      	movs	r1, #10
  400d00:	4801      	ldr	r0, [pc, #4]	; (400d08 <PIOA_Handler+0xc>)
  400d02:	4b02      	ldr	r3, [pc, #8]	; (400d0c <PIOA_Handler+0x10>)
  400d04:	4798      	blx	r3
  400d06:	bd08      	pop	{r3, pc}
  400d08:	400e0e00 	.word	0x400e0e00
  400d0c:	00400cad 	.word	0x00400cad

00400d10 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400d10:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400d12:	210b      	movs	r1, #11
  400d14:	4801      	ldr	r0, [pc, #4]	; (400d1c <PIOB_Handler+0xc>)
  400d16:	4b02      	ldr	r3, [pc, #8]	; (400d20 <PIOB_Handler+0x10>)
  400d18:	4798      	blx	r3
  400d1a:	bd08      	pop	{r3, pc}
  400d1c:	400e1000 	.word	0x400e1000
  400d20:	00400cad 	.word	0x00400cad

00400d24 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400d24:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400d26:	210c      	movs	r1, #12
  400d28:	4801      	ldr	r0, [pc, #4]	; (400d30 <PIOC_Handler+0xc>)
  400d2a:	4b02      	ldr	r3, [pc, #8]	; (400d34 <PIOC_Handler+0x10>)
  400d2c:	4798      	blx	r3
  400d2e:	bd08      	pop	{r3, pc}
  400d30:	400e1200 	.word	0x400e1200
  400d34:	00400cad 	.word	0x00400cad

00400d38 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400d38:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400d3a:	2110      	movs	r1, #16
  400d3c:	4801      	ldr	r0, [pc, #4]	; (400d44 <PIOD_Handler+0xc>)
  400d3e:	4b02      	ldr	r3, [pc, #8]	; (400d48 <PIOD_Handler+0x10>)
  400d40:	4798      	blx	r3
  400d42:	bd08      	pop	{r3, pc}
  400d44:	400e1400 	.word	0x400e1400
  400d48:	00400cad 	.word	0x00400cad

00400d4c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400d4c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400d4e:	2111      	movs	r1, #17
  400d50:	4801      	ldr	r0, [pc, #4]	; (400d58 <PIOE_Handler+0xc>)
  400d52:	4b02      	ldr	r3, [pc, #8]	; (400d5c <PIOE_Handler+0x10>)
  400d54:	4798      	blx	r3
  400d56:	bd08      	pop	{r3, pc}
  400d58:	400e1600 	.word	0x400e1600
  400d5c:	00400cad 	.word	0x00400cad

00400d60 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400d60:	2803      	cmp	r0, #3
  400d62:	d011      	beq.n	400d88 <pmc_mck_set_division+0x28>
  400d64:	2804      	cmp	r0, #4
  400d66:	d012      	beq.n	400d8e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400d68:	2802      	cmp	r0, #2
  400d6a:	bf0c      	ite	eq
  400d6c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400d70:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400d72:	4a08      	ldr	r2, [pc, #32]	; (400d94 <pmc_mck_set_division+0x34>)
  400d74:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400d7a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400d7c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400d7e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d80:	f013 0f08 	tst.w	r3, #8
  400d84:	d0fb      	beq.n	400d7e <pmc_mck_set_division+0x1e>
}
  400d86:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400d88:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400d8c:	e7f1      	b.n	400d72 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400d8e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400d92:	e7ee      	b.n	400d72 <pmc_mck_set_division+0x12>
  400d94:	400e0600 	.word	0x400e0600

00400d98 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400d98:	4a17      	ldr	r2, [pc, #92]	; (400df8 <pmc_switch_mck_to_pllack+0x60>)
  400d9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400da0:	4318      	orrs	r0, r3
  400da2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400da4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400da6:	f013 0f08 	tst.w	r3, #8
  400daa:	d10a      	bne.n	400dc2 <pmc_switch_mck_to_pllack+0x2a>
  400dac:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400db0:	4911      	ldr	r1, [pc, #68]	; (400df8 <pmc_switch_mck_to_pllack+0x60>)
  400db2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400db4:	f012 0f08 	tst.w	r2, #8
  400db8:	d103      	bne.n	400dc2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400dba:	3b01      	subs	r3, #1
  400dbc:	d1f9      	bne.n	400db2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400dbe:	2001      	movs	r0, #1
  400dc0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400dc2:	4a0d      	ldr	r2, [pc, #52]	; (400df8 <pmc_switch_mck_to_pllack+0x60>)
  400dc4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400dc6:	f023 0303 	bic.w	r3, r3, #3
  400dca:	f043 0302 	orr.w	r3, r3, #2
  400dce:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400dd0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400dd2:	f013 0f08 	tst.w	r3, #8
  400dd6:	d10a      	bne.n	400dee <pmc_switch_mck_to_pllack+0x56>
  400dd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400ddc:	4906      	ldr	r1, [pc, #24]	; (400df8 <pmc_switch_mck_to_pllack+0x60>)
  400dde:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400de0:	f012 0f08 	tst.w	r2, #8
  400de4:	d105      	bne.n	400df2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400de6:	3b01      	subs	r3, #1
  400de8:	d1f9      	bne.n	400dde <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400dea:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400dec:	4770      	bx	lr
	return 0;
  400dee:	2000      	movs	r0, #0
  400df0:	4770      	bx	lr
  400df2:	2000      	movs	r0, #0
  400df4:	4770      	bx	lr
  400df6:	bf00      	nop
  400df8:	400e0600 	.word	0x400e0600

00400dfc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400dfc:	b9a0      	cbnz	r0, 400e28 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400dfe:	480e      	ldr	r0, [pc, #56]	; (400e38 <pmc_switch_mainck_to_xtal+0x3c>)
  400e00:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400e02:	0209      	lsls	r1, r1, #8
  400e04:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400e06:	4a0d      	ldr	r2, [pc, #52]	; (400e3c <pmc_switch_mainck_to_xtal+0x40>)
  400e08:	401a      	ands	r2, r3
  400e0a:	4b0d      	ldr	r3, [pc, #52]	; (400e40 <pmc_switch_mainck_to_xtal+0x44>)
  400e0c:	4313      	orrs	r3, r2
  400e0e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e10:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400e12:	4602      	mov	r2, r0
  400e14:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e16:	f013 0f01 	tst.w	r3, #1
  400e1a:	d0fb      	beq.n	400e14 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400e1c:	4a06      	ldr	r2, [pc, #24]	; (400e38 <pmc_switch_mainck_to_xtal+0x3c>)
  400e1e:	6a11      	ldr	r1, [r2, #32]
  400e20:	4b08      	ldr	r3, [pc, #32]	; (400e44 <pmc_switch_mainck_to_xtal+0x48>)
  400e22:	430b      	orrs	r3, r1
  400e24:	6213      	str	r3, [r2, #32]
  400e26:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e28:	4903      	ldr	r1, [pc, #12]	; (400e38 <pmc_switch_mainck_to_xtal+0x3c>)
  400e2a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400e2c:	4a06      	ldr	r2, [pc, #24]	; (400e48 <pmc_switch_mainck_to_xtal+0x4c>)
  400e2e:	401a      	ands	r2, r3
  400e30:	4b06      	ldr	r3, [pc, #24]	; (400e4c <pmc_switch_mainck_to_xtal+0x50>)
  400e32:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e34:	620b      	str	r3, [r1, #32]
  400e36:	4770      	bx	lr
  400e38:	400e0600 	.word	0x400e0600
  400e3c:	ffc8fffc 	.word	0xffc8fffc
  400e40:	00370001 	.word	0x00370001
  400e44:	01370000 	.word	0x01370000
  400e48:	fec8fffc 	.word	0xfec8fffc
  400e4c:	01370002 	.word	0x01370002

00400e50 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400e50:	4b02      	ldr	r3, [pc, #8]	; (400e5c <pmc_osc_is_ready_mainck+0xc>)
  400e52:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e54:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400e58:	4770      	bx	lr
  400e5a:	bf00      	nop
  400e5c:	400e0600 	.word	0x400e0600

00400e60 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400e60:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400e64:	4b01      	ldr	r3, [pc, #4]	; (400e6c <pmc_disable_pllack+0xc>)
  400e66:	629a      	str	r2, [r3, #40]	; 0x28
  400e68:	4770      	bx	lr
  400e6a:	bf00      	nop
  400e6c:	400e0600 	.word	0x400e0600

00400e70 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400e70:	4b02      	ldr	r3, [pc, #8]	; (400e7c <pmc_is_locked_pllack+0xc>)
  400e72:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e74:	f000 0002 	and.w	r0, r0, #2
  400e78:	4770      	bx	lr
  400e7a:	bf00      	nop
  400e7c:	400e0600 	.word	0x400e0600

00400e80 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  400e80:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400e84:	4b05      	ldr	r3, [pc, #20]	; (400e9c <pmc_enable_periph_clk+0x1c>)
  400e86:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  400e8a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400e8e:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  400e92:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400e96:	2000      	movs	r0, #0
  400e98:	4770      	bx	lr
  400e9a:	bf00      	nop
  400e9c:	400e0600 	.word	0x400e0600

00400ea0 <pmc_switch_pck_to_pllack>:
 */
uint32_t pmc_switch_pck_to_pllack(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLA_CLK | ul_pres;
  400ea0:	f041 0102 	orr.w	r1, r1, #2
  400ea4:	4b0c      	ldr	r3, [pc, #48]	; (400ed8 <pmc_switch_pck_to_pllack+0x38>)
  400ea6:	f100 0210 	add.w	r2, r0, #16
  400eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  400eae:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  400eb0:	f44f 7380 	mov.w	r3, #256	; 0x100
  400eb4:	fa03 f000 	lsl.w	r0, r3, r0
	for (ul_timeout = PMC_TIMEOUT;
  400eb8:	4202      	tst	r2, r0
  400eba:	d109      	bne.n	400ed0 <pmc_switch_pck_to_pllack+0x30>
  400ebc:	f44f 6300 	mov.w	r3, #2048	; 0x800
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  400ec0:	4905      	ldr	r1, [pc, #20]	; (400ed8 <pmc_switch_pck_to_pllack+0x38>)
  400ec2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	for (ul_timeout = PMC_TIMEOUT;
  400ec4:	4202      	tst	r2, r0
  400ec6:	d105      	bne.n	400ed4 <pmc_switch_pck_to_pllack+0x34>
		if (ul_timeout == 0) {
  400ec8:	3b01      	subs	r3, #1
  400eca:	d1fa      	bne.n	400ec2 <pmc_switch_pck_to_pllack+0x22>
			return 1;
  400ecc:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400ece:	4770      	bx	lr
	return 0;
  400ed0:	2000      	movs	r0, #0
  400ed2:	4770      	bx	lr
  400ed4:	2000      	movs	r0, #0
  400ed6:	4770      	bx	lr
  400ed8:	400e0600 	.word	0x400e0600

00400edc <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  400edc:	f44f 7380 	mov.w	r3, #256	; 0x100
  400ee0:	fa03 f000 	lsl.w	r0, r3, r0
  400ee4:	4b01      	ldr	r3, [pc, #4]	; (400eec <pmc_enable_pck+0x10>)
  400ee6:	6018      	str	r0, [r3, #0]
  400ee8:	4770      	bx	lr
  400eea:	bf00      	nop
  400eec:	400e0600 	.word	0x400e0600

00400ef0 <pmc_disable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  400ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
  400ef4:	fa03 f000 	lsl.w	r0, r3, r0
  400ef8:	4b01      	ldr	r3, [pc, #4]	; (400f00 <pmc_disable_pck+0x10>)
  400efa:	6058      	str	r0, [r3, #4]
  400efc:	4770      	bx	lr
  400efe:	bf00      	nop
  400f00:	400e0600 	.word	0x400e0600

00400f04 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400f04:	6943      	ldr	r3, [r0, #20]
  400f06:	f013 0f02 	tst.w	r3, #2
  400f0a:	d002      	beq.n	400f12 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400f0c:	61c1      	str	r1, [r0, #28]
	return 0;
  400f0e:	2000      	movs	r0, #0
  400f10:	4770      	bx	lr
		return 1;
  400f12:	2001      	movs	r0, #1
}
  400f14:	4770      	bx	lr

00400f16 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400f16:	6943      	ldr	r3, [r0, #20]
  400f18:	f013 0f01 	tst.w	r3, #1
  400f1c:	d003      	beq.n	400f26 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400f1e:	6983      	ldr	r3, [r0, #24]
  400f20:	700b      	strb	r3, [r1, #0]
	return 0;
  400f22:	2000      	movs	r0, #0
  400f24:	4770      	bx	lr
		return 1;
  400f26:	2001      	movs	r0, #1
}
  400f28:	4770      	bx	lr

00400f2a <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400f2a:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400f2c:	010b      	lsls	r3, r1, #4
  400f2e:	4293      	cmp	r3, r2
  400f30:	d914      	bls.n	400f5c <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400f32:	00c9      	lsls	r1, r1, #3
  400f34:	084b      	lsrs	r3, r1, #1
  400f36:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400f3a:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400f3e:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400f40:	1e5c      	subs	r4, r3, #1
  400f42:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400f46:	428c      	cmp	r4, r1
  400f48:	d901      	bls.n	400f4e <usart_set_async_baudrate+0x24>
		return 1;
  400f4a:	2001      	movs	r0, #1
  400f4c:	e017      	b.n	400f7e <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400f4e:	6841      	ldr	r1, [r0, #4]
  400f50:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400f54:	6041      	str	r1, [r0, #4]
  400f56:	e00c      	b.n	400f72 <usart_set_async_baudrate+0x48>
		return 1;
  400f58:	2001      	movs	r0, #1
  400f5a:	e010      	b.n	400f7e <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400f5c:	0859      	lsrs	r1, r3, #1
  400f5e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400f62:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400f66:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400f68:	1e5c      	subs	r4, r3, #1
  400f6a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400f6e:	428c      	cmp	r4, r1
  400f70:	d8f2      	bhi.n	400f58 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400f72:	0412      	lsls	r2, r2, #16
  400f74:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400f78:	431a      	orrs	r2, r3
  400f7a:	6202      	str	r2, [r0, #32]

	return 0;
  400f7c:	2000      	movs	r0, #0
}
  400f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400f82:	4770      	bx	lr

00400f84 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400f84:	4b08      	ldr	r3, [pc, #32]	; (400fa8 <usart_reset+0x24>)
  400f86:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400f8a:	2300      	movs	r3, #0
  400f8c:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400f8e:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400f90:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400f92:	2388      	movs	r3, #136	; 0x88
  400f94:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400f96:	2324      	movs	r3, #36	; 0x24
  400f98:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
  400f9e:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400fa0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400fa4:	6003      	str	r3, [r0, #0]
  400fa6:	4770      	bx	lr
  400fa8:	55534100 	.word	0x55534100

00400fac <usart_init_rs232>:
{
  400fac:	b570      	push	{r4, r5, r6, lr}
  400fae:	4605      	mov	r5, r0
  400fb0:	460c      	mov	r4, r1
  400fb2:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400fb4:	4b0f      	ldr	r3, [pc, #60]	; (400ff4 <usart_init_rs232+0x48>)
  400fb6:	4798      	blx	r3
	ul_reg_val = 0;
  400fb8:	2200      	movs	r2, #0
  400fba:	4b0f      	ldr	r3, [pc, #60]	; (400ff8 <usart_init_rs232+0x4c>)
  400fbc:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400fbe:	b1a4      	cbz	r4, 400fea <usart_init_rs232+0x3e>
  400fc0:	4632      	mov	r2, r6
  400fc2:	6821      	ldr	r1, [r4, #0]
  400fc4:	4628      	mov	r0, r5
  400fc6:	4b0d      	ldr	r3, [pc, #52]	; (400ffc <usart_init_rs232+0x50>)
  400fc8:	4798      	blx	r3
  400fca:	4602      	mov	r2, r0
  400fcc:	b978      	cbnz	r0, 400fee <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400fce:	6863      	ldr	r3, [r4, #4]
  400fd0:	68a1      	ldr	r1, [r4, #8]
  400fd2:	430b      	orrs	r3, r1
  400fd4:	6921      	ldr	r1, [r4, #16]
  400fd6:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400fd8:	68e1      	ldr	r1, [r4, #12]
  400fda:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400fdc:	4906      	ldr	r1, [pc, #24]	; (400ff8 <usart_init_rs232+0x4c>)
  400fde:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400fe0:	6869      	ldr	r1, [r5, #4]
  400fe2:	430b      	orrs	r3, r1
  400fe4:	606b      	str	r3, [r5, #4]
}
  400fe6:	4610      	mov	r0, r2
  400fe8:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400fea:	2201      	movs	r2, #1
  400fec:	e7fb      	b.n	400fe6 <usart_init_rs232+0x3a>
  400fee:	2201      	movs	r2, #1
  400ff0:	e7f9      	b.n	400fe6 <usart_init_rs232+0x3a>
  400ff2:	bf00      	nop
  400ff4:	00400f85 	.word	0x00400f85
  400ff8:	20401440 	.word	0x20401440
  400ffc:	00400f2b 	.word	0x00400f2b

00401000 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401000:	2340      	movs	r3, #64	; 0x40
  401002:	6003      	str	r3, [r0, #0]
  401004:	4770      	bx	lr

00401006 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  401006:	2310      	movs	r3, #16
  401008:	6003      	str	r3, [r0, #0]
  40100a:	4770      	bx	lr

0040100c <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40100c:	6943      	ldr	r3, [r0, #20]
  40100e:	f013 0f02 	tst.w	r3, #2
  401012:	d004      	beq.n	40101e <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401014:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401018:	61c1      	str	r1, [r0, #28]
	return 0;
  40101a:	2000      	movs	r0, #0
  40101c:	4770      	bx	lr
		return 1;
  40101e:	2001      	movs	r0, #1
}
  401020:	4770      	bx	lr

00401022 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401022:	6943      	ldr	r3, [r0, #20]
  401024:	f013 0f01 	tst.w	r3, #1
  401028:	d005      	beq.n	401036 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40102a:	6983      	ldr	r3, [r0, #24]
  40102c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401030:	600b      	str	r3, [r1, #0]
	return 0;
  401032:	2000      	movs	r0, #0
  401034:	4770      	bx	lr
		return 1;
  401036:	2001      	movs	r0, #1
}
  401038:	4770      	bx	lr

0040103a <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40103a:	e7fe      	b.n	40103a <Dummy_Handler>

0040103c <Reset_Handler>:
{
  40103c:	b500      	push	{lr}
  40103e:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401040:	4b25      	ldr	r3, [pc, #148]	; (4010d8 <Reset_Handler+0x9c>)
  401042:	4a26      	ldr	r2, [pc, #152]	; (4010dc <Reset_Handler+0xa0>)
  401044:	429a      	cmp	r2, r3
  401046:	d010      	beq.n	40106a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401048:	4b25      	ldr	r3, [pc, #148]	; (4010e0 <Reset_Handler+0xa4>)
  40104a:	4a23      	ldr	r2, [pc, #140]	; (4010d8 <Reset_Handler+0x9c>)
  40104c:	429a      	cmp	r2, r3
  40104e:	d20c      	bcs.n	40106a <Reset_Handler+0x2e>
  401050:	3b01      	subs	r3, #1
  401052:	1a9b      	subs	r3, r3, r2
  401054:	f023 0303 	bic.w	r3, r3, #3
  401058:	3304      	adds	r3, #4
  40105a:	4413      	add	r3, r2
  40105c:	491f      	ldr	r1, [pc, #124]	; (4010dc <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  40105e:	f851 0b04 	ldr.w	r0, [r1], #4
  401062:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401066:	429a      	cmp	r2, r3
  401068:	d1f9      	bne.n	40105e <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40106a:	4b1e      	ldr	r3, [pc, #120]	; (4010e4 <Reset_Handler+0xa8>)
  40106c:	4a1e      	ldr	r2, [pc, #120]	; (4010e8 <Reset_Handler+0xac>)
  40106e:	429a      	cmp	r2, r3
  401070:	d20a      	bcs.n	401088 <Reset_Handler+0x4c>
  401072:	3b01      	subs	r3, #1
  401074:	1a9b      	subs	r3, r3, r2
  401076:	f023 0303 	bic.w	r3, r3, #3
  40107a:	3304      	adds	r3, #4
  40107c:	4413      	add	r3, r2
                *pDest++ = 0;
  40107e:	2100      	movs	r1, #0
  401080:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401084:	4293      	cmp	r3, r2
  401086:	d1fb      	bne.n	401080 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401088:	4a18      	ldr	r2, [pc, #96]	; (4010ec <Reset_Handler+0xb0>)
  40108a:	4b19      	ldr	r3, [pc, #100]	; (4010f0 <Reset_Handler+0xb4>)
  40108c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401090:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401092:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401096:	fab3 f383 	clz	r3, r3
  40109a:	095b      	lsrs	r3, r3, #5
  40109c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40109e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4010a0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4010a4:	2200      	movs	r2, #0
  4010a6:	4b13      	ldr	r3, [pc, #76]	; (4010f4 <Reset_Handler+0xb8>)
  4010a8:	701a      	strb	r2, [r3, #0]
	return flags;
  4010aa:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4010ac:	4a12      	ldr	r2, [pc, #72]	; (4010f8 <Reset_Handler+0xbc>)
  4010ae:	6813      	ldr	r3, [r2, #0]
  4010b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4010b4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  4010b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4010ba:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4010be:	b129      	cbz	r1, 4010cc <Reset_Handler+0x90>
		cpu_irq_enable();
  4010c0:	2201      	movs	r2, #1
  4010c2:	4b0c      	ldr	r3, [pc, #48]	; (4010f4 <Reset_Handler+0xb8>)
  4010c4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4010c6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4010ca:	b662      	cpsie	i
        __libc_init_array();
  4010cc:	4b0b      	ldr	r3, [pc, #44]	; (4010fc <Reset_Handler+0xc0>)
  4010ce:	4798      	blx	r3
        main();
  4010d0:	4b0b      	ldr	r3, [pc, #44]	; (401100 <Reset_Handler+0xc4>)
  4010d2:	4798      	blx	r3
  4010d4:	e7fe      	b.n	4010d4 <Reset_Handler+0x98>
  4010d6:	bf00      	nop
  4010d8:	20400000 	.word	0x20400000
  4010dc:	0040524c 	.word	0x0040524c
  4010e0:	204009c0 	.word	0x204009c0
  4010e4:	204014f4 	.word	0x204014f4
  4010e8:	204009c0 	.word	0x204009c0
  4010ec:	e000ed00 	.word	0xe000ed00
  4010f0:	00400000 	.word	0x00400000
  4010f4:	20400004 	.word	0x20400004
  4010f8:	e000ed88 	.word	0xe000ed88
  4010fc:	00401a85 	.word	0x00401a85
  401100:	00401955 	.word	0x00401955

00401104 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401104:	4b3b      	ldr	r3, [pc, #236]	; (4011f4 <SystemCoreClockUpdate+0xf0>)
  401106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401108:	f003 0303 	and.w	r3, r3, #3
  40110c:	2b01      	cmp	r3, #1
  40110e:	d01d      	beq.n	40114c <SystemCoreClockUpdate+0x48>
  401110:	b183      	cbz	r3, 401134 <SystemCoreClockUpdate+0x30>
  401112:	2b02      	cmp	r3, #2
  401114:	d036      	beq.n	401184 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401116:	4b37      	ldr	r3, [pc, #220]	; (4011f4 <SystemCoreClockUpdate+0xf0>)
  401118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40111a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40111e:	2b70      	cmp	r3, #112	; 0x70
  401120:	d05f      	beq.n	4011e2 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401122:	4b34      	ldr	r3, [pc, #208]	; (4011f4 <SystemCoreClockUpdate+0xf0>)
  401124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401126:	4934      	ldr	r1, [pc, #208]	; (4011f8 <SystemCoreClockUpdate+0xf4>)
  401128:	f3c2 1202 	ubfx	r2, r2, #4, #3
  40112c:	680b      	ldr	r3, [r1, #0]
  40112e:	40d3      	lsrs	r3, r2
  401130:	600b      	str	r3, [r1, #0]
  401132:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401134:	4b31      	ldr	r3, [pc, #196]	; (4011fc <SystemCoreClockUpdate+0xf8>)
  401136:	695b      	ldr	r3, [r3, #20]
  401138:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40113c:	bf14      	ite	ne
  40113e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401142:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401146:	4b2c      	ldr	r3, [pc, #176]	; (4011f8 <SystemCoreClockUpdate+0xf4>)
  401148:	601a      	str	r2, [r3, #0]
  40114a:	e7e4      	b.n	401116 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40114c:	4b29      	ldr	r3, [pc, #164]	; (4011f4 <SystemCoreClockUpdate+0xf0>)
  40114e:	6a1b      	ldr	r3, [r3, #32]
  401150:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401154:	d003      	beq.n	40115e <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401156:	4a2a      	ldr	r2, [pc, #168]	; (401200 <SystemCoreClockUpdate+0xfc>)
  401158:	4b27      	ldr	r3, [pc, #156]	; (4011f8 <SystemCoreClockUpdate+0xf4>)
  40115a:	601a      	str	r2, [r3, #0]
  40115c:	e7db      	b.n	401116 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40115e:	4a29      	ldr	r2, [pc, #164]	; (401204 <SystemCoreClockUpdate+0x100>)
  401160:	4b25      	ldr	r3, [pc, #148]	; (4011f8 <SystemCoreClockUpdate+0xf4>)
  401162:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401164:	4b23      	ldr	r3, [pc, #140]	; (4011f4 <SystemCoreClockUpdate+0xf0>)
  401166:	6a1b      	ldr	r3, [r3, #32]
  401168:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40116c:	2b10      	cmp	r3, #16
  40116e:	d005      	beq.n	40117c <SystemCoreClockUpdate+0x78>
  401170:	2b20      	cmp	r3, #32
  401172:	d1d0      	bne.n	401116 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401174:	4a22      	ldr	r2, [pc, #136]	; (401200 <SystemCoreClockUpdate+0xfc>)
  401176:	4b20      	ldr	r3, [pc, #128]	; (4011f8 <SystemCoreClockUpdate+0xf4>)
  401178:	601a      	str	r2, [r3, #0]
          break;
  40117a:	e7cc      	b.n	401116 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  40117c:	4a22      	ldr	r2, [pc, #136]	; (401208 <SystemCoreClockUpdate+0x104>)
  40117e:	4b1e      	ldr	r3, [pc, #120]	; (4011f8 <SystemCoreClockUpdate+0xf4>)
  401180:	601a      	str	r2, [r3, #0]
          break;
  401182:	e7c8      	b.n	401116 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401184:	4b1b      	ldr	r3, [pc, #108]	; (4011f4 <SystemCoreClockUpdate+0xf0>)
  401186:	6a1b      	ldr	r3, [r3, #32]
  401188:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40118c:	d016      	beq.n	4011bc <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40118e:	4a1c      	ldr	r2, [pc, #112]	; (401200 <SystemCoreClockUpdate+0xfc>)
  401190:	4b19      	ldr	r3, [pc, #100]	; (4011f8 <SystemCoreClockUpdate+0xf4>)
  401192:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401194:	4b17      	ldr	r3, [pc, #92]	; (4011f4 <SystemCoreClockUpdate+0xf0>)
  401196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401198:	f003 0303 	and.w	r3, r3, #3
  40119c:	2b02      	cmp	r3, #2
  40119e:	d1ba      	bne.n	401116 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4011a0:	4a14      	ldr	r2, [pc, #80]	; (4011f4 <SystemCoreClockUpdate+0xf0>)
  4011a2:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4011a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4011a6:	4814      	ldr	r0, [pc, #80]	; (4011f8 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4011a8:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4011ac:	6803      	ldr	r3, [r0, #0]
  4011ae:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4011b2:	b2d2      	uxtb	r2, r2
  4011b4:	fbb3 f3f2 	udiv	r3, r3, r2
  4011b8:	6003      	str	r3, [r0, #0]
  4011ba:	e7ac      	b.n	401116 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4011bc:	4a11      	ldr	r2, [pc, #68]	; (401204 <SystemCoreClockUpdate+0x100>)
  4011be:	4b0e      	ldr	r3, [pc, #56]	; (4011f8 <SystemCoreClockUpdate+0xf4>)
  4011c0:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4011c2:	4b0c      	ldr	r3, [pc, #48]	; (4011f4 <SystemCoreClockUpdate+0xf0>)
  4011c4:	6a1b      	ldr	r3, [r3, #32]
  4011c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4011ca:	2b10      	cmp	r3, #16
  4011cc:	d005      	beq.n	4011da <SystemCoreClockUpdate+0xd6>
  4011ce:	2b20      	cmp	r3, #32
  4011d0:	d1e0      	bne.n	401194 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4011d2:	4a0b      	ldr	r2, [pc, #44]	; (401200 <SystemCoreClockUpdate+0xfc>)
  4011d4:	4b08      	ldr	r3, [pc, #32]	; (4011f8 <SystemCoreClockUpdate+0xf4>)
  4011d6:	601a      	str	r2, [r3, #0]
          break;
  4011d8:	e7dc      	b.n	401194 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4011da:	4a0b      	ldr	r2, [pc, #44]	; (401208 <SystemCoreClockUpdate+0x104>)
  4011dc:	4b06      	ldr	r3, [pc, #24]	; (4011f8 <SystemCoreClockUpdate+0xf4>)
  4011de:	601a      	str	r2, [r3, #0]
          break;
  4011e0:	e7d8      	b.n	401194 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4011e2:	4a05      	ldr	r2, [pc, #20]	; (4011f8 <SystemCoreClockUpdate+0xf4>)
  4011e4:	6813      	ldr	r3, [r2, #0]
  4011e6:	4909      	ldr	r1, [pc, #36]	; (40120c <SystemCoreClockUpdate+0x108>)
  4011e8:	fba1 1303 	umull	r1, r3, r1, r3
  4011ec:	085b      	lsrs	r3, r3, #1
  4011ee:	6013      	str	r3, [r2, #0]
  4011f0:	4770      	bx	lr
  4011f2:	bf00      	nop
  4011f4:	400e0600 	.word	0x400e0600
  4011f8:	20400008 	.word	0x20400008
  4011fc:	400e1810 	.word	0x400e1810
  401200:	00b71b00 	.word	0x00b71b00
  401204:	003d0900 	.word	0x003d0900
  401208:	007a1200 	.word	0x007a1200
  40120c:	aaaaaaab 	.word	0xaaaaaaab

00401210 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401210:	4b16      	ldr	r3, [pc, #88]	; (40126c <system_init_flash+0x5c>)
  401212:	4298      	cmp	r0, r3
  401214:	d913      	bls.n	40123e <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401216:	4b16      	ldr	r3, [pc, #88]	; (401270 <system_init_flash+0x60>)
  401218:	4298      	cmp	r0, r3
  40121a:	d915      	bls.n	401248 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  40121c:	4b15      	ldr	r3, [pc, #84]	; (401274 <system_init_flash+0x64>)
  40121e:	4298      	cmp	r0, r3
  401220:	d916      	bls.n	401250 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401222:	4b15      	ldr	r3, [pc, #84]	; (401278 <system_init_flash+0x68>)
  401224:	4298      	cmp	r0, r3
  401226:	d917      	bls.n	401258 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401228:	4b14      	ldr	r3, [pc, #80]	; (40127c <system_init_flash+0x6c>)
  40122a:	4298      	cmp	r0, r3
  40122c:	d918      	bls.n	401260 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40122e:	4b14      	ldr	r3, [pc, #80]	; (401280 <system_init_flash+0x70>)
  401230:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401232:	bf94      	ite	ls
  401234:	4a13      	ldrls	r2, [pc, #76]	; (401284 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401236:	4a14      	ldrhi	r2, [pc, #80]	; (401288 <system_init_flash+0x78>)
  401238:	4b14      	ldr	r3, [pc, #80]	; (40128c <system_init_flash+0x7c>)
  40123a:	601a      	str	r2, [r3, #0]
  40123c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40123e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401242:	4b12      	ldr	r3, [pc, #72]	; (40128c <system_init_flash+0x7c>)
  401244:	601a      	str	r2, [r3, #0]
  401246:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401248:	4a11      	ldr	r2, [pc, #68]	; (401290 <system_init_flash+0x80>)
  40124a:	4b10      	ldr	r3, [pc, #64]	; (40128c <system_init_flash+0x7c>)
  40124c:	601a      	str	r2, [r3, #0]
  40124e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401250:	4a10      	ldr	r2, [pc, #64]	; (401294 <system_init_flash+0x84>)
  401252:	4b0e      	ldr	r3, [pc, #56]	; (40128c <system_init_flash+0x7c>)
  401254:	601a      	str	r2, [r3, #0]
  401256:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401258:	4a0f      	ldr	r2, [pc, #60]	; (401298 <system_init_flash+0x88>)
  40125a:	4b0c      	ldr	r3, [pc, #48]	; (40128c <system_init_flash+0x7c>)
  40125c:	601a      	str	r2, [r3, #0]
  40125e:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401260:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401264:	4b09      	ldr	r3, [pc, #36]	; (40128c <system_init_flash+0x7c>)
  401266:	601a      	str	r2, [r3, #0]
  401268:	4770      	bx	lr
  40126a:	bf00      	nop
  40126c:	015ef3bf 	.word	0x015ef3bf
  401270:	02bde77f 	.word	0x02bde77f
  401274:	041cdb3f 	.word	0x041cdb3f
  401278:	057bceff 	.word	0x057bceff
  40127c:	06dac2bf 	.word	0x06dac2bf
  401280:	0839b67f 	.word	0x0839b67f
  401284:	04000500 	.word	0x04000500
  401288:	04000600 	.word	0x04000600
  40128c:	400e0c00 	.word	0x400e0c00
  401290:	04000100 	.word	0x04000100
  401294:	04000200 	.word	0x04000200
  401298:	04000300 	.word	0x04000300

0040129c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  40129c:	4b0a      	ldr	r3, [pc, #40]	; (4012c8 <_sbrk+0x2c>)
  40129e:	681b      	ldr	r3, [r3, #0]
  4012a0:	b153      	cbz	r3, 4012b8 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4012a2:	4b09      	ldr	r3, [pc, #36]	; (4012c8 <_sbrk+0x2c>)
  4012a4:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4012a6:	181a      	adds	r2, r3, r0
  4012a8:	4908      	ldr	r1, [pc, #32]	; (4012cc <_sbrk+0x30>)
  4012aa:	4291      	cmp	r1, r2
  4012ac:	db08      	blt.n	4012c0 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4012ae:	4610      	mov	r0, r2
  4012b0:	4a05      	ldr	r2, [pc, #20]	; (4012c8 <_sbrk+0x2c>)
  4012b2:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4012b4:	4618      	mov	r0, r3
  4012b6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4012b8:	4a05      	ldr	r2, [pc, #20]	; (4012d0 <_sbrk+0x34>)
  4012ba:	4b03      	ldr	r3, [pc, #12]	; (4012c8 <_sbrk+0x2c>)
  4012bc:	601a      	str	r2, [r3, #0]
  4012be:	e7f0      	b.n	4012a2 <_sbrk+0x6>
		return (caddr_t) -1;	
  4012c0:	f04f 30ff 	mov.w	r0, #4294967295
}
  4012c4:	4770      	bx	lr
  4012c6:	bf00      	nop
  4012c8:	20401444 	.word	0x20401444
  4012cc:	2045fffc 	.word	0x2045fffc
  4012d0:	204036f8 	.word	0x204036f8

004012d4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4012d4:	f04f 30ff 	mov.w	r0, #4294967295
  4012d8:	4770      	bx	lr

004012da <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4012da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4012de:	604b      	str	r3, [r1, #4]

	return 0;
}
  4012e0:	2000      	movs	r0, #0
  4012e2:	4770      	bx	lr

004012e4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4012e4:	2001      	movs	r0, #1
  4012e6:	4770      	bx	lr

004012e8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4012e8:	2000      	movs	r0, #0
  4012ea:	4770      	bx	lr

004012ec <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
  4012ec:	be00      	bkpt	0x0000
  4012ee:	e7fe      	b.n	4012ee <_exit+0x2>

004012f0 <_kill>:
	for (;;);
}

extern void _kill(int pid, int sig)
{
  4012f0:	4770      	bx	lr

004012f2 <_getpid>:
}

extern int _getpid(void)
{
	return -1;
}
  4012f2:	f04f 30ff 	mov.w	r0, #4294967295
  4012f6:	4770      	bx	lr

004012f8 <iCanHazTx>:
// 	printf("SCM: iCanHazTx: %p, 0x%x, %d\n", context, msgID, data);
// 	// candriver_error_poll();
// }

void iCanHazTx(ICANTxCtx_T context, uint32_t msgID, uint8_t * data, uint8_t length)
{
  4012f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4012fc:	b082      	sub	sp, #8
  4012fe:	4607      	mov	r7, r0
  401300:	460c      	mov	r4, r1
  401302:	4615      	mov	r5, r2
  401304:	4698      	mov	r8, r3
    uint32_t currTick = bb_port_get_current_ticks();
  401306:	4b09      	ldr	r3, [pc, #36]	; (40132c <iCanHazTx+0x34>)
  401308:	4798      	blx	r3
  40130a:	4606      	mov	r6, r0
		TBD
	*/


        // startPtr += snprintf(dataStr + startPtr, maxBytes, "%02x ", data[i]);
		(void)candriver_send(msgID, data, length);
  40130c:	4642      	mov	r2, r8
  40130e:	4629      	mov	r1, r5
  401310:	4620      	mov	r0, r4
  401312:	4b07      	ldr	r3, [pc, #28]	; (401330 <iCanHazTx+0x38>)
  401314:	4798      	blx	r3

    printf("SCM: iCanHazTx: %d: %p, 0x%x: %s\n", currTick, context, msgID, data);
  401316:	9500      	str	r5, [sp, #0]
  401318:	4623      	mov	r3, r4
  40131a:	463a      	mov	r2, r7
  40131c:	4631      	mov	r1, r6
  40131e:	4805      	ldr	r0, [pc, #20]	; (401334 <iCanHazTx+0x3c>)
  401320:	4c05      	ldr	r4, [pc, #20]	; (401338 <iCanHazTx+0x40>)
  401322:	47a0      	blx	r4
}
  401324:	b002      	add	sp, #8
  401326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40132a:	bf00      	nop
  40132c:	004003fd 	.word	0x004003fd
  401330:	004005a1 	.word	0x004005a1
  401334:	00404e78 	.word	0x00404e78
  401338:	00401ad5 	.word	0x00401ad5

0040133c <doSCMtest2>:
#include "bb_tx_proc.h"

void bb_port_inc_ticks();

void doSCMtest2(void)
{
  40133c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401340:	b087      	sub	sp, #28

	// bb_set_RCM_ModuleId(42);
	// bb_set_RCM_Sensor1Voltage(3.5);
	// bb_set_RCM_Sensor1Temperature(4095.5);

	bb_set_SCM_motor1MaxSpeed(4095.123);
  401342:	481b      	ldr	r0, [pc, #108]	; (4013b0 <doSCMtest2+0x74>)
  401344:	4b1b      	ldr	r3, [pc, #108]	; (4013b4 <doSCMtest2+0x78>)
  401346:	4798      	blx	r3
	bb_set_SCM_motor1MinSpeed(5072);
  401348:	481b      	ldr	r0, [pc, #108]	; (4013b8 <doSCMtest2+0x7c>)
  40134a:	4b1c      	ldr	r3, [pc, #112]	; (4013bc <doSCMtest2+0x80>)
  40134c:	4798      	blx	r3
	bb_set_SCM_Motor1Control(42);
  40134e:	202a      	movs	r0, #42	; 0x2a
  401350:	4b1b      	ldr	r3, [pc, #108]	; (4013c0 <doSCMtest2+0x84>)
  401352:	4798      	blx	r3
	bb_set_SCM_Motor3Control(90);
  401354:	205a      	movs	r0, #90	; 0x5a
  401356:	4b1b      	ldr	r3, [pc, #108]	; (4013c4 <doSCMtest2+0x88>)
  401358:	4798      	blx	r3

	uint32_t currTicks = 0; //bb_port_get_current_tick();
	uint32_t prevTicks = currTicks;
	bb_tx_proc_init(&bbtxProc, 10000, icanHazTxers, sizeof(icanHazTxers)/sizeof(icanHazTxers[0]), currTicks);
  40135a:	2500      	movs	r5, #0
  40135c:	9500      	str	r5, [sp, #0]
  40135e:	2301      	movs	r3, #1
  401360:	4a19      	ldr	r2, [pc, #100]	; (4013c8 <doSCMtest2+0x8c>)
  401362:	f242 7110 	movw	r1, #10000	; 0x2710
  401366:	a803      	add	r0, sp, #12
  401368:	4c18      	ldr	r4, [pc, #96]	; (4013cc <doSCMtest2+0x90>)
  40136a:	47a0      	blx	r4
  40136c:	2464      	movs	r4, #100	; 0x64
	uint32_t prevTicks = currTicks;
  40136e:	46a9      	mov	r9, r5

	for (int i = 0; i < 100; i++)
	{
		currTicks = bb_port_get_current_ticks();
  401370:	f8df 8078 	ldr.w	r8, [pc, #120]	; 4013ec <doSCMtest2+0xb0>
		uint32_t sleepTicks = bb_tx_proc_process_tx(&bbtxProc, currTicks, prevTicks);
  401374:	4f16      	ldr	r7, [pc, #88]	; (4013d0 <doSCMtest2+0x94>)
		if (sleepTicks > 200)
		{
			sleepTicks = 200;
		}
		prevTicks = currTicks;
		bb_port_inc_ticks(sleepTicks);
  401376:	4e17      	ldr	r6, [pc, #92]	; (4013d4 <doSCMtest2+0x98>)
		currTicks = bb_port_get_current_ticks();
  401378:	47c0      	blx	r8
  40137a:	4605      	mov	r5, r0
		uint32_t sleepTicks = bb_tx_proc_process_tx(&bbtxProc, currTicks, prevTicks);
  40137c:	464a      	mov	r2, r9
  40137e:	4601      	mov	r1, r0
  401380:	a803      	add	r0, sp, #12
  401382:	47b8      	blx	r7
		bb_port_inc_ticks(sleepTicks);
  401384:	28c8      	cmp	r0, #200	; 0xc8
  401386:	bf28      	it	cs
  401388:	20c8      	movcs	r0, #200	; 0xc8
  40138a:	47b0      	blx	r6
		 g_tx_tick_count_ms++;
  40138c:	4a12      	ldr	r2, [pc, #72]	; (4013d8 <doSCMtest2+0x9c>)
  40138e:	6813      	ldr	r3, [r2, #0]
  401390:	3301      	adds	r3, #1
  401392:	6013      	str	r3, [r2, #0]
		prevTicks = currTicks;
  401394:	46a9      	mov	r9, r5
	for (int i = 0; i < 100; i++)
  401396:	3c01      	subs	r4, #1
  401398:	d1ee      	bne.n	401378 <doSCMtest2+0x3c>
	}

	BlackboardElement_T * bbElement = bb_get_element(CAN_ELEM_RCM_System);
  40139a:	2005      	movs	r0, #5
  40139c:	4b0f      	ldr	r3, [pc, #60]	; (4013dc <doSCMtest2+0xa0>)
  40139e:	4798      	blx	r3
	bb_elem_set_data_from_can(bbElement, CAN_ELEM_RCM_System, 0xDECAFC0F, 0xFEEBEBAD);
  4013a0:	4b0f      	ldr	r3, [pc, #60]	; (4013e0 <doSCMtest2+0xa4>)
  4013a2:	4a10      	ldr	r2, [pc, #64]	; (4013e4 <doSCMtest2+0xa8>)
  4013a4:	2105      	movs	r1, #5
  4013a6:	4c10      	ldr	r4, [pc, #64]	; (4013e8 <doSCMtest2+0xac>)
  4013a8:	47a0      	blx	r4
	// bb_elem_get_data_for_can(bbElement, &tx_data[0], &tx_data[1]);
  4013aa:	b007      	add	sp, #28
  4013ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4013b0:	457ff1f8 	.word	0x457ff1f8
  4013b4:	004004a5 	.word	0x004004a5
  4013b8:	459e8000 	.word	0x459e8000
  4013bc:	004004e9 	.word	0x004004e9
  4013c0:	0040052d 	.word	0x0040052d
  4013c4:	00400551 	.word	0x00400551
  4013c8:	2040000c 	.word	0x2040000c
  4013cc:	004002a1 	.word	0x004002a1
  4013d0:	00400355 	.word	0x00400355
  4013d4:	004003ed 	.word	0x004003ed
  4013d8:	20401450 	.word	0x20401450
  4013dc:	00400499 	.word	0x00400499
  4013e0:	feebebad 	.word	0xfeebebad
  4013e4:	decafc0f 	.word	0xdecafc0f
  4013e8:	00400209 	.word	0x00400209
  4013ec:	004003fd 	.word	0x004003fd

004013f0 <configure_mcan>:
/**
 * \brief MCAN module initialization.
 *
 */
static void configure_mcan(void)
{
  4013f0:	b510      	push	{r4, lr}
  4013f2:	b08a      	sub	sp, #40	; 0x28
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->run_in_standby = false;
  4013f4:	2300      	movs	r3, #0
  4013f6:	f88d 3004 	strb.w	r3, [sp, #4]
	config->watchdog_configuration = 0x00;
  4013fa:	f88d 3005 	strb.w	r3, [sp, #5]
	config->transmit_pause = true;
  4013fe:	2201      	movs	r2, #1
  401400:	f88d 2006 	strb.w	r2, [sp, #6]
	config->edge_filtering = true;
  401404:	f88d 2007 	strb.w	r2, [sp, #7]
	config->protocol_exception_handling = true;
  401408:	f88d 2008 	strb.w	r2, [sp, #8]
	config->automatic_retransmission = true;
  40140c:	f88d 2009 	strb.w	r2, [sp, #9]
	config->clock_stop_request = false;
  401410:	f88d 300a 	strb.w	r3, [sp, #10]
	config->clock_stop_acknowledge = false;
  401414:	f88d 300b 	strb.w	r3, [sp, #11]
	config->timestamp_prescaler = 0;
  401418:	f88d 300c 	strb.w	r3, [sp, #12]
	config->timeout_period = 0xFFFF;
  40141c:	f64f 71ff 	movw	r1, #65535	; 0xffff
  401420:	f8ad 100e 	strh.w	r1, [sp, #14]
	config->timeout_mode = MCAN_TIMEOUT_CONTINUES;
  401424:	f88d 3010 	strb.w	r3, [sp, #16]
	config->timeout_enable = false;
  401428:	f88d 3011 	strb.w	r3, [sp, #17]
	config->tdc_enable = false;
  40142c:	f88d 3012 	strb.w	r3, [sp, #18]
	config->delay_compensation_offset = 0;
  401430:	f88d 3013 	strb.w	r3, [sp, #19]
#if (SAMV71B || SAME70B || SAMV70B)
	config->delay_compensation_filter_window_length = 0;
  401434:	f88d 3014 	strb.w	r3, [sp, #20]
#endif
	config->nonmatching_frames_action_standard = MCAN_NONMATCHING_FRAMES_REJECT;
  401438:	2102      	movs	r1, #2
  40143a:	f88d 1015 	strb.w	r1, [sp, #21]
	config->nonmatching_frames_action_extended = MCAN_NONMATCHING_FRAMES_REJECT;
  40143e:	f88d 1016 	strb.w	r1, [sp, #22]
	config->remote_frames_standard_reject = true;
  401442:	f88d 2017 	strb.w	r2, [sp, #23]
	config->remote_frames_extended_reject = true;
  401446:	f88d 2018 	strb.w	r2, [sp, #24]
	config->extended_id_mask = 0x1FFFFFFF;
  40144a:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
  40144e:	9107      	str	r1, [sp, #28]
	config->rx_fifo_0_overwrite = true;
  401450:	f88d 2020 	strb.w	r2, [sp, #32]
	config->rx_fifo_0_watermark = 0;
  401454:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	config->rx_fifo_1_overwrite = true;
  401458:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
	config->rx_fifo_1_watermark = 0;
  40145c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	config->tx_queue_mode = false;
  401460:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	config->tx_event_fifo_watermark = 0;
  401464:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	}

	/* Initialize the module. */
	struct mcan_config config_mcan;
	mcan_get_config_defaults(&config_mcan);
	mcan_init(&mcan_instance, MCAN_MODULE, &config_mcan);
  401468:	4c0b      	ldr	r4, [pc, #44]	; (401498 <configure_mcan+0xa8>)
  40146a:	aa01      	add	r2, sp, #4
  40146c:	490b      	ldr	r1, [pc, #44]	; (40149c <configure_mcan+0xac>)
  40146e:	4620      	mov	r0, r4
  401470:	4b0b      	ldr	r3, [pc, #44]	; (4014a0 <configure_mcan+0xb0>)
  401472:	4798      	blx	r3


	mcan_start(&mcan_instance);
  401474:	4620      	mov	r0, r4
  401476:	4b0b      	ldr	r3, [pc, #44]	; (4014a4 <configure_mcan+0xb4>)
  401478:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40147a:	4b0b      	ldr	r3, [pc, #44]	; (4014a8 <configure_mcan+0xb8>)
  40147c:	2220      	movs	r2, #32
  40147e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  401482:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401486:	605a      	str	r2, [r3, #4]
 * \param[in] source  Interrupt source type
 */
static inline void mcan_enable_interrupt(struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
	module_inst->hw->MCAN_IE |= source;
  401488:	6822      	ldr	r2, [r4, #0]
  40148a:	6d53      	ldr	r3, [r2, #84]	; 0x54
  40148c:	f043 43c4 	orr.w	r3, r3, #1644167168	; 0x62000000
  401490:	6553      	str	r3, [r2, #84]	; 0x54
	/* Enable interrupts for this MCAN module */
	irq_register_handler(MCAN1_INT0_IRQn, 1);
	mcan_enable_interrupt(&mcan_instance, MCAN_FORMAT_ERROR | MCAN_ACKNOWLEDGE_ERROR | MCAN_BUS_OFF);


}
  401492:	b00a      	add	sp, #40	; 0x28
  401494:	bd10      	pop	{r4, pc}
  401496:	bf00      	nop
  401498:	20401454 	.word	0x20401454
  40149c:	40034000 	.word	0x40034000
  4014a0:	0040088d 	.word	0x0040088d
  4014a4:	00400b01 	.word	0x00400b01
  4014a8:	e000e100 	.word	0xe000e100

004014ac <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4014ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  4014ae:	b083      	sub	sp, #12
  4014b0:	4605      	mov	r5, r0
  4014b2:	460c      	mov	r4, r1
	uint32_t val = 0;
  4014b4:	2300      	movs	r3, #0
  4014b6:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4014b8:	4b2a      	ldr	r3, [pc, #168]	; (401564 <usart_serial_getchar+0xb8>)
  4014ba:	4298      	cmp	r0, r3
  4014bc:	d013      	beq.n	4014e6 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4014be:	4b2a      	ldr	r3, [pc, #168]	; (401568 <usart_serial_getchar+0xbc>)
  4014c0:	4298      	cmp	r0, r3
  4014c2:	d018      	beq.n	4014f6 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4014c4:	4b29      	ldr	r3, [pc, #164]	; (40156c <usart_serial_getchar+0xc0>)
  4014c6:	4298      	cmp	r0, r3
  4014c8:	d01d      	beq.n	401506 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4014ca:	4b29      	ldr	r3, [pc, #164]	; (401570 <usart_serial_getchar+0xc4>)
  4014cc:	429d      	cmp	r5, r3
  4014ce:	d022      	beq.n	401516 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4014d0:	4b28      	ldr	r3, [pc, #160]	; (401574 <usart_serial_getchar+0xc8>)
  4014d2:	429d      	cmp	r5, r3
  4014d4:	d027      	beq.n	401526 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4014d6:	4b28      	ldr	r3, [pc, #160]	; (401578 <usart_serial_getchar+0xcc>)
  4014d8:	429d      	cmp	r5, r3
  4014da:	d02e      	beq.n	40153a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4014dc:	4b27      	ldr	r3, [pc, #156]	; (40157c <usart_serial_getchar+0xd0>)
  4014de:	429d      	cmp	r5, r3
  4014e0:	d035      	beq.n	40154e <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4014e2:	b003      	add	sp, #12
  4014e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4014e6:	461f      	mov	r7, r3
  4014e8:	4e25      	ldr	r6, [pc, #148]	; (401580 <usart_serial_getchar+0xd4>)
  4014ea:	4621      	mov	r1, r4
  4014ec:	4638      	mov	r0, r7
  4014ee:	47b0      	blx	r6
  4014f0:	2800      	cmp	r0, #0
  4014f2:	d1fa      	bne.n	4014ea <usart_serial_getchar+0x3e>
  4014f4:	e7e9      	b.n	4014ca <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4014f6:	461f      	mov	r7, r3
  4014f8:	4e21      	ldr	r6, [pc, #132]	; (401580 <usart_serial_getchar+0xd4>)
  4014fa:	4621      	mov	r1, r4
  4014fc:	4638      	mov	r0, r7
  4014fe:	47b0      	blx	r6
  401500:	2800      	cmp	r0, #0
  401502:	d1fa      	bne.n	4014fa <usart_serial_getchar+0x4e>
  401504:	e7e4      	b.n	4014d0 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  401506:	461f      	mov	r7, r3
  401508:	4e1d      	ldr	r6, [pc, #116]	; (401580 <usart_serial_getchar+0xd4>)
  40150a:	4621      	mov	r1, r4
  40150c:	4638      	mov	r0, r7
  40150e:	47b0      	blx	r6
  401510:	2800      	cmp	r0, #0
  401512:	d1fa      	bne.n	40150a <usart_serial_getchar+0x5e>
  401514:	e7df      	b.n	4014d6 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  401516:	461f      	mov	r7, r3
  401518:	4e19      	ldr	r6, [pc, #100]	; (401580 <usart_serial_getchar+0xd4>)
  40151a:	4621      	mov	r1, r4
  40151c:	4638      	mov	r0, r7
  40151e:	47b0      	blx	r6
  401520:	2800      	cmp	r0, #0
  401522:	d1fa      	bne.n	40151a <usart_serial_getchar+0x6e>
  401524:	e7da      	b.n	4014dc <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  401526:	461e      	mov	r6, r3
  401528:	4d16      	ldr	r5, [pc, #88]	; (401584 <usart_serial_getchar+0xd8>)
  40152a:	a901      	add	r1, sp, #4
  40152c:	4630      	mov	r0, r6
  40152e:	47a8      	blx	r5
  401530:	2800      	cmp	r0, #0
  401532:	d1fa      	bne.n	40152a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  401534:	9b01      	ldr	r3, [sp, #4]
  401536:	7023      	strb	r3, [r4, #0]
  401538:	e7d3      	b.n	4014e2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40153a:	461e      	mov	r6, r3
  40153c:	4d11      	ldr	r5, [pc, #68]	; (401584 <usart_serial_getchar+0xd8>)
  40153e:	a901      	add	r1, sp, #4
  401540:	4630      	mov	r0, r6
  401542:	47a8      	blx	r5
  401544:	2800      	cmp	r0, #0
  401546:	d1fa      	bne.n	40153e <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  401548:	9b01      	ldr	r3, [sp, #4]
  40154a:	7023      	strb	r3, [r4, #0]
  40154c:	e7c9      	b.n	4014e2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40154e:	461e      	mov	r6, r3
  401550:	4d0c      	ldr	r5, [pc, #48]	; (401584 <usart_serial_getchar+0xd8>)
  401552:	a901      	add	r1, sp, #4
  401554:	4630      	mov	r0, r6
  401556:	47a8      	blx	r5
  401558:	2800      	cmp	r0, #0
  40155a:	d1fa      	bne.n	401552 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  40155c:	9b01      	ldr	r3, [sp, #4]
  40155e:	7023      	strb	r3, [r4, #0]
}
  401560:	e7bf      	b.n	4014e2 <usart_serial_getchar+0x36>
  401562:	bf00      	nop
  401564:	400e0800 	.word	0x400e0800
  401568:	400e0a00 	.word	0x400e0a00
  40156c:	400e1a00 	.word	0x400e1a00
  401570:	400e1c00 	.word	0x400e1c00
  401574:	40024000 	.word	0x40024000
  401578:	40028000 	.word	0x40028000
  40157c:	4002c000 	.word	0x4002c000
  401580:	00400f17 	.word	0x00400f17
  401584:	00401023 	.word	0x00401023

00401588 <usart_serial_putchar>:
{
  401588:	b570      	push	{r4, r5, r6, lr}
  40158a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  40158c:	4b2a      	ldr	r3, [pc, #168]	; (401638 <usart_serial_putchar+0xb0>)
  40158e:	4298      	cmp	r0, r3
  401590:	d013      	beq.n	4015ba <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  401592:	4b2a      	ldr	r3, [pc, #168]	; (40163c <usart_serial_putchar+0xb4>)
  401594:	4298      	cmp	r0, r3
  401596:	d019      	beq.n	4015cc <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  401598:	4b29      	ldr	r3, [pc, #164]	; (401640 <usart_serial_putchar+0xb8>)
  40159a:	4298      	cmp	r0, r3
  40159c:	d01f      	beq.n	4015de <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40159e:	4b29      	ldr	r3, [pc, #164]	; (401644 <usart_serial_putchar+0xbc>)
  4015a0:	4298      	cmp	r0, r3
  4015a2:	d025      	beq.n	4015f0 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4015a4:	4b28      	ldr	r3, [pc, #160]	; (401648 <usart_serial_putchar+0xc0>)
  4015a6:	4298      	cmp	r0, r3
  4015a8:	d02b      	beq.n	401602 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4015aa:	4b28      	ldr	r3, [pc, #160]	; (40164c <usart_serial_putchar+0xc4>)
  4015ac:	4298      	cmp	r0, r3
  4015ae:	d031      	beq.n	401614 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4015b0:	4b27      	ldr	r3, [pc, #156]	; (401650 <usart_serial_putchar+0xc8>)
  4015b2:	4298      	cmp	r0, r3
  4015b4:	d037      	beq.n	401626 <usart_serial_putchar+0x9e>
	return 0;
  4015b6:	2000      	movs	r0, #0
}
  4015b8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4015ba:	461e      	mov	r6, r3
  4015bc:	4d25      	ldr	r5, [pc, #148]	; (401654 <usart_serial_putchar+0xcc>)
  4015be:	4621      	mov	r1, r4
  4015c0:	4630      	mov	r0, r6
  4015c2:	47a8      	blx	r5
  4015c4:	2800      	cmp	r0, #0
  4015c6:	d1fa      	bne.n	4015be <usart_serial_putchar+0x36>
		return 1;
  4015c8:	2001      	movs	r0, #1
  4015ca:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4015cc:	461e      	mov	r6, r3
  4015ce:	4d21      	ldr	r5, [pc, #132]	; (401654 <usart_serial_putchar+0xcc>)
  4015d0:	4621      	mov	r1, r4
  4015d2:	4630      	mov	r0, r6
  4015d4:	47a8      	blx	r5
  4015d6:	2800      	cmp	r0, #0
  4015d8:	d1fa      	bne.n	4015d0 <usart_serial_putchar+0x48>
		return 1;
  4015da:	2001      	movs	r0, #1
  4015dc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4015de:	461e      	mov	r6, r3
  4015e0:	4d1c      	ldr	r5, [pc, #112]	; (401654 <usart_serial_putchar+0xcc>)
  4015e2:	4621      	mov	r1, r4
  4015e4:	4630      	mov	r0, r6
  4015e6:	47a8      	blx	r5
  4015e8:	2800      	cmp	r0, #0
  4015ea:	d1fa      	bne.n	4015e2 <usart_serial_putchar+0x5a>
		return 1;
  4015ec:	2001      	movs	r0, #1
  4015ee:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4015f0:	461e      	mov	r6, r3
  4015f2:	4d18      	ldr	r5, [pc, #96]	; (401654 <usart_serial_putchar+0xcc>)
  4015f4:	4621      	mov	r1, r4
  4015f6:	4630      	mov	r0, r6
  4015f8:	47a8      	blx	r5
  4015fa:	2800      	cmp	r0, #0
  4015fc:	d1fa      	bne.n	4015f4 <usart_serial_putchar+0x6c>
		return 1;
  4015fe:	2001      	movs	r0, #1
  401600:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  401602:	461e      	mov	r6, r3
  401604:	4d14      	ldr	r5, [pc, #80]	; (401658 <usart_serial_putchar+0xd0>)
  401606:	4621      	mov	r1, r4
  401608:	4630      	mov	r0, r6
  40160a:	47a8      	blx	r5
  40160c:	2800      	cmp	r0, #0
  40160e:	d1fa      	bne.n	401606 <usart_serial_putchar+0x7e>
		return 1;
  401610:	2001      	movs	r0, #1
  401612:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  401614:	461e      	mov	r6, r3
  401616:	4d10      	ldr	r5, [pc, #64]	; (401658 <usart_serial_putchar+0xd0>)
  401618:	4621      	mov	r1, r4
  40161a:	4630      	mov	r0, r6
  40161c:	47a8      	blx	r5
  40161e:	2800      	cmp	r0, #0
  401620:	d1fa      	bne.n	401618 <usart_serial_putchar+0x90>
		return 1;
  401622:	2001      	movs	r0, #1
  401624:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  401626:	461e      	mov	r6, r3
  401628:	4d0b      	ldr	r5, [pc, #44]	; (401658 <usart_serial_putchar+0xd0>)
  40162a:	4621      	mov	r1, r4
  40162c:	4630      	mov	r0, r6
  40162e:	47a8      	blx	r5
  401630:	2800      	cmp	r0, #0
  401632:	d1fa      	bne.n	40162a <usart_serial_putchar+0xa2>
		return 1;
  401634:	2001      	movs	r0, #1
  401636:	bd70      	pop	{r4, r5, r6, pc}
  401638:	400e0800 	.word	0x400e0800
  40163c:	400e0a00 	.word	0x400e0a00
  401640:	400e1a00 	.word	0x400e1a00
  401644:	400e1c00 	.word	0x400e1c00
  401648:	40024000 	.word	0x40024000
  40164c:	40028000 	.word	0x40028000
  401650:	4002c000 	.word	0x4002c000
  401654:	00400f05 	.word	0x00400f05
  401658:	0040100d 	.word	0x0040100d

0040165c <mcan_send_standard_message>:
 *\param *data  content to be sent
 *\param data_length data length code
 */
void mcan_send_standard_message(uint32_t id_value, uint8_t *data,
		uint32_t data_length)
{
  40165c:	b510      	push	{r4, lr}
  40165e:	b084      	sub	sp, #16
	tx_element->T0.reg = 0;
  401660:	2300      	movs	r3, #0
  401662:	9300      	str	r3, [sp, #0]
	tx_element->T1.reg = MCAN_TX_ELEMENT_T1_EFC |
  401664:	f44f 0308 	mov.w	r3, #8912896	; 0x880000
  401668:	9301      	str	r3, [sp, #4]
	uint32_t i;
	struct mcan_tx_element tx_element;

	mcan_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= MCAN_TX_ELEMENT_T0_STANDARD_ID(id_value);
  40166a:	9c00      	ldr	r4, [sp, #0]
  40166c:	4b11      	ldr	r3, [pc, #68]	; (4016b4 <mcan_send_standard_message+0x58>)
  40166e:	ea03 4080 	and.w	r0, r3, r0, lsl #18
  401672:	4320      	orrs	r0, r4
  401674:	9000      	str	r0, [sp, #0]
	tx_element.T1.bit.DLC = data_length;
  401676:	9b01      	ldr	r3, [sp, #4]
  401678:	f362 4313 	bfi	r3, r2, #16, #4
  40167c:	9301      	str	r3, [sp, #4]
	for (i = 0; i < data_length; i++) {
  40167e:	b142      	cbz	r2, 401692 <mcan_send_standard_message+0x36>
  401680:	460b      	mov	r3, r1
  401682:	a802      	add	r0, sp, #8
  401684:	4411      	add	r1, r2
		tx_element.data[i] = *data;
  401686:	f813 4b01 	ldrb.w	r4, [r3], #1
  40168a:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < data_length; i++) {
  40168e:	428b      	cmp	r3, r1
  401690:	d1f9      	bne.n	401686 <mcan_send_standard_message+0x2a>
		data++;
	}

	mcan_set_tx_buffer_element(&mcan_instance, &tx_element,
  401692:	4c09      	ldr	r4, [pc, #36]	; (4016b8 <mcan_send_standard_message+0x5c>)
  401694:	2200      	movs	r2, #0
  401696:	4669      	mov	r1, sp
  401698:	4620      	mov	r0, r4
  40169a:	4b08      	ldr	r3, [pc, #32]	; (4016bc <mcan_send_standard_message+0x60>)
  40169c:	4798      	blx	r3
	if (module_inst->hw->MCAN_CCCR & MCAN_CCCR_CCE) {
  40169e:	6823      	ldr	r3, [r4, #0]
  4016a0:	699a      	ldr	r2, [r3, #24]
  4016a2:	f012 0f02 	tst.w	r2, #2
  4016a6:	d102      	bne.n	4016ae <mcan_send_standard_message+0x52>
	module_inst->hw->MCAN_TXBAR = trig_mask;
  4016a8:	2201      	movs	r2, #1
  4016aa:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
			MCAN_TX_BUFFER_INDEX);
	mcan_tx_transfer_request(&mcan_instance, 1 << MCAN_TX_BUFFER_INDEX);
}
  4016ae:	b004      	add	sp, #16
  4016b0:	bd10      	pop	{r4, pc}
  4016b2:	bf00      	nop
  4016b4:	1ffc0000 	.word	0x1ffc0000
  4016b8:	20401454 	.word	0x20401454
  4016bc:	00400c29 	.word	0x00400c29

004016c0 <MCAN1_INT0_Handler>:
/**
 * \brief Interrupt handler for MCAN,
 *   inlcuding RX,TX,ERROR and so on processes.
 */
void MCAN1_INT0_Handler(void)
{
  4016c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4016c4:	b084      	sub	sp, #16
 * \param[in] module_inst  Pointer to the MCAN software instance struct
 */
static inline uint32_t mcan_read_interrupt_status(
		struct mcan_module *const module_inst)
{
	return module_inst->hw->MCAN_IR;
  4016c6:	4b8e      	ldr	r3, [pc, #568]	; (401900 <MCAN1_INT0_Handler+0x240>)
  4016c8:	681b      	ldr	r3, [r3, #0]
  4016ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
	volatile uint32_t status, i, rx_buffer_index;
	status = mcan_read_interrupt_status(&mcan_instance);
  4016cc:	9203      	str	r2, [sp, #12]

	if (status & MCAN_RX_BUFFER_NEW_MESSAGE) {
  4016ce:	9a03      	ldr	r2, [sp, #12]
  4016d0:	f412 2f00 	tst.w	r2, #524288	; 0x80000
  4016d4:	d067      	beq.n	4017a6 <MCAN1_INT0_Handler+0xe6>
 */
static inline void mcan_clear_interrupt_status(
		struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
	module_inst->hw->MCAN_IR = source;
  4016d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4016da:	651a      	str	r2, [r3, #80]	; 0x50
		mcan_clear_interrupt_status(&mcan_instance, MCAN_RX_BUFFER_NEW_MESSAGE);
		for (i = 0; i < CONF_MCAN0_RX_BUFFER_NUM; i++) {
  4016dc:	2300      	movs	r3, #0
  4016de:	9302      	str	r3, [sp, #8]
  4016e0:	9b02      	ldr	r3, [sp, #8]
  4016e2:	2b0f      	cmp	r3, #15
  4016e4:	d85f      	bhi.n	4017a6 <MCAN1_INT0_Handler+0xe6>
		if (module_inst->hw->MCAN_NDAT1 & (1 << index)) {
  4016e6:	4f86      	ldr	r7, [pc, #536]	; (401900 <MCAN1_INT0_Handler+0x240>)
			if (mcan_rx_get_buffer_status(&mcan_instance, i)) {
				rx_buffer_index = i;
				mcan_rx_clear_buffer_status(&mcan_instance, i);
				mcan_get_rx_buffer_element(&mcan_instance, &rx_element_buffer,
  4016e8:	4c86      	ldr	r4, [pc, #536]	; (401904 <MCAN1_INT0_Handler+0x244>)
  4016ea:	f8df 8264 	ldr.w	r8, [pc, #612]	; 401950 <MCAN1_INT0_Handler+0x290>
  4016ee:	e03f      	b.n	401770 <MCAN1_INT0_Handler+0xb0>
		if (module_inst->hw->MCAN_NDAT2 & (1 << index)) {
  4016f0:	683a      	ldr	r2, [r7, #0]
  4016f2:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
		index -= 32;
  4016f6:	3b20      	subs	r3, #32
		if (module_inst->hw->MCAN_NDAT2 & (1 << index)) {
  4016f8:	2201      	movs	r2, #1
  4016fa:	fa02 f303 	lsl.w	r3, r2, r3
  4016fe:	420b      	tst	r3, r1
  401700:	bf14      	ite	ne
  401702:	4613      	movne	r3, r2
  401704:	2300      	moveq	r3, #0
  401706:	e040      	b.n	40178a <MCAN1_INT0_Handler+0xca>
		module_inst->hw->MCAN_NDAT2 = (1 << index);
  401708:	6839      	ldr	r1, [r7, #0]
		index -= 32;
  40170a:	3b20      	subs	r3, #32
		module_inst->hw->MCAN_NDAT2 = (1 << index);
  40170c:	2201      	movs	r2, #1
  40170e:	fa02 f303 	lsl.w	r3, r2, r3
  401712:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  401716:	9a01      	ldr	r2, [sp, #4]
  401718:	4621      	mov	r1, r4
  40171a:	4638      	mov	r0, r7
  40171c:	47c0      	blx	r8
				rx_buffer_index);
				if (rx_element_buffer.R0.bit.XTD) {
  40171e:	6823      	ldr	r3, [r4, #0]
  401720:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
					printf("\n\r Extended message received in Rx buffer. The received data is: \r\n");
  401724:	bf14      	ite	ne
  401726:	4878      	ldrne	r0, [pc, #480]	; (401908 <MCAN1_INT0_Handler+0x248>)
				} else {
					printf("\n\r Standard message received in Rx buffer. The received data is: \r\n");
  401728:	4878      	ldreq	r0, [pc, #480]	; (40190c <MCAN1_INT0_Handler+0x24c>)
  40172a:	4b79      	ldr	r3, [pc, #484]	; (401910 <MCAN1_INT0_Handler+0x250>)
  40172c:	4798      	blx	r3
				}
				for (i = 0; i < rx_element_buffer.R1.bit.DLC; i++) {
  40172e:	2300      	movs	r3, #0
  401730:	9302      	str	r3, [sp, #8]
  401732:	6863      	ldr	r3, [r4, #4]
  401734:	f3c3 4303 	ubfx	r3, r3, #16, #4
  401738:	9a02      	ldr	r2, [sp, #8]
  40173a:	4293      	cmp	r3, r2
  40173c:	d90f      	bls.n	40175e <MCAN1_INT0_Handler+0x9e>
					printf("  %d",rx_element_buffer.data[i]);
  40173e:	4e75      	ldr	r6, [pc, #468]	; (401914 <MCAN1_INT0_Handler+0x254>)
  401740:	4d73      	ldr	r5, [pc, #460]	; (401910 <MCAN1_INT0_Handler+0x250>)
  401742:	9b02      	ldr	r3, [sp, #8]
  401744:	4423      	add	r3, r4
  401746:	7a19      	ldrb	r1, [r3, #8]
  401748:	4630      	mov	r0, r6
  40174a:	47a8      	blx	r5
				for (i = 0; i < rx_element_buffer.R1.bit.DLC; i++) {
  40174c:	9b02      	ldr	r3, [sp, #8]
  40174e:	3301      	adds	r3, #1
  401750:	9302      	str	r3, [sp, #8]
  401752:	6863      	ldr	r3, [r4, #4]
  401754:	f3c3 4303 	ubfx	r3, r3, #16, #4
  401758:	9a02      	ldr	r2, [sp, #8]
  40175a:	4293      	cmp	r3, r2
  40175c:	d8f1      	bhi.n	401742 <MCAN1_INT0_Handler+0x82>
				}
				printf("\r\n\r\n");
  40175e:	486e      	ldr	r0, [pc, #440]	; (401918 <MCAN1_INT0_Handler+0x258>)
  401760:	4b6b      	ldr	r3, [pc, #428]	; (401910 <MCAN1_INT0_Handler+0x250>)
  401762:	4798      	blx	r3
		for (i = 0; i < CONF_MCAN0_RX_BUFFER_NUM; i++) {
  401764:	9b02      	ldr	r3, [sp, #8]
  401766:	3301      	adds	r3, #1
  401768:	9302      	str	r3, [sp, #8]
  40176a:	9b02      	ldr	r3, [sp, #8]
  40176c:	2b0f      	cmp	r3, #15
  40176e:	d81a      	bhi.n	4017a6 <MCAN1_INT0_Handler+0xe6>
			if (mcan_rx_get_buffer_status(&mcan_instance, i)) {
  401770:	9b02      	ldr	r3, [sp, #8]
	if (index < 32) {
  401772:	2b1f      	cmp	r3, #31
  401774:	d8bc      	bhi.n	4016f0 <MCAN1_INT0_Handler+0x30>
		if (module_inst->hw->MCAN_NDAT1 & (1 << index)) {
  401776:	683a      	ldr	r2, [r7, #0]
  401778:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
  40177c:	2201      	movs	r2, #1
  40177e:	fa02 f303 	lsl.w	r3, r2, r3
  401782:	420b      	tst	r3, r1
  401784:	bf14      	ite	ne
  401786:	4613      	movne	r3, r2
  401788:	2300      	moveq	r3, #0
  40178a:	2b00      	cmp	r3, #0
  40178c:	d0ea      	beq.n	401764 <MCAN1_INT0_Handler+0xa4>
				rx_buffer_index = i;
  40178e:	9b02      	ldr	r3, [sp, #8]
  401790:	9301      	str	r3, [sp, #4]
				mcan_rx_clear_buffer_status(&mcan_instance, i);
  401792:	9b02      	ldr	r3, [sp, #8]
	if (index < 32) {
  401794:	2b1f      	cmp	r3, #31
  401796:	d8b7      	bhi.n	401708 <MCAN1_INT0_Handler+0x48>
		module_inst->hw->MCAN_NDAT1 = (1 << index);
  401798:	6839      	ldr	r1, [r7, #0]
  40179a:	2201      	movs	r2, #1
  40179c:	fa02 f303 	lsl.w	r3, r2, r3
  4017a0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  4017a4:	e7b7      	b.n	401716 <MCAN1_INT0_Handler+0x56>
			}
		}
	}

	if (status & MCAN_RX_FIFO_0_NEW_MESSAGE) {
  4017a6:	9b03      	ldr	r3, [sp, #12]
  4017a8:	f013 0f01 	tst.w	r3, #1
  4017ac:	d115      	bne.n	4017da <MCAN1_INT0_Handler+0x11a>
			printf("  %d",rx_element_fifo_0.data[i]);
		}
		printf("\r\n\r\n");
	}

	if (status & MCAN_RX_FIFO_1_NEW_MESSAGE) {
  4017ae:	9b03      	ldr	r3, [sp, #12]
  4017b0:	f013 0f10 	tst.w	r3, #16
  4017b4:	d14b      	bne.n	40184e <MCAN1_INT0_Handler+0x18e>
			printf("  %d",rx_element_fifo_1.data[i]);
		}
		printf("\r\n\r\n");
	}

	if (status & MCAN_BUS_OFF) {
  4017b6:	9b03      	ldr	r3, [sp, #12]
  4017b8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  4017bc:	f040 8081 	bne.w	4018c2 <MCAN1_INT0_Handler+0x202>
		mcan_stop(&mcan_instance);
		printf(": MCAN bus off error, re-initialization. \r\n\r\n");
		configure_mcan();
	}

	if (status & MCAN_ACKNOWLEDGE_ERROR) {
  4017c0:	9b03      	ldr	r3, [sp, #12]
  4017c2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  4017c6:	f040 8089 	bne.w	4018dc <MCAN1_INT0_Handler+0x21c>
		mcan_clear_interrupt_status(&mcan_instance, MCAN_ACKNOWLEDGE_ERROR);
		printf("Protocol ACK error, please double check the clock in two boards. \r\n\r\n");
	}

	if (status & MCAN_FORMAT_ERROR) {
  4017ca:	9b03      	ldr	r3, [sp, #12]
  4017cc:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  4017d0:	f040 808d 	bne.w	4018ee <MCAN1_INT0_Handler+0x22e>
		mcan_clear_interrupt_status(&mcan_instance, MCAN_FORMAT_ERROR);
		printf("Protocol format error, please double check the clock in two boards. \r\n\r\n");
	}
}
  4017d4:	b004      	add	sp, #16
  4017d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	module_inst->hw->MCAN_IR = source;
  4017da:	4d49      	ldr	r5, [pc, #292]	; (401900 <MCAN1_INT0_Handler+0x240>)
  4017dc:	682b      	ldr	r3, [r5, #0]
  4017de:	2201      	movs	r2, #1
  4017e0:	651a      	str	r2, [r3, #80]	; 0x50
		mcan_get_rx_fifo_0_element(&mcan_instance, &rx_element_fifo_0,
  4017e2:	4c4e      	ldr	r4, [pc, #312]	; (40191c <MCAN1_INT0_Handler+0x25c>)
  4017e4:	6822      	ldr	r2, [r4, #0]
  4017e6:	494e      	ldr	r1, [pc, #312]	; (401920 <MCAN1_INT0_Handler+0x260>)
  4017e8:	4628      	mov	r0, r5
  4017ea:	4b4e      	ldr	r3, [pc, #312]	; (401924 <MCAN1_INT0_Handler+0x264>)
  4017ec:	4798      	blx	r3
		mcan_rx_fifo_acknowledge(&mcan_instance, 0,
  4017ee:	6823      	ldr	r3, [r4, #0]
		module_inst->hw->MCAN_RXF0A = MCAN_RXF0A_F0AI(index);
  4017f0:	682a      	ldr	r2, [r5, #0]
  4017f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  4017f6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
		standard_receive_index++;
  4017fa:	6823      	ldr	r3, [r4, #0]
  4017fc:	3301      	adds	r3, #1
  4017fe:	6023      	str	r3, [r4, #0]
		if (standard_receive_index == CONF_MCAN0_RX_FIFO_0_NUM) {
  401800:	6823      	ldr	r3, [r4, #0]
  401802:	2b10      	cmp	r3, #16
  401804:	d020      	beq.n	401848 <MCAN1_INT0_Handler+0x188>
		printf("\n\r Standard message received in FIFO 0. The received data is: \r\n");
  401806:	4848      	ldr	r0, [pc, #288]	; (401928 <MCAN1_INT0_Handler+0x268>)
  401808:	4b41      	ldr	r3, [pc, #260]	; (401910 <MCAN1_INT0_Handler+0x250>)
  40180a:	4798      	blx	r3
		for (i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
  40180c:	2300      	movs	r3, #0
  40180e:	9302      	str	r3, [sp, #8]
  401810:	4b43      	ldr	r3, [pc, #268]	; (401920 <MCAN1_INT0_Handler+0x260>)
  401812:	685b      	ldr	r3, [r3, #4]
  401814:	f3c3 4303 	ubfx	r3, r3, #16, #4
  401818:	9a02      	ldr	r2, [sp, #8]
  40181a:	4293      	cmp	r3, r2
  40181c:	d910      	bls.n	401840 <MCAN1_INT0_Handler+0x180>
			printf("  %d",rx_element_fifo_0.data[i]);
  40181e:	4c40      	ldr	r4, [pc, #256]	; (401920 <MCAN1_INT0_Handler+0x260>)
  401820:	4e3c      	ldr	r6, [pc, #240]	; (401914 <MCAN1_INT0_Handler+0x254>)
  401822:	4d3b      	ldr	r5, [pc, #236]	; (401910 <MCAN1_INT0_Handler+0x250>)
  401824:	9b02      	ldr	r3, [sp, #8]
  401826:	4423      	add	r3, r4
  401828:	7a19      	ldrb	r1, [r3, #8]
  40182a:	4630      	mov	r0, r6
  40182c:	47a8      	blx	r5
		for (i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
  40182e:	9b02      	ldr	r3, [sp, #8]
  401830:	3301      	adds	r3, #1
  401832:	9302      	str	r3, [sp, #8]
  401834:	6863      	ldr	r3, [r4, #4]
  401836:	f3c3 4303 	ubfx	r3, r3, #16, #4
  40183a:	9a02      	ldr	r2, [sp, #8]
  40183c:	4293      	cmp	r3, r2
  40183e:	d8f1      	bhi.n	401824 <MCAN1_INT0_Handler+0x164>
		printf("\r\n\r\n");
  401840:	4835      	ldr	r0, [pc, #212]	; (401918 <MCAN1_INT0_Handler+0x258>)
  401842:	4b33      	ldr	r3, [pc, #204]	; (401910 <MCAN1_INT0_Handler+0x250>)
  401844:	4798      	blx	r3
  401846:	e7b2      	b.n	4017ae <MCAN1_INT0_Handler+0xee>
			standard_receive_index = 0;
  401848:	2200      	movs	r2, #0
  40184a:	6022      	str	r2, [r4, #0]
  40184c:	e7db      	b.n	401806 <MCAN1_INT0_Handler+0x146>
	module_inst->hw->MCAN_IR = source;
  40184e:	4d2c      	ldr	r5, [pc, #176]	; (401900 <MCAN1_INT0_Handler+0x240>)
  401850:	682b      	ldr	r3, [r5, #0]
  401852:	2210      	movs	r2, #16
  401854:	651a      	str	r2, [r3, #80]	; 0x50
		mcan_get_rx_fifo_1_element(&mcan_instance, &rx_element_fifo_1,
  401856:	4c35      	ldr	r4, [pc, #212]	; (40192c <MCAN1_INT0_Handler+0x26c>)
  401858:	6822      	ldr	r2, [r4, #0]
  40185a:	4935      	ldr	r1, [pc, #212]	; (401930 <MCAN1_INT0_Handler+0x270>)
  40185c:	4628      	mov	r0, r5
  40185e:	4b35      	ldr	r3, [pc, #212]	; (401934 <MCAN1_INT0_Handler+0x274>)
  401860:	4798      	blx	r3
		mcan_rx_fifo_acknowledge(&mcan_instance, 0,
  401862:	6823      	ldr	r3, [r4, #0]
		module_inst->hw->MCAN_RXF0A = MCAN_RXF0A_F0AI(index);
  401864:	682a      	ldr	r2, [r5, #0]
  401866:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40186a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
		extended_receive_index++;
  40186e:	6823      	ldr	r3, [r4, #0]
  401870:	3301      	adds	r3, #1
  401872:	6023      	str	r3, [r4, #0]
		if (extended_receive_index == CONF_MCAN0_RX_FIFO_1_NUM) {
  401874:	6823      	ldr	r3, [r4, #0]
  401876:	2b10      	cmp	r3, #16
  401878:	d020      	beq.n	4018bc <MCAN1_INT0_Handler+0x1fc>
		printf("\n\r Extended message received in FIFO 1. The received data is: \r\n");
  40187a:	482f      	ldr	r0, [pc, #188]	; (401938 <MCAN1_INT0_Handler+0x278>)
  40187c:	4b24      	ldr	r3, [pc, #144]	; (401910 <MCAN1_INT0_Handler+0x250>)
  40187e:	4798      	blx	r3
		for (i = 0; i < rx_element_fifo_1.R1.bit.DLC; i++) {
  401880:	2300      	movs	r3, #0
  401882:	9302      	str	r3, [sp, #8]
  401884:	4b2a      	ldr	r3, [pc, #168]	; (401930 <MCAN1_INT0_Handler+0x270>)
  401886:	685b      	ldr	r3, [r3, #4]
  401888:	f3c3 4303 	ubfx	r3, r3, #16, #4
  40188c:	9a02      	ldr	r2, [sp, #8]
  40188e:	4293      	cmp	r3, r2
  401890:	d910      	bls.n	4018b4 <MCAN1_INT0_Handler+0x1f4>
			printf("  %d",rx_element_fifo_1.data[i]);
  401892:	4c27      	ldr	r4, [pc, #156]	; (401930 <MCAN1_INT0_Handler+0x270>)
  401894:	4e1f      	ldr	r6, [pc, #124]	; (401914 <MCAN1_INT0_Handler+0x254>)
  401896:	4d1e      	ldr	r5, [pc, #120]	; (401910 <MCAN1_INT0_Handler+0x250>)
  401898:	9b02      	ldr	r3, [sp, #8]
  40189a:	4423      	add	r3, r4
  40189c:	7a19      	ldrb	r1, [r3, #8]
  40189e:	4630      	mov	r0, r6
  4018a0:	47a8      	blx	r5
		for (i = 0; i < rx_element_fifo_1.R1.bit.DLC; i++) {
  4018a2:	9b02      	ldr	r3, [sp, #8]
  4018a4:	3301      	adds	r3, #1
  4018a6:	9302      	str	r3, [sp, #8]
  4018a8:	6863      	ldr	r3, [r4, #4]
  4018aa:	f3c3 4303 	ubfx	r3, r3, #16, #4
  4018ae:	9a02      	ldr	r2, [sp, #8]
  4018b0:	4293      	cmp	r3, r2
  4018b2:	d8f1      	bhi.n	401898 <MCAN1_INT0_Handler+0x1d8>
		printf("\r\n\r\n");
  4018b4:	4818      	ldr	r0, [pc, #96]	; (401918 <MCAN1_INT0_Handler+0x258>)
  4018b6:	4b16      	ldr	r3, [pc, #88]	; (401910 <MCAN1_INT0_Handler+0x250>)
  4018b8:	4798      	blx	r3
  4018ba:	e77c      	b.n	4017b6 <MCAN1_INT0_Handler+0xf6>
			extended_receive_index = 0;
  4018bc:	2200      	movs	r2, #0
  4018be:	6022      	str	r2, [r4, #0]
  4018c0:	e7db      	b.n	40187a <MCAN1_INT0_Handler+0x1ba>
	module_inst->hw->MCAN_IR = source;
  4018c2:	480f      	ldr	r0, [pc, #60]	; (401900 <MCAN1_INT0_Handler+0x240>)
  4018c4:	6803      	ldr	r3, [r0, #0]
  4018c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4018ca:	651a      	str	r2, [r3, #80]	; 0x50
		mcan_stop(&mcan_instance);
  4018cc:	4b1b      	ldr	r3, [pc, #108]	; (40193c <MCAN1_INT0_Handler+0x27c>)
  4018ce:	4798      	blx	r3
		printf(": MCAN bus off error, re-initialization. \r\n\r\n");
  4018d0:	481b      	ldr	r0, [pc, #108]	; (401940 <MCAN1_INT0_Handler+0x280>)
  4018d2:	4b0f      	ldr	r3, [pc, #60]	; (401910 <MCAN1_INT0_Handler+0x250>)
  4018d4:	4798      	blx	r3
		configure_mcan();
  4018d6:	4b1b      	ldr	r3, [pc, #108]	; (401944 <MCAN1_INT0_Handler+0x284>)
  4018d8:	4798      	blx	r3
  4018da:	e771      	b.n	4017c0 <MCAN1_INT0_Handler+0x100>
  4018dc:	4b08      	ldr	r3, [pc, #32]	; (401900 <MCAN1_INT0_Handler+0x240>)
  4018de:	681b      	ldr	r3, [r3, #0]
  4018e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4018e4:	651a      	str	r2, [r3, #80]	; 0x50
		printf("Protocol ACK error, please double check the clock in two boards. \r\n\r\n");
  4018e6:	4818      	ldr	r0, [pc, #96]	; (401948 <MCAN1_INT0_Handler+0x288>)
  4018e8:	4b09      	ldr	r3, [pc, #36]	; (401910 <MCAN1_INT0_Handler+0x250>)
  4018ea:	4798      	blx	r3
  4018ec:	e76d      	b.n	4017ca <MCAN1_INT0_Handler+0x10a>
  4018ee:	4b04      	ldr	r3, [pc, #16]	; (401900 <MCAN1_INT0_Handler+0x240>)
  4018f0:	681b      	ldr	r3, [r3, #0]
  4018f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4018f6:	651a      	str	r2, [r3, #80]	; 0x50
		printf("Protocol format error, please double check the clock in two boards. \r\n\r\n");
  4018f8:	4814      	ldr	r0, [pc, #80]	; (40194c <MCAN1_INT0_Handler+0x28c>)
  4018fa:	4b05      	ldr	r3, [pc, #20]	; (401910 <MCAN1_INT0_Handler+0x250>)
  4018fc:	4798      	blx	r3
}
  4018fe:	e769      	b.n	4017d4 <MCAN1_INT0_Handler+0x114>
  401900:	20401454 	.word	0x20401454
  401904:	20401458 	.word	0x20401458
  401908:	00404e9c 	.word	0x00404e9c
  40190c:	00404ee0 	.word	0x00404ee0
  401910:	00401ad5 	.word	0x00401ad5
  401914:	00404f24 	.word	0x00404f24
  401918:	00405070 	.word	0x00405070
  40191c:	20401488 	.word	0x20401488
  401920:	20401468 	.word	0x20401468
  401924:	00400b81 	.word	0x00400b81
  401928:	00404f2c 	.word	0x00404f2c
  40192c:	20401448 	.word	0x20401448
  401930:	20401478 	.word	0x20401478
  401934:	00400bd5 	.word	0x00400bd5
  401938:	00404f70 	.word	0x00404f70
  40193c:	00400b17 	.word	0x00400b17
  401940:	00404fb4 	.word	0x00404fb4
  401944:	004013f1 	.word	0x004013f1
  401948:	00404fe4 	.word	0x00404fe4
  40194c:	0040502c 	.word	0x0040502c
  401950:	00400b2d 	.word	0x00400b2d

00401954 <main>:


 #include "bb_exp.h"

 int main(void)
 {
  401954:	b570      	push	{r4, r5, r6, lr}
  401956:	b086      	sub	sp, #24
 	uint8_t key;

 	sysclk_init();
  401958:	4b1e      	ldr	r3, [pc, #120]	; (4019d4 <main+0x80>)
  40195a:	4798      	blx	r3
 	board_init();
  40195c:	4b1e      	ldr	r3, [pc, #120]	; (4019d8 <main+0x84>)
  40195e:	4798      	blx	r3
	
	g_tickCount = 0;
  401960:	2400      	movs	r4, #0
  401962:	4b1e      	ldr	r3, [pc, #120]	; (4019dc <main+0x88>)
  401964:	601c      	str	r4, [r3, #0]
	g_tx_tick_count_ms = 0;
  401966:	4b1e      	ldr	r3, [pc, #120]	; (4019e0 <main+0x8c>)
  401968:	601c      	str	r4, [r3, #0]
  40196a:	200e      	movs	r0, #14
  40196c:	4e1d      	ldr	r6, [pc, #116]	; (4019e4 <main+0x90>)
  40196e:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  401970:	4d1d      	ldr	r5, [pc, #116]	; (4019e8 <main+0x94>)
  401972:	4b1e      	ldr	r3, [pc, #120]	; (4019ec <main+0x98>)
  401974:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401976:	4a1e      	ldr	r2, [pc, #120]	; (4019f0 <main+0x9c>)
  401978:	4b1e      	ldr	r3, [pc, #120]	; (4019f4 <main+0xa0>)
  40197a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40197c:	4a1e      	ldr	r2, [pc, #120]	; (4019f8 <main+0xa4>)
  40197e:	4b1f      	ldr	r3, [pc, #124]	; (4019fc <main+0xa8>)
  401980:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  401982:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  401986:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  401988:	23c0      	movs	r3, #192	; 0xc0
  40198a:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  40198c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401990:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  401992:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401994:	9404      	str	r4, [sp, #16]
  401996:	200e      	movs	r0, #14
  401998:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  40199a:	4a19      	ldr	r2, [pc, #100]	; (401a00 <main+0xac>)
  40199c:	4669      	mov	r1, sp
  40199e:	4628      	mov	r0, r5
  4019a0:	4b18      	ldr	r3, [pc, #96]	; (401a04 <main+0xb0>)
  4019a2:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4019a4:	4628      	mov	r0, r5
  4019a6:	4b18      	ldr	r3, [pc, #96]	; (401a08 <main+0xb4>)
  4019a8:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4019aa:	4628      	mov	r0, r5
  4019ac:	4b17      	ldr	r3, [pc, #92]	; (401a0c <main+0xb8>)
  4019ae:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4019b0:	4e17      	ldr	r6, [pc, #92]	; (401a10 <main+0xbc>)
  4019b2:	6833      	ldr	r3, [r6, #0]
  4019b4:	4621      	mov	r1, r4
  4019b6:	6898      	ldr	r0, [r3, #8]
  4019b8:	4d16      	ldr	r5, [pc, #88]	; (401a14 <main+0xc0>)
  4019ba:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4019bc:	6833      	ldr	r3, [r6, #0]
  4019be:	4621      	mov	r1, r4
  4019c0:	6858      	ldr	r0, [r3, #4]
  4019c2:	47a8      	blx	r5

 	configure_console();
 	configure_mcan();
  4019c4:	4b14      	ldr	r3, [pc, #80]	; (401a18 <main+0xc4>)
  4019c6:	4798      	blx	r3
 	// CANRxTask();
     // CANTxTask(g_tx_tick_count_ms);
     // g_tx_tick_count_ms++;
     // CanMessageControl_Task();

 	doSCMtest2();
  4019c8:	4b14      	ldr	r3, [pc, #80]	; (401a1c <main+0xc8>)
  4019ca:	4798      	blx	r3
 	// doSCMtest2();
 }
  4019cc:	4620      	mov	r0, r4
  4019ce:	b006      	add	sp, #24
  4019d0:	bd70      	pop	{r4, r5, r6, pc}
  4019d2:	bf00      	nop
  4019d4:	004005ad 	.word	0x004005ad
  4019d8:	004006a9 	.word	0x004006a9
  4019dc:	2040144c 	.word	0x2040144c
  4019e0:	20401450 	.word	0x20401450
  4019e4:	00400e81 	.word	0x00400e81
  4019e8:	40028000 	.word	0x40028000
  4019ec:	204014c8 	.word	0x204014c8
  4019f0:	00401589 	.word	0x00401589
  4019f4:	204014c4 	.word	0x204014c4
  4019f8:	004014ad 	.word	0x004014ad
  4019fc:	204014c0 	.word	0x204014c0
  401a00:	08f0d180 	.word	0x08f0d180
  401a04:	00400fad 	.word	0x00400fad
  401a08:	00401001 	.word	0x00401001
  401a0c:	00401007 	.word	0x00401007
  401a10:	20400014 	.word	0x20400014
  401a14:	00401ccd 	.word	0x00401ccd
  401a18:	004013f1 	.word	0x004013f1
  401a1c:	0040133d 	.word	0x0040133d

00401a20 <__assert_func>:
  401a20:	b500      	push	{lr}
  401a22:	4c0a      	ldr	r4, [pc, #40]	; (401a4c <__assert_func+0x2c>)
  401a24:	6826      	ldr	r6, [r4, #0]
  401a26:	4605      	mov	r5, r0
  401a28:	b085      	sub	sp, #20
  401a2a:	461c      	mov	r4, r3
  401a2c:	68f0      	ldr	r0, [r6, #12]
  401a2e:	b152      	cbz	r2, 401a46 <__assert_func+0x26>
  401a30:	4b07      	ldr	r3, [pc, #28]	; (401a50 <__assert_func+0x30>)
  401a32:	9202      	str	r2, [sp, #8]
  401a34:	e88d 000a 	stmia.w	sp, {r1, r3}
  401a38:	4622      	mov	r2, r4
  401a3a:	462b      	mov	r3, r5
  401a3c:	4905      	ldr	r1, [pc, #20]	; (401a54 <__assert_func+0x34>)
  401a3e:	f000 f80d 	bl	401a5c <fiprintf>
  401a42:	f001 f94b 	bl	402cdc <abort>
  401a46:	4b04      	ldr	r3, [pc, #16]	; (401a58 <__assert_func+0x38>)
  401a48:	461a      	mov	r2, r3
  401a4a:	e7f2      	b.n	401a32 <__assert_func+0x12>
  401a4c:	20400014 	.word	0x20400014
  401a50:	00405078 	.word	0x00405078
  401a54:	00405088 	.word	0x00405088
  401a58:	00405074 	.word	0x00405074

00401a5c <fiprintf>:
  401a5c:	b40e      	push	{r1, r2, r3}
  401a5e:	b510      	push	{r4, lr}
  401a60:	b083      	sub	sp, #12
  401a62:	ab05      	add	r3, sp, #20
  401a64:	4c06      	ldr	r4, [pc, #24]	; (401a80 <fiprintf+0x24>)
  401a66:	f853 2b04 	ldr.w	r2, [r3], #4
  401a6a:	9301      	str	r3, [sp, #4]
  401a6c:	4601      	mov	r1, r0
  401a6e:	6820      	ldr	r0, [r4, #0]
  401a70:	f000 fa3c 	bl	401eec <_vfiprintf_r>
  401a74:	b003      	add	sp, #12
  401a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401a7a:	b003      	add	sp, #12
  401a7c:	4770      	bx	lr
  401a7e:	bf00      	nop
  401a80:	20400014 	.word	0x20400014

00401a84 <__libc_init_array>:
  401a84:	b570      	push	{r4, r5, r6, lr}
  401a86:	4e0f      	ldr	r6, [pc, #60]	; (401ac4 <__libc_init_array+0x40>)
  401a88:	4d0f      	ldr	r5, [pc, #60]	; (401ac8 <__libc_init_array+0x44>)
  401a8a:	1b76      	subs	r6, r6, r5
  401a8c:	10b6      	asrs	r6, r6, #2
  401a8e:	bf18      	it	ne
  401a90:	2400      	movne	r4, #0
  401a92:	d005      	beq.n	401aa0 <__libc_init_array+0x1c>
  401a94:	3401      	adds	r4, #1
  401a96:	f855 3b04 	ldr.w	r3, [r5], #4
  401a9a:	4798      	blx	r3
  401a9c:	42a6      	cmp	r6, r4
  401a9e:	d1f9      	bne.n	401a94 <__libc_init_array+0x10>
  401aa0:	4e0a      	ldr	r6, [pc, #40]	; (401acc <__libc_init_array+0x48>)
  401aa2:	4d0b      	ldr	r5, [pc, #44]	; (401ad0 <__libc_init_array+0x4c>)
  401aa4:	1b76      	subs	r6, r6, r5
  401aa6:	f003 fbbb 	bl	405220 <_init>
  401aaa:	10b6      	asrs	r6, r6, #2
  401aac:	bf18      	it	ne
  401aae:	2400      	movne	r4, #0
  401ab0:	d006      	beq.n	401ac0 <__libc_init_array+0x3c>
  401ab2:	3401      	adds	r4, #1
  401ab4:	f855 3b04 	ldr.w	r3, [r5], #4
  401ab8:	4798      	blx	r3
  401aba:	42a6      	cmp	r6, r4
  401abc:	d1f9      	bne.n	401ab2 <__libc_init_array+0x2e>
  401abe:	bd70      	pop	{r4, r5, r6, pc}
  401ac0:	bd70      	pop	{r4, r5, r6, pc}
  401ac2:	bf00      	nop
  401ac4:	0040522c 	.word	0x0040522c
  401ac8:	0040522c 	.word	0x0040522c
  401acc:	00405234 	.word	0x00405234
  401ad0:	0040522c 	.word	0x0040522c

00401ad4 <iprintf>:
  401ad4:	b40f      	push	{r0, r1, r2, r3}
  401ad6:	b500      	push	{lr}
  401ad8:	4907      	ldr	r1, [pc, #28]	; (401af8 <iprintf+0x24>)
  401ada:	b083      	sub	sp, #12
  401adc:	ab04      	add	r3, sp, #16
  401ade:	6808      	ldr	r0, [r1, #0]
  401ae0:	f853 2b04 	ldr.w	r2, [r3], #4
  401ae4:	6881      	ldr	r1, [r0, #8]
  401ae6:	9301      	str	r3, [sp, #4]
  401ae8:	f000 fa00 	bl	401eec <_vfiprintf_r>
  401aec:	b003      	add	sp, #12
  401aee:	f85d eb04 	ldr.w	lr, [sp], #4
  401af2:	b004      	add	sp, #16
  401af4:	4770      	bx	lr
  401af6:	bf00      	nop
  401af8:	20400014 	.word	0x20400014

00401afc <memcpy>:
  401afc:	4684      	mov	ip, r0
  401afe:	ea41 0300 	orr.w	r3, r1, r0
  401b02:	f013 0303 	ands.w	r3, r3, #3
  401b06:	d16d      	bne.n	401be4 <memcpy+0xe8>
  401b08:	3a40      	subs	r2, #64	; 0x40
  401b0a:	d341      	bcc.n	401b90 <memcpy+0x94>
  401b0c:	f851 3b04 	ldr.w	r3, [r1], #4
  401b10:	f840 3b04 	str.w	r3, [r0], #4
  401b14:	f851 3b04 	ldr.w	r3, [r1], #4
  401b18:	f840 3b04 	str.w	r3, [r0], #4
  401b1c:	f851 3b04 	ldr.w	r3, [r1], #4
  401b20:	f840 3b04 	str.w	r3, [r0], #4
  401b24:	f851 3b04 	ldr.w	r3, [r1], #4
  401b28:	f840 3b04 	str.w	r3, [r0], #4
  401b2c:	f851 3b04 	ldr.w	r3, [r1], #4
  401b30:	f840 3b04 	str.w	r3, [r0], #4
  401b34:	f851 3b04 	ldr.w	r3, [r1], #4
  401b38:	f840 3b04 	str.w	r3, [r0], #4
  401b3c:	f851 3b04 	ldr.w	r3, [r1], #4
  401b40:	f840 3b04 	str.w	r3, [r0], #4
  401b44:	f851 3b04 	ldr.w	r3, [r1], #4
  401b48:	f840 3b04 	str.w	r3, [r0], #4
  401b4c:	f851 3b04 	ldr.w	r3, [r1], #4
  401b50:	f840 3b04 	str.w	r3, [r0], #4
  401b54:	f851 3b04 	ldr.w	r3, [r1], #4
  401b58:	f840 3b04 	str.w	r3, [r0], #4
  401b5c:	f851 3b04 	ldr.w	r3, [r1], #4
  401b60:	f840 3b04 	str.w	r3, [r0], #4
  401b64:	f851 3b04 	ldr.w	r3, [r1], #4
  401b68:	f840 3b04 	str.w	r3, [r0], #4
  401b6c:	f851 3b04 	ldr.w	r3, [r1], #4
  401b70:	f840 3b04 	str.w	r3, [r0], #4
  401b74:	f851 3b04 	ldr.w	r3, [r1], #4
  401b78:	f840 3b04 	str.w	r3, [r0], #4
  401b7c:	f851 3b04 	ldr.w	r3, [r1], #4
  401b80:	f840 3b04 	str.w	r3, [r0], #4
  401b84:	f851 3b04 	ldr.w	r3, [r1], #4
  401b88:	f840 3b04 	str.w	r3, [r0], #4
  401b8c:	3a40      	subs	r2, #64	; 0x40
  401b8e:	d2bd      	bcs.n	401b0c <memcpy+0x10>
  401b90:	3230      	adds	r2, #48	; 0x30
  401b92:	d311      	bcc.n	401bb8 <memcpy+0xbc>
  401b94:	f851 3b04 	ldr.w	r3, [r1], #4
  401b98:	f840 3b04 	str.w	r3, [r0], #4
  401b9c:	f851 3b04 	ldr.w	r3, [r1], #4
  401ba0:	f840 3b04 	str.w	r3, [r0], #4
  401ba4:	f851 3b04 	ldr.w	r3, [r1], #4
  401ba8:	f840 3b04 	str.w	r3, [r0], #4
  401bac:	f851 3b04 	ldr.w	r3, [r1], #4
  401bb0:	f840 3b04 	str.w	r3, [r0], #4
  401bb4:	3a10      	subs	r2, #16
  401bb6:	d2ed      	bcs.n	401b94 <memcpy+0x98>
  401bb8:	320c      	adds	r2, #12
  401bba:	d305      	bcc.n	401bc8 <memcpy+0xcc>
  401bbc:	f851 3b04 	ldr.w	r3, [r1], #4
  401bc0:	f840 3b04 	str.w	r3, [r0], #4
  401bc4:	3a04      	subs	r2, #4
  401bc6:	d2f9      	bcs.n	401bbc <memcpy+0xc0>
  401bc8:	3204      	adds	r2, #4
  401bca:	d008      	beq.n	401bde <memcpy+0xe2>
  401bcc:	07d2      	lsls	r2, r2, #31
  401bce:	bf1c      	itt	ne
  401bd0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  401bd4:	f800 3b01 	strbne.w	r3, [r0], #1
  401bd8:	d301      	bcc.n	401bde <memcpy+0xe2>
  401bda:	880b      	ldrh	r3, [r1, #0]
  401bdc:	8003      	strh	r3, [r0, #0]
  401bde:	4660      	mov	r0, ip
  401be0:	4770      	bx	lr
  401be2:	bf00      	nop
  401be4:	2a08      	cmp	r2, #8
  401be6:	d313      	bcc.n	401c10 <memcpy+0x114>
  401be8:	078b      	lsls	r3, r1, #30
  401bea:	d08d      	beq.n	401b08 <memcpy+0xc>
  401bec:	f010 0303 	ands.w	r3, r0, #3
  401bf0:	d08a      	beq.n	401b08 <memcpy+0xc>
  401bf2:	f1c3 0304 	rsb	r3, r3, #4
  401bf6:	1ad2      	subs	r2, r2, r3
  401bf8:	07db      	lsls	r3, r3, #31
  401bfa:	bf1c      	itt	ne
  401bfc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  401c00:	f800 3b01 	strbne.w	r3, [r0], #1
  401c04:	d380      	bcc.n	401b08 <memcpy+0xc>
  401c06:	f831 3b02 	ldrh.w	r3, [r1], #2
  401c0a:	f820 3b02 	strh.w	r3, [r0], #2
  401c0e:	e77b      	b.n	401b08 <memcpy+0xc>
  401c10:	3a04      	subs	r2, #4
  401c12:	d3d9      	bcc.n	401bc8 <memcpy+0xcc>
  401c14:	3a01      	subs	r2, #1
  401c16:	f811 3b01 	ldrb.w	r3, [r1], #1
  401c1a:	f800 3b01 	strb.w	r3, [r0], #1
  401c1e:	d2f9      	bcs.n	401c14 <memcpy+0x118>
  401c20:	780b      	ldrb	r3, [r1, #0]
  401c22:	7003      	strb	r3, [r0, #0]
  401c24:	784b      	ldrb	r3, [r1, #1]
  401c26:	7043      	strb	r3, [r0, #1]
  401c28:	788b      	ldrb	r3, [r1, #2]
  401c2a:	7083      	strb	r3, [r0, #2]
  401c2c:	4660      	mov	r0, ip
  401c2e:	4770      	bx	lr

00401c30 <memset>:
  401c30:	b470      	push	{r4, r5, r6}
  401c32:	0786      	lsls	r6, r0, #30
  401c34:	d046      	beq.n	401cc4 <memset+0x94>
  401c36:	1e54      	subs	r4, r2, #1
  401c38:	2a00      	cmp	r2, #0
  401c3a:	d041      	beq.n	401cc0 <memset+0x90>
  401c3c:	b2ca      	uxtb	r2, r1
  401c3e:	4603      	mov	r3, r0
  401c40:	e002      	b.n	401c48 <memset+0x18>
  401c42:	f114 34ff 	adds.w	r4, r4, #4294967295
  401c46:	d33b      	bcc.n	401cc0 <memset+0x90>
  401c48:	f803 2b01 	strb.w	r2, [r3], #1
  401c4c:	079d      	lsls	r5, r3, #30
  401c4e:	d1f8      	bne.n	401c42 <memset+0x12>
  401c50:	2c03      	cmp	r4, #3
  401c52:	d92e      	bls.n	401cb2 <memset+0x82>
  401c54:	b2cd      	uxtb	r5, r1
  401c56:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401c5a:	2c0f      	cmp	r4, #15
  401c5c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401c60:	d919      	bls.n	401c96 <memset+0x66>
  401c62:	f103 0210 	add.w	r2, r3, #16
  401c66:	4626      	mov	r6, r4
  401c68:	3e10      	subs	r6, #16
  401c6a:	2e0f      	cmp	r6, #15
  401c6c:	f842 5c10 	str.w	r5, [r2, #-16]
  401c70:	f842 5c0c 	str.w	r5, [r2, #-12]
  401c74:	f842 5c08 	str.w	r5, [r2, #-8]
  401c78:	f842 5c04 	str.w	r5, [r2, #-4]
  401c7c:	f102 0210 	add.w	r2, r2, #16
  401c80:	d8f2      	bhi.n	401c68 <memset+0x38>
  401c82:	f1a4 0210 	sub.w	r2, r4, #16
  401c86:	f022 020f 	bic.w	r2, r2, #15
  401c8a:	f004 040f 	and.w	r4, r4, #15
  401c8e:	3210      	adds	r2, #16
  401c90:	2c03      	cmp	r4, #3
  401c92:	4413      	add	r3, r2
  401c94:	d90d      	bls.n	401cb2 <memset+0x82>
  401c96:	461e      	mov	r6, r3
  401c98:	4622      	mov	r2, r4
  401c9a:	3a04      	subs	r2, #4
  401c9c:	2a03      	cmp	r2, #3
  401c9e:	f846 5b04 	str.w	r5, [r6], #4
  401ca2:	d8fa      	bhi.n	401c9a <memset+0x6a>
  401ca4:	1f22      	subs	r2, r4, #4
  401ca6:	f022 0203 	bic.w	r2, r2, #3
  401caa:	3204      	adds	r2, #4
  401cac:	4413      	add	r3, r2
  401cae:	f004 0403 	and.w	r4, r4, #3
  401cb2:	b12c      	cbz	r4, 401cc0 <memset+0x90>
  401cb4:	b2c9      	uxtb	r1, r1
  401cb6:	441c      	add	r4, r3
  401cb8:	f803 1b01 	strb.w	r1, [r3], #1
  401cbc:	429c      	cmp	r4, r3
  401cbe:	d1fb      	bne.n	401cb8 <memset+0x88>
  401cc0:	bc70      	pop	{r4, r5, r6}
  401cc2:	4770      	bx	lr
  401cc4:	4614      	mov	r4, r2
  401cc6:	4603      	mov	r3, r0
  401cc8:	e7c2      	b.n	401c50 <memset+0x20>
  401cca:	bf00      	nop

00401ccc <setbuf>:
  401ccc:	2900      	cmp	r1, #0
  401cce:	bf0c      	ite	eq
  401cd0:	2202      	moveq	r2, #2
  401cd2:	2200      	movne	r2, #0
  401cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401cd8:	f000 b800 	b.w	401cdc <setvbuf>

00401cdc <setvbuf>:
  401cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401ce0:	4c61      	ldr	r4, [pc, #388]	; (401e68 <setvbuf+0x18c>)
  401ce2:	6825      	ldr	r5, [r4, #0]
  401ce4:	b083      	sub	sp, #12
  401ce6:	4604      	mov	r4, r0
  401ce8:	460f      	mov	r7, r1
  401cea:	4690      	mov	r8, r2
  401cec:	461e      	mov	r6, r3
  401cee:	b115      	cbz	r5, 401cf6 <setvbuf+0x1a>
  401cf0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401cf2:	2b00      	cmp	r3, #0
  401cf4:	d064      	beq.n	401dc0 <setvbuf+0xe4>
  401cf6:	f1b8 0f02 	cmp.w	r8, #2
  401cfa:	d006      	beq.n	401d0a <setvbuf+0x2e>
  401cfc:	f1b8 0f01 	cmp.w	r8, #1
  401d00:	f200 809f 	bhi.w	401e42 <setvbuf+0x166>
  401d04:	2e00      	cmp	r6, #0
  401d06:	f2c0 809c 	blt.w	401e42 <setvbuf+0x166>
  401d0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401d0c:	07d8      	lsls	r0, r3, #31
  401d0e:	d534      	bpl.n	401d7a <setvbuf+0x9e>
  401d10:	4621      	mov	r1, r4
  401d12:	4628      	mov	r0, r5
  401d14:	f001 f890 	bl	402e38 <_fflush_r>
  401d18:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401d1a:	b141      	cbz	r1, 401d2e <setvbuf+0x52>
  401d1c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401d20:	4299      	cmp	r1, r3
  401d22:	d002      	beq.n	401d2a <setvbuf+0x4e>
  401d24:	4628      	mov	r0, r5
  401d26:	f001 fa05 	bl	403134 <_free_r>
  401d2a:	2300      	movs	r3, #0
  401d2c:	6323      	str	r3, [r4, #48]	; 0x30
  401d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401d32:	2200      	movs	r2, #0
  401d34:	61a2      	str	r2, [r4, #24]
  401d36:	6062      	str	r2, [r4, #4]
  401d38:	061a      	lsls	r2, r3, #24
  401d3a:	d43a      	bmi.n	401db2 <setvbuf+0xd6>
  401d3c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401d40:	f023 0303 	bic.w	r3, r3, #3
  401d44:	f1b8 0f02 	cmp.w	r8, #2
  401d48:	81a3      	strh	r3, [r4, #12]
  401d4a:	d01d      	beq.n	401d88 <setvbuf+0xac>
  401d4c:	ab01      	add	r3, sp, #4
  401d4e:	466a      	mov	r2, sp
  401d50:	4621      	mov	r1, r4
  401d52:	4628      	mov	r0, r5
  401d54:	f001 fc8c 	bl	403670 <__swhatbuf_r>
  401d58:	89a3      	ldrh	r3, [r4, #12]
  401d5a:	4318      	orrs	r0, r3
  401d5c:	81a0      	strh	r0, [r4, #12]
  401d5e:	2e00      	cmp	r6, #0
  401d60:	d132      	bne.n	401dc8 <setvbuf+0xec>
  401d62:	9e00      	ldr	r6, [sp, #0]
  401d64:	4630      	mov	r0, r6
  401d66:	f001 fcfb 	bl	403760 <malloc>
  401d6a:	4607      	mov	r7, r0
  401d6c:	2800      	cmp	r0, #0
  401d6e:	d06b      	beq.n	401e48 <setvbuf+0x16c>
  401d70:	89a3      	ldrh	r3, [r4, #12]
  401d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401d76:	81a3      	strh	r3, [r4, #12]
  401d78:	e028      	b.n	401dcc <setvbuf+0xf0>
  401d7a:	89a3      	ldrh	r3, [r4, #12]
  401d7c:	0599      	lsls	r1, r3, #22
  401d7e:	d4c7      	bmi.n	401d10 <setvbuf+0x34>
  401d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401d82:	f001 fc71 	bl	403668 <__retarget_lock_acquire_recursive>
  401d86:	e7c3      	b.n	401d10 <setvbuf+0x34>
  401d88:	2500      	movs	r5, #0
  401d8a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401d8c:	2600      	movs	r6, #0
  401d8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401d92:	f043 0302 	orr.w	r3, r3, #2
  401d96:	2001      	movs	r0, #1
  401d98:	60a6      	str	r6, [r4, #8]
  401d9a:	07ce      	lsls	r6, r1, #31
  401d9c:	81a3      	strh	r3, [r4, #12]
  401d9e:	6022      	str	r2, [r4, #0]
  401da0:	6122      	str	r2, [r4, #16]
  401da2:	6160      	str	r0, [r4, #20]
  401da4:	d401      	bmi.n	401daa <setvbuf+0xce>
  401da6:	0598      	lsls	r0, r3, #22
  401da8:	d53e      	bpl.n	401e28 <setvbuf+0x14c>
  401daa:	4628      	mov	r0, r5
  401dac:	b003      	add	sp, #12
  401dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401db2:	6921      	ldr	r1, [r4, #16]
  401db4:	4628      	mov	r0, r5
  401db6:	f001 f9bd 	bl	403134 <_free_r>
  401dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401dbe:	e7bd      	b.n	401d3c <setvbuf+0x60>
  401dc0:	4628      	mov	r0, r5
  401dc2:	f001 f891 	bl	402ee8 <__sinit>
  401dc6:	e796      	b.n	401cf6 <setvbuf+0x1a>
  401dc8:	2f00      	cmp	r7, #0
  401dca:	d0cb      	beq.n	401d64 <setvbuf+0x88>
  401dcc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401dce:	2b00      	cmp	r3, #0
  401dd0:	d033      	beq.n	401e3a <setvbuf+0x15e>
  401dd2:	9b00      	ldr	r3, [sp, #0]
  401dd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401dd8:	6027      	str	r7, [r4, #0]
  401dda:	429e      	cmp	r6, r3
  401ddc:	bf1c      	itt	ne
  401dde:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  401de2:	81a2      	strhne	r2, [r4, #12]
  401de4:	f1b8 0f01 	cmp.w	r8, #1
  401de8:	bf04      	itt	eq
  401dea:	f042 0201 	orreq.w	r2, r2, #1
  401dee:	81a2      	strheq	r2, [r4, #12]
  401df0:	b292      	uxth	r2, r2
  401df2:	f012 0308 	ands.w	r3, r2, #8
  401df6:	6127      	str	r7, [r4, #16]
  401df8:	6166      	str	r6, [r4, #20]
  401dfa:	d00e      	beq.n	401e1a <setvbuf+0x13e>
  401dfc:	07d1      	lsls	r1, r2, #31
  401dfe:	d51a      	bpl.n	401e36 <setvbuf+0x15a>
  401e00:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401e02:	4276      	negs	r6, r6
  401e04:	2300      	movs	r3, #0
  401e06:	f015 0501 	ands.w	r5, r5, #1
  401e0a:	61a6      	str	r6, [r4, #24]
  401e0c:	60a3      	str	r3, [r4, #8]
  401e0e:	d009      	beq.n	401e24 <setvbuf+0x148>
  401e10:	2500      	movs	r5, #0
  401e12:	4628      	mov	r0, r5
  401e14:	b003      	add	sp, #12
  401e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401e1a:	60a3      	str	r3, [r4, #8]
  401e1c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401e1e:	f015 0501 	ands.w	r5, r5, #1
  401e22:	d1f5      	bne.n	401e10 <setvbuf+0x134>
  401e24:	0593      	lsls	r3, r2, #22
  401e26:	d4c0      	bmi.n	401daa <setvbuf+0xce>
  401e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401e2a:	f001 fc1f 	bl	40366c <__retarget_lock_release_recursive>
  401e2e:	4628      	mov	r0, r5
  401e30:	b003      	add	sp, #12
  401e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401e36:	60a6      	str	r6, [r4, #8]
  401e38:	e7f0      	b.n	401e1c <setvbuf+0x140>
  401e3a:	4628      	mov	r0, r5
  401e3c:	f001 f854 	bl	402ee8 <__sinit>
  401e40:	e7c7      	b.n	401dd2 <setvbuf+0xf6>
  401e42:	f04f 35ff 	mov.w	r5, #4294967295
  401e46:	e7b0      	b.n	401daa <setvbuf+0xce>
  401e48:	f8dd 9000 	ldr.w	r9, [sp]
  401e4c:	45b1      	cmp	r9, r6
  401e4e:	d004      	beq.n	401e5a <setvbuf+0x17e>
  401e50:	4648      	mov	r0, r9
  401e52:	f001 fc85 	bl	403760 <malloc>
  401e56:	4607      	mov	r7, r0
  401e58:	b920      	cbnz	r0, 401e64 <setvbuf+0x188>
  401e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401e5e:	f04f 35ff 	mov.w	r5, #4294967295
  401e62:	e792      	b.n	401d8a <setvbuf+0xae>
  401e64:	464e      	mov	r6, r9
  401e66:	e783      	b.n	401d70 <setvbuf+0x94>
  401e68:	20400014 	.word	0x20400014

00401e6c <__sprint_r.part.0>:
  401e6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401e70:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401e72:	049c      	lsls	r4, r3, #18
  401e74:	4693      	mov	fp, r2
  401e76:	d52f      	bpl.n	401ed8 <__sprint_r.part.0+0x6c>
  401e78:	6893      	ldr	r3, [r2, #8]
  401e7a:	6812      	ldr	r2, [r2, #0]
  401e7c:	b353      	cbz	r3, 401ed4 <__sprint_r.part.0+0x68>
  401e7e:	460e      	mov	r6, r1
  401e80:	4607      	mov	r7, r0
  401e82:	f102 0908 	add.w	r9, r2, #8
  401e86:	e919 0420 	ldmdb	r9, {r5, sl}
  401e8a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  401e8e:	d017      	beq.n	401ec0 <__sprint_r.part.0+0x54>
  401e90:	3d04      	subs	r5, #4
  401e92:	2400      	movs	r4, #0
  401e94:	e001      	b.n	401e9a <__sprint_r.part.0+0x2e>
  401e96:	45a0      	cmp	r8, r4
  401e98:	d010      	beq.n	401ebc <__sprint_r.part.0+0x50>
  401e9a:	4632      	mov	r2, r6
  401e9c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401ea0:	4638      	mov	r0, r7
  401ea2:	f001 f8c3 	bl	40302c <_fputwc_r>
  401ea6:	1c43      	adds	r3, r0, #1
  401ea8:	f104 0401 	add.w	r4, r4, #1
  401eac:	d1f3      	bne.n	401e96 <__sprint_r.part.0+0x2a>
  401eae:	2300      	movs	r3, #0
  401eb0:	f8cb 3008 	str.w	r3, [fp, #8]
  401eb4:	f8cb 3004 	str.w	r3, [fp, #4]
  401eb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401ebc:	f8db 3008 	ldr.w	r3, [fp, #8]
  401ec0:	f02a 0a03 	bic.w	sl, sl, #3
  401ec4:	eba3 030a 	sub.w	r3, r3, sl
  401ec8:	f8cb 3008 	str.w	r3, [fp, #8]
  401ecc:	f109 0908 	add.w	r9, r9, #8
  401ed0:	2b00      	cmp	r3, #0
  401ed2:	d1d8      	bne.n	401e86 <__sprint_r.part.0+0x1a>
  401ed4:	2000      	movs	r0, #0
  401ed6:	e7ea      	b.n	401eae <__sprint_r.part.0+0x42>
  401ed8:	f001 fa12 	bl	403300 <__sfvwrite_r>
  401edc:	2300      	movs	r3, #0
  401ede:	f8cb 3008 	str.w	r3, [fp, #8]
  401ee2:	f8cb 3004 	str.w	r3, [fp, #4]
  401ee6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401eea:	bf00      	nop

00401eec <_vfiprintf_r>:
  401eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ef0:	b0ad      	sub	sp, #180	; 0xb4
  401ef2:	461d      	mov	r5, r3
  401ef4:	468b      	mov	fp, r1
  401ef6:	4690      	mov	r8, r2
  401ef8:	9307      	str	r3, [sp, #28]
  401efa:	9006      	str	r0, [sp, #24]
  401efc:	b118      	cbz	r0, 401f06 <_vfiprintf_r+0x1a>
  401efe:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401f00:	2b00      	cmp	r3, #0
  401f02:	f000 80f3 	beq.w	4020ec <_vfiprintf_r+0x200>
  401f06:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401f0a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401f0e:	07df      	lsls	r7, r3, #31
  401f10:	b281      	uxth	r1, r0
  401f12:	d402      	bmi.n	401f1a <_vfiprintf_r+0x2e>
  401f14:	058e      	lsls	r6, r1, #22
  401f16:	f140 80fc 	bpl.w	402112 <_vfiprintf_r+0x226>
  401f1a:	048c      	lsls	r4, r1, #18
  401f1c:	d40a      	bmi.n	401f34 <_vfiprintf_r+0x48>
  401f1e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401f22:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  401f26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401f2a:	f8ab 100c 	strh.w	r1, [fp, #12]
  401f2e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  401f32:	b289      	uxth	r1, r1
  401f34:	0708      	lsls	r0, r1, #28
  401f36:	f140 80b3 	bpl.w	4020a0 <_vfiprintf_r+0x1b4>
  401f3a:	f8db 3010 	ldr.w	r3, [fp, #16]
  401f3e:	2b00      	cmp	r3, #0
  401f40:	f000 80ae 	beq.w	4020a0 <_vfiprintf_r+0x1b4>
  401f44:	f001 031a 	and.w	r3, r1, #26
  401f48:	2b0a      	cmp	r3, #10
  401f4a:	f000 80b5 	beq.w	4020b8 <_vfiprintf_r+0x1cc>
  401f4e:	2300      	movs	r3, #0
  401f50:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  401f54:	930b      	str	r3, [sp, #44]	; 0x2c
  401f56:	9311      	str	r3, [sp, #68]	; 0x44
  401f58:	9310      	str	r3, [sp, #64]	; 0x40
  401f5a:	9303      	str	r3, [sp, #12]
  401f5c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401f60:	46ca      	mov	sl, r9
  401f62:	f8cd b010 	str.w	fp, [sp, #16]
  401f66:	f898 3000 	ldrb.w	r3, [r8]
  401f6a:	4644      	mov	r4, r8
  401f6c:	b1fb      	cbz	r3, 401fae <_vfiprintf_r+0xc2>
  401f6e:	2b25      	cmp	r3, #37	; 0x25
  401f70:	d102      	bne.n	401f78 <_vfiprintf_r+0x8c>
  401f72:	e01c      	b.n	401fae <_vfiprintf_r+0xc2>
  401f74:	2b25      	cmp	r3, #37	; 0x25
  401f76:	d003      	beq.n	401f80 <_vfiprintf_r+0x94>
  401f78:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  401f7c:	2b00      	cmp	r3, #0
  401f7e:	d1f9      	bne.n	401f74 <_vfiprintf_r+0x88>
  401f80:	eba4 0508 	sub.w	r5, r4, r8
  401f84:	b19d      	cbz	r5, 401fae <_vfiprintf_r+0xc2>
  401f86:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401f88:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f8a:	f8ca 8000 	str.w	r8, [sl]
  401f8e:	3301      	adds	r3, #1
  401f90:	442a      	add	r2, r5
  401f92:	2b07      	cmp	r3, #7
  401f94:	f8ca 5004 	str.w	r5, [sl, #4]
  401f98:	9211      	str	r2, [sp, #68]	; 0x44
  401f9a:	9310      	str	r3, [sp, #64]	; 0x40
  401f9c:	dd7a      	ble.n	402094 <_vfiprintf_r+0x1a8>
  401f9e:	2a00      	cmp	r2, #0
  401fa0:	f040 84b0 	bne.w	402904 <_vfiprintf_r+0xa18>
  401fa4:	9b03      	ldr	r3, [sp, #12]
  401fa6:	9210      	str	r2, [sp, #64]	; 0x40
  401fa8:	442b      	add	r3, r5
  401faa:	46ca      	mov	sl, r9
  401fac:	9303      	str	r3, [sp, #12]
  401fae:	7823      	ldrb	r3, [r4, #0]
  401fb0:	2b00      	cmp	r3, #0
  401fb2:	f000 83e0 	beq.w	402776 <_vfiprintf_r+0x88a>
  401fb6:	2000      	movs	r0, #0
  401fb8:	f04f 0300 	mov.w	r3, #0
  401fbc:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  401fc0:	f104 0801 	add.w	r8, r4, #1
  401fc4:	7862      	ldrb	r2, [r4, #1]
  401fc6:	4605      	mov	r5, r0
  401fc8:	4606      	mov	r6, r0
  401fca:	4603      	mov	r3, r0
  401fcc:	f04f 34ff 	mov.w	r4, #4294967295
  401fd0:	f108 0801 	add.w	r8, r8, #1
  401fd4:	f1a2 0120 	sub.w	r1, r2, #32
  401fd8:	2958      	cmp	r1, #88	; 0x58
  401fda:	f200 82de 	bhi.w	40259a <_vfiprintf_r+0x6ae>
  401fde:	e8df f011 	tbh	[pc, r1, lsl #1]
  401fe2:	0221      	.short	0x0221
  401fe4:	02dc02dc 	.word	0x02dc02dc
  401fe8:	02dc0229 	.word	0x02dc0229
  401fec:	02dc02dc 	.word	0x02dc02dc
  401ff0:	02dc02dc 	.word	0x02dc02dc
  401ff4:	028902dc 	.word	0x028902dc
  401ff8:	02dc0295 	.word	0x02dc0295
  401ffc:	02bd00a2 	.word	0x02bd00a2
  402000:	019f02dc 	.word	0x019f02dc
  402004:	01a401a4 	.word	0x01a401a4
  402008:	01a401a4 	.word	0x01a401a4
  40200c:	01a401a4 	.word	0x01a401a4
  402010:	01a401a4 	.word	0x01a401a4
  402014:	02dc01a4 	.word	0x02dc01a4
  402018:	02dc02dc 	.word	0x02dc02dc
  40201c:	02dc02dc 	.word	0x02dc02dc
  402020:	02dc02dc 	.word	0x02dc02dc
  402024:	02dc02dc 	.word	0x02dc02dc
  402028:	01b202dc 	.word	0x01b202dc
  40202c:	02dc02dc 	.word	0x02dc02dc
  402030:	02dc02dc 	.word	0x02dc02dc
  402034:	02dc02dc 	.word	0x02dc02dc
  402038:	02dc02dc 	.word	0x02dc02dc
  40203c:	02dc02dc 	.word	0x02dc02dc
  402040:	02dc0197 	.word	0x02dc0197
  402044:	02dc02dc 	.word	0x02dc02dc
  402048:	02dc02dc 	.word	0x02dc02dc
  40204c:	02dc019b 	.word	0x02dc019b
  402050:	025302dc 	.word	0x025302dc
  402054:	02dc02dc 	.word	0x02dc02dc
  402058:	02dc02dc 	.word	0x02dc02dc
  40205c:	02dc02dc 	.word	0x02dc02dc
  402060:	02dc02dc 	.word	0x02dc02dc
  402064:	02dc02dc 	.word	0x02dc02dc
  402068:	021b025a 	.word	0x021b025a
  40206c:	02dc02dc 	.word	0x02dc02dc
  402070:	026e02dc 	.word	0x026e02dc
  402074:	02dc021b 	.word	0x02dc021b
  402078:	027302dc 	.word	0x027302dc
  40207c:	01f502dc 	.word	0x01f502dc
  402080:	02090182 	.word	0x02090182
  402084:	02dc02d7 	.word	0x02dc02d7
  402088:	02dc029a 	.word	0x02dc029a
  40208c:	02dc00a7 	.word	0x02dc00a7
  402090:	022e02dc 	.word	0x022e02dc
  402094:	f10a 0a08 	add.w	sl, sl, #8
  402098:	9b03      	ldr	r3, [sp, #12]
  40209a:	442b      	add	r3, r5
  40209c:	9303      	str	r3, [sp, #12]
  40209e:	e786      	b.n	401fae <_vfiprintf_r+0xc2>
  4020a0:	4659      	mov	r1, fp
  4020a2:	9806      	ldr	r0, [sp, #24]
  4020a4:	f000 fdac 	bl	402c00 <__swsetup_r>
  4020a8:	bb18      	cbnz	r0, 4020f2 <_vfiprintf_r+0x206>
  4020aa:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  4020ae:	f001 031a 	and.w	r3, r1, #26
  4020b2:	2b0a      	cmp	r3, #10
  4020b4:	f47f af4b 	bne.w	401f4e <_vfiprintf_r+0x62>
  4020b8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4020bc:	2b00      	cmp	r3, #0
  4020be:	f6ff af46 	blt.w	401f4e <_vfiprintf_r+0x62>
  4020c2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4020c6:	07db      	lsls	r3, r3, #31
  4020c8:	d405      	bmi.n	4020d6 <_vfiprintf_r+0x1ea>
  4020ca:	058f      	lsls	r7, r1, #22
  4020cc:	d403      	bmi.n	4020d6 <_vfiprintf_r+0x1ea>
  4020ce:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4020d2:	f001 facb 	bl	40366c <__retarget_lock_release_recursive>
  4020d6:	462b      	mov	r3, r5
  4020d8:	4642      	mov	r2, r8
  4020da:	4659      	mov	r1, fp
  4020dc:	9806      	ldr	r0, [sp, #24]
  4020de:	f000 fd4d 	bl	402b7c <__sbprintf>
  4020e2:	9003      	str	r0, [sp, #12]
  4020e4:	9803      	ldr	r0, [sp, #12]
  4020e6:	b02d      	add	sp, #180	; 0xb4
  4020e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4020ec:	f000 fefc 	bl	402ee8 <__sinit>
  4020f0:	e709      	b.n	401f06 <_vfiprintf_r+0x1a>
  4020f2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4020f6:	07d9      	lsls	r1, r3, #31
  4020f8:	d404      	bmi.n	402104 <_vfiprintf_r+0x218>
  4020fa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4020fe:	059a      	lsls	r2, r3, #22
  402100:	f140 84aa 	bpl.w	402a58 <_vfiprintf_r+0xb6c>
  402104:	f04f 33ff 	mov.w	r3, #4294967295
  402108:	9303      	str	r3, [sp, #12]
  40210a:	9803      	ldr	r0, [sp, #12]
  40210c:	b02d      	add	sp, #180	; 0xb4
  40210e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402112:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402116:	f001 faa7 	bl	403668 <__retarget_lock_acquire_recursive>
  40211a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40211e:	b281      	uxth	r1, r0
  402120:	e6fb      	b.n	401f1a <_vfiprintf_r+0x2e>
  402122:	4276      	negs	r6, r6
  402124:	9207      	str	r2, [sp, #28]
  402126:	f043 0304 	orr.w	r3, r3, #4
  40212a:	f898 2000 	ldrb.w	r2, [r8]
  40212e:	e74f      	b.n	401fd0 <_vfiprintf_r+0xe4>
  402130:	9608      	str	r6, [sp, #32]
  402132:	069e      	lsls	r6, r3, #26
  402134:	f100 8450 	bmi.w	4029d8 <_vfiprintf_r+0xaec>
  402138:	9907      	ldr	r1, [sp, #28]
  40213a:	06dd      	lsls	r5, r3, #27
  40213c:	460a      	mov	r2, r1
  40213e:	f100 83ef 	bmi.w	402920 <_vfiprintf_r+0xa34>
  402142:	0658      	lsls	r0, r3, #25
  402144:	f140 83ec 	bpl.w	402920 <_vfiprintf_r+0xa34>
  402148:	880e      	ldrh	r6, [r1, #0]
  40214a:	3104      	adds	r1, #4
  40214c:	2700      	movs	r7, #0
  40214e:	2201      	movs	r2, #1
  402150:	9107      	str	r1, [sp, #28]
  402152:	f04f 0100 	mov.w	r1, #0
  402156:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40215a:	2500      	movs	r5, #0
  40215c:	1c61      	adds	r1, r4, #1
  40215e:	f000 8116 	beq.w	40238e <_vfiprintf_r+0x4a2>
  402162:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  402166:	9102      	str	r1, [sp, #8]
  402168:	ea56 0107 	orrs.w	r1, r6, r7
  40216c:	f040 8114 	bne.w	402398 <_vfiprintf_r+0x4ac>
  402170:	2c00      	cmp	r4, #0
  402172:	f040 835c 	bne.w	40282e <_vfiprintf_r+0x942>
  402176:	2a00      	cmp	r2, #0
  402178:	f040 83b7 	bne.w	4028ea <_vfiprintf_r+0x9fe>
  40217c:	f013 0301 	ands.w	r3, r3, #1
  402180:	9305      	str	r3, [sp, #20]
  402182:	f000 8457 	beq.w	402a34 <_vfiprintf_r+0xb48>
  402186:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40218a:	2330      	movs	r3, #48	; 0x30
  40218c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  402190:	9b05      	ldr	r3, [sp, #20]
  402192:	42a3      	cmp	r3, r4
  402194:	bfb8      	it	lt
  402196:	4623      	movlt	r3, r4
  402198:	9301      	str	r3, [sp, #4]
  40219a:	b10d      	cbz	r5, 4021a0 <_vfiprintf_r+0x2b4>
  40219c:	3301      	adds	r3, #1
  40219e:	9301      	str	r3, [sp, #4]
  4021a0:	9b02      	ldr	r3, [sp, #8]
  4021a2:	f013 0302 	ands.w	r3, r3, #2
  4021a6:	9309      	str	r3, [sp, #36]	; 0x24
  4021a8:	d002      	beq.n	4021b0 <_vfiprintf_r+0x2c4>
  4021aa:	9b01      	ldr	r3, [sp, #4]
  4021ac:	3302      	adds	r3, #2
  4021ae:	9301      	str	r3, [sp, #4]
  4021b0:	9b02      	ldr	r3, [sp, #8]
  4021b2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4021b6:	930a      	str	r3, [sp, #40]	; 0x28
  4021b8:	f040 8217 	bne.w	4025ea <_vfiprintf_r+0x6fe>
  4021bc:	9b08      	ldr	r3, [sp, #32]
  4021be:	9a01      	ldr	r2, [sp, #4]
  4021c0:	1a9d      	subs	r5, r3, r2
  4021c2:	2d00      	cmp	r5, #0
  4021c4:	f340 8211 	ble.w	4025ea <_vfiprintf_r+0x6fe>
  4021c8:	2d10      	cmp	r5, #16
  4021ca:	f340 8490 	ble.w	402aee <_vfiprintf_r+0xc02>
  4021ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4021d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4021d2:	4ec4      	ldr	r6, [pc, #784]	; (4024e4 <_vfiprintf_r+0x5f8>)
  4021d4:	46d6      	mov	lr, sl
  4021d6:	2710      	movs	r7, #16
  4021d8:	46a2      	mov	sl, r4
  4021da:	4619      	mov	r1, r3
  4021dc:	9c06      	ldr	r4, [sp, #24]
  4021de:	e007      	b.n	4021f0 <_vfiprintf_r+0x304>
  4021e0:	f101 0c02 	add.w	ip, r1, #2
  4021e4:	f10e 0e08 	add.w	lr, lr, #8
  4021e8:	4601      	mov	r1, r0
  4021ea:	3d10      	subs	r5, #16
  4021ec:	2d10      	cmp	r5, #16
  4021ee:	dd11      	ble.n	402214 <_vfiprintf_r+0x328>
  4021f0:	1c48      	adds	r0, r1, #1
  4021f2:	3210      	adds	r2, #16
  4021f4:	2807      	cmp	r0, #7
  4021f6:	9211      	str	r2, [sp, #68]	; 0x44
  4021f8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4021fc:	9010      	str	r0, [sp, #64]	; 0x40
  4021fe:	ddef      	ble.n	4021e0 <_vfiprintf_r+0x2f4>
  402200:	2a00      	cmp	r2, #0
  402202:	f040 81e4 	bne.w	4025ce <_vfiprintf_r+0x6e2>
  402206:	3d10      	subs	r5, #16
  402208:	2d10      	cmp	r5, #16
  40220a:	4611      	mov	r1, r2
  40220c:	f04f 0c01 	mov.w	ip, #1
  402210:	46ce      	mov	lr, r9
  402212:	dced      	bgt.n	4021f0 <_vfiprintf_r+0x304>
  402214:	4654      	mov	r4, sl
  402216:	4661      	mov	r1, ip
  402218:	46f2      	mov	sl, lr
  40221a:	442a      	add	r2, r5
  40221c:	2907      	cmp	r1, #7
  40221e:	9211      	str	r2, [sp, #68]	; 0x44
  402220:	f8ca 6000 	str.w	r6, [sl]
  402224:	f8ca 5004 	str.w	r5, [sl, #4]
  402228:	9110      	str	r1, [sp, #64]	; 0x40
  40222a:	f300 82ec 	bgt.w	402806 <_vfiprintf_r+0x91a>
  40222e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402232:	f10a 0a08 	add.w	sl, sl, #8
  402236:	1c48      	adds	r0, r1, #1
  402238:	2d00      	cmp	r5, #0
  40223a:	f040 81de 	bne.w	4025fa <_vfiprintf_r+0x70e>
  40223e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402240:	2b00      	cmp	r3, #0
  402242:	f000 81f8 	beq.w	402636 <_vfiprintf_r+0x74a>
  402246:	3202      	adds	r2, #2
  402248:	a90e      	add	r1, sp, #56	; 0x38
  40224a:	2302      	movs	r3, #2
  40224c:	2807      	cmp	r0, #7
  40224e:	9211      	str	r2, [sp, #68]	; 0x44
  402250:	9010      	str	r0, [sp, #64]	; 0x40
  402252:	e88a 000a 	stmia.w	sl, {r1, r3}
  402256:	f340 81ea 	ble.w	40262e <_vfiprintf_r+0x742>
  40225a:	2a00      	cmp	r2, #0
  40225c:	f040 838c 	bne.w	402978 <_vfiprintf_r+0xa8c>
  402260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402262:	2b80      	cmp	r3, #128	; 0x80
  402264:	f04f 0001 	mov.w	r0, #1
  402268:	4611      	mov	r1, r2
  40226a:	46ca      	mov	sl, r9
  40226c:	f040 81e7 	bne.w	40263e <_vfiprintf_r+0x752>
  402270:	9b08      	ldr	r3, [sp, #32]
  402272:	9d01      	ldr	r5, [sp, #4]
  402274:	1b5e      	subs	r6, r3, r5
  402276:	2e00      	cmp	r6, #0
  402278:	f340 81e1 	ble.w	40263e <_vfiprintf_r+0x752>
  40227c:	2e10      	cmp	r6, #16
  40227e:	4d9a      	ldr	r5, [pc, #616]	; (4024e8 <_vfiprintf_r+0x5fc>)
  402280:	f340 8450 	ble.w	402b24 <_vfiprintf_r+0xc38>
  402284:	46d4      	mov	ip, sl
  402286:	2710      	movs	r7, #16
  402288:	46a2      	mov	sl, r4
  40228a:	9c06      	ldr	r4, [sp, #24]
  40228c:	e007      	b.n	40229e <_vfiprintf_r+0x3b2>
  40228e:	f101 0e02 	add.w	lr, r1, #2
  402292:	f10c 0c08 	add.w	ip, ip, #8
  402296:	4601      	mov	r1, r0
  402298:	3e10      	subs	r6, #16
  40229a:	2e10      	cmp	r6, #16
  40229c:	dd11      	ble.n	4022c2 <_vfiprintf_r+0x3d6>
  40229e:	1c48      	adds	r0, r1, #1
  4022a0:	3210      	adds	r2, #16
  4022a2:	2807      	cmp	r0, #7
  4022a4:	9211      	str	r2, [sp, #68]	; 0x44
  4022a6:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4022aa:	9010      	str	r0, [sp, #64]	; 0x40
  4022ac:	ddef      	ble.n	40228e <_vfiprintf_r+0x3a2>
  4022ae:	2a00      	cmp	r2, #0
  4022b0:	f040 829d 	bne.w	4027ee <_vfiprintf_r+0x902>
  4022b4:	3e10      	subs	r6, #16
  4022b6:	2e10      	cmp	r6, #16
  4022b8:	f04f 0e01 	mov.w	lr, #1
  4022bc:	4611      	mov	r1, r2
  4022be:	46cc      	mov	ip, r9
  4022c0:	dced      	bgt.n	40229e <_vfiprintf_r+0x3b2>
  4022c2:	4654      	mov	r4, sl
  4022c4:	46e2      	mov	sl, ip
  4022c6:	4432      	add	r2, r6
  4022c8:	f1be 0f07 	cmp.w	lr, #7
  4022cc:	9211      	str	r2, [sp, #68]	; 0x44
  4022ce:	e88a 0060 	stmia.w	sl, {r5, r6}
  4022d2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4022d6:	f300 8369 	bgt.w	4029ac <_vfiprintf_r+0xac0>
  4022da:	f10a 0a08 	add.w	sl, sl, #8
  4022de:	f10e 0001 	add.w	r0, lr, #1
  4022e2:	4671      	mov	r1, lr
  4022e4:	e1ab      	b.n	40263e <_vfiprintf_r+0x752>
  4022e6:	9608      	str	r6, [sp, #32]
  4022e8:	f013 0220 	ands.w	r2, r3, #32
  4022ec:	f040 838c 	bne.w	402a08 <_vfiprintf_r+0xb1c>
  4022f0:	f013 0110 	ands.w	r1, r3, #16
  4022f4:	f040 831a 	bne.w	40292c <_vfiprintf_r+0xa40>
  4022f8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4022fc:	f000 8316 	beq.w	40292c <_vfiprintf_r+0xa40>
  402300:	9807      	ldr	r0, [sp, #28]
  402302:	460a      	mov	r2, r1
  402304:	4601      	mov	r1, r0
  402306:	3104      	adds	r1, #4
  402308:	8806      	ldrh	r6, [r0, #0]
  40230a:	9107      	str	r1, [sp, #28]
  40230c:	2700      	movs	r7, #0
  40230e:	e720      	b.n	402152 <_vfiprintf_r+0x266>
  402310:	9608      	str	r6, [sp, #32]
  402312:	f043 0310 	orr.w	r3, r3, #16
  402316:	e7e7      	b.n	4022e8 <_vfiprintf_r+0x3fc>
  402318:	9608      	str	r6, [sp, #32]
  40231a:	f043 0310 	orr.w	r3, r3, #16
  40231e:	e708      	b.n	402132 <_vfiprintf_r+0x246>
  402320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402324:	f898 2000 	ldrb.w	r2, [r8]
  402328:	e652      	b.n	401fd0 <_vfiprintf_r+0xe4>
  40232a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40232e:	2600      	movs	r6, #0
  402330:	f818 2b01 	ldrb.w	r2, [r8], #1
  402334:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  402338:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40233c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402340:	2909      	cmp	r1, #9
  402342:	d9f5      	bls.n	402330 <_vfiprintf_r+0x444>
  402344:	e646      	b.n	401fd4 <_vfiprintf_r+0xe8>
  402346:	9608      	str	r6, [sp, #32]
  402348:	2800      	cmp	r0, #0
  40234a:	f040 8408 	bne.w	402b5e <_vfiprintf_r+0xc72>
  40234e:	f043 0310 	orr.w	r3, r3, #16
  402352:	069e      	lsls	r6, r3, #26
  402354:	f100 834c 	bmi.w	4029f0 <_vfiprintf_r+0xb04>
  402358:	06dd      	lsls	r5, r3, #27
  40235a:	f100 82f3 	bmi.w	402944 <_vfiprintf_r+0xa58>
  40235e:	0658      	lsls	r0, r3, #25
  402360:	f140 82f0 	bpl.w	402944 <_vfiprintf_r+0xa58>
  402364:	9d07      	ldr	r5, [sp, #28]
  402366:	f9b5 6000 	ldrsh.w	r6, [r5]
  40236a:	462a      	mov	r2, r5
  40236c:	17f7      	asrs	r7, r6, #31
  40236e:	3204      	adds	r2, #4
  402370:	4630      	mov	r0, r6
  402372:	4639      	mov	r1, r7
  402374:	9207      	str	r2, [sp, #28]
  402376:	2800      	cmp	r0, #0
  402378:	f171 0200 	sbcs.w	r2, r1, #0
  40237c:	f2c0 835d 	blt.w	402a3a <_vfiprintf_r+0xb4e>
  402380:	1c61      	adds	r1, r4, #1
  402382:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402386:	f04f 0201 	mov.w	r2, #1
  40238a:	f47f aeea 	bne.w	402162 <_vfiprintf_r+0x276>
  40238e:	ea56 0107 	orrs.w	r1, r6, r7
  402392:	f000 824d 	beq.w	402830 <_vfiprintf_r+0x944>
  402396:	9302      	str	r3, [sp, #8]
  402398:	2a01      	cmp	r2, #1
  40239a:	f000 828c 	beq.w	4028b6 <_vfiprintf_r+0x9ca>
  40239e:	2a02      	cmp	r2, #2
  4023a0:	f040 825c 	bne.w	40285c <_vfiprintf_r+0x970>
  4023a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4023a6:	46cb      	mov	fp, r9
  4023a8:	0933      	lsrs	r3, r6, #4
  4023aa:	f006 010f 	and.w	r1, r6, #15
  4023ae:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4023b2:	093a      	lsrs	r2, r7, #4
  4023b4:	461e      	mov	r6, r3
  4023b6:	4617      	mov	r7, r2
  4023b8:	5c43      	ldrb	r3, [r0, r1]
  4023ba:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4023be:	ea56 0307 	orrs.w	r3, r6, r7
  4023c2:	d1f1      	bne.n	4023a8 <_vfiprintf_r+0x4bc>
  4023c4:	eba9 030b 	sub.w	r3, r9, fp
  4023c8:	9305      	str	r3, [sp, #20]
  4023ca:	e6e1      	b.n	402190 <_vfiprintf_r+0x2a4>
  4023cc:	2800      	cmp	r0, #0
  4023ce:	f040 83c0 	bne.w	402b52 <_vfiprintf_r+0xc66>
  4023d2:	0699      	lsls	r1, r3, #26
  4023d4:	f100 8367 	bmi.w	402aa6 <_vfiprintf_r+0xbba>
  4023d8:	06da      	lsls	r2, r3, #27
  4023da:	f100 80f1 	bmi.w	4025c0 <_vfiprintf_r+0x6d4>
  4023de:	065b      	lsls	r3, r3, #25
  4023e0:	f140 80ee 	bpl.w	4025c0 <_vfiprintf_r+0x6d4>
  4023e4:	9a07      	ldr	r2, [sp, #28]
  4023e6:	6813      	ldr	r3, [r2, #0]
  4023e8:	3204      	adds	r2, #4
  4023ea:	9207      	str	r2, [sp, #28]
  4023ec:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4023f0:	801a      	strh	r2, [r3, #0]
  4023f2:	e5b8      	b.n	401f66 <_vfiprintf_r+0x7a>
  4023f4:	9807      	ldr	r0, [sp, #28]
  4023f6:	4a3d      	ldr	r2, [pc, #244]	; (4024ec <_vfiprintf_r+0x600>)
  4023f8:	9608      	str	r6, [sp, #32]
  4023fa:	920b      	str	r2, [sp, #44]	; 0x2c
  4023fc:	6806      	ldr	r6, [r0, #0]
  4023fe:	2278      	movs	r2, #120	; 0x78
  402400:	2130      	movs	r1, #48	; 0x30
  402402:	3004      	adds	r0, #4
  402404:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  402408:	f043 0302 	orr.w	r3, r3, #2
  40240c:	9007      	str	r0, [sp, #28]
  40240e:	2700      	movs	r7, #0
  402410:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402414:	2202      	movs	r2, #2
  402416:	e69c      	b.n	402152 <_vfiprintf_r+0x266>
  402418:	9608      	str	r6, [sp, #32]
  40241a:	2800      	cmp	r0, #0
  40241c:	d099      	beq.n	402352 <_vfiprintf_r+0x466>
  40241e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402422:	e796      	b.n	402352 <_vfiprintf_r+0x466>
  402424:	f898 2000 	ldrb.w	r2, [r8]
  402428:	2d00      	cmp	r5, #0
  40242a:	f47f add1 	bne.w	401fd0 <_vfiprintf_r+0xe4>
  40242e:	2001      	movs	r0, #1
  402430:	2520      	movs	r5, #32
  402432:	e5cd      	b.n	401fd0 <_vfiprintf_r+0xe4>
  402434:	f043 0301 	orr.w	r3, r3, #1
  402438:	f898 2000 	ldrb.w	r2, [r8]
  40243c:	e5c8      	b.n	401fd0 <_vfiprintf_r+0xe4>
  40243e:	9608      	str	r6, [sp, #32]
  402440:	2800      	cmp	r0, #0
  402442:	f040 8393 	bne.w	402b6c <_vfiprintf_r+0xc80>
  402446:	4929      	ldr	r1, [pc, #164]	; (4024ec <_vfiprintf_r+0x600>)
  402448:	910b      	str	r1, [sp, #44]	; 0x2c
  40244a:	069f      	lsls	r7, r3, #26
  40244c:	f100 82e8 	bmi.w	402a20 <_vfiprintf_r+0xb34>
  402450:	9807      	ldr	r0, [sp, #28]
  402452:	06de      	lsls	r6, r3, #27
  402454:	4601      	mov	r1, r0
  402456:	f100 8270 	bmi.w	40293a <_vfiprintf_r+0xa4e>
  40245a:	065d      	lsls	r5, r3, #25
  40245c:	f140 826d 	bpl.w	40293a <_vfiprintf_r+0xa4e>
  402460:	3104      	adds	r1, #4
  402462:	8806      	ldrh	r6, [r0, #0]
  402464:	9107      	str	r1, [sp, #28]
  402466:	2700      	movs	r7, #0
  402468:	07d8      	lsls	r0, r3, #31
  40246a:	f140 8222 	bpl.w	4028b2 <_vfiprintf_r+0x9c6>
  40246e:	ea56 0107 	orrs.w	r1, r6, r7
  402472:	f000 821e 	beq.w	4028b2 <_vfiprintf_r+0x9c6>
  402476:	2130      	movs	r1, #48	; 0x30
  402478:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40247c:	f043 0302 	orr.w	r3, r3, #2
  402480:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402484:	2202      	movs	r2, #2
  402486:	e664      	b.n	402152 <_vfiprintf_r+0x266>
  402488:	9608      	str	r6, [sp, #32]
  40248a:	2800      	cmp	r0, #0
  40248c:	f040 836b 	bne.w	402b66 <_vfiprintf_r+0xc7a>
  402490:	4917      	ldr	r1, [pc, #92]	; (4024f0 <_vfiprintf_r+0x604>)
  402492:	910b      	str	r1, [sp, #44]	; 0x2c
  402494:	e7d9      	b.n	40244a <_vfiprintf_r+0x55e>
  402496:	9907      	ldr	r1, [sp, #28]
  402498:	9608      	str	r6, [sp, #32]
  40249a:	680a      	ldr	r2, [r1, #0]
  40249c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4024a0:	f04f 0000 	mov.w	r0, #0
  4024a4:	460a      	mov	r2, r1
  4024a6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4024aa:	3204      	adds	r2, #4
  4024ac:	2001      	movs	r0, #1
  4024ae:	9001      	str	r0, [sp, #4]
  4024b0:	9207      	str	r2, [sp, #28]
  4024b2:	9005      	str	r0, [sp, #20]
  4024b4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4024b8:	9302      	str	r3, [sp, #8]
  4024ba:	2400      	movs	r4, #0
  4024bc:	e670      	b.n	4021a0 <_vfiprintf_r+0x2b4>
  4024be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4024c2:	f898 2000 	ldrb.w	r2, [r8]
  4024c6:	e583      	b.n	401fd0 <_vfiprintf_r+0xe4>
  4024c8:	f898 2000 	ldrb.w	r2, [r8]
  4024cc:	2a6c      	cmp	r2, #108	; 0x6c
  4024ce:	bf03      	ittte	eq
  4024d0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4024d4:	f043 0320 	orreq.w	r3, r3, #32
  4024d8:	f108 0801 	addeq.w	r8, r8, #1
  4024dc:	f043 0310 	orrne.w	r3, r3, #16
  4024e0:	e576      	b.n	401fd0 <_vfiprintf_r+0xe4>
  4024e2:	bf00      	nop
  4024e4:	004050ec 	.word	0x004050ec
  4024e8:	004050fc 	.word	0x004050fc
  4024ec:	004050d0 	.word	0x004050d0
  4024f0:	004050bc 	.word	0x004050bc
  4024f4:	9907      	ldr	r1, [sp, #28]
  4024f6:	680e      	ldr	r6, [r1, #0]
  4024f8:	460a      	mov	r2, r1
  4024fa:	2e00      	cmp	r6, #0
  4024fc:	f102 0204 	add.w	r2, r2, #4
  402500:	f6ff ae0f 	blt.w	402122 <_vfiprintf_r+0x236>
  402504:	9207      	str	r2, [sp, #28]
  402506:	f898 2000 	ldrb.w	r2, [r8]
  40250a:	e561      	b.n	401fd0 <_vfiprintf_r+0xe4>
  40250c:	f898 2000 	ldrb.w	r2, [r8]
  402510:	2001      	movs	r0, #1
  402512:	252b      	movs	r5, #43	; 0x2b
  402514:	e55c      	b.n	401fd0 <_vfiprintf_r+0xe4>
  402516:	9907      	ldr	r1, [sp, #28]
  402518:	9608      	str	r6, [sp, #32]
  40251a:	f8d1 b000 	ldr.w	fp, [r1]
  40251e:	f04f 0200 	mov.w	r2, #0
  402522:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  402526:	1d0e      	adds	r6, r1, #4
  402528:	f1bb 0f00 	cmp.w	fp, #0
  40252c:	f000 82e5 	beq.w	402afa <_vfiprintf_r+0xc0e>
  402530:	1c67      	adds	r7, r4, #1
  402532:	f000 82c4 	beq.w	402abe <_vfiprintf_r+0xbd2>
  402536:	4622      	mov	r2, r4
  402538:	2100      	movs	r1, #0
  40253a:	4658      	mov	r0, fp
  40253c:	9301      	str	r3, [sp, #4]
  40253e:	f001 fbdf 	bl	403d00 <memchr>
  402542:	9b01      	ldr	r3, [sp, #4]
  402544:	2800      	cmp	r0, #0
  402546:	f000 82e5 	beq.w	402b14 <_vfiprintf_r+0xc28>
  40254a:	eba0 020b 	sub.w	r2, r0, fp
  40254e:	9205      	str	r2, [sp, #20]
  402550:	9607      	str	r6, [sp, #28]
  402552:	9302      	str	r3, [sp, #8]
  402554:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402558:	2400      	movs	r4, #0
  40255a:	e619      	b.n	402190 <_vfiprintf_r+0x2a4>
  40255c:	f898 2000 	ldrb.w	r2, [r8]
  402560:	2a2a      	cmp	r2, #42	; 0x2a
  402562:	f108 0701 	add.w	r7, r8, #1
  402566:	f000 82e9 	beq.w	402b3c <_vfiprintf_r+0xc50>
  40256a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40256e:	2909      	cmp	r1, #9
  402570:	46b8      	mov	r8, r7
  402572:	f04f 0400 	mov.w	r4, #0
  402576:	f63f ad2d 	bhi.w	401fd4 <_vfiprintf_r+0xe8>
  40257a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40257e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402582:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  402586:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40258a:	2909      	cmp	r1, #9
  40258c:	d9f5      	bls.n	40257a <_vfiprintf_r+0x68e>
  40258e:	e521      	b.n	401fd4 <_vfiprintf_r+0xe8>
  402590:	f043 0320 	orr.w	r3, r3, #32
  402594:	f898 2000 	ldrb.w	r2, [r8]
  402598:	e51a      	b.n	401fd0 <_vfiprintf_r+0xe4>
  40259a:	9608      	str	r6, [sp, #32]
  40259c:	2800      	cmp	r0, #0
  40259e:	f040 82db 	bne.w	402b58 <_vfiprintf_r+0xc6c>
  4025a2:	2a00      	cmp	r2, #0
  4025a4:	f000 80e7 	beq.w	402776 <_vfiprintf_r+0x88a>
  4025a8:	2101      	movs	r1, #1
  4025aa:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4025ae:	f04f 0200 	mov.w	r2, #0
  4025b2:	9101      	str	r1, [sp, #4]
  4025b4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4025b8:	9105      	str	r1, [sp, #20]
  4025ba:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4025be:	e77b      	b.n	4024b8 <_vfiprintf_r+0x5cc>
  4025c0:	9a07      	ldr	r2, [sp, #28]
  4025c2:	6813      	ldr	r3, [r2, #0]
  4025c4:	3204      	adds	r2, #4
  4025c6:	9207      	str	r2, [sp, #28]
  4025c8:	9a03      	ldr	r2, [sp, #12]
  4025ca:	601a      	str	r2, [r3, #0]
  4025cc:	e4cb      	b.n	401f66 <_vfiprintf_r+0x7a>
  4025ce:	aa0f      	add	r2, sp, #60	; 0x3c
  4025d0:	9904      	ldr	r1, [sp, #16]
  4025d2:	4620      	mov	r0, r4
  4025d4:	f7ff fc4a 	bl	401e6c <__sprint_r.part.0>
  4025d8:	2800      	cmp	r0, #0
  4025da:	f040 8139 	bne.w	402850 <_vfiprintf_r+0x964>
  4025de:	9910      	ldr	r1, [sp, #64]	; 0x40
  4025e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4025e2:	f101 0c01 	add.w	ip, r1, #1
  4025e6:	46ce      	mov	lr, r9
  4025e8:	e5ff      	b.n	4021ea <_vfiprintf_r+0x2fe>
  4025ea:	9910      	ldr	r1, [sp, #64]	; 0x40
  4025ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4025ee:	1c48      	adds	r0, r1, #1
  4025f0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4025f4:	2d00      	cmp	r5, #0
  4025f6:	f43f ae22 	beq.w	40223e <_vfiprintf_r+0x352>
  4025fa:	3201      	adds	r2, #1
  4025fc:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  402600:	2101      	movs	r1, #1
  402602:	2807      	cmp	r0, #7
  402604:	9211      	str	r2, [sp, #68]	; 0x44
  402606:	9010      	str	r0, [sp, #64]	; 0x40
  402608:	f8ca 5000 	str.w	r5, [sl]
  40260c:	f8ca 1004 	str.w	r1, [sl, #4]
  402610:	f340 8108 	ble.w	402824 <_vfiprintf_r+0x938>
  402614:	2a00      	cmp	r2, #0
  402616:	f040 81bc 	bne.w	402992 <_vfiprintf_r+0xaa6>
  40261a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40261c:	2b00      	cmp	r3, #0
  40261e:	f43f ae1f 	beq.w	402260 <_vfiprintf_r+0x374>
  402622:	ab0e      	add	r3, sp, #56	; 0x38
  402624:	2202      	movs	r2, #2
  402626:	4608      	mov	r0, r1
  402628:	931c      	str	r3, [sp, #112]	; 0x70
  40262a:	921d      	str	r2, [sp, #116]	; 0x74
  40262c:	46ca      	mov	sl, r9
  40262e:	4601      	mov	r1, r0
  402630:	f10a 0a08 	add.w	sl, sl, #8
  402634:	3001      	adds	r0, #1
  402636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402638:	2b80      	cmp	r3, #128	; 0x80
  40263a:	f43f ae19 	beq.w	402270 <_vfiprintf_r+0x384>
  40263e:	9b05      	ldr	r3, [sp, #20]
  402640:	1ae4      	subs	r4, r4, r3
  402642:	2c00      	cmp	r4, #0
  402644:	dd2e      	ble.n	4026a4 <_vfiprintf_r+0x7b8>
  402646:	2c10      	cmp	r4, #16
  402648:	4db3      	ldr	r5, [pc, #716]	; (402918 <_vfiprintf_r+0xa2c>)
  40264a:	dd1e      	ble.n	40268a <_vfiprintf_r+0x79e>
  40264c:	46d6      	mov	lr, sl
  40264e:	2610      	movs	r6, #16
  402650:	9f06      	ldr	r7, [sp, #24]
  402652:	f8dd a010 	ldr.w	sl, [sp, #16]
  402656:	e006      	b.n	402666 <_vfiprintf_r+0x77a>
  402658:	1c88      	adds	r0, r1, #2
  40265a:	f10e 0e08 	add.w	lr, lr, #8
  40265e:	4619      	mov	r1, r3
  402660:	3c10      	subs	r4, #16
  402662:	2c10      	cmp	r4, #16
  402664:	dd10      	ble.n	402688 <_vfiprintf_r+0x79c>
  402666:	1c4b      	adds	r3, r1, #1
  402668:	3210      	adds	r2, #16
  40266a:	2b07      	cmp	r3, #7
  40266c:	9211      	str	r2, [sp, #68]	; 0x44
  40266e:	e88e 0060 	stmia.w	lr, {r5, r6}
  402672:	9310      	str	r3, [sp, #64]	; 0x40
  402674:	ddf0      	ble.n	402658 <_vfiprintf_r+0x76c>
  402676:	2a00      	cmp	r2, #0
  402678:	d165      	bne.n	402746 <_vfiprintf_r+0x85a>
  40267a:	3c10      	subs	r4, #16
  40267c:	2c10      	cmp	r4, #16
  40267e:	f04f 0001 	mov.w	r0, #1
  402682:	4611      	mov	r1, r2
  402684:	46ce      	mov	lr, r9
  402686:	dcee      	bgt.n	402666 <_vfiprintf_r+0x77a>
  402688:	46f2      	mov	sl, lr
  40268a:	4422      	add	r2, r4
  40268c:	2807      	cmp	r0, #7
  40268e:	9211      	str	r2, [sp, #68]	; 0x44
  402690:	f8ca 5000 	str.w	r5, [sl]
  402694:	f8ca 4004 	str.w	r4, [sl, #4]
  402698:	9010      	str	r0, [sp, #64]	; 0x40
  40269a:	f300 8085 	bgt.w	4027a8 <_vfiprintf_r+0x8bc>
  40269e:	f10a 0a08 	add.w	sl, sl, #8
  4026a2:	3001      	adds	r0, #1
  4026a4:	9905      	ldr	r1, [sp, #20]
  4026a6:	f8ca b000 	str.w	fp, [sl]
  4026aa:	440a      	add	r2, r1
  4026ac:	2807      	cmp	r0, #7
  4026ae:	9211      	str	r2, [sp, #68]	; 0x44
  4026b0:	f8ca 1004 	str.w	r1, [sl, #4]
  4026b4:	9010      	str	r0, [sp, #64]	; 0x40
  4026b6:	f340 8082 	ble.w	4027be <_vfiprintf_r+0x8d2>
  4026ba:	2a00      	cmp	r2, #0
  4026bc:	f040 8118 	bne.w	4028f0 <_vfiprintf_r+0xa04>
  4026c0:	9b02      	ldr	r3, [sp, #8]
  4026c2:	9210      	str	r2, [sp, #64]	; 0x40
  4026c4:	0758      	lsls	r0, r3, #29
  4026c6:	d535      	bpl.n	402734 <_vfiprintf_r+0x848>
  4026c8:	9b08      	ldr	r3, [sp, #32]
  4026ca:	9901      	ldr	r1, [sp, #4]
  4026cc:	1a5c      	subs	r4, r3, r1
  4026ce:	2c00      	cmp	r4, #0
  4026d0:	f340 80e7 	ble.w	4028a2 <_vfiprintf_r+0x9b6>
  4026d4:	46ca      	mov	sl, r9
  4026d6:	2c10      	cmp	r4, #16
  4026d8:	f340 8218 	ble.w	402b0c <_vfiprintf_r+0xc20>
  4026dc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4026de:	4e8f      	ldr	r6, [pc, #572]	; (40291c <_vfiprintf_r+0xa30>)
  4026e0:	9f06      	ldr	r7, [sp, #24]
  4026e2:	f8dd b010 	ldr.w	fp, [sp, #16]
  4026e6:	2510      	movs	r5, #16
  4026e8:	e006      	b.n	4026f8 <_vfiprintf_r+0x80c>
  4026ea:	1c88      	adds	r0, r1, #2
  4026ec:	f10a 0a08 	add.w	sl, sl, #8
  4026f0:	4619      	mov	r1, r3
  4026f2:	3c10      	subs	r4, #16
  4026f4:	2c10      	cmp	r4, #16
  4026f6:	dd11      	ble.n	40271c <_vfiprintf_r+0x830>
  4026f8:	1c4b      	adds	r3, r1, #1
  4026fa:	3210      	adds	r2, #16
  4026fc:	2b07      	cmp	r3, #7
  4026fe:	9211      	str	r2, [sp, #68]	; 0x44
  402700:	f8ca 6000 	str.w	r6, [sl]
  402704:	f8ca 5004 	str.w	r5, [sl, #4]
  402708:	9310      	str	r3, [sp, #64]	; 0x40
  40270a:	ddee      	ble.n	4026ea <_vfiprintf_r+0x7fe>
  40270c:	bb42      	cbnz	r2, 402760 <_vfiprintf_r+0x874>
  40270e:	3c10      	subs	r4, #16
  402710:	2c10      	cmp	r4, #16
  402712:	f04f 0001 	mov.w	r0, #1
  402716:	4611      	mov	r1, r2
  402718:	46ca      	mov	sl, r9
  40271a:	dced      	bgt.n	4026f8 <_vfiprintf_r+0x80c>
  40271c:	4422      	add	r2, r4
  40271e:	2807      	cmp	r0, #7
  402720:	9211      	str	r2, [sp, #68]	; 0x44
  402722:	f8ca 6000 	str.w	r6, [sl]
  402726:	f8ca 4004 	str.w	r4, [sl, #4]
  40272a:	9010      	str	r0, [sp, #64]	; 0x40
  40272c:	dd51      	ble.n	4027d2 <_vfiprintf_r+0x8e6>
  40272e:	2a00      	cmp	r2, #0
  402730:	f040 819b 	bne.w	402a6a <_vfiprintf_r+0xb7e>
  402734:	9b03      	ldr	r3, [sp, #12]
  402736:	9a08      	ldr	r2, [sp, #32]
  402738:	9901      	ldr	r1, [sp, #4]
  40273a:	428a      	cmp	r2, r1
  40273c:	bfac      	ite	ge
  40273e:	189b      	addge	r3, r3, r2
  402740:	185b      	addlt	r3, r3, r1
  402742:	9303      	str	r3, [sp, #12]
  402744:	e04e      	b.n	4027e4 <_vfiprintf_r+0x8f8>
  402746:	aa0f      	add	r2, sp, #60	; 0x3c
  402748:	4651      	mov	r1, sl
  40274a:	4638      	mov	r0, r7
  40274c:	f7ff fb8e 	bl	401e6c <__sprint_r.part.0>
  402750:	2800      	cmp	r0, #0
  402752:	f040 813f 	bne.w	4029d4 <_vfiprintf_r+0xae8>
  402756:	9910      	ldr	r1, [sp, #64]	; 0x40
  402758:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40275a:	1c48      	adds	r0, r1, #1
  40275c:	46ce      	mov	lr, r9
  40275e:	e77f      	b.n	402660 <_vfiprintf_r+0x774>
  402760:	aa0f      	add	r2, sp, #60	; 0x3c
  402762:	4659      	mov	r1, fp
  402764:	4638      	mov	r0, r7
  402766:	f7ff fb81 	bl	401e6c <__sprint_r.part.0>
  40276a:	b960      	cbnz	r0, 402786 <_vfiprintf_r+0x89a>
  40276c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40276e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402770:	1c48      	adds	r0, r1, #1
  402772:	46ca      	mov	sl, r9
  402774:	e7bd      	b.n	4026f2 <_vfiprintf_r+0x806>
  402776:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402778:	f8dd b010 	ldr.w	fp, [sp, #16]
  40277c:	2b00      	cmp	r3, #0
  40277e:	f040 81d4 	bne.w	402b2a <_vfiprintf_r+0xc3e>
  402782:	2300      	movs	r3, #0
  402784:	9310      	str	r3, [sp, #64]	; 0x40
  402786:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40278a:	f013 0f01 	tst.w	r3, #1
  40278e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402792:	d102      	bne.n	40279a <_vfiprintf_r+0x8ae>
  402794:	059a      	lsls	r2, r3, #22
  402796:	f140 80de 	bpl.w	402956 <_vfiprintf_r+0xa6a>
  40279a:	065b      	lsls	r3, r3, #25
  40279c:	f53f acb2 	bmi.w	402104 <_vfiprintf_r+0x218>
  4027a0:	9803      	ldr	r0, [sp, #12]
  4027a2:	b02d      	add	sp, #180	; 0xb4
  4027a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027a8:	2a00      	cmp	r2, #0
  4027aa:	f040 8106 	bne.w	4029ba <_vfiprintf_r+0xace>
  4027ae:	9a05      	ldr	r2, [sp, #20]
  4027b0:	921d      	str	r2, [sp, #116]	; 0x74
  4027b2:	2301      	movs	r3, #1
  4027b4:	9211      	str	r2, [sp, #68]	; 0x44
  4027b6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4027ba:	9310      	str	r3, [sp, #64]	; 0x40
  4027bc:	46ca      	mov	sl, r9
  4027be:	f10a 0a08 	add.w	sl, sl, #8
  4027c2:	9b02      	ldr	r3, [sp, #8]
  4027c4:	0759      	lsls	r1, r3, #29
  4027c6:	d504      	bpl.n	4027d2 <_vfiprintf_r+0x8e6>
  4027c8:	9b08      	ldr	r3, [sp, #32]
  4027ca:	9901      	ldr	r1, [sp, #4]
  4027cc:	1a5c      	subs	r4, r3, r1
  4027ce:	2c00      	cmp	r4, #0
  4027d0:	dc81      	bgt.n	4026d6 <_vfiprintf_r+0x7ea>
  4027d2:	9b03      	ldr	r3, [sp, #12]
  4027d4:	9908      	ldr	r1, [sp, #32]
  4027d6:	9801      	ldr	r0, [sp, #4]
  4027d8:	4281      	cmp	r1, r0
  4027da:	bfac      	ite	ge
  4027dc:	185b      	addge	r3, r3, r1
  4027de:	181b      	addlt	r3, r3, r0
  4027e0:	9303      	str	r3, [sp, #12]
  4027e2:	bb72      	cbnz	r2, 402842 <_vfiprintf_r+0x956>
  4027e4:	2300      	movs	r3, #0
  4027e6:	9310      	str	r3, [sp, #64]	; 0x40
  4027e8:	46ca      	mov	sl, r9
  4027ea:	f7ff bbbc 	b.w	401f66 <_vfiprintf_r+0x7a>
  4027ee:	aa0f      	add	r2, sp, #60	; 0x3c
  4027f0:	9904      	ldr	r1, [sp, #16]
  4027f2:	4620      	mov	r0, r4
  4027f4:	f7ff fb3a 	bl	401e6c <__sprint_r.part.0>
  4027f8:	bb50      	cbnz	r0, 402850 <_vfiprintf_r+0x964>
  4027fa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4027fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4027fe:	f101 0e01 	add.w	lr, r1, #1
  402802:	46cc      	mov	ip, r9
  402804:	e548      	b.n	402298 <_vfiprintf_r+0x3ac>
  402806:	2a00      	cmp	r2, #0
  402808:	f040 8140 	bne.w	402a8c <_vfiprintf_r+0xba0>
  40280c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  402810:	2900      	cmp	r1, #0
  402812:	f000 811b 	beq.w	402a4c <_vfiprintf_r+0xb60>
  402816:	2201      	movs	r2, #1
  402818:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40281c:	4610      	mov	r0, r2
  40281e:	921d      	str	r2, [sp, #116]	; 0x74
  402820:	911c      	str	r1, [sp, #112]	; 0x70
  402822:	46ca      	mov	sl, r9
  402824:	4601      	mov	r1, r0
  402826:	f10a 0a08 	add.w	sl, sl, #8
  40282a:	3001      	adds	r0, #1
  40282c:	e507      	b.n	40223e <_vfiprintf_r+0x352>
  40282e:	9b02      	ldr	r3, [sp, #8]
  402830:	2a01      	cmp	r2, #1
  402832:	f000 8098 	beq.w	402966 <_vfiprintf_r+0xa7a>
  402836:	2a02      	cmp	r2, #2
  402838:	d10d      	bne.n	402856 <_vfiprintf_r+0x96a>
  40283a:	9302      	str	r3, [sp, #8]
  40283c:	2600      	movs	r6, #0
  40283e:	2700      	movs	r7, #0
  402840:	e5b0      	b.n	4023a4 <_vfiprintf_r+0x4b8>
  402842:	aa0f      	add	r2, sp, #60	; 0x3c
  402844:	9904      	ldr	r1, [sp, #16]
  402846:	9806      	ldr	r0, [sp, #24]
  402848:	f7ff fb10 	bl	401e6c <__sprint_r.part.0>
  40284c:	2800      	cmp	r0, #0
  40284e:	d0c9      	beq.n	4027e4 <_vfiprintf_r+0x8f8>
  402850:	f8dd b010 	ldr.w	fp, [sp, #16]
  402854:	e797      	b.n	402786 <_vfiprintf_r+0x89a>
  402856:	9302      	str	r3, [sp, #8]
  402858:	2600      	movs	r6, #0
  40285a:	2700      	movs	r7, #0
  40285c:	4649      	mov	r1, r9
  40285e:	e000      	b.n	402862 <_vfiprintf_r+0x976>
  402860:	4659      	mov	r1, fp
  402862:	08f2      	lsrs	r2, r6, #3
  402864:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  402868:	08f8      	lsrs	r0, r7, #3
  40286a:	f006 0307 	and.w	r3, r6, #7
  40286e:	4607      	mov	r7, r0
  402870:	4616      	mov	r6, r2
  402872:	3330      	adds	r3, #48	; 0x30
  402874:	ea56 0207 	orrs.w	r2, r6, r7
  402878:	f801 3c01 	strb.w	r3, [r1, #-1]
  40287c:	f101 3bff 	add.w	fp, r1, #4294967295
  402880:	d1ee      	bne.n	402860 <_vfiprintf_r+0x974>
  402882:	9a02      	ldr	r2, [sp, #8]
  402884:	07d6      	lsls	r6, r2, #31
  402886:	f57f ad9d 	bpl.w	4023c4 <_vfiprintf_r+0x4d8>
  40288a:	2b30      	cmp	r3, #48	; 0x30
  40288c:	f43f ad9a 	beq.w	4023c4 <_vfiprintf_r+0x4d8>
  402890:	3902      	subs	r1, #2
  402892:	2330      	movs	r3, #48	; 0x30
  402894:	f80b 3c01 	strb.w	r3, [fp, #-1]
  402898:	eba9 0301 	sub.w	r3, r9, r1
  40289c:	9305      	str	r3, [sp, #20]
  40289e:	468b      	mov	fp, r1
  4028a0:	e476      	b.n	402190 <_vfiprintf_r+0x2a4>
  4028a2:	9b03      	ldr	r3, [sp, #12]
  4028a4:	9a08      	ldr	r2, [sp, #32]
  4028a6:	428a      	cmp	r2, r1
  4028a8:	bfac      	ite	ge
  4028aa:	189b      	addge	r3, r3, r2
  4028ac:	185b      	addlt	r3, r3, r1
  4028ae:	9303      	str	r3, [sp, #12]
  4028b0:	e798      	b.n	4027e4 <_vfiprintf_r+0x8f8>
  4028b2:	2202      	movs	r2, #2
  4028b4:	e44d      	b.n	402152 <_vfiprintf_r+0x266>
  4028b6:	2f00      	cmp	r7, #0
  4028b8:	bf08      	it	eq
  4028ba:	2e0a      	cmpeq	r6, #10
  4028bc:	d352      	bcc.n	402964 <_vfiprintf_r+0xa78>
  4028be:	46cb      	mov	fp, r9
  4028c0:	4630      	mov	r0, r6
  4028c2:	4639      	mov	r1, r7
  4028c4:	220a      	movs	r2, #10
  4028c6:	2300      	movs	r3, #0
  4028c8:	f001 ff76 	bl	4047b8 <__aeabi_uldivmod>
  4028cc:	3230      	adds	r2, #48	; 0x30
  4028ce:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4028d2:	4630      	mov	r0, r6
  4028d4:	4639      	mov	r1, r7
  4028d6:	2300      	movs	r3, #0
  4028d8:	220a      	movs	r2, #10
  4028da:	f001 ff6d 	bl	4047b8 <__aeabi_uldivmod>
  4028de:	4606      	mov	r6, r0
  4028e0:	460f      	mov	r7, r1
  4028e2:	ea56 0307 	orrs.w	r3, r6, r7
  4028e6:	d1eb      	bne.n	4028c0 <_vfiprintf_r+0x9d4>
  4028e8:	e56c      	b.n	4023c4 <_vfiprintf_r+0x4d8>
  4028ea:	9405      	str	r4, [sp, #20]
  4028ec:	46cb      	mov	fp, r9
  4028ee:	e44f      	b.n	402190 <_vfiprintf_r+0x2a4>
  4028f0:	aa0f      	add	r2, sp, #60	; 0x3c
  4028f2:	9904      	ldr	r1, [sp, #16]
  4028f4:	9806      	ldr	r0, [sp, #24]
  4028f6:	f7ff fab9 	bl	401e6c <__sprint_r.part.0>
  4028fa:	2800      	cmp	r0, #0
  4028fc:	d1a8      	bne.n	402850 <_vfiprintf_r+0x964>
  4028fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402900:	46ca      	mov	sl, r9
  402902:	e75e      	b.n	4027c2 <_vfiprintf_r+0x8d6>
  402904:	aa0f      	add	r2, sp, #60	; 0x3c
  402906:	9904      	ldr	r1, [sp, #16]
  402908:	9806      	ldr	r0, [sp, #24]
  40290a:	f7ff faaf 	bl	401e6c <__sprint_r.part.0>
  40290e:	2800      	cmp	r0, #0
  402910:	d19e      	bne.n	402850 <_vfiprintf_r+0x964>
  402912:	46ca      	mov	sl, r9
  402914:	f7ff bbc0 	b.w	402098 <_vfiprintf_r+0x1ac>
  402918:	004050fc 	.word	0x004050fc
  40291c:	004050ec 	.word	0x004050ec
  402920:	3104      	adds	r1, #4
  402922:	6816      	ldr	r6, [r2, #0]
  402924:	9107      	str	r1, [sp, #28]
  402926:	2201      	movs	r2, #1
  402928:	2700      	movs	r7, #0
  40292a:	e412      	b.n	402152 <_vfiprintf_r+0x266>
  40292c:	9807      	ldr	r0, [sp, #28]
  40292e:	4601      	mov	r1, r0
  402930:	3104      	adds	r1, #4
  402932:	6806      	ldr	r6, [r0, #0]
  402934:	9107      	str	r1, [sp, #28]
  402936:	2700      	movs	r7, #0
  402938:	e40b      	b.n	402152 <_vfiprintf_r+0x266>
  40293a:	680e      	ldr	r6, [r1, #0]
  40293c:	3104      	adds	r1, #4
  40293e:	9107      	str	r1, [sp, #28]
  402940:	2700      	movs	r7, #0
  402942:	e591      	b.n	402468 <_vfiprintf_r+0x57c>
  402944:	9907      	ldr	r1, [sp, #28]
  402946:	680e      	ldr	r6, [r1, #0]
  402948:	460a      	mov	r2, r1
  40294a:	17f7      	asrs	r7, r6, #31
  40294c:	3204      	adds	r2, #4
  40294e:	9207      	str	r2, [sp, #28]
  402950:	4630      	mov	r0, r6
  402952:	4639      	mov	r1, r7
  402954:	e50f      	b.n	402376 <_vfiprintf_r+0x48a>
  402956:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40295a:	f000 fe87 	bl	40366c <__retarget_lock_release_recursive>
  40295e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402962:	e71a      	b.n	40279a <_vfiprintf_r+0x8ae>
  402964:	9b02      	ldr	r3, [sp, #8]
  402966:	9302      	str	r3, [sp, #8]
  402968:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40296c:	3630      	adds	r6, #48	; 0x30
  40296e:	2301      	movs	r3, #1
  402970:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  402974:	9305      	str	r3, [sp, #20]
  402976:	e40b      	b.n	402190 <_vfiprintf_r+0x2a4>
  402978:	aa0f      	add	r2, sp, #60	; 0x3c
  40297a:	9904      	ldr	r1, [sp, #16]
  40297c:	9806      	ldr	r0, [sp, #24]
  40297e:	f7ff fa75 	bl	401e6c <__sprint_r.part.0>
  402982:	2800      	cmp	r0, #0
  402984:	f47f af64 	bne.w	402850 <_vfiprintf_r+0x964>
  402988:	9910      	ldr	r1, [sp, #64]	; 0x40
  40298a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40298c:	1c48      	adds	r0, r1, #1
  40298e:	46ca      	mov	sl, r9
  402990:	e651      	b.n	402636 <_vfiprintf_r+0x74a>
  402992:	aa0f      	add	r2, sp, #60	; 0x3c
  402994:	9904      	ldr	r1, [sp, #16]
  402996:	9806      	ldr	r0, [sp, #24]
  402998:	f7ff fa68 	bl	401e6c <__sprint_r.part.0>
  40299c:	2800      	cmp	r0, #0
  40299e:	f47f af57 	bne.w	402850 <_vfiprintf_r+0x964>
  4029a2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4029a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4029a6:	1c48      	adds	r0, r1, #1
  4029a8:	46ca      	mov	sl, r9
  4029aa:	e448      	b.n	40223e <_vfiprintf_r+0x352>
  4029ac:	2a00      	cmp	r2, #0
  4029ae:	f040 8091 	bne.w	402ad4 <_vfiprintf_r+0xbe8>
  4029b2:	2001      	movs	r0, #1
  4029b4:	4611      	mov	r1, r2
  4029b6:	46ca      	mov	sl, r9
  4029b8:	e641      	b.n	40263e <_vfiprintf_r+0x752>
  4029ba:	aa0f      	add	r2, sp, #60	; 0x3c
  4029bc:	9904      	ldr	r1, [sp, #16]
  4029be:	9806      	ldr	r0, [sp, #24]
  4029c0:	f7ff fa54 	bl	401e6c <__sprint_r.part.0>
  4029c4:	2800      	cmp	r0, #0
  4029c6:	f47f af43 	bne.w	402850 <_vfiprintf_r+0x964>
  4029ca:	9810      	ldr	r0, [sp, #64]	; 0x40
  4029cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4029ce:	3001      	adds	r0, #1
  4029d0:	46ca      	mov	sl, r9
  4029d2:	e667      	b.n	4026a4 <_vfiprintf_r+0x7b8>
  4029d4:	46d3      	mov	fp, sl
  4029d6:	e6d6      	b.n	402786 <_vfiprintf_r+0x89a>
  4029d8:	9e07      	ldr	r6, [sp, #28]
  4029da:	3607      	adds	r6, #7
  4029dc:	f026 0207 	bic.w	r2, r6, #7
  4029e0:	f102 0108 	add.w	r1, r2, #8
  4029e4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4029e8:	9107      	str	r1, [sp, #28]
  4029ea:	2201      	movs	r2, #1
  4029ec:	f7ff bbb1 	b.w	402152 <_vfiprintf_r+0x266>
  4029f0:	9e07      	ldr	r6, [sp, #28]
  4029f2:	3607      	adds	r6, #7
  4029f4:	f026 0607 	bic.w	r6, r6, #7
  4029f8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4029fc:	f106 0208 	add.w	r2, r6, #8
  402a00:	9207      	str	r2, [sp, #28]
  402a02:	4606      	mov	r6, r0
  402a04:	460f      	mov	r7, r1
  402a06:	e4b6      	b.n	402376 <_vfiprintf_r+0x48a>
  402a08:	9e07      	ldr	r6, [sp, #28]
  402a0a:	3607      	adds	r6, #7
  402a0c:	f026 0207 	bic.w	r2, r6, #7
  402a10:	f102 0108 	add.w	r1, r2, #8
  402a14:	e9d2 6700 	ldrd	r6, r7, [r2]
  402a18:	9107      	str	r1, [sp, #28]
  402a1a:	2200      	movs	r2, #0
  402a1c:	f7ff bb99 	b.w	402152 <_vfiprintf_r+0x266>
  402a20:	9e07      	ldr	r6, [sp, #28]
  402a22:	3607      	adds	r6, #7
  402a24:	f026 0107 	bic.w	r1, r6, #7
  402a28:	f101 0008 	add.w	r0, r1, #8
  402a2c:	9007      	str	r0, [sp, #28]
  402a2e:	e9d1 6700 	ldrd	r6, r7, [r1]
  402a32:	e519      	b.n	402468 <_vfiprintf_r+0x57c>
  402a34:	46cb      	mov	fp, r9
  402a36:	f7ff bbab 	b.w	402190 <_vfiprintf_r+0x2a4>
  402a3a:	252d      	movs	r5, #45	; 0x2d
  402a3c:	4276      	negs	r6, r6
  402a3e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  402a42:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402a46:	2201      	movs	r2, #1
  402a48:	f7ff bb88 	b.w	40215c <_vfiprintf_r+0x270>
  402a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402a4e:	b9b3      	cbnz	r3, 402a7e <_vfiprintf_r+0xb92>
  402a50:	4611      	mov	r1, r2
  402a52:	2001      	movs	r0, #1
  402a54:	46ca      	mov	sl, r9
  402a56:	e5f2      	b.n	40263e <_vfiprintf_r+0x752>
  402a58:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402a5c:	f000 fe06 	bl	40366c <__retarget_lock_release_recursive>
  402a60:	f04f 33ff 	mov.w	r3, #4294967295
  402a64:	9303      	str	r3, [sp, #12]
  402a66:	f7ff bb50 	b.w	40210a <_vfiprintf_r+0x21e>
  402a6a:	aa0f      	add	r2, sp, #60	; 0x3c
  402a6c:	9904      	ldr	r1, [sp, #16]
  402a6e:	9806      	ldr	r0, [sp, #24]
  402a70:	f7ff f9fc 	bl	401e6c <__sprint_r.part.0>
  402a74:	2800      	cmp	r0, #0
  402a76:	f47f aeeb 	bne.w	402850 <_vfiprintf_r+0x964>
  402a7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402a7c:	e6a9      	b.n	4027d2 <_vfiprintf_r+0x8e6>
  402a7e:	ab0e      	add	r3, sp, #56	; 0x38
  402a80:	2202      	movs	r2, #2
  402a82:	931c      	str	r3, [sp, #112]	; 0x70
  402a84:	921d      	str	r2, [sp, #116]	; 0x74
  402a86:	2001      	movs	r0, #1
  402a88:	46ca      	mov	sl, r9
  402a8a:	e5d0      	b.n	40262e <_vfiprintf_r+0x742>
  402a8c:	aa0f      	add	r2, sp, #60	; 0x3c
  402a8e:	9904      	ldr	r1, [sp, #16]
  402a90:	9806      	ldr	r0, [sp, #24]
  402a92:	f7ff f9eb 	bl	401e6c <__sprint_r.part.0>
  402a96:	2800      	cmp	r0, #0
  402a98:	f47f aeda 	bne.w	402850 <_vfiprintf_r+0x964>
  402a9c:	9910      	ldr	r1, [sp, #64]	; 0x40
  402a9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402aa0:	1c48      	adds	r0, r1, #1
  402aa2:	46ca      	mov	sl, r9
  402aa4:	e5a4      	b.n	4025f0 <_vfiprintf_r+0x704>
  402aa6:	9a07      	ldr	r2, [sp, #28]
  402aa8:	9903      	ldr	r1, [sp, #12]
  402aaa:	6813      	ldr	r3, [r2, #0]
  402aac:	17cd      	asrs	r5, r1, #31
  402aae:	4608      	mov	r0, r1
  402ab0:	3204      	adds	r2, #4
  402ab2:	4629      	mov	r1, r5
  402ab4:	9207      	str	r2, [sp, #28]
  402ab6:	e9c3 0100 	strd	r0, r1, [r3]
  402aba:	f7ff ba54 	b.w	401f66 <_vfiprintf_r+0x7a>
  402abe:	4658      	mov	r0, fp
  402ac0:	9607      	str	r6, [sp, #28]
  402ac2:	9302      	str	r3, [sp, #8]
  402ac4:	f001 fc3c 	bl	404340 <strlen>
  402ac8:	2400      	movs	r4, #0
  402aca:	9005      	str	r0, [sp, #20]
  402acc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402ad0:	f7ff bb5e 	b.w	402190 <_vfiprintf_r+0x2a4>
  402ad4:	aa0f      	add	r2, sp, #60	; 0x3c
  402ad6:	9904      	ldr	r1, [sp, #16]
  402ad8:	9806      	ldr	r0, [sp, #24]
  402ada:	f7ff f9c7 	bl	401e6c <__sprint_r.part.0>
  402ade:	2800      	cmp	r0, #0
  402ae0:	f47f aeb6 	bne.w	402850 <_vfiprintf_r+0x964>
  402ae4:	9910      	ldr	r1, [sp, #64]	; 0x40
  402ae6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402ae8:	1c48      	adds	r0, r1, #1
  402aea:	46ca      	mov	sl, r9
  402aec:	e5a7      	b.n	40263e <_vfiprintf_r+0x752>
  402aee:	9910      	ldr	r1, [sp, #64]	; 0x40
  402af0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402af2:	4e20      	ldr	r6, [pc, #128]	; (402b74 <_vfiprintf_r+0xc88>)
  402af4:	3101      	adds	r1, #1
  402af6:	f7ff bb90 	b.w	40221a <_vfiprintf_r+0x32e>
  402afa:	2c06      	cmp	r4, #6
  402afc:	bf28      	it	cs
  402afe:	2406      	movcs	r4, #6
  402b00:	9405      	str	r4, [sp, #20]
  402b02:	9607      	str	r6, [sp, #28]
  402b04:	9401      	str	r4, [sp, #4]
  402b06:	f8df b070 	ldr.w	fp, [pc, #112]	; 402b78 <_vfiprintf_r+0xc8c>
  402b0a:	e4d5      	b.n	4024b8 <_vfiprintf_r+0x5cc>
  402b0c:	9810      	ldr	r0, [sp, #64]	; 0x40
  402b0e:	4e19      	ldr	r6, [pc, #100]	; (402b74 <_vfiprintf_r+0xc88>)
  402b10:	3001      	adds	r0, #1
  402b12:	e603      	b.n	40271c <_vfiprintf_r+0x830>
  402b14:	9405      	str	r4, [sp, #20]
  402b16:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402b1a:	9607      	str	r6, [sp, #28]
  402b1c:	9302      	str	r3, [sp, #8]
  402b1e:	4604      	mov	r4, r0
  402b20:	f7ff bb36 	b.w	402190 <_vfiprintf_r+0x2a4>
  402b24:	4686      	mov	lr, r0
  402b26:	f7ff bbce 	b.w	4022c6 <_vfiprintf_r+0x3da>
  402b2a:	9806      	ldr	r0, [sp, #24]
  402b2c:	aa0f      	add	r2, sp, #60	; 0x3c
  402b2e:	4659      	mov	r1, fp
  402b30:	f7ff f99c 	bl	401e6c <__sprint_r.part.0>
  402b34:	2800      	cmp	r0, #0
  402b36:	f43f ae24 	beq.w	402782 <_vfiprintf_r+0x896>
  402b3a:	e624      	b.n	402786 <_vfiprintf_r+0x89a>
  402b3c:	9907      	ldr	r1, [sp, #28]
  402b3e:	f898 2001 	ldrb.w	r2, [r8, #1]
  402b42:	680c      	ldr	r4, [r1, #0]
  402b44:	3104      	adds	r1, #4
  402b46:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  402b4a:	46b8      	mov	r8, r7
  402b4c:	9107      	str	r1, [sp, #28]
  402b4e:	f7ff ba3f 	b.w	401fd0 <_vfiprintf_r+0xe4>
  402b52:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402b56:	e43c      	b.n	4023d2 <_vfiprintf_r+0x4e6>
  402b58:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402b5c:	e521      	b.n	4025a2 <_vfiprintf_r+0x6b6>
  402b5e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402b62:	f7ff bbf4 	b.w	40234e <_vfiprintf_r+0x462>
  402b66:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402b6a:	e491      	b.n	402490 <_vfiprintf_r+0x5a4>
  402b6c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402b70:	e469      	b.n	402446 <_vfiprintf_r+0x55a>
  402b72:	bf00      	nop
  402b74:	004050ec 	.word	0x004050ec
  402b78:	004050e4 	.word	0x004050e4

00402b7c <__sbprintf>:
  402b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402b80:	460c      	mov	r4, r1
  402b82:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  402b86:	8989      	ldrh	r1, [r1, #12]
  402b88:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402b8a:	89e5      	ldrh	r5, [r4, #14]
  402b8c:	9619      	str	r6, [sp, #100]	; 0x64
  402b8e:	f021 0102 	bic.w	r1, r1, #2
  402b92:	4606      	mov	r6, r0
  402b94:	69e0      	ldr	r0, [r4, #28]
  402b96:	f8ad 100c 	strh.w	r1, [sp, #12]
  402b9a:	4617      	mov	r7, r2
  402b9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402ba0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402ba2:	f8ad 500e 	strh.w	r5, [sp, #14]
  402ba6:	4698      	mov	r8, r3
  402ba8:	ad1a      	add	r5, sp, #104	; 0x68
  402baa:	2300      	movs	r3, #0
  402bac:	9007      	str	r0, [sp, #28]
  402bae:	a816      	add	r0, sp, #88	; 0x58
  402bb0:	9209      	str	r2, [sp, #36]	; 0x24
  402bb2:	9306      	str	r3, [sp, #24]
  402bb4:	9500      	str	r5, [sp, #0]
  402bb6:	9504      	str	r5, [sp, #16]
  402bb8:	9102      	str	r1, [sp, #8]
  402bba:	9105      	str	r1, [sp, #20]
  402bbc:	f000 fd50 	bl	403660 <__retarget_lock_init_recursive>
  402bc0:	4643      	mov	r3, r8
  402bc2:	463a      	mov	r2, r7
  402bc4:	4669      	mov	r1, sp
  402bc6:	4630      	mov	r0, r6
  402bc8:	f7ff f990 	bl	401eec <_vfiprintf_r>
  402bcc:	1e05      	subs	r5, r0, #0
  402bce:	db07      	blt.n	402be0 <__sbprintf+0x64>
  402bd0:	4630      	mov	r0, r6
  402bd2:	4669      	mov	r1, sp
  402bd4:	f000 f930 	bl	402e38 <_fflush_r>
  402bd8:	2800      	cmp	r0, #0
  402bda:	bf18      	it	ne
  402bdc:	f04f 35ff 	movne.w	r5, #4294967295
  402be0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402be4:	065b      	lsls	r3, r3, #25
  402be6:	d503      	bpl.n	402bf0 <__sbprintf+0x74>
  402be8:	89a3      	ldrh	r3, [r4, #12]
  402bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402bee:	81a3      	strh	r3, [r4, #12]
  402bf0:	9816      	ldr	r0, [sp, #88]	; 0x58
  402bf2:	f000 fd37 	bl	403664 <__retarget_lock_close_recursive>
  402bf6:	4628      	mov	r0, r5
  402bf8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  402bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00402c00 <__swsetup_r>:
  402c00:	b538      	push	{r3, r4, r5, lr}
  402c02:	4b30      	ldr	r3, [pc, #192]	; (402cc4 <__swsetup_r+0xc4>)
  402c04:	681b      	ldr	r3, [r3, #0]
  402c06:	4605      	mov	r5, r0
  402c08:	460c      	mov	r4, r1
  402c0a:	b113      	cbz	r3, 402c12 <__swsetup_r+0x12>
  402c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402c0e:	2a00      	cmp	r2, #0
  402c10:	d038      	beq.n	402c84 <__swsetup_r+0x84>
  402c12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402c16:	b293      	uxth	r3, r2
  402c18:	0718      	lsls	r0, r3, #28
  402c1a:	d50c      	bpl.n	402c36 <__swsetup_r+0x36>
  402c1c:	6920      	ldr	r0, [r4, #16]
  402c1e:	b1a8      	cbz	r0, 402c4c <__swsetup_r+0x4c>
  402c20:	f013 0201 	ands.w	r2, r3, #1
  402c24:	d01e      	beq.n	402c64 <__swsetup_r+0x64>
  402c26:	6963      	ldr	r3, [r4, #20]
  402c28:	2200      	movs	r2, #0
  402c2a:	425b      	negs	r3, r3
  402c2c:	61a3      	str	r3, [r4, #24]
  402c2e:	60a2      	str	r2, [r4, #8]
  402c30:	b1f0      	cbz	r0, 402c70 <__swsetup_r+0x70>
  402c32:	2000      	movs	r0, #0
  402c34:	bd38      	pop	{r3, r4, r5, pc}
  402c36:	06d9      	lsls	r1, r3, #27
  402c38:	d53c      	bpl.n	402cb4 <__swsetup_r+0xb4>
  402c3a:	0758      	lsls	r0, r3, #29
  402c3c:	d426      	bmi.n	402c8c <__swsetup_r+0x8c>
  402c3e:	6920      	ldr	r0, [r4, #16]
  402c40:	f042 0308 	orr.w	r3, r2, #8
  402c44:	81a3      	strh	r3, [r4, #12]
  402c46:	b29b      	uxth	r3, r3
  402c48:	2800      	cmp	r0, #0
  402c4a:	d1e9      	bne.n	402c20 <__swsetup_r+0x20>
  402c4c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402c50:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402c54:	d0e4      	beq.n	402c20 <__swsetup_r+0x20>
  402c56:	4628      	mov	r0, r5
  402c58:	4621      	mov	r1, r4
  402c5a:	f000 fd37 	bl	4036cc <__smakebuf_r>
  402c5e:	89a3      	ldrh	r3, [r4, #12]
  402c60:	6920      	ldr	r0, [r4, #16]
  402c62:	e7dd      	b.n	402c20 <__swsetup_r+0x20>
  402c64:	0799      	lsls	r1, r3, #30
  402c66:	bf58      	it	pl
  402c68:	6962      	ldrpl	r2, [r4, #20]
  402c6a:	60a2      	str	r2, [r4, #8]
  402c6c:	2800      	cmp	r0, #0
  402c6e:	d1e0      	bne.n	402c32 <__swsetup_r+0x32>
  402c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402c74:	061a      	lsls	r2, r3, #24
  402c76:	d5dd      	bpl.n	402c34 <__swsetup_r+0x34>
  402c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402c7c:	81a3      	strh	r3, [r4, #12]
  402c7e:	f04f 30ff 	mov.w	r0, #4294967295
  402c82:	bd38      	pop	{r3, r4, r5, pc}
  402c84:	4618      	mov	r0, r3
  402c86:	f000 f92f 	bl	402ee8 <__sinit>
  402c8a:	e7c2      	b.n	402c12 <__swsetup_r+0x12>
  402c8c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402c8e:	b151      	cbz	r1, 402ca6 <__swsetup_r+0xa6>
  402c90:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402c94:	4299      	cmp	r1, r3
  402c96:	d004      	beq.n	402ca2 <__swsetup_r+0xa2>
  402c98:	4628      	mov	r0, r5
  402c9a:	f000 fa4b 	bl	403134 <_free_r>
  402c9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402ca2:	2300      	movs	r3, #0
  402ca4:	6323      	str	r3, [r4, #48]	; 0x30
  402ca6:	2300      	movs	r3, #0
  402ca8:	6920      	ldr	r0, [r4, #16]
  402caa:	6063      	str	r3, [r4, #4]
  402cac:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402cb0:	6020      	str	r0, [r4, #0]
  402cb2:	e7c5      	b.n	402c40 <__swsetup_r+0x40>
  402cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402cb8:	2309      	movs	r3, #9
  402cba:	602b      	str	r3, [r5, #0]
  402cbc:	f04f 30ff 	mov.w	r0, #4294967295
  402cc0:	81a2      	strh	r2, [r4, #12]
  402cc2:	bd38      	pop	{r3, r4, r5, pc}
  402cc4:	20400014 	.word	0x20400014

00402cc8 <register_fini>:
  402cc8:	4b02      	ldr	r3, [pc, #8]	; (402cd4 <register_fini+0xc>)
  402cca:	b113      	cbz	r3, 402cd2 <register_fini+0xa>
  402ccc:	4802      	ldr	r0, [pc, #8]	; (402cd8 <register_fini+0x10>)
  402cce:	f000 b80d 	b.w	402cec <atexit>
  402cd2:	4770      	bx	lr
  402cd4:	00000000 	.word	0x00000000
  402cd8:	00402f59 	.word	0x00402f59

00402cdc <abort>:
  402cdc:	b508      	push	{r3, lr}
  402cde:	2006      	movs	r0, #6
  402ce0:	f001 fab6 	bl	404250 <raise>
  402ce4:	2001      	movs	r0, #1
  402ce6:	f7fe fb01 	bl	4012ec <_exit>
  402cea:	bf00      	nop

00402cec <atexit>:
  402cec:	2300      	movs	r3, #0
  402cee:	4601      	mov	r1, r0
  402cf0:	461a      	mov	r2, r3
  402cf2:	4618      	mov	r0, r3
  402cf4:	f001 bc38 	b.w	404568 <__register_exitproc>

00402cf8 <__sflush_r>:
  402cf8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  402cfc:	b29a      	uxth	r2, r3
  402cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402d02:	460d      	mov	r5, r1
  402d04:	0711      	lsls	r1, r2, #28
  402d06:	4680      	mov	r8, r0
  402d08:	d43a      	bmi.n	402d80 <__sflush_r+0x88>
  402d0a:	686a      	ldr	r2, [r5, #4]
  402d0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402d10:	2a00      	cmp	r2, #0
  402d12:	81ab      	strh	r3, [r5, #12]
  402d14:	dd6f      	ble.n	402df6 <__sflush_r+0xfe>
  402d16:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402d18:	2c00      	cmp	r4, #0
  402d1a:	d049      	beq.n	402db0 <__sflush_r+0xb8>
  402d1c:	2200      	movs	r2, #0
  402d1e:	b29b      	uxth	r3, r3
  402d20:	f8d8 6000 	ldr.w	r6, [r8]
  402d24:	f8c8 2000 	str.w	r2, [r8]
  402d28:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  402d2c:	d067      	beq.n	402dfe <__sflush_r+0x106>
  402d2e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402d30:	075f      	lsls	r7, r3, #29
  402d32:	d505      	bpl.n	402d40 <__sflush_r+0x48>
  402d34:	6869      	ldr	r1, [r5, #4]
  402d36:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402d38:	1a52      	subs	r2, r2, r1
  402d3a:	b10b      	cbz	r3, 402d40 <__sflush_r+0x48>
  402d3c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402d3e:	1ad2      	subs	r2, r2, r3
  402d40:	2300      	movs	r3, #0
  402d42:	69e9      	ldr	r1, [r5, #28]
  402d44:	4640      	mov	r0, r8
  402d46:	47a0      	blx	r4
  402d48:	1c44      	adds	r4, r0, #1
  402d4a:	d03c      	beq.n	402dc6 <__sflush_r+0xce>
  402d4c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402d50:	692a      	ldr	r2, [r5, #16]
  402d52:	602a      	str	r2, [r5, #0]
  402d54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402d58:	2200      	movs	r2, #0
  402d5a:	81ab      	strh	r3, [r5, #12]
  402d5c:	04db      	lsls	r3, r3, #19
  402d5e:	606a      	str	r2, [r5, #4]
  402d60:	d447      	bmi.n	402df2 <__sflush_r+0xfa>
  402d62:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402d64:	f8c8 6000 	str.w	r6, [r8]
  402d68:	b311      	cbz	r1, 402db0 <__sflush_r+0xb8>
  402d6a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  402d6e:	4299      	cmp	r1, r3
  402d70:	d002      	beq.n	402d78 <__sflush_r+0x80>
  402d72:	4640      	mov	r0, r8
  402d74:	f000 f9de 	bl	403134 <_free_r>
  402d78:	2000      	movs	r0, #0
  402d7a:	6328      	str	r0, [r5, #48]	; 0x30
  402d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402d80:	692e      	ldr	r6, [r5, #16]
  402d82:	b1ae      	cbz	r6, 402db0 <__sflush_r+0xb8>
  402d84:	682c      	ldr	r4, [r5, #0]
  402d86:	602e      	str	r6, [r5, #0]
  402d88:	0791      	lsls	r1, r2, #30
  402d8a:	bf0c      	ite	eq
  402d8c:	696b      	ldreq	r3, [r5, #20]
  402d8e:	2300      	movne	r3, #0
  402d90:	1ba4      	subs	r4, r4, r6
  402d92:	60ab      	str	r3, [r5, #8]
  402d94:	e00a      	b.n	402dac <__sflush_r+0xb4>
  402d96:	4623      	mov	r3, r4
  402d98:	4632      	mov	r2, r6
  402d9a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402d9c:	69e9      	ldr	r1, [r5, #28]
  402d9e:	4640      	mov	r0, r8
  402da0:	47b8      	blx	r7
  402da2:	2800      	cmp	r0, #0
  402da4:	eba4 0400 	sub.w	r4, r4, r0
  402da8:	4406      	add	r6, r0
  402daa:	dd04      	ble.n	402db6 <__sflush_r+0xbe>
  402dac:	2c00      	cmp	r4, #0
  402dae:	dcf2      	bgt.n	402d96 <__sflush_r+0x9e>
  402db0:	2000      	movs	r0, #0
  402db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402db6:	89ab      	ldrh	r3, [r5, #12]
  402db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402dbc:	81ab      	strh	r3, [r5, #12]
  402dbe:	f04f 30ff 	mov.w	r0, #4294967295
  402dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402dc6:	f8d8 4000 	ldr.w	r4, [r8]
  402dca:	2c1d      	cmp	r4, #29
  402dcc:	d8f3      	bhi.n	402db6 <__sflush_r+0xbe>
  402dce:	4b19      	ldr	r3, [pc, #100]	; (402e34 <__sflush_r+0x13c>)
  402dd0:	40e3      	lsrs	r3, r4
  402dd2:	43db      	mvns	r3, r3
  402dd4:	f013 0301 	ands.w	r3, r3, #1
  402dd8:	d1ed      	bne.n	402db6 <__sflush_r+0xbe>
  402dda:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  402dde:	606b      	str	r3, [r5, #4]
  402de0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402de4:	6929      	ldr	r1, [r5, #16]
  402de6:	81ab      	strh	r3, [r5, #12]
  402de8:	04da      	lsls	r2, r3, #19
  402dea:	6029      	str	r1, [r5, #0]
  402dec:	d5b9      	bpl.n	402d62 <__sflush_r+0x6a>
  402dee:	2c00      	cmp	r4, #0
  402df0:	d1b7      	bne.n	402d62 <__sflush_r+0x6a>
  402df2:	6528      	str	r0, [r5, #80]	; 0x50
  402df4:	e7b5      	b.n	402d62 <__sflush_r+0x6a>
  402df6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402df8:	2a00      	cmp	r2, #0
  402dfa:	dc8c      	bgt.n	402d16 <__sflush_r+0x1e>
  402dfc:	e7d8      	b.n	402db0 <__sflush_r+0xb8>
  402dfe:	2301      	movs	r3, #1
  402e00:	69e9      	ldr	r1, [r5, #28]
  402e02:	4640      	mov	r0, r8
  402e04:	47a0      	blx	r4
  402e06:	1c43      	adds	r3, r0, #1
  402e08:	4602      	mov	r2, r0
  402e0a:	d002      	beq.n	402e12 <__sflush_r+0x11a>
  402e0c:	89ab      	ldrh	r3, [r5, #12]
  402e0e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402e10:	e78e      	b.n	402d30 <__sflush_r+0x38>
  402e12:	f8d8 3000 	ldr.w	r3, [r8]
  402e16:	2b00      	cmp	r3, #0
  402e18:	d0f8      	beq.n	402e0c <__sflush_r+0x114>
  402e1a:	2b1d      	cmp	r3, #29
  402e1c:	d001      	beq.n	402e22 <__sflush_r+0x12a>
  402e1e:	2b16      	cmp	r3, #22
  402e20:	d102      	bne.n	402e28 <__sflush_r+0x130>
  402e22:	f8c8 6000 	str.w	r6, [r8]
  402e26:	e7c3      	b.n	402db0 <__sflush_r+0xb8>
  402e28:	89ab      	ldrh	r3, [r5, #12]
  402e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402e2e:	81ab      	strh	r3, [r5, #12]
  402e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402e34:	20400001 	.word	0x20400001

00402e38 <_fflush_r>:
  402e38:	b538      	push	{r3, r4, r5, lr}
  402e3a:	460d      	mov	r5, r1
  402e3c:	4604      	mov	r4, r0
  402e3e:	b108      	cbz	r0, 402e44 <_fflush_r+0xc>
  402e40:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402e42:	b1bb      	cbz	r3, 402e74 <_fflush_r+0x3c>
  402e44:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402e48:	b188      	cbz	r0, 402e6e <_fflush_r+0x36>
  402e4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402e4c:	07db      	lsls	r3, r3, #31
  402e4e:	d401      	bmi.n	402e54 <_fflush_r+0x1c>
  402e50:	0581      	lsls	r1, r0, #22
  402e52:	d517      	bpl.n	402e84 <_fflush_r+0x4c>
  402e54:	4620      	mov	r0, r4
  402e56:	4629      	mov	r1, r5
  402e58:	f7ff ff4e 	bl	402cf8 <__sflush_r>
  402e5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402e5e:	07da      	lsls	r2, r3, #31
  402e60:	4604      	mov	r4, r0
  402e62:	d402      	bmi.n	402e6a <_fflush_r+0x32>
  402e64:	89ab      	ldrh	r3, [r5, #12]
  402e66:	059b      	lsls	r3, r3, #22
  402e68:	d507      	bpl.n	402e7a <_fflush_r+0x42>
  402e6a:	4620      	mov	r0, r4
  402e6c:	bd38      	pop	{r3, r4, r5, pc}
  402e6e:	4604      	mov	r4, r0
  402e70:	4620      	mov	r0, r4
  402e72:	bd38      	pop	{r3, r4, r5, pc}
  402e74:	f000 f838 	bl	402ee8 <__sinit>
  402e78:	e7e4      	b.n	402e44 <_fflush_r+0xc>
  402e7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402e7c:	f000 fbf6 	bl	40366c <__retarget_lock_release_recursive>
  402e80:	4620      	mov	r0, r4
  402e82:	bd38      	pop	{r3, r4, r5, pc}
  402e84:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402e86:	f000 fbef 	bl	403668 <__retarget_lock_acquire_recursive>
  402e8a:	e7e3      	b.n	402e54 <_fflush_r+0x1c>

00402e8c <_cleanup_r>:
  402e8c:	4901      	ldr	r1, [pc, #4]	; (402e94 <_cleanup_r+0x8>)
  402e8e:	f000 bbaf 	b.w	4035f0 <_fwalk_reent>
  402e92:	bf00      	nop
  402e94:	00404651 	.word	0x00404651

00402e98 <std.isra.0>:
  402e98:	b510      	push	{r4, lr}
  402e9a:	2300      	movs	r3, #0
  402e9c:	4604      	mov	r4, r0
  402e9e:	8181      	strh	r1, [r0, #12]
  402ea0:	81c2      	strh	r2, [r0, #14]
  402ea2:	6003      	str	r3, [r0, #0]
  402ea4:	6043      	str	r3, [r0, #4]
  402ea6:	6083      	str	r3, [r0, #8]
  402ea8:	6643      	str	r3, [r0, #100]	; 0x64
  402eaa:	6103      	str	r3, [r0, #16]
  402eac:	6143      	str	r3, [r0, #20]
  402eae:	6183      	str	r3, [r0, #24]
  402eb0:	4619      	mov	r1, r3
  402eb2:	2208      	movs	r2, #8
  402eb4:	305c      	adds	r0, #92	; 0x5c
  402eb6:	f7fe febb 	bl	401c30 <memset>
  402eba:	4807      	ldr	r0, [pc, #28]	; (402ed8 <std.isra.0+0x40>)
  402ebc:	4907      	ldr	r1, [pc, #28]	; (402edc <std.isra.0+0x44>)
  402ebe:	4a08      	ldr	r2, [pc, #32]	; (402ee0 <std.isra.0+0x48>)
  402ec0:	4b08      	ldr	r3, [pc, #32]	; (402ee4 <std.isra.0+0x4c>)
  402ec2:	6220      	str	r0, [r4, #32]
  402ec4:	61e4      	str	r4, [r4, #28]
  402ec6:	6261      	str	r1, [r4, #36]	; 0x24
  402ec8:	62a2      	str	r2, [r4, #40]	; 0x28
  402eca:	62e3      	str	r3, [r4, #44]	; 0x2c
  402ecc:	f104 0058 	add.w	r0, r4, #88	; 0x58
  402ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402ed4:	f000 bbc4 	b.w	403660 <__retarget_lock_init_recursive>
  402ed8:	0040428d 	.word	0x0040428d
  402edc:	004042b1 	.word	0x004042b1
  402ee0:	004042ed 	.word	0x004042ed
  402ee4:	0040430d 	.word	0x0040430d

00402ee8 <__sinit>:
  402ee8:	b510      	push	{r4, lr}
  402eea:	4604      	mov	r4, r0
  402eec:	4812      	ldr	r0, [pc, #72]	; (402f38 <__sinit+0x50>)
  402eee:	f000 fbbb 	bl	403668 <__retarget_lock_acquire_recursive>
  402ef2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402ef4:	b9d2      	cbnz	r2, 402f2c <__sinit+0x44>
  402ef6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  402efa:	4810      	ldr	r0, [pc, #64]	; (402f3c <__sinit+0x54>)
  402efc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  402f00:	2103      	movs	r1, #3
  402f02:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  402f06:	63e0      	str	r0, [r4, #60]	; 0x3c
  402f08:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  402f0c:	6860      	ldr	r0, [r4, #4]
  402f0e:	2104      	movs	r1, #4
  402f10:	f7ff ffc2 	bl	402e98 <std.isra.0>
  402f14:	2201      	movs	r2, #1
  402f16:	2109      	movs	r1, #9
  402f18:	68a0      	ldr	r0, [r4, #8]
  402f1a:	f7ff ffbd 	bl	402e98 <std.isra.0>
  402f1e:	2202      	movs	r2, #2
  402f20:	2112      	movs	r1, #18
  402f22:	68e0      	ldr	r0, [r4, #12]
  402f24:	f7ff ffb8 	bl	402e98 <std.isra.0>
  402f28:	2301      	movs	r3, #1
  402f2a:	63a3      	str	r3, [r4, #56]	; 0x38
  402f2c:	4802      	ldr	r0, [pc, #8]	; (402f38 <__sinit+0x50>)
  402f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402f32:	f000 bb9b 	b.w	40366c <__retarget_lock_release_recursive>
  402f36:	bf00      	nop
  402f38:	204014d8 	.word	0x204014d8
  402f3c:	00402e8d 	.word	0x00402e8d

00402f40 <__sfp_lock_acquire>:
  402f40:	4801      	ldr	r0, [pc, #4]	; (402f48 <__sfp_lock_acquire+0x8>)
  402f42:	f000 bb91 	b.w	403668 <__retarget_lock_acquire_recursive>
  402f46:	bf00      	nop
  402f48:	204014ec 	.word	0x204014ec

00402f4c <__sfp_lock_release>:
  402f4c:	4801      	ldr	r0, [pc, #4]	; (402f54 <__sfp_lock_release+0x8>)
  402f4e:	f000 bb8d 	b.w	40366c <__retarget_lock_release_recursive>
  402f52:	bf00      	nop
  402f54:	204014ec 	.word	0x204014ec

00402f58 <__libc_fini_array>:
  402f58:	b538      	push	{r3, r4, r5, lr}
  402f5a:	4c0a      	ldr	r4, [pc, #40]	; (402f84 <__libc_fini_array+0x2c>)
  402f5c:	4d0a      	ldr	r5, [pc, #40]	; (402f88 <__libc_fini_array+0x30>)
  402f5e:	1b64      	subs	r4, r4, r5
  402f60:	10a4      	asrs	r4, r4, #2
  402f62:	d00a      	beq.n	402f7a <__libc_fini_array+0x22>
  402f64:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402f68:	3b01      	subs	r3, #1
  402f6a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402f6e:	3c01      	subs	r4, #1
  402f70:	f855 3904 	ldr.w	r3, [r5], #-4
  402f74:	4798      	blx	r3
  402f76:	2c00      	cmp	r4, #0
  402f78:	d1f9      	bne.n	402f6e <__libc_fini_array+0x16>
  402f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402f7e:	f002 b959 	b.w	405234 <_fini>
  402f82:	bf00      	nop
  402f84:	00405244 	.word	0x00405244
  402f88:	00405240 	.word	0x00405240

00402f8c <__fputwc>:
  402f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402f90:	b082      	sub	sp, #8
  402f92:	4680      	mov	r8, r0
  402f94:	4689      	mov	r9, r1
  402f96:	4614      	mov	r4, r2
  402f98:	f000 fb54 	bl	403644 <__locale_mb_cur_max>
  402f9c:	2801      	cmp	r0, #1
  402f9e:	d036      	beq.n	40300e <__fputwc+0x82>
  402fa0:	464a      	mov	r2, r9
  402fa2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402fa6:	a901      	add	r1, sp, #4
  402fa8:	4640      	mov	r0, r8
  402faa:	f001 fa8f 	bl	4044cc <_wcrtomb_r>
  402fae:	1c42      	adds	r2, r0, #1
  402fb0:	4606      	mov	r6, r0
  402fb2:	d025      	beq.n	403000 <__fputwc+0x74>
  402fb4:	b3a8      	cbz	r0, 403022 <__fputwc+0x96>
  402fb6:	f89d e004 	ldrb.w	lr, [sp, #4]
  402fba:	2500      	movs	r5, #0
  402fbc:	f10d 0a04 	add.w	sl, sp, #4
  402fc0:	e009      	b.n	402fd6 <__fputwc+0x4a>
  402fc2:	6823      	ldr	r3, [r4, #0]
  402fc4:	1c5a      	adds	r2, r3, #1
  402fc6:	6022      	str	r2, [r4, #0]
  402fc8:	f883 e000 	strb.w	lr, [r3]
  402fcc:	3501      	adds	r5, #1
  402fce:	42b5      	cmp	r5, r6
  402fd0:	d227      	bcs.n	403022 <__fputwc+0x96>
  402fd2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  402fd6:	68a3      	ldr	r3, [r4, #8]
  402fd8:	3b01      	subs	r3, #1
  402fda:	2b00      	cmp	r3, #0
  402fdc:	60a3      	str	r3, [r4, #8]
  402fde:	daf0      	bge.n	402fc2 <__fputwc+0x36>
  402fe0:	69a7      	ldr	r7, [r4, #24]
  402fe2:	42bb      	cmp	r3, r7
  402fe4:	4671      	mov	r1, lr
  402fe6:	4622      	mov	r2, r4
  402fe8:	4640      	mov	r0, r8
  402fea:	db02      	blt.n	402ff2 <__fputwc+0x66>
  402fec:	f1be 0f0a 	cmp.w	lr, #10
  402ff0:	d1e7      	bne.n	402fc2 <__fputwc+0x36>
  402ff2:	f001 fa13 	bl	40441c <__swbuf_r>
  402ff6:	1c43      	adds	r3, r0, #1
  402ff8:	d1e8      	bne.n	402fcc <__fputwc+0x40>
  402ffa:	b002      	add	sp, #8
  402ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403000:	89a3      	ldrh	r3, [r4, #12]
  403002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403006:	81a3      	strh	r3, [r4, #12]
  403008:	b002      	add	sp, #8
  40300a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40300e:	f109 33ff 	add.w	r3, r9, #4294967295
  403012:	2bfe      	cmp	r3, #254	; 0xfe
  403014:	d8c4      	bhi.n	402fa0 <__fputwc+0x14>
  403016:	fa5f fe89 	uxtb.w	lr, r9
  40301a:	4606      	mov	r6, r0
  40301c:	f88d e004 	strb.w	lr, [sp, #4]
  403020:	e7cb      	b.n	402fba <__fputwc+0x2e>
  403022:	4648      	mov	r0, r9
  403024:	b002      	add	sp, #8
  403026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40302a:	bf00      	nop

0040302c <_fputwc_r>:
  40302c:	b530      	push	{r4, r5, lr}
  40302e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  403030:	f013 0f01 	tst.w	r3, #1
  403034:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  403038:	4614      	mov	r4, r2
  40303a:	b083      	sub	sp, #12
  40303c:	4605      	mov	r5, r0
  40303e:	b29a      	uxth	r2, r3
  403040:	d101      	bne.n	403046 <_fputwc_r+0x1a>
  403042:	0590      	lsls	r0, r2, #22
  403044:	d51c      	bpl.n	403080 <_fputwc_r+0x54>
  403046:	0490      	lsls	r0, r2, #18
  403048:	d406      	bmi.n	403058 <_fputwc_r+0x2c>
  40304a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40304c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403050:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403054:	81a3      	strh	r3, [r4, #12]
  403056:	6662      	str	r2, [r4, #100]	; 0x64
  403058:	4628      	mov	r0, r5
  40305a:	4622      	mov	r2, r4
  40305c:	f7ff ff96 	bl	402f8c <__fputwc>
  403060:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403062:	07da      	lsls	r2, r3, #31
  403064:	4605      	mov	r5, r0
  403066:	d402      	bmi.n	40306e <_fputwc_r+0x42>
  403068:	89a3      	ldrh	r3, [r4, #12]
  40306a:	059b      	lsls	r3, r3, #22
  40306c:	d502      	bpl.n	403074 <_fputwc_r+0x48>
  40306e:	4628      	mov	r0, r5
  403070:	b003      	add	sp, #12
  403072:	bd30      	pop	{r4, r5, pc}
  403074:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403076:	f000 faf9 	bl	40366c <__retarget_lock_release_recursive>
  40307a:	4628      	mov	r0, r5
  40307c:	b003      	add	sp, #12
  40307e:	bd30      	pop	{r4, r5, pc}
  403080:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403082:	9101      	str	r1, [sp, #4]
  403084:	f000 faf0 	bl	403668 <__retarget_lock_acquire_recursive>
  403088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40308c:	9901      	ldr	r1, [sp, #4]
  40308e:	b29a      	uxth	r2, r3
  403090:	e7d9      	b.n	403046 <_fputwc_r+0x1a>
  403092:	bf00      	nop

00403094 <_malloc_trim_r>:
  403094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403096:	4f24      	ldr	r7, [pc, #144]	; (403128 <_malloc_trim_r+0x94>)
  403098:	460c      	mov	r4, r1
  40309a:	4606      	mov	r6, r0
  40309c:	f000 fee4 	bl	403e68 <__malloc_lock>
  4030a0:	68bb      	ldr	r3, [r7, #8]
  4030a2:	685d      	ldr	r5, [r3, #4]
  4030a4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4030a8:	310f      	adds	r1, #15
  4030aa:	f025 0503 	bic.w	r5, r5, #3
  4030ae:	4429      	add	r1, r5
  4030b0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4030b4:	f021 010f 	bic.w	r1, r1, #15
  4030b8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4030bc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4030c0:	db07      	blt.n	4030d2 <_malloc_trim_r+0x3e>
  4030c2:	2100      	movs	r1, #0
  4030c4:	4630      	mov	r0, r6
  4030c6:	f001 f881 	bl	4041cc <_sbrk_r>
  4030ca:	68bb      	ldr	r3, [r7, #8]
  4030cc:	442b      	add	r3, r5
  4030ce:	4298      	cmp	r0, r3
  4030d0:	d004      	beq.n	4030dc <_malloc_trim_r+0x48>
  4030d2:	4630      	mov	r0, r6
  4030d4:	f000 fece 	bl	403e74 <__malloc_unlock>
  4030d8:	2000      	movs	r0, #0
  4030da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4030dc:	4261      	negs	r1, r4
  4030de:	4630      	mov	r0, r6
  4030e0:	f001 f874 	bl	4041cc <_sbrk_r>
  4030e4:	3001      	adds	r0, #1
  4030e6:	d00d      	beq.n	403104 <_malloc_trim_r+0x70>
  4030e8:	4b10      	ldr	r3, [pc, #64]	; (40312c <_malloc_trim_r+0x98>)
  4030ea:	68ba      	ldr	r2, [r7, #8]
  4030ec:	6819      	ldr	r1, [r3, #0]
  4030ee:	1b2d      	subs	r5, r5, r4
  4030f0:	f045 0501 	orr.w	r5, r5, #1
  4030f4:	4630      	mov	r0, r6
  4030f6:	1b09      	subs	r1, r1, r4
  4030f8:	6055      	str	r5, [r2, #4]
  4030fa:	6019      	str	r1, [r3, #0]
  4030fc:	f000 feba 	bl	403e74 <__malloc_unlock>
  403100:	2001      	movs	r0, #1
  403102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403104:	2100      	movs	r1, #0
  403106:	4630      	mov	r0, r6
  403108:	f001 f860 	bl	4041cc <_sbrk_r>
  40310c:	68ba      	ldr	r2, [r7, #8]
  40310e:	1a83      	subs	r3, r0, r2
  403110:	2b0f      	cmp	r3, #15
  403112:	ddde      	ble.n	4030d2 <_malloc_trim_r+0x3e>
  403114:	4c06      	ldr	r4, [pc, #24]	; (403130 <_malloc_trim_r+0x9c>)
  403116:	4905      	ldr	r1, [pc, #20]	; (40312c <_malloc_trim_r+0x98>)
  403118:	6824      	ldr	r4, [r4, #0]
  40311a:	f043 0301 	orr.w	r3, r3, #1
  40311e:	1b00      	subs	r0, r0, r4
  403120:	6053      	str	r3, [r2, #4]
  403122:	6008      	str	r0, [r1, #0]
  403124:	e7d5      	b.n	4030d2 <_malloc_trim_r+0x3e>
  403126:	bf00      	nop
  403128:	204005b0 	.word	0x204005b0
  40312c:	2040148c 	.word	0x2040148c
  403130:	204009b8 	.word	0x204009b8

00403134 <_free_r>:
  403134:	2900      	cmp	r1, #0
  403136:	d044      	beq.n	4031c2 <_free_r+0x8e>
  403138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40313c:	460d      	mov	r5, r1
  40313e:	4680      	mov	r8, r0
  403140:	f000 fe92 	bl	403e68 <__malloc_lock>
  403144:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403148:	4969      	ldr	r1, [pc, #420]	; (4032f0 <_free_r+0x1bc>)
  40314a:	f027 0301 	bic.w	r3, r7, #1
  40314e:	f1a5 0408 	sub.w	r4, r5, #8
  403152:	18e2      	adds	r2, r4, r3
  403154:	688e      	ldr	r6, [r1, #8]
  403156:	6850      	ldr	r0, [r2, #4]
  403158:	42b2      	cmp	r2, r6
  40315a:	f020 0003 	bic.w	r0, r0, #3
  40315e:	d05e      	beq.n	40321e <_free_r+0xea>
  403160:	07fe      	lsls	r6, r7, #31
  403162:	6050      	str	r0, [r2, #4]
  403164:	d40b      	bmi.n	40317e <_free_r+0x4a>
  403166:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40316a:	1be4      	subs	r4, r4, r7
  40316c:	f101 0e08 	add.w	lr, r1, #8
  403170:	68a5      	ldr	r5, [r4, #8]
  403172:	4575      	cmp	r5, lr
  403174:	443b      	add	r3, r7
  403176:	d06d      	beq.n	403254 <_free_r+0x120>
  403178:	68e7      	ldr	r7, [r4, #12]
  40317a:	60ef      	str	r7, [r5, #12]
  40317c:	60bd      	str	r5, [r7, #8]
  40317e:	1815      	adds	r5, r2, r0
  403180:	686d      	ldr	r5, [r5, #4]
  403182:	07ed      	lsls	r5, r5, #31
  403184:	d53e      	bpl.n	403204 <_free_r+0xd0>
  403186:	f043 0201 	orr.w	r2, r3, #1
  40318a:	6062      	str	r2, [r4, #4]
  40318c:	50e3      	str	r3, [r4, r3]
  40318e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403192:	d217      	bcs.n	4031c4 <_free_r+0x90>
  403194:	08db      	lsrs	r3, r3, #3
  403196:	1c58      	adds	r0, r3, #1
  403198:	109a      	asrs	r2, r3, #2
  40319a:	684d      	ldr	r5, [r1, #4]
  40319c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4031a0:	60a7      	str	r7, [r4, #8]
  4031a2:	2301      	movs	r3, #1
  4031a4:	4093      	lsls	r3, r2
  4031a6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4031aa:	432b      	orrs	r3, r5
  4031ac:	3a08      	subs	r2, #8
  4031ae:	60e2      	str	r2, [r4, #12]
  4031b0:	604b      	str	r3, [r1, #4]
  4031b2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4031b6:	60fc      	str	r4, [r7, #12]
  4031b8:	4640      	mov	r0, r8
  4031ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4031be:	f000 be59 	b.w	403e74 <__malloc_unlock>
  4031c2:	4770      	bx	lr
  4031c4:	0a5a      	lsrs	r2, r3, #9
  4031c6:	2a04      	cmp	r2, #4
  4031c8:	d852      	bhi.n	403270 <_free_r+0x13c>
  4031ca:	099a      	lsrs	r2, r3, #6
  4031cc:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4031d0:	00ff      	lsls	r7, r7, #3
  4031d2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4031d6:	19c8      	adds	r0, r1, r7
  4031d8:	59ca      	ldr	r2, [r1, r7]
  4031da:	3808      	subs	r0, #8
  4031dc:	4290      	cmp	r0, r2
  4031de:	d04f      	beq.n	403280 <_free_r+0x14c>
  4031e0:	6851      	ldr	r1, [r2, #4]
  4031e2:	f021 0103 	bic.w	r1, r1, #3
  4031e6:	428b      	cmp	r3, r1
  4031e8:	d232      	bcs.n	403250 <_free_r+0x11c>
  4031ea:	6892      	ldr	r2, [r2, #8]
  4031ec:	4290      	cmp	r0, r2
  4031ee:	d1f7      	bne.n	4031e0 <_free_r+0xac>
  4031f0:	68c3      	ldr	r3, [r0, #12]
  4031f2:	60a0      	str	r0, [r4, #8]
  4031f4:	60e3      	str	r3, [r4, #12]
  4031f6:	609c      	str	r4, [r3, #8]
  4031f8:	60c4      	str	r4, [r0, #12]
  4031fa:	4640      	mov	r0, r8
  4031fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403200:	f000 be38 	b.w	403e74 <__malloc_unlock>
  403204:	6895      	ldr	r5, [r2, #8]
  403206:	4f3b      	ldr	r7, [pc, #236]	; (4032f4 <_free_r+0x1c0>)
  403208:	42bd      	cmp	r5, r7
  40320a:	4403      	add	r3, r0
  40320c:	d040      	beq.n	403290 <_free_r+0x15c>
  40320e:	68d0      	ldr	r0, [r2, #12]
  403210:	60e8      	str	r0, [r5, #12]
  403212:	f043 0201 	orr.w	r2, r3, #1
  403216:	6085      	str	r5, [r0, #8]
  403218:	6062      	str	r2, [r4, #4]
  40321a:	50e3      	str	r3, [r4, r3]
  40321c:	e7b7      	b.n	40318e <_free_r+0x5a>
  40321e:	07ff      	lsls	r7, r7, #31
  403220:	4403      	add	r3, r0
  403222:	d407      	bmi.n	403234 <_free_r+0x100>
  403224:	f855 2c08 	ldr.w	r2, [r5, #-8]
  403228:	1aa4      	subs	r4, r4, r2
  40322a:	4413      	add	r3, r2
  40322c:	68a0      	ldr	r0, [r4, #8]
  40322e:	68e2      	ldr	r2, [r4, #12]
  403230:	60c2      	str	r2, [r0, #12]
  403232:	6090      	str	r0, [r2, #8]
  403234:	4a30      	ldr	r2, [pc, #192]	; (4032f8 <_free_r+0x1c4>)
  403236:	6812      	ldr	r2, [r2, #0]
  403238:	f043 0001 	orr.w	r0, r3, #1
  40323c:	4293      	cmp	r3, r2
  40323e:	6060      	str	r0, [r4, #4]
  403240:	608c      	str	r4, [r1, #8]
  403242:	d3b9      	bcc.n	4031b8 <_free_r+0x84>
  403244:	4b2d      	ldr	r3, [pc, #180]	; (4032fc <_free_r+0x1c8>)
  403246:	4640      	mov	r0, r8
  403248:	6819      	ldr	r1, [r3, #0]
  40324a:	f7ff ff23 	bl	403094 <_malloc_trim_r>
  40324e:	e7b3      	b.n	4031b8 <_free_r+0x84>
  403250:	4610      	mov	r0, r2
  403252:	e7cd      	b.n	4031f0 <_free_r+0xbc>
  403254:	1811      	adds	r1, r2, r0
  403256:	6849      	ldr	r1, [r1, #4]
  403258:	07c9      	lsls	r1, r1, #31
  40325a:	d444      	bmi.n	4032e6 <_free_r+0x1b2>
  40325c:	6891      	ldr	r1, [r2, #8]
  40325e:	68d2      	ldr	r2, [r2, #12]
  403260:	60ca      	str	r2, [r1, #12]
  403262:	4403      	add	r3, r0
  403264:	f043 0001 	orr.w	r0, r3, #1
  403268:	6091      	str	r1, [r2, #8]
  40326a:	6060      	str	r0, [r4, #4]
  40326c:	50e3      	str	r3, [r4, r3]
  40326e:	e7a3      	b.n	4031b8 <_free_r+0x84>
  403270:	2a14      	cmp	r2, #20
  403272:	d816      	bhi.n	4032a2 <_free_r+0x16e>
  403274:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  403278:	00ff      	lsls	r7, r7, #3
  40327a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40327e:	e7aa      	b.n	4031d6 <_free_r+0xa2>
  403280:	10aa      	asrs	r2, r5, #2
  403282:	2301      	movs	r3, #1
  403284:	684d      	ldr	r5, [r1, #4]
  403286:	4093      	lsls	r3, r2
  403288:	432b      	orrs	r3, r5
  40328a:	604b      	str	r3, [r1, #4]
  40328c:	4603      	mov	r3, r0
  40328e:	e7b0      	b.n	4031f2 <_free_r+0xbe>
  403290:	f043 0201 	orr.w	r2, r3, #1
  403294:	614c      	str	r4, [r1, #20]
  403296:	610c      	str	r4, [r1, #16]
  403298:	60e5      	str	r5, [r4, #12]
  40329a:	60a5      	str	r5, [r4, #8]
  40329c:	6062      	str	r2, [r4, #4]
  40329e:	50e3      	str	r3, [r4, r3]
  4032a0:	e78a      	b.n	4031b8 <_free_r+0x84>
  4032a2:	2a54      	cmp	r2, #84	; 0x54
  4032a4:	d806      	bhi.n	4032b4 <_free_r+0x180>
  4032a6:	0b1a      	lsrs	r2, r3, #12
  4032a8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4032ac:	00ff      	lsls	r7, r7, #3
  4032ae:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4032b2:	e790      	b.n	4031d6 <_free_r+0xa2>
  4032b4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4032b8:	d806      	bhi.n	4032c8 <_free_r+0x194>
  4032ba:	0bda      	lsrs	r2, r3, #15
  4032bc:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4032c0:	00ff      	lsls	r7, r7, #3
  4032c2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4032c6:	e786      	b.n	4031d6 <_free_r+0xa2>
  4032c8:	f240 5054 	movw	r0, #1364	; 0x554
  4032cc:	4282      	cmp	r2, r0
  4032ce:	d806      	bhi.n	4032de <_free_r+0x1aa>
  4032d0:	0c9a      	lsrs	r2, r3, #18
  4032d2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4032d6:	00ff      	lsls	r7, r7, #3
  4032d8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4032dc:	e77b      	b.n	4031d6 <_free_r+0xa2>
  4032de:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4032e2:	257e      	movs	r5, #126	; 0x7e
  4032e4:	e777      	b.n	4031d6 <_free_r+0xa2>
  4032e6:	f043 0101 	orr.w	r1, r3, #1
  4032ea:	6061      	str	r1, [r4, #4]
  4032ec:	6013      	str	r3, [r2, #0]
  4032ee:	e763      	b.n	4031b8 <_free_r+0x84>
  4032f0:	204005b0 	.word	0x204005b0
  4032f4:	204005b8 	.word	0x204005b8
  4032f8:	204009bc 	.word	0x204009bc
  4032fc:	204014bc 	.word	0x204014bc

00403300 <__sfvwrite_r>:
  403300:	6893      	ldr	r3, [r2, #8]
  403302:	2b00      	cmp	r3, #0
  403304:	d073      	beq.n	4033ee <__sfvwrite_r+0xee>
  403306:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40330a:	898b      	ldrh	r3, [r1, #12]
  40330c:	b083      	sub	sp, #12
  40330e:	460c      	mov	r4, r1
  403310:	0719      	lsls	r1, r3, #28
  403312:	9000      	str	r0, [sp, #0]
  403314:	4616      	mov	r6, r2
  403316:	d526      	bpl.n	403366 <__sfvwrite_r+0x66>
  403318:	6922      	ldr	r2, [r4, #16]
  40331a:	b322      	cbz	r2, 403366 <__sfvwrite_r+0x66>
  40331c:	f013 0002 	ands.w	r0, r3, #2
  403320:	6835      	ldr	r5, [r6, #0]
  403322:	d02c      	beq.n	40337e <__sfvwrite_r+0x7e>
  403324:	f04f 0900 	mov.w	r9, #0
  403328:	4fb0      	ldr	r7, [pc, #704]	; (4035ec <__sfvwrite_r+0x2ec>)
  40332a:	46c8      	mov	r8, r9
  40332c:	46b2      	mov	sl, r6
  40332e:	45b8      	cmp	r8, r7
  403330:	4643      	mov	r3, r8
  403332:	464a      	mov	r2, r9
  403334:	bf28      	it	cs
  403336:	463b      	movcs	r3, r7
  403338:	9800      	ldr	r0, [sp, #0]
  40333a:	f1b8 0f00 	cmp.w	r8, #0
  40333e:	d050      	beq.n	4033e2 <__sfvwrite_r+0xe2>
  403340:	69e1      	ldr	r1, [r4, #28]
  403342:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403344:	47b0      	blx	r6
  403346:	2800      	cmp	r0, #0
  403348:	dd58      	ble.n	4033fc <__sfvwrite_r+0xfc>
  40334a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40334e:	1a1b      	subs	r3, r3, r0
  403350:	4481      	add	r9, r0
  403352:	eba8 0800 	sub.w	r8, r8, r0
  403356:	f8ca 3008 	str.w	r3, [sl, #8]
  40335a:	2b00      	cmp	r3, #0
  40335c:	d1e7      	bne.n	40332e <__sfvwrite_r+0x2e>
  40335e:	2000      	movs	r0, #0
  403360:	b003      	add	sp, #12
  403362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403366:	4621      	mov	r1, r4
  403368:	9800      	ldr	r0, [sp, #0]
  40336a:	f7ff fc49 	bl	402c00 <__swsetup_r>
  40336e:	2800      	cmp	r0, #0
  403370:	f040 8133 	bne.w	4035da <__sfvwrite_r+0x2da>
  403374:	89a3      	ldrh	r3, [r4, #12]
  403376:	6835      	ldr	r5, [r6, #0]
  403378:	f013 0002 	ands.w	r0, r3, #2
  40337c:	d1d2      	bne.n	403324 <__sfvwrite_r+0x24>
  40337e:	f013 0901 	ands.w	r9, r3, #1
  403382:	d145      	bne.n	403410 <__sfvwrite_r+0x110>
  403384:	464f      	mov	r7, r9
  403386:	9601      	str	r6, [sp, #4]
  403388:	b337      	cbz	r7, 4033d8 <__sfvwrite_r+0xd8>
  40338a:	059a      	lsls	r2, r3, #22
  40338c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  403390:	f140 8083 	bpl.w	40349a <__sfvwrite_r+0x19a>
  403394:	4547      	cmp	r7, r8
  403396:	46c3      	mov	fp, r8
  403398:	f0c0 80ab 	bcc.w	4034f2 <__sfvwrite_r+0x1f2>
  40339c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4033a0:	f040 80ac 	bne.w	4034fc <__sfvwrite_r+0x1fc>
  4033a4:	6820      	ldr	r0, [r4, #0]
  4033a6:	46ba      	mov	sl, r7
  4033a8:	465a      	mov	r2, fp
  4033aa:	4649      	mov	r1, r9
  4033ac:	f000 fcf8 	bl	403da0 <memmove>
  4033b0:	68a2      	ldr	r2, [r4, #8]
  4033b2:	6823      	ldr	r3, [r4, #0]
  4033b4:	eba2 0208 	sub.w	r2, r2, r8
  4033b8:	445b      	add	r3, fp
  4033ba:	60a2      	str	r2, [r4, #8]
  4033bc:	6023      	str	r3, [r4, #0]
  4033be:	9a01      	ldr	r2, [sp, #4]
  4033c0:	6893      	ldr	r3, [r2, #8]
  4033c2:	eba3 030a 	sub.w	r3, r3, sl
  4033c6:	44d1      	add	r9, sl
  4033c8:	eba7 070a 	sub.w	r7, r7, sl
  4033cc:	6093      	str	r3, [r2, #8]
  4033ce:	2b00      	cmp	r3, #0
  4033d0:	d0c5      	beq.n	40335e <__sfvwrite_r+0x5e>
  4033d2:	89a3      	ldrh	r3, [r4, #12]
  4033d4:	2f00      	cmp	r7, #0
  4033d6:	d1d8      	bne.n	40338a <__sfvwrite_r+0x8a>
  4033d8:	f8d5 9000 	ldr.w	r9, [r5]
  4033dc:	686f      	ldr	r7, [r5, #4]
  4033de:	3508      	adds	r5, #8
  4033e0:	e7d2      	b.n	403388 <__sfvwrite_r+0x88>
  4033e2:	f8d5 9000 	ldr.w	r9, [r5]
  4033e6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4033ea:	3508      	adds	r5, #8
  4033ec:	e79f      	b.n	40332e <__sfvwrite_r+0x2e>
  4033ee:	2000      	movs	r0, #0
  4033f0:	4770      	bx	lr
  4033f2:	4621      	mov	r1, r4
  4033f4:	9800      	ldr	r0, [sp, #0]
  4033f6:	f7ff fd1f 	bl	402e38 <_fflush_r>
  4033fa:	b370      	cbz	r0, 40345a <__sfvwrite_r+0x15a>
  4033fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403404:	f04f 30ff 	mov.w	r0, #4294967295
  403408:	81a3      	strh	r3, [r4, #12]
  40340a:	b003      	add	sp, #12
  40340c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403410:	4681      	mov	r9, r0
  403412:	4633      	mov	r3, r6
  403414:	464e      	mov	r6, r9
  403416:	46a8      	mov	r8, r5
  403418:	469a      	mov	sl, r3
  40341a:	464d      	mov	r5, r9
  40341c:	b34e      	cbz	r6, 403472 <__sfvwrite_r+0x172>
  40341e:	b380      	cbz	r0, 403482 <__sfvwrite_r+0x182>
  403420:	6820      	ldr	r0, [r4, #0]
  403422:	6923      	ldr	r3, [r4, #16]
  403424:	6962      	ldr	r2, [r4, #20]
  403426:	45b1      	cmp	r9, r6
  403428:	46cb      	mov	fp, r9
  40342a:	bf28      	it	cs
  40342c:	46b3      	movcs	fp, r6
  40342e:	4298      	cmp	r0, r3
  403430:	465f      	mov	r7, fp
  403432:	d904      	bls.n	40343e <__sfvwrite_r+0x13e>
  403434:	68a3      	ldr	r3, [r4, #8]
  403436:	4413      	add	r3, r2
  403438:	459b      	cmp	fp, r3
  40343a:	f300 80a6 	bgt.w	40358a <__sfvwrite_r+0x28a>
  40343e:	4593      	cmp	fp, r2
  403440:	db4b      	blt.n	4034da <__sfvwrite_r+0x1da>
  403442:	4613      	mov	r3, r2
  403444:	6a67      	ldr	r7, [r4, #36]	; 0x24
  403446:	69e1      	ldr	r1, [r4, #28]
  403448:	9800      	ldr	r0, [sp, #0]
  40344a:	462a      	mov	r2, r5
  40344c:	47b8      	blx	r7
  40344e:	1e07      	subs	r7, r0, #0
  403450:	ddd4      	ble.n	4033fc <__sfvwrite_r+0xfc>
  403452:	ebb9 0907 	subs.w	r9, r9, r7
  403456:	d0cc      	beq.n	4033f2 <__sfvwrite_r+0xf2>
  403458:	2001      	movs	r0, #1
  40345a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40345e:	1bdb      	subs	r3, r3, r7
  403460:	443d      	add	r5, r7
  403462:	1bf6      	subs	r6, r6, r7
  403464:	f8ca 3008 	str.w	r3, [sl, #8]
  403468:	2b00      	cmp	r3, #0
  40346a:	f43f af78 	beq.w	40335e <__sfvwrite_r+0x5e>
  40346e:	2e00      	cmp	r6, #0
  403470:	d1d5      	bne.n	40341e <__sfvwrite_r+0x11e>
  403472:	f108 0308 	add.w	r3, r8, #8
  403476:	e913 0060 	ldmdb	r3, {r5, r6}
  40347a:	4698      	mov	r8, r3
  40347c:	3308      	adds	r3, #8
  40347e:	2e00      	cmp	r6, #0
  403480:	d0f9      	beq.n	403476 <__sfvwrite_r+0x176>
  403482:	4632      	mov	r2, r6
  403484:	210a      	movs	r1, #10
  403486:	4628      	mov	r0, r5
  403488:	f000 fc3a 	bl	403d00 <memchr>
  40348c:	2800      	cmp	r0, #0
  40348e:	f000 80a1 	beq.w	4035d4 <__sfvwrite_r+0x2d4>
  403492:	3001      	adds	r0, #1
  403494:	eba0 0905 	sub.w	r9, r0, r5
  403498:	e7c2      	b.n	403420 <__sfvwrite_r+0x120>
  40349a:	6820      	ldr	r0, [r4, #0]
  40349c:	6923      	ldr	r3, [r4, #16]
  40349e:	4298      	cmp	r0, r3
  4034a0:	d802      	bhi.n	4034a8 <__sfvwrite_r+0x1a8>
  4034a2:	6963      	ldr	r3, [r4, #20]
  4034a4:	429f      	cmp	r7, r3
  4034a6:	d25d      	bcs.n	403564 <__sfvwrite_r+0x264>
  4034a8:	45b8      	cmp	r8, r7
  4034aa:	bf28      	it	cs
  4034ac:	46b8      	movcs	r8, r7
  4034ae:	4642      	mov	r2, r8
  4034b0:	4649      	mov	r1, r9
  4034b2:	f000 fc75 	bl	403da0 <memmove>
  4034b6:	68a3      	ldr	r3, [r4, #8]
  4034b8:	6822      	ldr	r2, [r4, #0]
  4034ba:	eba3 0308 	sub.w	r3, r3, r8
  4034be:	4442      	add	r2, r8
  4034c0:	60a3      	str	r3, [r4, #8]
  4034c2:	6022      	str	r2, [r4, #0]
  4034c4:	b10b      	cbz	r3, 4034ca <__sfvwrite_r+0x1ca>
  4034c6:	46c2      	mov	sl, r8
  4034c8:	e779      	b.n	4033be <__sfvwrite_r+0xbe>
  4034ca:	4621      	mov	r1, r4
  4034cc:	9800      	ldr	r0, [sp, #0]
  4034ce:	f7ff fcb3 	bl	402e38 <_fflush_r>
  4034d2:	2800      	cmp	r0, #0
  4034d4:	d192      	bne.n	4033fc <__sfvwrite_r+0xfc>
  4034d6:	46c2      	mov	sl, r8
  4034d8:	e771      	b.n	4033be <__sfvwrite_r+0xbe>
  4034da:	465a      	mov	r2, fp
  4034dc:	4629      	mov	r1, r5
  4034de:	f000 fc5f 	bl	403da0 <memmove>
  4034e2:	68a2      	ldr	r2, [r4, #8]
  4034e4:	6823      	ldr	r3, [r4, #0]
  4034e6:	eba2 020b 	sub.w	r2, r2, fp
  4034ea:	445b      	add	r3, fp
  4034ec:	60a2      	str	r2, [r4, #8]
  4034ee:	6023      	str	r3, [r4, #0]
  4034f0:	e7af      	b.n	403452 <__sfvwrite_r+0x152>
  4034f2:	6820      	ldr	r0, [r4, #0]
  4034f4:	46b8      	mov	r8, r7
  4034f6:	46ba      	mov	sl, r7
  4034f8:	46bb      	mov	fp, r7
  4034fa:	e755      	b.n	4033a8 <__sfvwrite_r+0xa8>
  4034fc:	6962      	ldr	r2, [r4, #20]
  4034fe:	6820      	ldr	r0, [r4, #0]
  403500:	6921      	ldr	r1, [r4, #16]
  403502:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  403506:	eba0 0a01 	sub.w	sl, r0, r1
  40350a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40350e:	f10a 0001 	add.w	r0, sl, #1
  403512:	ea4f 0868 	mov.w	r8, r8, asr #1
  403516:	4438      	add	r0, r7
  403518:	4540      	cmp	r0, r8
  40351a:	4642      	mov	r2, r8
  40351c:	bf84      	itt	hi
  40351e:	4680      	movhi	r8, r0
  403520:	4642      	movhi	r2, r8
  403522:	055b      	lsls	r3, r3, #21
  403524:	d544      	bpl.n	4035b0 <__sfvwrite_r+0x2b0>
  403526:	4611      	mov	r1, r2
  403528:	9800      	ldr	r0, [sp, #0]
  40352a:	f000 f921 	bl	403770 <_malloc_r>
  40352e:	4683      	mov	fp, r0
  403530:	2800      	cmp	r0, #0
  403532:	d055      	beq.n	4035e0 <__sfvwrite_r+0x2e0>
  403534:	4652      	mov	r2, sl
  403536:	6921      	ldr	r1, [r4, #16]
  403538:	f7fe fae0 	bl	401afc <memcpy>
  40353c:	89a3      	ldrh	r3, [r4, #12]
  40353e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  403542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403546:	81a3      	strh	r3, [r4, #12]
  403548:	eb0b 000a 	add.w	r0, fp, sl
  40354c:	eba8 030a 	sub.w	r3, r8, sl
  403550:	f8c4 b010 	str.w	fp, [r4, #16]
  403554:	f8c4 8014 	str.w	r8, [r4, #20]
  403558:	6020      	str	r0, [r4, #0]
  40355a:	60a3      	str	r3, [r4, #8]
  40355c:	46b8      	mov	r8, r7
  40355e:	46ba      	mov	sl, r7
  403560:	46bb      	mov	fp, r7
  403562:	e721      	b.n	4033a8 <__sfvwrite_r+0xa8>
  403564:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  403568:	42b9      	cmp	r1, r7
  40356a:	bf28      	it	cs
  40356c:	4639      	movcs	r1, r7
  40356e:	464a      	mov	r2, r9
  403570:	fb91 f1f3 	sdiv	r1, r1, r3
  403574:	9800      	ldr	r0, [sp, #0]
  403576:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403578:	fb03 f301 	mul.w	r3, r3, r1
  40357c:	69e1      	ldr	r1, [r4, #28]
  40357e:	47b0      	blx	r6
  403580:	f1b0 0a00 	subs.w	sl, r0, #0
  403584:	f73f af1b 	bgt.w	4033be <__sfvwrite_r+0xbe>
  403588:	e738      	b.n	4033fc <__sfvwrite_r+0xfc>
  40358a:	461a      	mov	r2, r3
  40358c:	4629      	mov	r1, r5
  40358e:	9301      	str	r3, [sp, #4]
  403590:	f000 fc06 	bl	403da0 <memmove>
  403594:	6822      	ldr	r2, [r4, #0]
  403596:	9b01      	ldr	r3, [sp, #4]
  403598:	9800      	ldr	r0, [sp, #0]
  40359a:	441a      	add	r2, r3
  40359c:	6022      	str	r2, [r4, #0]
  40359e:	4621      	mov	r1, r4
  4035a0:	f7ff fc4a 	bl	402e38 <_fflush_r>
  4035a4:	9b01      	ldr	r3, [sp, #4]
  4035a6:	2800      	cmp	r0, #0
  4035a8:	f47f af28 	bne.w	4033fc <__sfvwrite_r+0xfc>
  4035ac:	461f      	mov	r7, r3
  4035ae:	e750      	b.n	403452 <__sfvwrite_r+0x152>
  4035b0:	9800      	ldr	r0, [sp, #0]
  4035b2:	f000 fc65 	bl	403e80 <_realloc_r>
  4035b6:	4683      	mov	fp, r0
  4035b8:	2800      	cmp	r0, #0
  4035ba:	d1c5      	bne.n	403548 <__sfvwrite_r+0x248>
  4035bc:	9d00      	ldr	r5, [sp, #0]
  4035be:	6921      	ldr	r1, [r4, #16]
  4035c0:	4628      	mov	r0, r5
  4035c2:	f7ff fdb7 	bl	403134 <_free_r>
  4035c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4035ca:	220c      	movs	r2, #12
  4035cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4035d0:	602a      	str	r2, [r5, #0]
  4035d2:	e715      	b.n	403400 <__sfvwrite_r+0x100>
  4035d4:	f106 0901 	add.w	r9, r6, #1
  4035d8:	e722      	b.n	403420 <__sfvwrite_r+0x120>
  4035da:	f04f 30ff 	mov.w	r0, #4294967295
  4035de:	e6bf      	b.n	403360 <__sfvwrite_r+0x60>
  4035e0:	9a00      	ldr	r2, [sp, #0]
  4035e2:	230c      	movs	r3, #12
  4035e4:	6013      	str	r3, [r2, #0]
  4035e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4035ea:	e709      	b.n	403400 <__sfvwrite_r+0x100>
  4035ec:	7ffffc00 	.word	0x7ffffc00

004035f0 <_fwalk_reent>:
  4035f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4035f4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4035f8:	d01f      	beq.n	40363a <_fwalk_reent+0x4a>
  4035fa:	4688      	mov	r8, r1
  4035fc:	4606      	mov	r6, r0
  4035fe:	f04f 0900 	mov.w	r9, #0
  403602:	687d      	ldr	r5, [r7, #4]
  403604:	68bc      	ldr	r4, [r7, #8]
  403606:	3d01      	subs	r5, #1
  403608:	d411      	bmi.n	40362e <_fwalk_reent+0x3e>
  40360a:	89a3      	ldrh	r3, [r4, #12]
  40360c:	2b01      	cmp	r3, #1
  40360e:	f105 35ff 	add.w	r5, r5, #4294967295
  403612:	d908      	bls.n	403626 <_fwalk_reent+0x36>
  403614:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  403618:	3301      	adds	r3, #1
  40361a:	4621      	mov	r1, r4
  40361c:	4630      	mov	r0, r6
  40361e:	d002      	beq.n	403626 <_fwalk_reent+0x36>
  403620:	47c0      	blx	r8
  403622:	ea49 0900 	orr.w	r9, r9, r0
  403626:	1c6b      	adds	r3, r5, #1
  403628:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40362c:	d1ed      	bne.n	40360a <_fwalk_reent+0x1a>
  40362e:	683f      	ldr	r7, [r7, #0]
  403630:	2f00      	cmp	r7, #0
  403632:	d1e6      	bne.n	403602 <_fwalk_reent+0x12>
  403634:	4648      	mov	r0, r9
  403636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40363a:	46b9      	mov	r9, r7
  40363c:	4648      	mov	r0, r9
  40363e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403642:	bf00      	nop

00403644 <__locale_mb_cur_max>:
  403644:	4b04      	ldr	r3, [pc, #16]	; (403658 <__locale_mb_cur_max+0x14>)
  403646:	4a05      	ldr	r2, [pc, #20]	; (40365c <__locale_mb_cur_max+0x18>)
  403648:	681b      	ldr	r3, [r3, #0]
  40364a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40364c:	2b00      	cmp	r3, #0
  40364e:	bf08      	it	eq
  403650:	4613      	moveq	r3, r2
  403652:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  403656:	4770      	bx	lr
  403658:	20400014 	.word	0x20400014
  40365c:	20400444 	.word	0x20400444

00403660 <__retarget_lock_init_recursive>:
  403660:	4770      	bx	lr
  403662:	bf00      	nop

00403664 <__retarget_lock_close_recursive>:
  403664:	4770      	bx	lr
  403666:	bf00      	nop

00403668 <__retarget_lock_acquire_recursive>:
  403668:	4770      	bx	lr
  40366a:	bf00      	nop

0040366c <__retarget_lock_release_recursive>:
  40366c:	4770      	bx	lr
  40366e:	bf00      	nop

00403670 <__swhatbuf_r>:
  403670:	b570      	push	{r4, r5, r6, lr}
  403672:	460c      	mov	r4, r1
  403674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403678:	2900      	cmp	r1, #0
  40367a:	b090      	sub	sp, #64	; 0x40
  40367c:	4615      	mov	r5, r2
  40367e:	461e      	mov	r6, r3
  403680:	db14      	blt.n	4036ac <__swhatbuf_r+0x3c>
  403682:	aa01      	add	r2, sp, #4
  403684:	f001 f846 	bl	404714 <_fstat_r>
  403688:	2800      	cmp	r0, #0
  40368a:	db0f      	blt.n	4036ac <__swhatbuf_r+0x3c>
  40368c:	9a02      	ldr	r2, [sp, #8]
  40368e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403692:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  403696:	fab2 f282 	clz	r2, r2
  40369a:	0952      	lsrs	r2, r2, #5
  40369c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4036a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4036a4:	6032      	str	r2, [r6, #0]
  4036a6:	602b      	str	r3, [r5, #0]
  4036a8:	b010      	add	sp, #64	; 0x40
  4036aa:	bd70      	pop	{r4, r5, r6, pc}
  4036ac:	89a2      	ldrh	r2, [r4, #12]
  4036ae:	2300      	movs	r3, #0
  4036b0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4036b4:	6033      	str	r3, [r6, #0]
  4036b6:	d004      	beq.n	4036c2 <__swhatbuf_r+0x52>
  4036b8:	2240      	movs	r2, #64	; 0x40
  4036ba:	4618      	mov	r0, r3
  4036bc:	602a      	str	r2, [r5, #0]
  4036be:	b010      	add	sp, #64	; 0x40
  4036c0:	bd70      	pop	{r4, r5, r6, pc}
  4036c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4036c6:	602b      	str	r3, [r5, #0]
  4036c8:	b010      	add	sp, #64	; 0x40
  4036ca:	bd70      	pop	{r4, r5, r6, pc}

004036cc <__smakebuf_r>:
  4036cc:	898a      	ldrh	r2, [r1, #12]
  4036ce:	0792      	lsls	r2, r2, #30
  4036d0:	460b      	mov	r3, r1
  4036d2:	d506      	bpl.n	4036e2 <__smakebuf_r+0x16>
  4036d4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4036d8:	2101      	movs	r1, #1
  4036da:	601a      	str	r2, [r3, #0]
  4036dc:	611a      	str	r2, [r3, #16]
  4036de:	6159      	str	r1, [r3, #20]
  4036e0:	4770      	bx	lr
  4036e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4036e4:	b083      	sub	sp, #12
  4036e6:	ab01      	add	r3, sp, #4
  4036e8:	466a      	mov	r2, sp
  4036ea:	460c      	mov	r4, r1
  4036ec:	4606      	mov	r6, r0
  4036ee:	f7ff ffbf 	bl	403670 <__swhatbuf_r>
  4036f2:	9900      	ldr	r1, [sp, #0]
  4036f4:	4605      	mov	r5, r0
  4036f6:	4630      	mov	r0, r6
  4036f8:	f000 f83a 	bl	403770 <_malloc_r>
  4036fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403700:	b1d8      	cbz	r0, 40373a <__smakebuf_r+0x6e>
  403702:	9a01      	ldr	r2, [sp, #4]
  403704:	4f15      	ldr	r7, [pc, #84]	; (40375c <__smakebuf_r+0x90>)
  403706:	9900      	ldr	r1, [sp, #0]
  403708:	63f7      	str	r7, [r6, #60]	; 0x3c
  40370a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40370e:	81a3      	strh	r3, [r4, #12]
  403710:	6020      	str	r0, [r4, #0]
  403712:	6120      	str	r0, [r4, #16]
  403714:	6161      	str	r1, [r4, #20]
  403716:	b91a      	cbnz	r2, 403720 <__smakebuf_r+0x54>
  403718:	432b      	orrs	r3, r5
  40371a:	81a3      	strh	r3, [r4, #12]
  40371c:	b003      	add	sp, #12
  40371e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403720:	4630      	mov	r0, r6
  403722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403726:	f001 f809 	bl	40473c <_isatty_r>
  40372a:	b1a0      	cbz	r0, 403756 <__smakebuf_r+0x8a>
  40372c:	89a3      	ldrh	r3, [r4, #12]
  40372e:	f023 0303 	bic.w	r3, r3, #3
  403732:	f043 0301 	orr.w	r3, r3, #1
  403736:	b21b      	sxth	r3, r3
  403738:	e7ee      	b.n	403718 <__smakebuf_r+0x4c>
  40373a:	059a      	lsls	r2, r3, #22
  40373c:	d4ee      	bmi.n	40371c <__smakebuf_r+0x50>
  40373e:	f023 0303 	bic.w	r3, r3, #3
  403742:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403746:	f043 0302 	orr.w	r3, r3, #2
  40374a:	2101      	movs	r1, #1
  40374c:	81a3      	strh	r3, [r4, #12]
  40374e:	6022      	str	r2, [r4, #0]
  403750:	6122      	str	r2, [r4, #16]
  403752:	6161      	str	r1, [r4, #20]
  403754:	e7e2      	b.n	40371c <__smakebuf_r+0x50>
  403756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40375a:	e7dd      	b.n	403718 <__smakebuf_r+0x4c>
  40375c:	00402e8d 	.word	0x00402e8d

00403760 <malloc>:
  403760:	4b02      	ldr	r3, [pc, #8]	; (40376c <malloc+0xc>)
  403762:	4601      	mov	r1, r0
  403764:	6818      	ldr	r0, [r3, #0]
  403766:	f000 b803 	b.w	403770 <_malloc_r>
  40376a:	bf00      	nop
  40376c:	20400014 	.word	0x20400014

00403770 <_malloc_r>:
  403770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403774:	f101 060b 	add.w	r6, r1, #11
  403778:	2e16      	cmp	r6, #22
  40377a:	b083      	sub	sp, #12
  40377c:	4605      	mov	r5, r0
  40377e:	f240 809e 	bls.w	4038be <_malloc_r+0x14e>
  403782:	f036 0607 	bics.w	r6, r6, #7
  403786:	f100 80bd 	bmi.w	403904 <_malloc_r+0x194>
  40378a:	42b1      	cmp	r1, r6
  40378c:	f200 80ba 	bhi.w	403904 <_malloc_r+0x194>
  403790:	f000 fb6a 	bl	403e68 <__malloc_lock>
  403794:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403798:	f0c0 8293 	bcc.w	403cc2 <_malloc_r+0x552>
  40379c:	0a73      	lsrs	r3, r6, #9
  40379e:	f000 80b8 	beq.w	403912 <_malloc_r+0x1a2>
  4037a2:	2b04      	cmp	r3, #4
  4037a4:	f200 8179 	bhi.w	403a9a <_malloc_r+0x32a>
  4037a8:	09b3      	lsrs	r3, r6, #6
  4037aa:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4037ae:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4037b2:	00c3      	lsls	r3, r0, #3
  4037b4:	4fbf      	ldr	r7, [pc, #764]	; (403ab4 <_malloc_r+0x344>)
  4037b6:	443b      	add	r3, r7
  4037b8:	f1a3 0108 	sub.w	r1, r3, #8
  4037bc:	685c      	ldr	r4, [r3, #4]
  4037be:	42a1      	cmp	r1, r4
  4037c0:	d106      	bne.n	4037d0 <_malloc_r+0x60>
  4037c2:	e00c      	b.n	4037de <_malloc_r+0x6e>
  4037c4:	2a00      	cmp	r2, #0
  4037c6:	f280 80aa 	bge.w	40391e <_malloc_r+0x1ae>
  4037ca:	68e4      	ldr	r4, [r4, #12]
  4037cc:	42a1      	cmp	r1, r4
  4037ce:	d006      	beq.n	4037de <_malloc_r+0x6e>
  4037d0:	6863      	ldr	r3, [r4, #4]
  4037d2:	f023 0303 	bic.w	r3, r3, #3
  4037d6:	1b9a      	subs	r2, r3, r6
  4037d8:	2a0f      	cmp	r2, #15
  4037da:	ddf3      	ble.n	4037c4 <_malloc_r+0x54>
  4037dc:	4670      	mov	r0, lr
  4037de:	693c      	ldr	r4, [r7, #16]
  4037e0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403ac8 <_malloc_r+0x358>
  4037e4:	4574      	cmp	r4, lr
  4037e6:	f000 81ab 	beq.w	403b40 <_malloc_r+0x3d0>
  4037ea:	6863      	ldr	r3, [r4, #4]
  4037ec:	f023 0303 	bic.w	r3, r3, #3
  4037f0:	1b9a      	subs	r2, r3, r6
  4037f2:	2a0f      	cmp	r2, #15
  4037f4:	f300 8190 	bgt.w	403b18 <_malloc_r+0x3a8>
  4037f8:	2a00      	cmp	r2, #0
  4037fa:	f8c7 e014 	str.w	lr, [r7, #20]
  4037fe:	f8c7 e010 	str.w	lr, [r7, #16]
  403802:	f280 809d 	bge.w	403940 <_malloc_r+0x1d0>
  403806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40380a:	f080 8161 	bcs.w	403ad0 <_malloc_r+0x360>
  40380e:	08db      	lsrs	r3, r3, #3
  403810:	f103 0c01 	add.w	ip, r3, #1
  403814:	1099      	asrs	r1, r3, #2
  403816:	687a      	ldr	r2, [r7, #4]
  403818:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40381c:	f8c4 8008 	str.w	r8, [r4, #8]
  403820:	2301      	movs	r3, #1
  403822:	408b      	lsls	r3, r1
  403824:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403828:	4313      	orrs	r3, r2
  40382a:	3908      	subs	r1, #8
  40382c:	60e1      	str	r1, [r4, #12]
  40382e:	607b      	str	r3, [r7, #4]
  403830:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403834:	f8c8 400c 	str.w	r4, [r8, #12]
  403838:	1082      	asrs	r2, r0, #2
  40383a:	2401      	movs	r4, #1
  40383c:	4094      	lsls	r4, r2
  40383e:	429c      	cmp	r4, r3
  403840:	f200 808b 	bhi.w	40395a <_malloc_r+0x1ea>
  403844:	421c      	tst	r4, r3
  403846:	d106      	bne.n	403856 <_malloc_r+0xe6>
  403848:	f020 0003 	bic.w	r0, r0, #3
  40384c:	0064      	lsls	r4, r4, #1
  40384e:	421c      	tst	r4, r3
  403850:	f100 0004 	add.w	r0, r0, #4
  403854:	d0fa      	beq.n	40384c <_malloc_r+0xdc>
  403856:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40385a:	46cc      	mov	ip, r9
  40385c:	4680      	mov	r8, r0
  40385e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403862:	459c      	cmp	ip, r3
  403864:	d107      	bne.n	403876 <_malloc_r+0x106>
  403866:	e16d      	b.n	403b44 <_malloc_r+0x3d4>
  403868:	2a00      	cmp	r2, #0
  40386a:	f280 817b 	bge.w	403b64 <_malloc_r+0x3f4>
  40386e:	68db      	ldr	r3, [r3, #12]
  403870:	459c      	cmp	ip, r3
  403872:	f000 8167 	beq.w	403b44 <_malloc_r+0x3d4>
  403876:	6859      	ldr	r1, [r3, #4]
  403878:	f021 0103 	bic.w	r1, r1, #3
  40387c:	1b8a      	subs	r2, r1, r6
  40387e:	2a0f      	cmp	r2, #15
  403880:	ddf2      	ble.n	403868 <_malloc_r+0xf8>
  403882:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403886:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40388a:	9300      	str	r3, [sp, #0]
  40388c:	199c      	adds	r4, r3, r6
  40388e:	4628      	mov	r0, r5
  403890:	f046 0601 	orr.w	r6, r6, #1
  403894:	f042 0501 	orr.w	r5, r2, #1
  403898:	605e      	str	r6, [r3, #4]
  40389a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40389e:	f8cc 8008 	str.w	r8, [ip, #8]
  4038a2:	617c      	str	r4, [r7, #20]
  4038a4:	613c      	str	r4, [r7, #16]
  4038a6:	f8c4 e00c 	str.w	lr, [r4, #12]
  4038aa:	f8c4 e008 	str.w	lr, [r4, #8]
  4038ae:	6065      	str	r5, [r4, #4]
  4038b0:	505a      	str	r2, [r3, r1]
  4038b2:	f000 fadf 	bl	403e74 <__malloc_unlock>
  4038b6:	9b00      	ldr	r3, [sp, #0]
  4038b8:	f103 0408 	add.w	r4, r3, #8
  4038bc:	e01e      	b.n	4038fc <_malloc_r+0x18c>
  4038be:	2910      	cmp	r1, #16
  4038c0:	d820      	bhi.n	403904 <_malloc_r+0x194>
  4038c2:	f000 fad1 	bl	403e68 <__malloc_lock>
  4038c6:	2610      	movs	r6, #16
  4038c8:	2318      	movs	r3, #24
  4038ca:	2002      	movs	r0, #2
  4038cc:	4f79      	ldr	r7, [pc, #484]	; (403ab4 <_malloc_r+0x344>)
  4038ce:	443b      	add	r3, r7
  4038d0:	f1a3 0208 	sub.w	r2, r3, #8
  4038d4:	685c      	ldr	r4, [r3, #4]
  4038d6:	4294      	cmp	r4, r2
  4038d8:	f000 813d 	beq.w	403b56 <_malloc_r+0x3e6>
  4038dc:	6863      	ldr	r3, [r4, #4]
  4038de:	68e1      	ldr	r1, [r4, #12]
  4038e0:	68a6      	ldr	r6, [r4, #8]
  4038e2:	f023 0303 	bic.w	r3, r3, #3
  4038e6:	4423      	add	r3, r4
  4038e8:	4628      	mov	r0, r5
  4038ea:	685a      	ldr	r2, [r3, #4]
  4038ec:	60f1      	str	r1, [r6, #12]
  4038ee:	f042 0201 	orr.w	r2, r2, #1
  4038f2:	608e      	str	r6, [r1, #8]
  4038f4:	605a      	str	r2, [r3, #4]
  4038f6:	f000 fabd 	bl	403e74 <__malloc_unlock>
  4038fa:	3408      	adds	r4, #8
  4038fc:	4620      	mov	r0, r4
  4038fe:	b003      	add	sp, #12
  403900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403904:	2400      	movs	r4, #0
  403906:	230c      	movs	r3, #12
  403908:	4620      	mov	r0, r4
  40390a:	602b      	str	r3, [r5, #0]
  40390c:	b003      	add	sp, #12
  40390e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403912:	2040      	movs	r0, #64	; 0x40
  403914:	f44f 7300 	mov.w	r3, #512	; 0x200
  403918:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40391c:	e74a      	b.n	4037b4 <_malloc_r+0x44>
  40391e:	4423      	add	r3, r4
  403920:	68e1      	ldr	r1, [r4, #12]
  403922:	685a      	ldr	r2, [r3, #4]
  403924:	68a6      	ldr	r6, [r4, #8]
  403926:	f042 0201 	orr.w	r2, r2, #1
  40392a:	60f1      	str	r1, [r6, #12]
  40392c:	4628      	mov	r0, r5
  40392e:	608e      	str	r6, [r1, #8]
  403930:	605a      	str	r2, [r3, #4]
  403932:	f000 fa9f 	bl	403e74 <__malloc_unlock>
  403936:	3408      	adds	r4, #8
  403938:	4620      	mov	r0, r4
  40393a:	b003      	add	sp, #12
  40393c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403940:	4423      	add	r3, r4
  403942:	4628      	mov	r0, r5
  403944:	685a      	ldr	r2, [r3, #4]
  403946:	f042 0201 	orr.w	r2, r2, #1
  40394a:	605a      	str	r2, [r3, #4]
  40394c:	f000 fa92 	bl	403e74 <__malloc_unlock>
  403950:	3408      	adds	r4, #8
  403952:	4620      	mov	r0, r4
  403954:	b003      	add	sp, #12
  403956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40395a:	68bc      	ldr	r4, [r7, #8]
  40395c:	6863      	ldr	r3, [r4, #4]
  40395e:	f023 0803 	bic.w	r8, r3, #3
  403962:	45b0      	cmp	r8, r6
  403964:	d304      	bcc.n	403970 <_malloc_r+0x200>
  403966:	eba8 0306 	sub.w	r3, r8, r6
  40396a:	2b0f      	cmp	r3, #15
  40396c:	f300 8085 	bgt.w	403a7a <_malloc_r+0x30a>
  403970:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403acc <_malloc_r+0x35c>
  403974:	4b50      	ldr	r3, [pc, #320]	; (403ab8 <_malloc_r+0x348>)
  403976:	f8d9 2000 	ldr.w	r2, [r9]
  40397a:	681b      	ldr	r3, [r3, #0]
  40397c:	3201      	adds	r2, #1
  40397e:	4433      	add	r3, r6
  403980:	eb04 0a08 	add.w	sl, r4, r8
  403984:	f000 8155 	beq.w	403c32 <_malloc_r+0x4c2>
  403988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40398c:	330f      	adds	r3, #15
  40398e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403992:	f02b 0b0f 	bic.w	fp, fp, #15
  403996:	4659      	mov	r1, fp
  403998:	4628      	mov	r0, r5
  40399a:	f000 fc17 	bl	4041cc <_sbrk_r>
  40399e:	1c41      	adds	r1, r0, #1
  4039a0:	4602      	mov	r2, r0
  4039a2:	f000 80fc 	beq.w	403b9e <_malloc_r+0x42e>
  4039a6:	4582      	cmp	sl, r0
  4039a8:	f200 80f7 	bhi.w	403b9a <_malloc_r+0x42a>
  4039ac:	4b43      	ldr	r3, [pc, #268]	; (403abc <_malloc_r+0x34c>)
  4039ae:	6819      	ldr	r1, [r3, #0]
  4039b0:	4459      	add	r1, fp
  4039b2:	6019      	str	r1, [r3, #0]
  4039b4:	f000 814d 	beq.w	403c52 <_malloc_r+0x4e2>
  4039b8:	f8d9 0000 	ldr.w	r0, [r9]
  4039bc:	3001      	adds	r0, #1
  4039be:	bf1b      	ittet	ne
  4039c0:	eba2 0a0a 	subne.w	sl, r2, sl
  4039c4:	4451      	addne	r1, sl
  4039c6:	f8c9 2000 	streq.w	r2, [r9]
  4039ca:	6019      	strne	r1, [r3, #0]
  4039cc:	f012 0107 	ands.w	r1, r2, #7
  4039d0:	f000 8115 	beq.w	403bfe <_malloc_r+0x48e>
  4039d4:	f1c1 0008 	rsb	r0, r1, #8
  4039d8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4039dc:	4402      	add	r2, r0
  4039de:	3108      	adds	r1, #8
  4039e0:	eb02 090b 	add.w	r9, r2, fp
  4039e4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4039e8:	eba1 0909 	sub.w	r9, r1, r9
  4039ec:	4649      	mov	r1, r9
  4039ee:	4628      	mov	r0, r5
  4039f0:	9301      	str	r3, [sp, #4]
  4039f2:	9200      	str	r2, [sp, #0]
  4039f4:	f000 fbea 	bl	4041cc <_sbrk_r>
  4039f8:	1c43      	adds	r3, r0, #1
  4039fa:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4039fe:	f000 8143 	beq.w	403c88 <_malloc_r+0x518>
  403a02:	1a80      	subs	r0, r0, r2
  403a04:	4448      	add	r0, r9
  403a06:	f040 0001 	orr.w	r0, r0, #1
  403a0a:	6819      	ldr	r1, [r3, #0]
  403a0c:	60ba      	str	r2, [r7, #8]
  403a0e:	4449      	add	r1, r9
  403a10:	42bc      	cmp	r4, r7
  403a12:	6050      	str	r0, [r2, #4]
  403a14:	6019      	str	r1, [r3, #0]
  403a16:	d017      	beq.n	403a48 <_malloc_r+0x2d8>
  403a18:	f1b8 0f0f 	cmp.w	r8, #15
  403a1c:	f240 80fb 	bls.w	403c16 <_malloc_r+0x4a6>
  403a20:	6860      	ldr	r0, [r4, #4]
  403a22:	f1a8 020c 	sub.w	r2, r8, #12
  403a26:	f022 0207 	bic.w	r2, r2, #7
  403a2a:	eb04 0e02 	add.w	lr, r4, r2
  403a2e:	f000 0001 	and.w	r0, r0, #1
  403a32:	f04f 0c05 	mov.w	ip, #5
  403a36:	4310      	orrs	r0, r2
  403a38:	2a0f      	cmp	r2, #15
  403a3a:	6060      	str	r0, [r4, #4]
  403a3c:	f8ce c004 	str.w	ip, [lr, #4]
  403a40:	f8ce c008 	str.w	ip, [lr, #8]
  403a44:	f200 8117 	bhi.w	403c76 <_malloc_r+0x506>
  403a48:	4b1d      	ldr	r3, [pc, #116]	; (403ac0 <_malloc_r+0x350>)
  403a4a:	68bc      	ldr	r4, [r7, #8]
  403a4c:	681a      	ldr	r2, [r3, #0]
  403a4e:	4291      	cmp	r1, r2
  403a50:	bf88      	it	hi
  403a52:	6019      	strhi	r1, [r3, #0]
  403a54:	4b1b      	ldr	r3, [pc, #108]	; (403ac4 <_malloc_r+0x354>)
  403a56:	681a      	ldr	r2, [r3, #0]
  403a58:	4291      	cmp	r1, r2
  403a5a:	6862      	ldr	r2, [r4, #4]
  403a5c:	bf88      	it	hi
  403a5e:	6019      	strhi	r1, [r3, #0]
  403a60:	f022 0203 	bic.w	r2, r2, #3
  403a64:	4296      	cmp	r6, r2
  403a66:	eba2 0306 	sub.w	r3, r2, r6
  403a6a:	d801      	bhi.n	403a70 <_malloc_r+0x300>
  403a6c:	2b0f      	cmp	r3, #15
  403a6e:	dc04      	bgt.n	403a7a <_malloc_r+0x30a>
  403a70:	4628      	mov	r0, r5
  403a72:	f000 f9ff 	bl	403e74 <__malloc_unlock>
  403a76:	2400      	movs	r4, #0
  403a78:	e740      	b.n	4038fc <_malloc_r+0x18c>
  403a7a:	19a2      	adds	r2, r4, r6
  403a7c:	f043 0301 	orr.w	r3, r3, #1
  403a80:	f046 0601 	orr.w	r6, r6, #1
  403a84:	6066      	str	r6, [r4, #4]
  403a86:	4628      	mov	r0, r5
  403a88:	60ba      	str	r2, [r7, #8]
  403a8a:	6053      	str	r3, [r2, #4]
  403a8c:	f000 f9f2 	bl	403e74 <__malloc_unlock>
  403a90:	3408      	adds	r4, #8
  403a92:	4620      	mov	r0, r4
  403a94:	b003      	add	sp, #12
  403a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a9a:	2b14      	cmp	r3, #20
  403a9c:	d971      	bls.n	403b82 <_malloc_r+0x412>
  403a9e:	2b54      	cmp	r3, #84	; 0x54
  403aa0:	f200 80a3 	bhi.w	403bea <_malloc_r+0x47a>
  403aa4:	0b33      	lsrs	r3, r6, #12
  403aa6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403aaa:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403aae:	00c3      	lsls	r3, r0, #3
  403ab0:	e680      	b.n	4037b4 <_malloc_r+0x44>
  403ab2:	bf00      	nop
  403ab4:	204005b0 	.word	0x204005b0
  403ab8:	204014bc 	.word	0x204014bc
  403abc:	2040148c 	.word	0x2040148c
  403ac0:	204014b4 	.word	0x204014b4
  403ac4:	204014b8 	.word	0x204014b8
  403ac8:	204005b8 	.word	0x204005b8
  403acc:	204009b8 	.word	0x204009b8
  403ad0:	0a5a      	lsrs	r2, r3, #9
  403ad2:	2a04      	cmp	r2, #4
  403ad4:	d95b      	bls.n	403b8e <_malloc_r+0x41e>
  403ad6:	2a14      	cmp	r2, #20
  403ad8:	f200 80ae 	bhi.w	403c38 <_malloc_r+0x4c8>
  403adc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403ae0:	00c9      	lsls	r1, r1, #3
  403ae2:	325b      	adds	r2, #91	; 0x5b
  403ae4:	eb07 0c01 	add.w	ip, r7, r1
  403ae8:	5879      	ldr	r1, [r7, r1]
  403aea:	f1ac 0c08 	sub.w	ip, ip, #8
  403aee:	458c      	cmp	ip, r1
  403af0:	f000 8088 	beq.w	403c04 <_malloc_r+0x494>
  403af4:	684a      	ldr	r2, [r1, #4]
  403af6:	f022 0203 	bic.w	r2, r2, #3
  403afa:	4293      	cmp	r3, r2
  403afc:	d273      	bcs.n	403be6 <_malloc_r+0x476>
  403afe:	6889      	ldr	r1, [r1, #8]
  403b00:	458c      	cmp	ip, r1
  403b02:	d1f7      	bne.n	403af4 <_malloc_r+0x384>
  403b04:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403b08:	687b      	ldr	r3, [r7, #4]
  403b0a:	60e2      	str	r2, [r4, #12]
  403b0c:	f8c4 c008 	str.w	ip, [r4, #8]
  403b10:	6094      	str	r4, [r2, #8]
  403b12:	f8cc 400c 	str.w	r4, [ip, #12]
  403b16:	e68f      	b.n	403838 <_malloc_r+0xc8>
  403b18:	19a1      	adds	r1, r4, r6
  403b1a:	f046 0c01 	orr.w	ip, r6, #1
  403b1e:	f042 0601 	orr.w	r6, r2, #1
  403b22:	f8c4 c004 	str.w	ip, [r4, #4]
  403b26:	4628      	mov	r0, r5
  403b28:	6179      	str	r1, [r7, #20]
  403b2a:	6139      	str	r1, [r7, #16]
  403b2c:	f8c1 e00c 	str.w	lr, [r1, #12]
  403b30:	f8c1 e008 	str.w	lr, [r1, #8]
  403b34:	604e      	str	r6, [r1, #4]
  403b36:	50e2      	str	r2, [r4, r3]
  403b38:	f000 f99c 	bl	403e74 <__malloc_unlock>
  403b3c:	3408      	adds	r4, #8
  403b3e:	e6dd      	b.n	4038fc <_malloc_r+0x18c>
  403b40:	687b      	ldr	r3, [r7, #4]
  403b42:	e679      	b.n	403838 <_malloc_r+0xc8>
  403b44:	f108 0801 	add.w	r8, r8, #1
  403b48:	f018 0f03 	tst.w	r8, #3
  403b4c:	f10c 0c08 	add.w	ip, ip, #8
  403b50:	f47f ae85 	bne.w	40385e <_malloc_r+0xee>
  403b54:	e02d      	b.n	403bb2 <_malloc_r+0x442>
  403b56:	68dc      	ldr	r4, [r3, #12]
  403b58:	42a3      	cmp	r3, r4
  403b5a:	bf08      	it	eq
  403b5c:	3002      	addeq	r0, #2
  403b5e:	f43f ae3e 	beq.w	4037de <_malloc_r+0x6e>
  403b62:	e6bb      	b.n	4038dc <_malloc_r+0x16c>
  403b64:	4419      	add	r1, r3
  403b66:	461c      	mov	r4, r3
  403b68:	684a      	ldr	r2, [r1, #4]
  403b6a:	68db      	ldr	r3, [r3, #12]
  403b6c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403b70:	f042 0201 	orr.w	r2, r2, #1
  403b74:	604a      	str	r2, [r1, #4]
  403b76:	4628      	mov	r0, r5
  403b78:	60f3      	str	r3, [r6, #12]
  403b7a:	609e      	str	r6, [r3, #8]
  403b7c:	f000 f97a 	bl	403e74 <__malloc_unlock>
  403b80:	e6bc      	b.n	4038fc <_malloc_r+0x18c>
  403b82:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403b86:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403b8a:	00c3      	lsls	r3, r0, #3
  403b8c:	e612      	b.n	4037b4 <_malloc_r+0x44>
  403b8e:	099a      	lsrs	r2, r3, #6
  403b90:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403b94:	00c9      	lsls	r1, r1, #3
  403b96:	3238      	adds	r2, #56	; 0x38
  403b98:	e7a4      	b.n	403ae4 <_malloc_r+0x374>
  403b9a:	42bc      	cmp	r4, r7
  403b9c:	d054      	beq.n	403c48 <_malloc_r+0x4d8>
  403b9e:	68bc      	ldr	r4, [r7, #8]
  403ba0:	6862      	ldr	r2, [r4, #4]
  403ba2:	f022 0203 	bic.w	r2, r2, #3
  403ba6:	e75d      	b.n	403a64 <_malloc_r+0x2f4>
  403ba8:	f859 3908 	ldr.w	r3, [r9], #-8
  403bac:	4599      	cmp	r9, r3
  403bae:	f040 8086 	bne.w	403cbe <_malloc_r+0x54e>
  403bb2:	f010 0f03 	tst.w	r0, #3
  403bb6:	f100 30ff 	add.w	r0, r0, #4294967295
  403bba:	d1f5      	bne.n	403ba8 <_malloc_r+0x438>
  403bbc:	687b      	ldr	r3, [r7, #4]
  403bbe:	ea23 0304 	bic.w	r3, r3, r4
  403bc2:	607b      	str	r3, [r7, #4]
  403bc4:	0064      	lsls	r4, r4, #1
  403bc6:	429c      	cmp	r4, r3
  403bc8:	f63f aec7 	bhi.w	40395a <_malloc_r+0x1ea>
  403bcc:	2c00      	cmp	r4, #0
  403bce:	f43f aec4 	beq.w	40395a <_malloc_r+0x1ea>
  403bd2:	421c      	tst	r4, r3
  403bd4:	4640      	mov	r0, r8
  403bd6:	f47f ae3e 	bne.w	403856 <_malloc_r+0xe6>
  403bda:	0064      	lsls	r4, r4, #1
  403bdc:	421c      	tst	r4, r3
  403bde:	f100 0004 	add.w	r0, r0, #4
  403be2:	d0fa      	beq.n	403bda <_malloc_r+0x46a>
  403be4:	e637      	b.n	403856 <_malloc_r+0xe6>
  403be6:	468c      	mov	ip, r1
  403be8:	e78c      	b.n	403b04 <_malloc_r+0x394>
  403bea:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403bee:	d815      	bhi.n	403c1c <_malloc_r+0x4ac>
  403bf0:	0bf3      	lsrs	r3, r6, #15
  403bf2:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403bf6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403bfa:	00c3      	lsls	r3, r0, #3
  403bfc:	e5da      	b.n	4037b4 <_malloc_r+0x44>
  403bfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403c02:	e6ed      	b.n	4039e0 <_malloc_r+0x270>
  403c04:	687b      	ldr	r3, [r7, #4]
  403c06:	1092      	asrs	r2, r2, #2
  403c08:	2101      	movs	r1, #1
  403c0a:	fa01 f202 	lsl.w	r2, r1, r2
  403c0e:	4313      	orrs	r3, r2
  403c10:	607b      	str	r3, [r7, #4]
  403c12:	4662      	mov	r2, ip
  403c14:	e779      	b.n	403b0a <_malloc_r+0x39a>
  403c16:	2301      	movs	r3, #1
  403c18:	6053      	str	r3, [r2, #4]
  403c1a:	e729      	b.n	403a70 <_malloc_r+0x300>
  403c1c:	f240 5254 	movw	r2, #1364	; 0x554
  403c20:	4293      	cmp	r3, r2
  403c22:	d822      	bhi.n	403c6a <_malloc_r+0x4fa>
  403c24:	0cb3      	lsrs	r3, r6, #18
  403c26:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403c2a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403c2e:	00c3      	lsls	r3, r0, #3
  403c30:	e5c0      	b.n	4037b4 <_malloc_r+0x44>
  403c32:	f103 0b10 	add.w	fp, r3, #16
  403c36:	e6ae      	b.n	403996 <_malloc_r+0x226>
  403c38:	2a54      	cmp	r2, #84	; 0x54
  403c3a:	d829      	bhi.n	403c90 <_malloc_r+0x520>
  403c3c:	0b1a      	lsrs	r2, r3, #12
  403c3e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403c42:	00c9      	lsls	r1, r1, #3
  403c44:	326e      	adds	r2, #110	; 0x6e
  403c46:	e74d      	b.n	403ae4 <_malloc_r+0x374>
  403c48:	4b20      	ldr	r3, [pc, #128]	; (403ccc <_malloc_r+0x55c>)
  403c4a:	6819      	ldr	r1, [r3, #0]
  403c4c:	4459      	add	r1, fp
  403c4e:	6019      	str	r1, [r3, #0]
  403c50:	e6b2      	b.n	4039b8 <_malloc_r+0x248>
  403c52:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403c56:	2800      	cmp	r0, #0
  403c58:	f47f aeae 	bne.w	4039b8 <_malloc_r+0x248>
  403c5c:	eb08 030b 	add.w	r3, r8, fp
  403c60:	68ba      	ldr	r2, [r7, #8]
  403c62:	f043 0301 	orr.w	r3, r3, #1
  403c66:	6053      	str	r3, [r2, #4]
  403c68:	e6ee      	b.n	403a48 <_malloc_r+0x2d8>
  403c6a:	207f      	movs	r0, #127	; 0x7f
  403c6c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403c70:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403c74:	e59e      	b.n	4037b4 <_malloc_r+0x44>
  403c76:	f104 0108 	add.w	r1, r4, #8
  403c7a:	4628      	mov	r0, r5
  403c7c:	9300      	str	r3, [sp, #0]
  403c7e:	f7ff fa59 	bl	403134 <_free_r>
  403c82:	9b00      	ldr	r3, [sp, #0]
  403c84:	6819      	ldr	r1, [r3, #0]
  403c86:	e6df      	b.n	403a48 <_malloc_r+0x2d8>
  403c88:	2001      	movs	r0, #1
  403c8a:	f04f 0900 	mov.w	r9, #0
  403c8e:	e6bc      	b.n	403a0a <_malloc_r+0x29a>
  403c90:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403c94:	d805      	bhi.n	403ca2 <_malloc_r+0x532>
  403c96:	0bda      	lsrs	r2, r3, #15
  403c98:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403c9c:	00c9      	lsls	r1, r1, #3
  403c9e:	3277      	adds	r2, #119	; 0x77
  403ca0:	e720      	b.n	403ae4 <_malloc_r+0x374>
  403ca2:	f240 5154 	movw	r1, #1364	; 0x554
  403ca6:	428a      	cmp	r2, r1
  403ca8:	d805      	bhi.n	403cb6 <_malloc_r+0x546>
  403caa:	0c9a      	lsrs	r2, r3, #18
  403cac:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403cb0:	00c9      	lsls	r1, r1, #3
  403cb2:	327c      	adds	r2, #124	; 0x7c
  403cb4:	e716      	b.n	403ae4 <_malloc_r+0x374>
  403cb6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403cba:	227e      	movs	r2, #126	; 0x7e
  403cbc:	e712      	b.n	403ae4 <_malloc_r+0x374>
  403cbe:	687b      	ldr	r3, [r7, #4]
  403cc0:	e780      	b.n	403bc4 <_malloc_r+0x454>
  403cc2:	08f0      	lsrs	r0, r6, #3
  403cc4:	f106 0308 	add.w	r3, r6, #8
  403cc8:	e600      	b.n	4038cc <_malloc_r+0x15c>
  403cca:	bf00      	nop
  403ccc:	2040148c 	.word	0x2040148c

00403cd0 <__ascii_mbtowc>:
  403cd0:	b082      	sub	sp, #8
  403cd2:	b149      	cbz	r1, 403ce8 <__ascii_mbtowc+0x18>
  403cd4:	b15a      	cbz	r2, 403cee <__ascii_mbtowc+0x1e>
  403cd6:	b16b      	cbz	r3, 403cf4 <__ascii_mbtowc+0x24>
  403cd8:	7813      	ldrb	r3, [r2, #0]
  403cda:	600b      	str	r3, [r1, #0]
  403cdc:	7812      	ldrb	r2, [r2, #0]
  403cde:	1c10      	adds	r0, r2, #0
  403ce0:	bf18      	it	ne
  403ce2:	2001      	movne	r0, #1
  403ce4:	b002      	add	sp, #8
  403ce6:	4770      	bx	lr
  403ce8:	a901      	add	r1, sp, #4
  403cea:	2a00      	cmp	r2, #0
  403cec:	d1f3      	bne.n	403cd6 <__ascii_mbtowc+0x6>
  403cee:	4610      	mov	r0, r2
  403cf0:	b002      	add	sp, #8
  403cf2:	4770      	bx	lr
  403cf4:	f06f 0001 	mvn.w	r0, #1
  403cf8:	e7f4      	b.n	403ce4 <__ascii_mbtowc+0x14>
  403cfa:	bf00      	nop
  403cfc:	0000      	movs	r0, r0
	...

00403d00 <memchr>:
  403d00:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403d04:	2a10      	cmp	r2, #16
  403d06:	db2b      	blt.n	403d60 <memchr+0x60>
  403d08:	f010 0f07 	tst.w	r0, #7
  403d0c:	d008      	beq.n	403d20 <memchr+0x20>
  403d0e:	f810 3b01 	ldrb.w	r3, [r0], #1
  403d12:	3a01      	subs	r2, #1
  403d14:	428b      	cmp	r3, r1
  403d16:	d02d      	beq.n	403d74 <memchr+0x74>
  403d18:	f010 0f07 	tst.w	r0, #7
  403d1c:	b342      	cbz	r2, 403d70 <memchr+0x70>
  403d1e:	d1f6      	bne.n	403d0e <memchr+0xe>
  403d20:	b4f0      	push	{r4, r5, r6, r7}
  403d22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403d26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  403d2a:	f022 0407 	bic.w	r4, r2, #7
  403d2e:	f07f 0700 	mvns.w	r7, #0
  403d32:	2300      	movs	r3, #0
  403d34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403d38:	3c08      	subs	r4, #8
  403d3a:	ea85 0501 	eor.w	r5, r5, r1
  403d3e:	ea86 0601 	eor.w	r6, r6, r1
  403d42:	fa85 f547 	uadd8	r5, r5, r7
  403d46:	faa3 f587 	sel	r5, r3, r7
  403d4a:	fa86 f647 	uadd8	r6, r6, r7
  403d4e:	faa5 f687 	sel	r6, r5, r7
  403d52:	b98e      	cbnz	r6, 403d78 <memchr+0x78>
  403d54:	d1ee      	bne.n	403d34 <memchr+0x34>
  403d56:	bcf0      	pop	{r4, r5, r6, r7}
  403d58:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403d5c:	f002 0207 	and.w	r2, r2, #7
  403d60:	b132      	cbz	r2, 403d70 <memchr+0x70>
  403d62:	f810 3b01 	ldrb.w	r3, [r0], #1
  403d66:	3a01      	subs	r2, #1
  403d68:	ea83 0301 	eor.w	r3, r3, r1
  403d6c:	b113      	cbz	r3, 403d74 <memchr+0x74>
  403d6e:	d1f8      	bne.n	403d62 <memchr+0x62>
  403d70:	2000      	movs	r0, #0
  403d72:	4770      	bx	lr
  403d74:	3801      	subs	r0, #1
  403d76:	4770      	bx	lr
  403d78:	2d00      	cmp	r5, #0
  403d7a:	bf06      	itte	eq
  403d7c:	4635      	moveq	r5, r6
  403d7e:	3803      	subeq	r0, #3
  403d80:	3807      	subne	r0, #7
  403d82:	f015 0f01 	tst.w	r5, #1
  403d86:	d107      	bne.n	403d98 <memchr+0x98>
  403d88:	3001      	adds	r0, #1
  403d8a:	f415 7f80 	tst.w	r5, #256	; 0x100
  403d8e:	bf02      	ittt	eq
  403d90:	3001      	addeq	r0, #1
  403d92:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403d96:	3001      	addeq	r0, #1
  403d98:	bcf0      	pop	{r4, r5, r6, r7}
  403d9a:	3801      	subs	r0, #1
  403d9c:	4770      	bx	lr
  403d9e:	bf00      	nop

00403da0 <memmove>:
  403da0:	4288      	cmp	r0, r1
  403da2:	b5f0      	push	{r4, r5, r6, r7, lr}
  403da4:	d90d      	bls.n	403dc2 <memmove+0x22>
  403da6:	188b      	adds	r3, r1, r2
  403da8:	4298      	cmp	r0, r3
  403daa:	d20a      	bcs.n	403dc2 <memmove+0x22>
  403dac:	1884      	adds	r4, r0, r2
  403dae:	2a00      	cmp	r2, #0
  403db0:	d051      	beq.n	403e56 <memmove+0xb6>
  403db2:	4622      	mov	r2, r4
  403db4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  403db8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  403dbc:	4299      	cmp	r1, r3
  403dbe:	d1f9      	bne.n	403db4 <memmove+0x14>
  403dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403dc2:	2a0f      	cmp	r2, #15
  403dc4:	d948      	bls.n	403e58 <memmove+0xb8>
  403dc6:	ea41 0300 	orr.w	r3, r1, r0
  403dca:	079b      	lsls	r3, r3, #30
  403dcc:	d146      	bne.n	403e5c <memmove+0xbc>
  403dce:	f100 0410 	add.w	r4, r0, #16
  403dd2:	f101 0310 	add.w	r3, r1, #16
  403dd6:	4615      	mov	r5, r2
  403dd8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403ddc:	f844 6c10 	str.w	r6, [r4, #-16]
  403de0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403de4:	f844 6c0c 	str.w	r6, [r4, #-12]
  403de8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403dec:	f844 6c08 	str.w	r6, [r4, #-8]
  403df0:	3d10      	subs	r5, #16
  403df2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  403df6:	f844 6c04 	str.w	r6, [r4, #-4]
  403dfa:	2d0f      	cmp	r5, #15
  403dfc:	f103 0310 	add.w	r3, r3, #16
  403e00:	f104 0410 	add.w	r4, r4, #16
  403e04:	d8e8      	bhi.n	403dd8 <memmove+0x38>
  403e06:	f1a2 0310 	sub.w	r3, r2, #16
  403e0a:	f023 030f 	bic.w	r3, r3, #15
  403e0e:	f002 0e0f 	and.w	lr, r2, #15
  403e12:	3310      	adds	r3, #16
  403e14:	f1be 0f03 	cmp.w	lr, #3
  403e18:	4419      	add	r1, r3
  403e1a:	4403      	add	r3, r0
  403e1c:	d921      	bls.n	403e62 <memmove+0xc2>
  403e1e:	1f1e      	subs	r6, r3, #4
  403e20:	460d      	mov	r5, r1
  403e22:	4674      	mov	r4, lr
  403e24:	3c04      	subs	r4, #4
  403e26:	f855 7b04 	ldr.w	r7, [r5], #4
  403e2a:	f846 7f04 	str.w	r7, [r6, #4]!
  403e2e:	2c03      	cmp	r4, #3
  403e30:	d8f8      	bhi.n	403e24 <memmove+0x84>
  403e32:	f1ae 0404 	sub.w	r4, lr, #4
  403e36:	f024 0403 	bic.w	r4, r4, #3
  403e3a:	3404      	adds	r4, #4
  403e3c:	4421      	add	r1, r4
  403e3e:	4423      	add	r3, r4
  403e40:	f002 0203 	and.w	r2, r2, #3
  403e44:	b162      	cbz	r2, 403e60 <memmove+0xc0>
  403e46:	3b01      	subs	r3, #1
  403e48:	440a      	add	r2, r1
  403e4a:	f811 4b01 	ldrb.w	r4, [r1], #1
  403e4e:	f803 4f01 	strb.w	r4, [r3, #1]!
  403e52:	428a      	cmp	r2, r1
  403e54:	d1f9      	bne.n	403e4a <memmove+0xaa>
  403e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403e58:	4603      	mov	r3, r0
  403e5a:	e7f3      	b.n	403e44 <memmove+0xa4>
  403e5c:	4603      	mov	r3, r0
  403e5e:	e7f2      	b.n	403e46 <memmove+0xa6>
  403e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403e62:	4672      	mov	r2, lr
  403e64:	e7ee      	b.n	403e44 <memmove+0xa4>
  403e66:	bf00      	nop

00403e68 <__malloc_lock>:
  403e68:	4801      	ldr	r0, [pc, #4]	; (403e70 <__malloc_lock+0x8>)
  403e6a:	f7ff bbfd 	b.w	403668 <__retarget_lock_acquire_recursive>
  403e6e:	bf00      	nop
  403e70:	204014dc 	.word	0x204014dc

00403e74 <__malloc_unlock>:
  403e74:	4801      	ldr	r0, [pc, #4]	; (403e7c <__malloc_unlock+0x8>)
  403e76:	f7ff bbf9 	b.w	40366c <__retarget_lock_release_recursive>
  403e7a:	bf00      	nop
  403e7c:	204014dc 	.word	0x204014dc

00403e80 <_realloc_r>:
  403e80:	2900      	cmp	r1, #0
  403e82:	f000 8095 	beq.w	403fb0 <_realloc_r+0x130>
  403e86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403e8a:	460d      	mov	r5, r1
  403e8c:	4616      	mov	r6, r2
  403e8e:	b083      	sub	sp, #12
  403e90:	4680      	mov	r8, r0
  403e92:	f106 070b 	add.w	r7, r6, #11
  403e96:	f7ff ffe7 	bl	403e68 <__malloc_lock>
  403e9a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  403e9e:	2f16      	cmp	r7, #22
  403ea0:	f02e 0403 	bic.w	r4, lr, #3
  403ea4:	f1a5 0908 	sub.w	r9, r5, #8
  403ea8:	d83c      	bhi.n	403f24 <_realloc_r+0xa4>
  403eaa:	2210      	movs	r2, #16
  403eac:	4617      	mov	r7, r2
  403eae:	42be      	cmp	r6, r7
  403eb0:	d83d      	bhi.n	403f2e <_realloc_r+0xae>
  403eb2:	4294      	cmp	r4, r2
  403eb4:	da43      	bge.n	403f3e <_realloc_r+0xbe>
  403eb6:	4bc4      	ldr	r3, [pc, #784]	; (4041c8 <_realloc_r+0x348>)
  403eb8:	6899      	ldr	r1, [r3, #8]
  403eba:	eb09 0004 	add.w	r0, r9, r4
  403ebe:	4288      	cmp	r0, r1
  403ec0:	f000 80b4 	beq.w	40402c <_realloc_r+0x1ac>
  403ec4:	6843      	ldr	r3, [r0, #4]
  403ec6:	f023 0101 	bic.w	r1, r3, #1
  403eca:	4401      	add	r1, r0
  403ecc:	6849      	ldr	r1, [r1, #4]
  403ece:	07c9      	lsls	r1, r1, #31
  403ed0:	d54c      	bpl.n	403f6c <_realloc_r+0xec>
  403ed2:	f01e 0f01 	tst.w	lr, #1
  403ed6:	f000 809b 	beq.w	404010 <_realloc_r+0x190>
  403eda:	4631      	mov	r1, r6
  403edc:	4640      	mov	r0, r8
  403ede:	f7ff fc47 	bl	403770 <_malloc_r>
  403ee2:	4606      	mov	r6, r0
  403ee4:	2800      	cmp	r0, #0
  403ee6:	d03a      	beq.n	403f5e <_realloc_r+0xde>
  403ee8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403eec:	f023 0301 	bic.w	r3, r3, #1
  403ef0:	444b      	add	r3, r9
  403ef2:	f1a0 0208 	sub.w	r2, r0, #8
  403ef6:	429a      	cmp	r2, r3
  403ef8:	f000 8121 	beq.w	40413e <_realloc_r+0x2be>
  403efc:	1f22      	subs	r2, r4, #4
  403efe:	2a24      	cmp	r2, #36	; 0x24
  403f00:	f200 8107 	bhi.w	404112 <_realloc_r+0x292>
  403f04:	2a13      	cmp	r2, #19
  403f06:	f200 80db 	bhi.w	4040c0 <_realloc_r+0x240>
  403f0a:	4603      	mov	r3, r0
  403f0c:	462a      	mov	r2, r5
  403f0e:	6811      	ldr	r1, [r2, #0]
  403f10:	6019      	str	r1, [r3, #0]
  403f12:	6851      	ldr	r1, [r2, #4]
  403f14:	6059      	str	r1, [r3, #4]
  403f16:	6892      	ldr	r2, [r2, #8]
  403f18:	609a      	str	r2, [r3, #8]
  403f1a:	4629      	mov	r1, r5
  403f1c:	4640      	mov	r0, r8
  403f1e:	f7ff f909 	bl	403134 <_free_r>
  403f22:	e01c      	b.n	403f5e <_realloc_r+0xde>
  403f24:	f027 0707 	bic.w	r7, r7, #7
  403f28:	2f00      	cmp	r7, #0
  403f2a:	463a      	mov	r2, r7
  403f2c:	dabf      	bge.n	403eae <_realloc_r+0x2e>
  403f2e:	2600      	movs	r6, #0
  403f30:	230c      	movs	r3, #12
  403f32:	4630      	mov	r0, r6
  403f34:	f8c8 3000 	str.w	r3, [r8]
  403f38:	b003      	add	sp, #12
  403f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f3e:	462e      	mov	r6, r5
  403f40:	1be3      	subs	r3, r4, r7
  403f42:	2b0f      	cmp	r3, #15
  403f44:	d81e      	bhi.n	403f84 <_realloc_r+0x104>
  403f46:	f8d9 3004 	ldr.w	r3, [r9, #4]
  403f4a:	f003 0301 	and.w	r3, r3, #1
  403f4e:	4323      	orrs	r3, r4
  403f50:	444c      	add	r4, r9
  403f52:	f8c9 3004 	str.w	r3, [r9, #4]
  403f56:	6863      	ldr	r3, [r4, #4]
  403f58:	f043 0301 	orr.w	r3, r3, #1
  403f5c:	6063      	str	r3, [r4, #4]
  403f5e:	4640      	mov	r0, r8
  403f60:	f7ff ff88 	bl	403e74 <__malloc_unlock>
  403f64:	4630      	mov	r0, r6
  403f66:	b003      	add	sp, #12
  403f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f6c:	f023 0303 	bic.w	r3, r3, #3
  403f70:	18e1      	adds	r1, r4, r3
  403f72:	4291      	cmp	r1, r2
  403f74:	db1f      	blt.n	403fb6 <_realloc_r+0x136>
  403f76:	68c3      	ldr	r3, [r0, #12]
  403f78:	6882      	ldr	r2, [r0, #8]
  403f7a:	462e      	mov	r6, r5
  403f7c:	60d3      	str	r3, [r2, #12]
  403f7e:	460c      	mov	r4, r1
  403f80:	609a      	str	r2, [r3, #8]
  403f82:	e7dd      	b.n	403f40 <_realloc_r+0xc0>
  403f84:	f8d9 2004 	ldr.w	r2, [r9, #4]
  403f88:	eb09 0107 	add.w	r1, r9, r7
  403f8c:	f002 0201 	and.w	r2, r2, #1
  403f90:	444c      	add	r4, r9
  403f92:	f043 0301 	orr.w	r3, r3, #1
  403f96:	4317      	orrs	r7, r2
  403f98:	f8c9 7004 	str.w	r7, [r9, #4]
  403f9c:	604b      	str	r3, [r1, #4]
  403f9e:	6863      	ldr	r3, [r4, #4]
  403fa0:	f043 0301 	orr.w	r3, r3, #1
  403fa4:	3108      	adds	r1, #8
  403fa6:	6063      	str	r3, [r4, #4]
  403fa8:	4640      	mov	r0, r8
  403faa:	f7ff f8c3 	bl	403134 <_free_r>
  403fae:	e7d6      	b.n	403f5e <_realloc_r+0xde>
  403fb0:	4611      	mov	r1, r2
  403fb2:	f7ff bbdd 	b.w	403770 <_malloc_r>
  403fb6:	f01e 0f01 	tst.w	lr, #1
  403fba:	d18e      	bne.n	403eda <_realloc_r+0x5a>
  403fbc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403fc0:	eba9 0a01 	sub.w	sl, r9, r1
  403fc4:	f8da 1004 	ldr.w	r1, [sl, #4]
  403fc8:	f021 0103 	bic.w	r1, r1, #3
  403fcc:	440b      	add	r3, r1
  403fce:	4423      	add	r3, r4
  403fd0:	4293      	cmp	r3, r2
  403fd2:	db25      	blt.n	404020 <_realloc_r+0x1a0>
  403fd4:	68c2      	ldr	r2, [r0, #12]
  403fd6:	6881      	ldr	r1, [r0, #8]
  403fd8:	4656      	mov	r6, sl
  403fda:	60ca      	str	r2, [r1, #12]
  403fdc:	6091      	str	r1, [r2, #8]
  403fde:	f8da 100c 	ldr.w	r1, [sl, #12]
  403fe2:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403fe6:	1f22      	subs	r2, r4, #4
  403fe8:	2a24      	cmp	r2, #36	; 0x24
  403fea:	60c1      	str	r1, [r0, #12]
  403fec:	6088      	str	r0, [r1, #8]
  403fee:	f200 8094 	bhi.w	40411a <_realloc_r+0x29a>
  403ff2:	2a13      	cmp	r2, #19
  403ff4:	d96f      	bls.n	4040d6 <_realloc_r+0x256>
  403ff6:	6829      	ldr	r1, [r5, #0]
  403ff8:	f8ca 1008 	str.w	r1, [sl, #8]
  403ffc:	6869      	ldr	r1, [r5, #4]
  403ffe:	f8ca 100c 	str.w	r1, [sl, #12]
  404002:	2a1b      	cmp	r2, #27
  404004:	f200 80a2 	bhi.w	40414c <_realloc_r+0x2cc>
  404008:	3508      	adds	r5, #8
  40400a:	f10a 0210 	add.w	r2, sl, #16
  40400e:	e063      	b.n	4040d8 <_realloc_r+0x258>
  404010:	f855 3c08 	ldr.w	r3, [r5, #-8]
  404014:	eba9 0a03 	sub.w	sl, r9, r3
  404018:	f8da 1004 	ldr.w	r1, [sl, #4]
  40401c:	f021 0103 	bic.w	r1, r1, #3
  404020:	1863      	adds	r3, r4, r1
  404022:	4293      	cmp	r3, r2
  404024:	f6ff af59 	blt.w	403eda <_realloc_r+0x5a>
  404028:	4656      	mov	r6, sl
  40402a:	e7d8      	b.n	403fde <_realloc_r+0x15e>
  40402c:	6841      	ldr	r1, [r0, #4]
  40402e:	f021 0b03 	bic.w	fp, r1, #3
  404032:	44a3      	add	fp, r4
  404034:	f107 0010 	add.w	r0, r7, #16
  404038:	4583      	cmp	fp, r0
  40403a:	da56      	bge.n	4040ea <_realloc_r+0x26a>
  40403c:	f01e 0f01 	tst.w	lr, #1
  404040:	f47f af4b 	bne.w	403eda <_realloc_r+0x5a>
  404044:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404048:	eba9 0a01 	sub.w	sl, r9, r1
  40404c:	f8da 1004 	ldr.w	r1, [sl, #4]
  404050:	f021 0103 	bic.w	r1, r1, #3
  404054:	448b      	add	fp, r1
  404056:	4558      	cmp	r0, fp
  404058:	dce2      	bgt.n	404020 <_realloc_r+0x1a0>
  40405a:	4656      	mov	r6, sl
  40405c:	f8da 100c 	ldr.w	r1, [sl, #12]
  404060:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404064:	1f22      	subs	r2, r4, #4
  404066:	2a24      	cmp	r2, #36	; 0x24
  404068:	60c1      	str	r1, [r0, #12]
  40406a:	6088      	str	r0, [r1, #8]
  40406c:	f200 808f 	bhi.w	40418e <_realloc_r+0x30e>
  404070:	2a13      	cmp	r2, #19
  404072:	f240 808a 	bls.w	40418a <_realloc_r+0x30a>
  404076:	6829      	ldr	r1, [r5, #0]
  404078:	f8ca 1008 	str.w	r1, [sl, #8]
  40407c:	6869      	ldr	r1, [r5, #4]
  40407e:	f8ca 100c 	str.w	r1, [sl, #12]
  404082:	2a1b      	cmp	r2, #27
  404084:	f200 808a 	bhi.w	40419c <_realloc_r+0x31c>
  404088:	3508      	adds	r5, #8
  40408a:	f10a 0210 	add.w	r2, sl, #16
  40408e:	6829      	ldr	r1, [r5, #0]
  404090:	6011      	str	r1, [r2, #0]
  404092:	6869      	ldr	r1, [r5, #4]
  404094:	6051      	str	r1, [r2, #4]
  404096:	68a9      	ldr	r1, [r5, #8]
  404098:	6091      	str	r1, [r2, #8]
  40409a:	eb0a 0107 	add.w	r1, sl, r7
  40409e:	ebab 0207 	sub.w	r2, fp, r7
  4040a2:	f042 0201 	orr.w	r2, r2, #1
  4040a6:	6099      	str	r1, [r3, #8]
  4040a8:	604a      	str	r2, [r1, #4]
  4040aa:	f8da 3004 	ldr.w	r3, [sl, #4]
  4040ae:	f003 0301 	and.w	r3, r3, #1
  4040b2:	431f      	orrs	r7, r3
  4040b4:	4640      	mov	r0, r8
  4040b6:	f8ca 7004 	str.w	r7, [sl, #4]
  4040ba:	f7ff fedb 	bl	403e74 <__malloc_unlock>
  4040be:	e751      	b.n	403f64 <_realloc_r+0xe4>
  4040c0:	682b      	ldr	r3, [r5, #0]
  4040c2:	6003      	str	r3, [r0, #0]
  4040c4:	686b      	ldr	r3, [r5, #4]
  4040c6:	6043      	str	r3, [r0, #4]
  4040c8:	2a1b      	cmp	r2, #27
  4040ca:	d82d      	bhi.n	404128 <_realloc_r+0x2a8>
  4040cc:	f100 0308 	add.w	r3, r0, #8
  4040d0:	f105 0208 	add.w	r2, r5, #8
  4040d4:	e71b      	b.n	403f0e <_realloc_r+0x8e>
  4040d6:	4632      	mov	r2, r6
  4040d8:	6829      	ldr	r1, [r5, #0]
  4040da:	6011      	str	r1, [r2, #0]
  4040dc:	6869      	ldr	r1, [r5, #4]
  4040de:	6051      	str	r1, [r2, #4]
  4040e0:	68a9      	ldr	r1, [r5, #8]
  4040e2:	6091      	str	r1, [r2, #8]
  4040e4:	461c      	mov	r4, r3
  4040e6:	46d1      	mov	r9, sl
  4040e8:	e72a      	b.n	403f40 <_realloc_r+0xc0>
  4040ea:	eb09 0107 	add.w	r1, r9, r7
  4040ee:	ebab 0b07 	sub.w	fp, fp, r7
  4040f2:	f04b 0201 	orr.w	r2, fp, #1
  4040f6:	6099      	str	r1, [r3, #8]
  4040f8:	604a      	str	r2, [r1, #4]
  4040fa:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4040fe:	f003 0301 	and.w	r3, r3, #1
  404102:	431f      	orrs	r7, r3
  404104:	4640      	mov	r0, r8
  404106:	f845 7c04 	str.w	r7, [r5, #-4]
  40410a:	f7ff feb3 	bl	403e74 <__malloc_unlock>
  40410e:	462e      	mov	r6, r5
  404110:	e728      	b.n	403f64 <_realloc_r+0xe4>
  404112:	4629      	mov	r1, r5
  404114:	f7ff fe44 	bl	403da0 <memmove>
  404118:	e6ff      	b.n	403f1a <_realloc_r+0x9a>
  40411a:	4629      	mov	r1, r5
  40411c:	4630      	mov	r0, r6
  40411e:	461c      	mov	r4, r3
  404120:	46d1      	mov	r9, sl
  404122:	f7ff fe3d 	bl	403da0 <memmove>
  404126:	e70b      	b.n	403f40 <_realloc_r+0xc0>
  404128:	68ab      	ldr	r3, [r5, #8]
  40412a:	6083      	str	r3, [r0, #8]
  40412c:	68eb      	ldr	r3, [r5, #12]
  40412e:	60c3      	str	r3, [r0, #12]
  404130:	2a24      	cmp	r2, #36	; 0x24
  404132:	d017      	beq.n	404164 <_realloc_r+0x2e4>
  404134:	f100 0310 	add.w	r3, r0, #16
  404138:	f105 0210 	add.w	r2, r5, #16
  40413c:	e6e7      	b.n	403f0e <_realloc_r+0x8e>
  40413e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404142:	f023 0303 	bic.w	r3, r3, #3
  404146:	441c      	add	r4, r3
  404148:	462e      	mov	r6, r5
  40414a:	e6f9      	b.n	403f40 <_realloc_r+0xc0>
  40414c:	68a9      	ldr	r1, [r5, #8]
  40414e:	f8ca 1010 	str.w	r1, [sl, #16]
  404152:	68e9      	ldr	r1, [r5, #12]
  404154:	f8ca 1014 	str.w	r1, [sl, #20]
  404158:	2a24      	cmp	r2, #36	; 0x24
  40415a:	d00c      	beq.n	404176 <_realloc_r+0x2f6>
  40415c:	3510      	adds	r5, #16
  40415e:	f10a 0218 	add.w	r2, sl, #24
  404162:	e7b9      	b.n	4040d8 <_realloc_r+0x258>
  404164:	692b      	ldr	r3, [r5, #16]
  404166:	6103      	str	r3, [r0, #16]
  404168:	696b      	ldr	r3, [r5, #20]
  40416a:	6143      	str	r3, [r0, #20]
  40416c:	f105 0218 	add.w	r2, r5, #24
  404170:	f100 0318 	add.w	r3, r0, #24
  404174:	e6cb      	b.n	403f0e <_realloc_r+0x8e>
  404176:	692a      	ldr	r2, [r5, #16]
  404178:	f8ca 2018 	str.w	r2, [sl, #24]
  40417c:	696a      	ldr	r2, [r5, #20]
  40417e:	f8ca 201c 	str.w	r2, [sl, #28]
  404182:	3518      	adds	r5, #24
  404184:	f10a 0220 	add.w	r2, sl, #32
  404188:	e7a6      	b.n	4040d8 <_realloc_r+0x258>
  40418a:	4632      	mov	r2, r6
  40418c:	e77f      	b.n	40408e <_realloc_r+0x20e>
  40418e:	4629      	mov	r1, r5
  404190:	4630      	mov	r0, r6
  404192:	9301      	str	r3, [sp, #4]
  404194:	f7ff fe04 	bl	403da0 <memmove>
  404198:	9b01      	ldr	r3, [sp, #4]
  40419a:	e77e      	b.n	40409a <_realloc_r+0x21a>
  40419c:	68a9      	ldr	r1, [r5, #8]
  40419e:	f8ca 1010 	str.w	r1, [sl, #16]
  4041a2:	68e9      	ldr	r1, [r5, #12]
  4041a4:	f8ca 1014 	str.w	r1, [sl, #20]
  4041a8:	2a24      	cmp	r2, #36	; 0x24
  4041aa:	d003      	beq.n	4041b4 <_realloc_r+0x334>
  4041ac:	3510      	adds	r5, #16
  4041ae:	f10a 0218 	add.w	r2, sl, #24
  4041b2:	e76c      	b.n	40408e <_realloc_r+0x20e>
  4041b4:	692a      	ldr	r2, [r5, #16]
  4041b6:	f8ca 2018 	str.w	r2, [sl, #24]
  4041ba:	696a      	ldr	r2, [r5, #20]
  4041bc:	f8ca 201c 	str.w	r2, [sl, #28]
  4041c0:	3518      	adds	r5, #24
  4041c2:	f10a 0220 	add.w	r2, sl, #32
  4041c6:	e762      	b.n	40408e <_realloc_r+0x20e>
  4041c8:	204005b0 	.word	0x204005b0

004041cc <_sbrk_r>:
  4041cc:	b538      	push	{r3, r4, r5, lr}
  4041ce:	4c07      	ldr	r4, [pc, #28]	; (4041ec <_sbrk_r+0x20>)
  4041d0:	2300      	movs	r3, #0
  4041d2:	4605      	mov	r5, r0
  4041d4:	4608      	mov	r0, r1
  4041d6:	6023      	str	r3, [r4, #0]
  4041d8:	f7fd f860 	bl	40129c <_sbrk>
  4041dc:	1c43      	adds	r3, r0, #1
  4041de:	d000      	beq.n	4041e2 <_sbrk_r+0x16>
  4041e0:	bd38      	pop	{r3, r4, r5, pc}
  4041e2:	6823      	ldr	r3, [r4, #0]
  4041e4:	2b00      	cmp	r3, #0
  4041e6:	d0fb      	beq.n	4041e0 <_sbrk_r+0x14>
  4041e8:	602b      	str	r3, [r5, #0]
  4041ea:	bd38      	pop	{r3, r4, r5, pc}
  4041ec:	204014f0 	.word	0x204014f0

004041f0 <_raise_r>:
  4041f0:	291f      	cmp	r1, #31
  4041f2:	d828      	bhi.n	404246 <_raise_r+0x56>
  4041f4:	b520      	push	{r5, lr}
  4041f6:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
  4041fa:	b082      	sub	sp, #8
  4041fc:	4605      	mov	r5, r0
  4041fe:	b1aa      	cbz	r2, 40422c <_raise_r+0x3c>
  404200:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  404204:	b193      	cbz	r3, 40422c <_raise_r+0x3c>
  404206:	2b01      	cmp	r3, #1
  404208:	d00e      	beq.n	404228 <_raise_r+0x38>
  40420a:	1c58      	adds	r0, r3, #1
  40420c:	d007      	beq.n	40421e <_raise_r+0x2e>
  40420e:	2500      	movs	r5, #0
  404210:	4608      	mov	r0, r1
  404212:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  404216:	4798      	blx	r3
  404218:	4628      	mov	r0, r5
  40421a:	b002      	add	sp, #8
  40421c:	bd20      	pop	{r5, pc}
  40421e:	2316      	movs	r3, #22
  404220:	2001      	movs	r0, #1
  404222:	602b      	str	r3, [r5, #0]
  404224:	b002      	add	sp, #8
  404226:	bd20      	pop	{r5, pc}
  404228:	2000      	movs	r0, #0
  40422a:	e7f6      	b.n	40421a <_raise_r+0x2a>
  40422c:	4628      	mov	r0, r5
  40422e:	9101      	str	r1, [sp, #4]
  404230:	f000 f82a 	bl	404288 <_getpid_r>
  404234:	9901      	ldr	r1, [sp, #4]
  404236:	460a      	mov	r2, r1
  404238:	4601      	mov	r1, r0
  40423a:	4628      	mov	r0, r5
  40423c:	b002      	add	sp, #8
  40423e:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
  404242:	f000 b80d 	b.w	404260 <_kill_r>
  404246:	2316      	movs	r3, #22
  404248:	6003      	str	r3, [r0, #0]
  40424a:	f04f 30ff 	mov.w	r0, #4294967295
  40424e:	4770      	bx	lr

00404250 <raise>:
  404250:	4b02      	ldr	r3, [pc, #8]	; (40425c <raise+0xc>)
  404252:	4601      	mov	r1, r0
  404254:	6818      	ldr	r0, [r3, #0]
  404256:	f7ff bfcb 	b.w	4041f0 <_raise_r>
  40425a:	bf00      	nop
  40425c:	20400014 	.word	0x20400014

00404260 <_kill_r>:
  404260:	b538      	push	{r3, r4, r5, lr}
  404262:	460b      	mov	r3, r1
  404264:	4c07      	ldr	r4, [pc, #28]	; (404284 <_kill_r+0x24>)
  404266:	4605      	mov	r5, r0
  404268:	4611      	mov	r1, r2
  40426a:	4618      	mov	r0, r3
  40426c:	2300      	movs	r3, #0
  40426e:	6023      	str	r3, [r4, #0]
  404270:	f7fd f83e 	bl	4012f0 <_kill>
  404274:	1c43      	adds	r3, r0, #1
  404276:	d000      	beq.n	40427a <_kill_r+0x1a>
  404278:	bd38      	pop	{r3, r4, r5, pc}
  40427a:	6823      	ldr	r3, [r4, #0]
  40427c:	2b00      	cmp	r3, #0
  40427e:	d0fb      	beq.n	404278 <_kill_r+0x18>
  404280:	602b      	str	r3, [r5, #0]
  404282:	bd38      	pop	{r3, r4, r5, pc}
  404284:	204014f0 	.word	0x204014f0

00404288 <_getpid_r>:
  404288:	f7fd b833 	b.w	4012f2 <_getpid>

0040428c <__sread>:
  40428c:	b510      	push	{r4, lr}
  40428e:	460c      	mov	r4, r1
  404290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404294:	f000 fa7a 	bl	40478c <_read_r>
  404298:	2800      	cmp	r0, #0
  40429a:	db03      	blt.n	4042a4 <__sread+0x18>
  40429c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40429e:	4403      	add	r3, r0
  4042a0:	6523      	str	r3, [r4, #80]	; 0x50
  4042a2:	bd10      	pop	{r4, pc}
  4042a4:	89a3      	ldrh	r3, [r4, #12]
  4042a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4042aa:	81a3      	strh	r3, [r4, #12]
  4042ac:	bd10      	pop	{r4, pc}
  4042ae:	bf00      	nop

004042b0 <__swrite>:
  4042b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4042b4:	4616      	mov	r6, r2
  4042b6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4042ba:	461f      	mov	r7, r3
  4042bc:	05d3      	lsls	r3, r2, #23
  4042be:	460c      	mov	r4, r1
  4042c0:	4605      	mov	r5, r0
  4042c2:	d507      	bpl.n	4042d4 <__swrite+0x24>
  4042c4:	2200      	movs	r2, #0
  4042c6:	2302      	movs	r3, #2
  4042c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4042cc:	f000 fa48 	bl	404760 <_lseek_r>
  4042d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4042d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4042d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4042dc:	81a2      	strh	r2, [r4, #12]
  4042de:	463b      	mov	r3, r7
  4042e0:	4632      	mov	r2, r6
  4042e2:	4628      	mov	r0, r5
  4042e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4042e8:	f000 b928 	b.w	40453c <_write_r>

004042ec <__sseek>:
  4042ec:	b510      	push	{r4, lr}
  4042ee:	460c      	mov	r4, r1
  4042f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4042f4:	f000 fa34 	bl	404760 <_lseek_r>
  4042f8:	89a3      	ldrh	r3, [r4, #12]
  4042fa:	1c42      	adds	r2, r0, #1
  4042fc:	bf0e      	itee	eq
  4042fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404302:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404306:	6520      	strne	r0, [r4, #80]	; 0x50
  404308:	81a3      	strh	r3, [r4, #12]
  40430a:	bd10      	pop	{r4, pc}

0040430c <__sclose>:
  40430c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404310:	f000 b98c 	b.w	40462c <_close_r>
	...

00404340 <strlen>:
  404340:	f890 f000 	pld	[r0]
  404344:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404348:	f020 0107 	bic.w	r1, r0, #7
  40434c:	f06f 0c00 	mvn.w	ip, #0
  404350:	f010 0407 	ands.w	r4, r0, #7
  404354:	f891 f020 	pld	[r1, #32]
  404358:	f040 8049 	bne.w	4043ee <strlen+0xae>
  40435c:	f04f 0400 	mov.w	r4, #0
  404360:	f06f 0007 	mvn.w	r0, #7
  404364:	e9d1 2300 	ldrd	r2, r3, [r1]
  404368:	f891 f040 	pld	[r1, #64]	; 0x40
  40436c:	f100 0008 	add.w	r0, r0, #8
  404370:	fa82 f24c 	uadd8	r2, r2, ip
  404374:	faa4 f28c 	sel	r2, r4, ip
  404378:	fa83 f34c 	uadd8	r3, r3, ip
  40437c:	faa2 f38c 	sel	r3, r2, ip
  404380:	bb4b      	cbnz	r3, 4043d6 <strlen+0x96>
  404382:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404386:	fa82 f24c 	uadd8	r2, r2, ip
  40438a:	f100 0008 	add.w	r0, r0, #8
  40438e:	faa4 f28c 	sel	r2, r4, ip
  404392:	fa83 f34c 	uadd8	r3, r3, ip
  404396:	faa2 f38c 	sel	r3, r2, ip
  40439a:	b9e3      	cbnz	r3, 4043d6 <strlen+0x96>
  40439c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4043a0:	fa82 f24c 	uadd8	r2, r2, ip
  4043a4:	f100 0008 	add.w	r0, r0, #8
  4043a8:	faa4 f28c 	sel	r2, r4, ip
  4043ac:	fa83 f34c 	uadd8	r3, r3, ip
  4043b0:	faa2 f38c 	sel	r3, r2, ip
  4043b4:	b97b      	cbnz	r3, 4043d6 <strlen+0x96>
  4043b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4043ba:	f101 0120 	add.w	r1, r1, #32
  4043be:	fa82 f24c 	uadd8	r2, r2, ip
  4043c2:	f100 0008 	add.w	r0, r0, #8
  4043c6:	faa4 f28c 	sel	r2, r4, ip
  4043ca:	fa83 f34c 	uadd8	r3, r3, ip
  4043ce:	faa2 f38c 	sel	r3, r2, ip
  4043d2:	2b00      	cmp	r3, #0
  4043d4:	d0c6      	beq.n	404364 <strlen+0x24>
  4043d6:	2a00      	cmp	r2, #0
  4043d8:	bf04      	itt	eq
  4043da:	3004      	addeq	r0, #4
  4043dc:	461a      	moveq	r2, r3
  4043de:	ba12      	rev	r2, r2
  4043e0:	fab2 f282 	clz	r2, r2
  4043e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4043e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4043ec:	4770      	bx	lr
  4043ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4043f2:	f004 0503 	and.w	r5, r4, #3
  4043f6:	f1c4 0000 	rsb	r0, r4, #0
  4043fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4043fe:	f014 0f04 	tst.w	r4, #4
  404402:	f891 f040 	pld	[r1, #64]	; 0x40
  404406:	fa0c f505 	lsl.w	r5, ip, r5
  40440a:	ea62 0205 	orn	r2, r2, r5
  40440e:	bf1c      	itt	ne
  404410:	ea63 0305 	ornne	r3, r3, r5
  404414:	4662      	movne	r2, ip
  404416:	f04f 0400 	mov.w	r4, #0
  40441a:	e7a9      	b.n	404370 <strlen+0x30>

0040441c <__swbuf_r>:
  40441c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40441e:	460d      	mov	r5, r1
  404420:	4614      	mov	r4, r2
  404422:	4606      	mov	r6, r0
  404424:	b110      	cbz	r0, 40442c <__swbuf_r+0x10>
  404426:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404428:	2b00      	cmp	r3, #0
  40442a:	d04b      	beq.n	4044c4 <__swbuf_r+0xa8>
  40442c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404430:	69a3      	ldr	r3, [r4, #24]
  404432:	60a3      	str	r3, [r4, #8]
  404434:	b291      	uxth	r1, r2
  404436:	0708      	lsls	r0, r1, #28
  404438:	d539      	bpl.n	4044ae <__swbuf_r+0x92>
  40443a:	6923      	ldr	r3, [r4, #16]
  40443c:	2b00      	cmp	r3, #0
  40443e:	d036      	beq.n	4044ae <__swbuf_r+0x92>
  404440:	b2ed      	uxtb	r5, r5
  404442:	0489      	lsls	r1, r1, #18
  404444:	462f      	mov	r7, r5
  404446:	d515      	bpl.n	404474 <__swbuf_r+0x58>
  404448:	6822      	ldr	r2, [r4, #0]
  40444a:	6961      	ldr	r1, [r4, #20]
  40444c:	1ad3      	subs	r3, r2, r3
  40444e:	428b      	cmp	r3, r1
  404450:	da1c      	bge.n	40448c <__swbuf_r+0x70>
  404452:	3301      	adds	r3, #1
  404454:	68a1      	ldr	r1, [r4, #8]
  404456:	1c50      	adds	r0, r2, #1
  404458:	3901      	subs	r1, #1
  40445a:	60a1      	str	r1, [r4, #8]
  40445c:	6020      	str	r0, [r4, #0]
  40445e:	7015      	strb	r5, [r2, #0]
  404460:	6962      	ldr	r2, [r4, #20]
  404462:	429a      	cmp	r2, r3
  404464:	d01a      	beq.n	40449c <__swbuf_r+0x80>
  404466:	89a3      	ldrh	r3, [r4, #12]
  404468:	07db      	lsls	r3, r3, #31
  40446a:	d501      	bpl.n	404470 <__swbuf_r+0x54>
  40446c:	2d0a      	cmp	r5, #10
  40446e:	d015      	beq.n	40449c <__swbuf_r+0x80>
  404470:	4638      	mov	r0, r7
  404472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404474:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404476:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40447a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40447e:	81a2      	strh	r2, [r4, #12]
  404480:	6822      	ldr	r2, [r4, #0]
  404482:	6661      	str	r1, [r4, #100]	; 0x64
  404484:	6961      	ldr	r1, [r4, #20]
  404486:	1ad3      	subs	r3, r2, r3
  404488:	428b      	cmp	r3, r1
  40448a:	dbe2      	blt.n	404452 <__swbuf_r+0x36>
  40448c:	4621      	mov	r1, r4
  40448e:	4630      	mov	r0, r6
  404490:	f7fe fcd2 	bl	402e38 <_fflush_r>
  404494:	b940      	cbnz	r0, 4044a8 <__swbuf_r+0x8c>
  404496:	6822      	ldr	r2, [r4, #0]
  404498:	2301      	movs	r3, #1
  40449a:	e7db      	b.n	404454 <__swbuf_r+0x38>
  40449c:	4621      	mov	r1, r4
  40449e:	4630      	mov	r0, r6
  4044a0:	f7fe fcca 	bl	402e38 <_fflush_r>
  4044a4:	2800      	cmp	r0, #0
  4044a6:	d0e3      	beq.n	404470 <__swbuf_r+0x54>
  4044a8:	f04f 37ff 	mov.w	r7, #4294967295
  4044ac:	e7e0      	b.n	404470 <__swbuf_r+0x54>
  4044ae:	4621      	mov	r1, r4
  4044b0:	4630      	mov	r0, r6
  4044b2:	f7fe fba5 	bl	402c00 <__swsetup_r>
  4044b6:	2800      	cmp	r0, #0
  4044b8:	d1f6      	bne.n	4044a8 <__swbuf_r+0x8c>
  4044ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4044be:	6923      	ldr	r3, [r4, #16]
  4044c0:	b291      	uxth	r1, r2
  4044c2:	e7bd      	b.n	404440 <__swbuf_r+0x24>
  4044c4:	f7fe fd10 	bl	402ee8 <__sinit>
  4044c8:	e7b0      	b.n	40442c <__swbuf_r+0x10>
  4044ca:	bf00      	nop

004044cc <_wcrtomb_r>:
  4044cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4044ce:	4606      	mov	r6, r0
  4044d0:	b085      	sub	sp, #20
  4044d2:	461f      	mov	r7, r3
  4044d4:	b189      	cbz	r1, 4044fa <_wcrtomb_r+0x2e>
  4044d6:	4c10      	ldr	r4, [pc, #64]	; (404518 <_wcrtomb_r+0x4c>)
  4044d8:	4d10      	ldr	r5, [pc, #64]	; (40451c <_wcrtomb_r+0x50>)
  4044da:	6824      	ldr	r4, [r4, #0]
  4044dc:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4044de:	2c00      	cmp	r4, #0
  4044e0:	bf08      	it	eq
  4044e2:	462c      	moveq	r4, r5
  4044e4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4044e8:	47a0      	blx	r4
  4044ea:	1c43      	adds	r3, r0, #1
  4044ec:	d103      	bne.n	4044f6 <_wcrtomb_r+0x2a>
  4044ee:	2200      	movs	r2, #0
  4044f0:	238a      	movs	r3, #138	; 0x8a
  4044f2:	603a      	str	r2, [r7, #0]
  4044f4:	6033      	str	r3, [r6, #0]
  4044f6:	b005      	add	sp, #20
  4044f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4044fa:	460c      	mov	r4, r1
  4044fc:	4906      	ldr	r1, [pc, #24]	; (404518 <_wcrtomb_r+0x4c>)
  4044fe:	4a07      	ldr	r2, [pc, #28]	; (40451c <_wcrtomb_r+0x50>)
  404500:	6809      	ldr	r1, [r1, #0]
  404502:	6b49      	ldr	r1, [r1, #52]	; 0x34
  404504:	2900      	cmp	r1, #0
  404506:	bf08      	it	eq
  404508:	4611      	moveq	r1, r2
  40450a:	4622      	mov	r2, r4
  40450c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  404510:	a901      	add	r1, sp, #4
  404512:	47a0      	blx	r4
  404514:	e7e9      	b.n	4044ea <_wcrtomb_r+0x1e>
  404516:	bf00      	nop
  404518:	20400014 	.word	0x20400014
  40451c:	20400444 	.word	0x20400444

00404520 <__ascii_wctomb>:
  404520:	b121      	cbz	r1, 40452c <__ascii_wctomb+0xc>
  404522:	2aff      	cmp	r2, #255	; 0xff
  404524:	d804      	bhi.n	404530 <__ascii_wctomb+0x10>
  404526:	700a      	strb	r2, [r1, #0]
  404528:	2001      	movs	r0, #1
  40452a:	4770      	bx	lr
  40452c:	4608      	mov	r0, r1
  40452e:	4770      	bx	lr
  404530:	238a      	movs	r3, #138	; 0x8a
  404532:	6003      	str	r3, [r0, #0]
  404534:	f04f 30ff 	mov.w	r0, #4294967295
  404538:	4770      	bx	lr
  40453a:	bf00      	nop

0040453c <_write_r>:
  40453c:	b570      	push	{r4, r5, r6, lr}
  40453e:	460d      	mov	r5, r1
  404540:	4c08      	ldr	r4, [pc, #32]	; (404564 <_write_r+0x28>)
  404542:	4611      	mov	r1, r2
  404544:	4606      	mov	r6, r0
  404546:	461a      	mov	r2, r3
  404548:	4628      	mov	r0, r5
  40454a:	2300      	movs	r3, #0
  40454c:	6023      	str	r3, [r4, #0]
  40454e:	f7fc f883 	bl	400658 <_write>
  404552:	1c43      	adds	r3, r0, #1
  404554:	d000      	beq.n	404558 <_write_r+0x1c>
  404556:	bd70      	pop	{r4, r5, r6, pc}
  404558:	6823      	ldr	r3, [r4, #0]
  40455a:	2b00      	cmp	r3, #0
  40455c:	d0fb      	beq.n	404556 <_write_r+0x1a>
  40455e:	6033      	str	r3, [r6, #0]
  404560:	bd70      	pop	{r4, r5, r6, pc}
  404562:	bf00      	nop
  404564:	204014f0 	.word	0x204014f0

00404568 <__register_exitproc>:
  404568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40456c:	4d2c      	ldr	r5, [pc, #176]	; (404620 <__register_exitproc+0xb8>)
  40456e:	4606      	mov	r6, r0
  404570:	6828      	ldr	r0, [r5, #0]
  404572:	4698      	mov	r8, r3
  404574:	460f      	mov	r7, r1
  404576:	4691      	mov	r9, r2
  404578:	f7ff f876 	bl	403668 <__retarget_lock_acquire_recursive>
  40457c:	4b29      	ldr	r3, [pc, #164]	; (404624 <__register_exitproc+0xbc>)
  40457e:	681c      	ldr	r4, [r3, #0]
  404580:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  404584:	2b00      	cmp	r3, #0
  404586:	d03e      	beq.n	404606 <__register_exitproc+0x9e>
  404588:	685a      	ldr	r2, [r3, #4]
  40458a:	2a1f      	cmp	r2, #31
  40458c:	dc1c      	bgt.n	4045c8 <__register_exitproc+0x60>
  40458e:	f102 0e01 	add.w	lr, r2, #1
  404592:	b176      	cbz	r6, 4045b2 <__register_exitproc+0x4a>
  404594:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  404598:	2401      	movs	r4, #1
  40459a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40459e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4045a2:	4094      	lsls	r4, r2
  4045a4:	4320      	orrs	r0, r4
  4045a6:	2e02      	cmp	r6, #2
  4045a8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4045ac:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4045b0:	d023      	beq.n	4045fa <__register_exitproc+0x92>
  4045b2:	3202      	adds	r2, #2
  4045b4:	f8c3 e004 	str.w	lr, [r3, #4]
  4045b8:	6828      	ldr	r0, [r5, #0]
  4045ba:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4045be:	f7ff f855 	bl	40366c <__retarget_lock_release_recursive>
  4045c2:	2000      	movs	r0, #0
  4045c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4045c8:	4b17      	ldr	r3, [pc, #92]	; (404628 <__register_exitproc+0xc0>)
  4045ca:	b30b      	cbz	r3, 404610 <__register_exitproc+0xa8>
  4045cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4045d0:	f7ff f8c6 	bl	403760 <malloc>
  4045d4:	4603      	mov	r3, r0
  4045d6:	b1d8      	cbz	r0, 404610 <__register_exitproc+0xa8>
  4045d8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4045dc:	6002      	str	r2, [r0, #0]
  4045de:	2100      	movs	r1, #0
  4045e0:	6041      	str	r1, [r0, #4]
  4045e2:	460a      	mov	r2, r1
  4045e4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4045e8:	f04f 0e01 	mov.w	lr, #1
  4045ec:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4045f0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4045f4:	2e00      	cmp	r6, #0
  4045f6:	d0dc      	beq.n	4045b2 <__register_exitproc+0x4a>
  4045f8:	e7cc      	b.n	404594 <__register_exitproc+0x2c>
  4045fa:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4045fe:	430c      	orrs	r4, r1
  404600:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  404604:	e7d5      	b.n	4045b2 <__register_exitproc+0x4a>
  404606:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40460a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40460e:	e7bb      	b.n	404588 <__register_exitproc+0x20>
  404610:	6828      	ldr	r0, [r5, #0]
  404612:	f7ff f82b 	bl	40366c <__retarget_lock_release_recursive>
  404616:	f04f 30ff 	mov.w	r0, #4294967295
  40461a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40461e:	bf00      	nop
  404620:	20400440 	.word	0x20400440
  404624:	004050b8 	.word	0x004050b8
  404628:	00403761 	.word	0x00403761

0040462c <_close_r>:
  40462c:	b538      	push	{r3, r4, r5, lr}
  40462e:	4c07      	ldr	r4, [pc, #28]	; (40464c <_close_r+0x20>)
  404630:	2300      	movs	r3, #0
  404632:	4605      	mov	r5, r0
  404634:	4608      	mov	r0, r1
  404636:	6023      	str	r3, [r4, #0]
  404638:	f7fc fe4c 	bl	4012d4 <_close>
  40463c:	1c43      	adds	r3, r0, #1
  40463e:	d000      	beq.n	404642 <_close_r+0x16>
  404640:	bd38      	pop	{r3, r4, r5, pc}
  404642:	6823      	ldr	r3, [r4, #0]
  404644:	2b00      	cmp	r3, #0
  404646:	d0fb      	beq.n	404640 <_close_r+0x14>
  404648:	602b      	str	r3, [r5, #0]
  40464a:	bd38      	pop	{r3, r4, r5, pc}
  40464c:	204014f0 	.word	0x204014f0

00404650 <_fclose_r>:
  404650:	b570      	push	{r4, r5, r6, lr}
  404652:	b159      	cbz	r1, 40466c <_fclose_r+0x1c>
  404654:	4605      	mov	r5, r0
  404656:	460c      	mov	r4, r1
  404658:	b110      	cbz	r0, 404660 <_fclose_r+0x10>
  40465a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40465c:	2b00      	cmp	r3, #0
  40465e:	d03c      	beq.n	4046da <_fclose_r+0x8a>
  404660:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404662:	07d8      	lsls	r0, r3, #31
  404664:	d505      	bpl.n	404672 <_fclose_r+0x22>
  404666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40466a:	b92b      	cbnz	r3, 404678 <_fclose_r+0x28>
  40466c:	2600      	movs	r6, #0
  40466e:	4630      	mov	r0, r6
  404670:	bd70      	pop	{r4, r5, r6, pc}
  404672:	89a3      	ldrh	r3, [r4, #12]
  404674:	0599      	lsls	r1, r3, #22
  404676:	d53c      	bpl.n	4046f2 <_fclose_r+0xa2>
  404678:	4621      	mov	r1, r4
  40467a:	4628      	mov	r0, r5
  40467c:	f7fe fb3c 	bl	402cf8 <__sflush_r>
  404680:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404682:	4606      	mov	r6, r0
  404684:	b133      	cbz	r3, 404694 <_fclose_r+0x44>
  404686:	69e1      	ldr	r1, [r4, #28]
  404688:	4628      	mov	r0, r5
  40468a:	4798      	blx	r3
  40468c:	2800      	cmp	r0, #0
  40468e:	bfb8      	it	lt
  404690:	f04f 36ff 	movlt.w	r6, #4294967295
  404694:	89a3      	ldrh	r3, [r4, #12]
  404696:	061a      	lsls	r2, r3, #24
  404698:	d422      	bmi.n	4046e0 <_fclose_r+0x90>
  40469a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40469c:	b141      	cbz	r1, 4046b0 <_fclose_r+0x60>
  40469e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4046a2:	4299      	cmp	r1, r3
  4046a4:	d002      	beq.n	4046ac <_fclose_r+0x5c>
  4046a6:	4628      	mov	r0, r5
  4046a8:	f7fe fd44 	bl	403134 <_free_r>
  4046ac:	2300      	movs	r3, #0
  4046ae:	6323      	str	r3, [r4, #48]	; 0x30
  4046b0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4046b2:	b121      	cbz	r1, 4046be <_fclose_r+0x6e>
  4046b4:	4628      	mov	r0, r5
  4046b6:	f7fe fd3d 	bl	403134 <_free_r>
  4046ba:	2300      	movs	r3, #0
  4046bc:	6463      	str	r3, [r4, #68]	; 0x44
  4046be:	f7fe fc3f 	bl	402f40 <__sfp_lock_acquire>
  4046c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4046c4:	2200      	movs	r2, #0
  4046c6:	07db      	lsls	r3, r3, #31
  4046c8:	81a2      	strh	r2, [r4, #12]
  4046ca:	d50e      	bpl.n	4046ea <_fclose_r+0x9a>
  4046cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4046ce:	f7fe ffc9 	bl	403664 <__retarget_lock_close_recursive>
  4046d2:	f7fe fc3b 	bl	402f4c <__sfp_lock_release>
  4046d6:	4630      	mov	r0, r6
  4046d8:	bd70      	pop	{r4, r5, r6, pc}
  4046da:	f7fe fc05 	bl	402ee8 <__sinit>
  4046de:	e7bf      	b.n	404660 <_fclose_r+0x10>
  4046e0:	6921      	ldr	r1, [r4, #16]
  4046e2:	4628      	mov	r0, r5
  4046e4:	f7fe fd26 	bl	403134 <_free_r>
  4046e8:	e7d7      	b.n	40469a <_fclose_r+0x4a>
  4046ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4046ec:	f7fe ffbe 	bl	40366c <__retarget_lock_release_recursive>
  4046f0:	e7ec      	b.n	4046cc <_fclose_r+0x7c>
  4046f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4046f4:	f7fe ffb8 	bl	403668 <__retarget_lock_acquire_recursive>
  4046f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4046fc:	2b00      	cmp	r3, #0
  4046fe:	d1bb      	bne.n	404678 <_fclose_r+0x28>
  404700:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404702:	f016 0601 	ands.w	r6, r6, #1
  404706:	d1b1      	bne.n	40466c <_fclose_r+0x1c>
  404708:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40470a:	f7fe ffaf 	bl	40366c <__retarget_lock_release_recursive>
  40470e:	4630      	mov	r0, r6
  404710:	bd70      	pop	{r4, r5, r6, pc}
  404712:	bf00      	nop

00404714 <_fstat_r>:
  404714:	b538      	push	{r3, r4, r5, lr}
  404716:	460b      	mov	r3, r1
  404718:	4c07      	ldr	r4, [pc, #28]	; (404738 <_fstat_r+0x24>)
  40471a:	4605      	mov	r5, r0
  40471c:	4611      	mov	r1, r2
  40471e:	4618      	mov	r0, r3
  404720:	2300      	movs	r3, #0
  404722:	6023      	str	r3, [r4, #0]
  404724:	f7fc fdd9 	bl	4012da <_fstat>
  404728:	1c43      	adds	r3, r0, #1
  40472a:	d000      	beq.n	40472e <_fstat_r+0x1a>
  40472c:	bd38      	pop	{r3, r4, r5, pc}
  40472e:	6823      	ldr	r3, [r4, #0]
  404730:	2b00      	cmp	r3, #0
  404732:	d0fb      	beq.n	40472c <_fstat_r+0x18>
  404734:	602b      	str	r3, [r5, #0]
  404736:	bd38      	pop	{r3, r4, r5, pc}
  404738:	204014f0 	.word	0x204014f0

0040473c <_isatty_r>:
  40473c:	b538      	push	{r3, r4, r5, lr}
  40473e:	4c07      	ldr	r4, [pc, #28]	; (40475c <_isatty_r+0x20>)
  404740:	2300      	movs	r3, #0
  404742:	4605      	mov	r5, r0
  404744:	4608      	mov	r0, r1
  404746:	6023      	str	r3, [r4, #0]
  404748:	f7fc fdcc 	bl	4012e4 <_isatty>
  40474c:	1c43      	adds	r3, r0, #1
  40474e:	d000      	beq.n	404752 <_isatty_r+0x16>
  404750:	bd38      	pop	{r3, r4, r5, pc}
  404752:	6823      	ldr	r3, [r4, #0]
  404754:	2b00      	cmp	r3, #0
  404756:	d0fb      	beq.n	404750 <_isatty_r+0x14>
  404758:	602b      	str	r3, [r5, #0]
  40475a:	bd38      	pop	{r3, r4, r5, pc}
  40475c:	204014f0 	.word	0x204014f0

00404760 <_lseek_r>:
  404760:	b570      	push	{r4, r5, r6, lr}
  404762:	460d      	mov	r5, r1
  404764:	4c08      	ldr	r4, [pc, #32]	; (404788 <_lseek_r+0x28>)
  404766:	4611      	mov	r1, r2
  404768:	4606      	mov	r6, r0
  40476a:	461a      	mov	r2, r3
  40476c:	4628      	mov	r0, r5
  40476e:	2300      	movs	r3, #0
  404770:	6023      	str	r3, [r4, #0]
  404772:	f7fc fdb9 	bl	4012e8 <_lseek>
  404776:	1c43      	adds	r3, r0, #1
  404778:	d000      	beq.n	40477c <_lseek_r+0x1c>
  40477a:	bd70      	pop	{r4, r5, r6, pc}
  40477c:	6823      	ldr	r3, [r4, #0]
  40477e:	2b00      	cmp	r3, #0
  404780:	d0fb      	beq.n	40477a <_lseek_r+0x1a>
  404782:	6033      	str	r3, [r6, #0]
  404784:	bd70      	pop	{r4, r5, r6, pc}
  404786:	bf00      	nop
  404788:	204014f0 	.word	0x204014f0

0040478c <_read_r>:
  40478c:	b570      	push	{r4, r5, r6, lr}
  40478e:	460d      	mov	r5, r1
  404790:	4c08      	ldr	r4, [pc, #32]	; (4047b4 <_read_r+0x28>)
  404792:	4611      	mov	r1, r2
  404794:	4606      	mov	r6, r0
  404796:	461a      	mov	r2, r3
  404798:	4628      	mov	r0, r5
  40479a:	2300      	movs	r3, #0
  40479c:	6023      	str	r3, [r4, #0]
  40479e:	f7fb ff3d 	bl	40061c <_read>
  4047a2:	1c43      	adds	r3, r0, #1
  4047a4:	d000      	beq.n	4047a8 <_read_r+0x1c>
  4047a6:	bd70      	pop	{r4, r5, r6, pc}
  4047a8:	6823      	ldr	r3, [r4, #0]
  4047aa:	2b00      	cmp	r3, #0
  4047ac:	d0fb      	beq.n	4047a6 <_read_r+0x1a>
  4047ae:	6033      	str	r3, [r6, #0]
  4047b0:	bd70      	pop	{r4, r5, r6, pc}
  4047b2:	bf00      	nop
  4047b4:	204014f0 	.word	0x204014f0

004047b8 <__aeabi_uldivmod>:
  4047b8:	b953      	cbnz	r3, 4047d0 <__aeabi_uldivmod+0x18>
  4047ba:	b94a      	cbnz	r2, 4047d0 <__aeabi_uldivmod+0x18>
  4047bc:	2900      	cmp	r1, #0
  4047be:	bf08      	it	eq
  4047c0:	2800      	cmpeq	r0, #0
  4047c2:	bf1c      	itt	ne
  4047c4:	f04f 31ff 	movne.w	r1, #4294967295
  4047c8:	f04f 30ff 	movne.w	r0, #4294967295
  4047cc:	f000 b97a 	b.w	404ac4 <__aeabi_idiv0>
  4047d0:	f1ad 0c08 	sub.w	ip, sp, #8
  4047d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4047d8:	f000 f806 	bl	4047e8 <__udivmoddi4>
  4047dc:	f8dd e004 	ldr.w	lr, [sp, #4]
  4047e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4047e4:	b004      	add	sp, #16
  4047e6:	4770      	bx	lr

004047e8 <__udivmoddi4>:
  4047e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4047ec:	468c      	mov	ip, r1
  4047ee:	460d      	mov	r5, r1
  4047f0:	4604      	mov	r4, r0
  4047f2:	9e08      	ldr	r6, [sp, #32]
  4047f4:	2b00      	cmp	r3, #0
  4047f6:	d151      	bne.n	40489c <__udivmoddi4+0xb4>
  4047f8:	428a      	cmp	r2, r1
  4047fa:	4617      	mov	r7, r2
  4047fc:	d96d      	bls.n	4048da <__udivmoddi4+0xf2>
  4047fe:	fab2 fe82 	clz	lr, r2
  404802:	f1be 0f00 	cmp.w	lr, #0
  404806:	d00b      	beq.n	404820 <__udivmoddi4+0x38>
  404808:	f1ce 0c20 	rsb	ip, lr, #32
  40480c:	fa01 f50e 	lsl.w	r5, r1, lr
  404810:	fa20 fc0c 	lsr.w	ip, r0, ip
  404814:	fa02 f70e 	lsl.w	r7, r2, lr
  404818:	ea4c 0c05 	orr.w	ip, ip, r5
  40481c:	fa00 f40e 	lsl.w	r4, r0, lr
  404820:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  404824:	0c25      	lsrs	r5, r4, #16
  404826:	fbbc f8fa 	udiv	r8, ip, sl
  40482a:	fa1f f987 	uxth.w	r9, r7
  40482e:	fb0a cc18 	mls	ip, sl, r8, ip
  404832:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  404836:	fb08 f309 	mul.w	r3, r8, r9
  40483a:	42ab      	cmp	r3, r5
  40483c:	d90a      	bls.n	404854 <__udivmoddi4+0x6c>
  40483e:	19ed      	adds	r5, r5, r7
  404840:	f108 32ff 	add.w	r2, r8, #4294967295
  404844:	f080 8123 	bcs.w	404a8e <__udivmoddi4+0x2a6>
  404848:	42ab      	cmp	r3, r5
  40484a:	f240 8120 	bls.w	404a8e <__udivmoddi4+0x2a6>
  40484e:	f1a8 0802 	sub.w	r8, r8, #2
  404852:	443d      	add	r5, r7
  404854:	1aed      	subs	r5, r5, r3
  404856:	b2a4      	uxth	r4, r4
  404858:	fbb5 f0fa 	udiv	r0, r5, sl
  40485c:	fb0a 5510 	mls	r5, sl, r0, r5
  404860:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  404864:	fb00 f909 	mul.w	r9, r0, r9
  404868:	45a1      	cmp	r9, r4
  40486a:	d909      	bls.n	404880 <__udivmoddi4+0x98>
  40486c:	19e4      	adds	r4, r4, r7
  40486e:	f100 33ff 	add.w	r3, r0, #4294967295
  404872:	f080 810a 	bcs.w	404a8a <__udivmoddi4+0x2a2>
  404876:	45a1      	cmp	r9, r4
  404878:	f240 8107 	bls.w	404a8a <__udivmoddi4+0x2a2>
  40487c:	3802      	subs	r0, #2
  40487e:	443c      	add	r4, r7
  404880:	eba4 0409 	sub.w	r4, r4, r9
  404884:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  404888:	2100      	movs	r1, #0
  40488a:	2e00      	cmp	r6, #0
  40488c:	d061      	beq.n	404952 <__udivmoddi4+0x16a>
  40488e:	fa24 f40e 	lsr.w	r4, r4, lr
  404892:	2300      	movs	r3, #0
  404894:	6034      	str	r4, [r6, #0]
  404896:	6073      	str	r3, [r6, #4]
  404898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40489c:	428b      	cmp	r3, r1
  40489e:	d907      	bls.n	4048b0 <__udivmoddi4+0xc8>
  4048a0:	2e00      	cmp	r6, #0
  4048a2:	d054      	beq.n	40494e <__udivmoddi4+0x166>
  4048a4:	2100      	movs	r1, #0
  4048a6:	e886 0021 	stmia.w	r6, {r0, r5}
  4048aa:	4608      	mov	r0, r1
  4048ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4048b0:	fab3 f183 	clz	r1, r3
  4048b4:	2900      	cmp	r1, #0
  4048b6:	f040 808e 	bne.w	4049d6 <__udivmoddi4+0x1ee>
  4048ba:	42ab      	cmp	r3, r5
  4048bc:	d302      	bcc.n	4048c4 <__udivmoddi4+0xdc>
  4048be:	4282      	cmp	r2, r0
  4048c0:	f200 80fa 	bhi.w	404ab8 <__udivmoddi4+0x2d0>
  4048c4:	1a84      	subs	r4, r0, r2
  4048c6:	eb65 0503 	sbc.w	r5, r5, r3
  4048ca:	2001      	movs	r0, #1
  4048cc:	46ac      	mov	ip, r5
  4048ce:	2e00      	cmp	r6, #0
  4048d0:	d03f      	beq.n	404952 <__udivmoddi4+0x16a>
  4048d2:	e886 1010 	stmia.w	r6, {r4, ip}
  4048d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4048da:	b912      	cbnz	r2, 4048e2 <__udivmoddi4+0xfa>
  4048dc:	2701      	movs	r7, #1
  4048de:	fbb7 f7f2 	udiv	r7, r7, r2
  4048e2:	fab7 fe87 	clz	lr, r7
  4048e6:	f1be 0f00 	cmp.w	lr, #0
  4048ea:	d134      	bne.n	404956 <__udivmoddi4+0x16e>
  4048ec:	1beb      	subs	r3, r5, r7
  4048ee:	0c3a      	lsrs	r2, r7, #16
  4048f0:	fa1f fc87 	uxth.w	ip, r7
  4048f4:	2101      	movs	r1, #1
  4048f6:	fbb3 f8f2 	udiv	r8, r3, r2
  4048fa:	0c25      	lsrs	r5, r4, #16
  4048fc:	fb02 3318 	mls	r3, r2, r8, r3
  404900:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404904:	fb0c f308 	mul.w	r3, ip, r8
  404908:	42ab      	cmp	r3, r5
  40490a:	d907      	bls.n	40491c <__udivmoddi4+0x134>
  40490c:	19ed      	adds	r5, r5, r7
  40490e:	f108 30ff 	add.w	r0, r8, #4294967295
  404912:	d202      	bcs.n	40491a <__udivmoddi4+0x132>
  404914:	42ab      	cmp	r3, r5
  404916:	f200 80d1 	bhi.w	404abc <__udivmoddi4+0x2d4>
  40491a:	4680      	mov	r8, r0
  40491c:	1aed      	subs	r5, r5, r3
  40491e:	b2a3      	uxth	r3, r4
  404920:	fbb5 f0f2 	udiv	r0, r5, r2
  404924:	fb02 5510 	mls	r5, r2, r0, r5
  404928:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40492c:	fb0c fc00 	mul.w	ip, ip, r0
  404930:	45a4      	cmp	ip, r4
  404932:	d907      	bls.n	404944 <__udivmoddi4+0x15c>
  404934:	19e4      	adds	r4, r4, r7
  404936:	f100 33ff 	add.w	r3, r0, #4294967295
  40493a:	d202      	bcs.n	404942 <__udivmoddi4+0x15a>
  40493c:	45a4      	cmp	ip, r4
  40493e:	f200 80b8 	bhi.w	404ab2 <__udivmoddi4+0x2ca>
  404942:	4618      	mov	r0, r3
  404944:	eba4 040c 	sub.w	r4, r4, ip
  404948:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40494c:	e79d      	b.n	40488a <__udivmoddi4+0xa2>
  40494e:	4631      	mov	r1, r6
  404950:	4630      	mov	r0, r6
  404952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404956:	f1ce 0420 	rsb	r4, lr, #32
  40495a:	fa05 f30e 	lsl.w	r3, r5, lr
  40495e:	fa07 f70e 	lsl.w	r7, r7, lr
  404962:	fa20 f804 	lsr.w	r8, r0, r4
  404966:	0c3a      	lsrs	r2, r7, #16
  404968:	fa25 f404 	lsr.w	r4, r5, r4
  40496c:	ea48 0803 	orr.w	r8, r8, r3
  404970:	fbb4 f1f2 	udiv	r1, r4, r2
  404974:	ea4f 4518 	mov.w	r5, r8, lsr #16
  404978:	fb02 4411 	mls	r4, r2, r1, r4
  40497c:	fa1f fc87 	uxth.w	ip, r7
  404980:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  404984:	fb01 f30c 	mul.w	r3, r1, ip
  404988:	42ab      	cmp	r3, r5
  40498a:	fa00 f40e 	lsl.w	r4, r0, lr
  40498e:	d909      	bls.n	4049a4 <__udivmoddi4+0x1bc>
  404990:	19ed      	adds	r5, r5, r7
  404992:	f101 30ff 	add.w	r0, r1, #4294967295
  404996:	f080 808a 	bcs.w	404aae <__udivmoddi4+0x2c6>
  40499a:	42ab      	cmp	r3, r5
  40499c:	f240 8087 	bls.w	404aae <__udivmoddi4+0x2c6>
  4049a0:	3902      	subs	r1, #2
  4049a2:	443d      	add	r5, r7
  4049a4:	1aeb      	subs	r3, r5, r3
  4049a6:	fa1f f588 	uxth.w	r5, r8
  4049aa:	fbb3 f0f2 	udiv	r0, r3, r2
  4049ae:	fb02 3310 	mls	r3, r2, r0, r3
  4049b2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4049b6:	fb00 f30c 	mul.w	r3, r0, ip
  4049ba:	42ab      	cmp	r3, r5
  4049bc:	d907      	bls.n	4049ce <__udivmoddi4+0x1e6>
  4049be:	19ed      	adds	r5, r5, r7
  4049c0:	f100 38ff 	add.w	r8, r0, #4294967295
  4049c4:	d26f      	bcs.n	404aa6 <__udivmoddi4+0x2be>
  4049c6:	42ab      	cmp	r3, r5
  4049c8:	d96d      	bls.n	404aa6 <__udivmoddi4+0x2be>
  4049ca:	3802      	subs	r0, #2
  4049cc:	443d      	add	r5, r7
  4049ce:	1aeb      	subs	r3, r5, r3
  4049d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4049d4:	e78f      	b.n	4048f6 <__udivmoddi4+0x10e>
  4049d6:	f1c1 0720 	rsb	r7, r1, #32
  4049da:	fa22 f807 	lsr.w	r8, r2, r7
  4049de:	408b      	lsls	r3, r1
  4049e0:	fa05 f401 	lsl.w	r4, r5, r1
  4049e4:	ea48 0303 	orr.w	r3, r8, r3
  4049e8:	fa20 fe07 	lsr.w	lr, r0, r7
  4049ec:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4049f0:	40fd      	lsrs	r5, r7
  4049f2:	ea4e 0e04 	orr.w	lr, lr, r4
  4049f6:	fbb5 f9fc 	udiv	r9, r5, ip
  4049fa:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4049fe:	fb0c 5519 	mls	r5, ip, r9, r5
  404a02:	fa1f f883 	uxth.w	r8, r3
  404a06:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  404a0a:	fb09 f408 	mul.w	r4, r9, r8
  404a0e:	42ac      	cmp	r4, r5
  404a10:	fa02 f201 	lsl.w	r2, r2, r1
  404a14:	fa00 fa01 	lsl.w	sl, r0, r1
  404a18:	d908      	bls.n	404a2c <__udivmoddi4+0x244>
  404a1a:	18ed      	adds	r5, r5, r3
  404a1c:	f109 30ff 	add.w	r0, r9, #4294967295
  404a20:	d243      	bcs.n	404aaa <__udivmoddi4+0x2c2>
  404a22:	42ac      	cmp	r4, r5
  404a24:	d941      	bls.n	404aaa <__udivmoddi4+0x2c2>
  404a26:	f1a9 0902 	sub.w	r9, r9, #2
  404a2a:	441d      	add	r5, r3
  404a2c:	1b2d      	subs	r5, r5, r4
  404a2e:	fa1f fe8e 	uxth.w	lr, lr
  404a32:	fbb5 f0fc 	udiv	r0, r5, ip
  404a36:	fb0c 5510 	mls	r5, ip, r0, r5
  404a3a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  404a3e:	fb00 f808 	mul.w	r8, r0, r8
  404a42:	45a0      	cmp	r8, r4
  404a44:	d907      	bls.n	404a56 <__udivmoddi4+0x26e>
  404a46:	18e4      	adds	r4, r4, r3
  404a48:	f100 35ff 	add.w	r5, r0, #4294967295
  404a4c:	d229      	bcs.n	404aa2 <__udivmoddi4+0x2ba>
  404a4e:	45a0      	cmp	r8, r4
  404a50:	d927      	bls.n	404aa2 <__udivmoddi4+0x2ba>
  404a52:	3802      	subs	r0, #2
  404a54:	441c      	add	r4, r3
  404a56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  404a5a:	eba4 0408 	sub.w	r4, r4, r8
  404a5e:	fba0 8902 	umull	r8, r9, r0, r2
  404a62:	454c      	cmp	r4, r9
  404a64:	46c6      	mov	lr, r8
  404a66:	464d      	mov	r5, r9
  404a68:	d315      	bcc.n	404a96 <__udivmoddi4+0x2ae>
  404a6a:	d012      	beq.n	404a92 <__udivmoddi4+0x2aa>
  404a6c:	b156      	cbz	r6, 404a84 <__udivmoddi4+0x29c>
  404a6e:	ebba 030e 	subs.w	r3, sl, lr
  404a72:	eb64 0405 	sbc.w	r4, r4, r5
  404a76:	fa04 f707 	lsl.w	r7, r4, r7
  404a7a:	40cb      	lsrs	r3, r1
  404a7c:	431f      	orrs	r7, r3
  404a7e:	40cc      	lsrs	r4, r1
  404a80:	6037      	str	r7, [r6, #0]
  404a82:	6074      	str	r4, [r6, #4]
  404a84:	2100      	movs	r1, #0
  404a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404a8a:	4618      	mov	r0, r3
  404a8c:	e6f8      	b.n	404880 <__udivmoddi4+0x98>
  404a8e:	4690      	mov	r8, r2
  404a90:	e6e0      	b.n	404854 <__udivmoddi4+0x6c>
  404a92:	45c2      	cmp	sl, r8
  404a94:	d2ea      	bcs.n	404a6c <__udivmoddi4+0x284>
  404a96:	ebb8 0e02 	subs.w	lr, r8, r2
  404a9a:	eb69 0503 	sbc.w	r5, r9, r3
  404a9e:	3801      	subs	r0, #1
  404aa0:	e7e4      	b.n	404a6c <__udivmoddi4+0x284>
  404aa2:	4628      	mov	r0, r5
  404aa4:	e7d7      	b.n	404a56 <__udivmoddi4+0x26e>
  404aa6:	4640      	mov	r0, r8
  404aa8:	e791      	b.n	4049ce <__udivmoddi4+0x1e6>
  404aaa:	4681      	mov	r9, r0
  404aac:	e7be      	b.n	404a2c <__udivmoddi4+0x244>
  404aae:	4601      	mov	r1, r0
  404ab0:	e778      	b.n	4049a4 <__udivmoddi4+0x1bc>
  404ab2:	3802      	subs	r0, #2
  404ab4:	443c      	add	r4, r7
  404ab6:	e745      	b.n	404944 <__udivmoddi4+0x15c>
  404ab8:	4608      	mov	r0, r1
  404aba:	e708      	b.n	4048ce <__udivmoddi4+0xe6>
  404abc:	f1a8 0802 	sub.w	r8, r8, #2
  404ac0:	443d      	add	r5, r7
  404ac2:	e72b      	b.n	40491c <__udivmoddi4+0x134>

00404ac4 <__aeabi_idiv0>:
  404ac4:	4770      	bx	lr
  404ac6:	bf00      	nop

00404ac8 <__func__.5842>:
  404ac8:	6262 705f 726f 5f74 6573 5f74 6164 6174     bb_port_set_data
  404ad8:	645f 7269 6365 3174 0036 0000               _direct16...

00404ae4 <__func__.5851>:
  404ae4:	6262 705f 726f 5f74 6573 5f74 6164 6174     bb_port_set_data
  404af4:	645f 7269 6365 3374 0032 0000               _direct32...

00404b00 <__func__.5874>:
  404b00:	6262 705f 726f 5f74 6567 5f74 6164 6174     bb_port_get_data
  404b10:	645f 7269 6365 3374 0032 0000 6228 7479     _direct32...(byt
  404b20:	4f65 6666 6573 4974 576e 726f 2064 2025     eOffsetInWord % 
  404b30:	5532 2029 3d3d 3020 0000 0000 2e2e 622f     2U) == 0....../b
  404b40:	616c 6b63 6f62 7261 2f64 6262 705f 726f     lackboard/bb_por
  404b50:	2e74 0063 7962 6574 664f 7366 7465 6e49     t.c.byteOffsetIn
  404b60:	6f57 6472 3d20 203d 0030 0000               Word == 0...

00404b6c <can_spec_can_element_list>:
  404b6c:	0400 0000 4d10 0040 0064 0000 0004 0000     .....M@.d.......
  404b7c:	4d20 0040 0001 0004 0000 0000 0000 0000      M@.............
	...
  404b9c:	0575 0040 0001 0000 0103 0000 0410 0000     u.@.............
  404bac:	4d2c 0040 0064 0000 0008 0000 4d40 0040     ,M@.d.......@M@.
  404bbc:	0001 0002 4d54 0040 0201 0002 4d68 0040     ....TM@.....hM@.
  404bcc:	0401 0002 4d78 0040 0601 0002 0000 0000     ....xM@.........
  404bdc:	0000 0000 0001 0000 0460 0000 4d88 0040     ........`....M@.
  404bec:	0064 0000 0001 0000 4d8c 0040 0001 0001     d........M@.....
	...
  404c1c:	0001 0000 0470 0000 4d9c 0040 0064 0000     ....p....M@.d...
  404c2c:	0001 0000 4db0 0040 0001 0001 0000 0000     .....M@.........
	...
  404c58:	0001 0000 0480 0000 4dc0 0040 0064 0000     .........M@.d...
  404c68:	0001 0000 4dc4 0040 0001 0001 0000 0000     .....M@.........
	...
  404c94:	0001 0000 0630 0000 4dd4 0040 0064 0000     ....0....M@.d...
  404ca4:	0001 0000 4de0 0040 0001 0001 0000 0000     .....M@.........
	...
  404cc8:	0575 0040 0001 0000 0100 0000 0631 0000     u.@.........1...
  404cd8:	4dec 0040 0064 0000 0008 0000 4df8 0040     .M@.d........M@.
  404ce8:	0001 0002 4e08 0040 0201 0002 4e1c 0040     .....N@......N@.
  404cf8:	0401 0002 4e28 0040 0601 0002 0000 0000     ....(N@.........
  404d08:	0000 0000 0100 0000 4353 5f4d 7953 7473     ........SCM_Syst
  404d18:	6d65 6142 6672 0079 6554 7473 6c46 6f6f     emBarfy.TestFloo
  404d28:	7966 0000 4353 5f4d 6f4d 6f74 3172 6150     fy..SCM_Motor1Pa
  404d38:	6172 736d 0031 0000 6f6d 6f74 3172 6341     rams1...motor1Ac
  404d48:	6563 656c 6172 6974 6e6f 0000 6f6d 6f74     celeration..moto
  404d58:	3172 6544 6563 656c 6172 6974 6e6f 0000     r1Deceleration..
  404d68:	6f6d 6f74 3172 614d 5378 6570 6465 0000     motor1MaxSpeed..
  404d78:	6f6d 6f74 3172 694d 536e 6570 6465 0000     motor1MinSpeed..
  404d88:	4353 5f4d 6f4d 6f74 3172 6f43 746e 6f72     SCM_Motor1Contro
  404d98:	006c 0000 4353 5f4d 6f4d 6f74 3172 6f43     l...SCM_Motor1Co
  404da8:	746e 6f72 0032 0000 6f4d 6f74 3272 6f43     ntro2...Motor2Co
  404db8:	746e 6f72 006c 0000 4353 5f4d 6f4d 6f74     ntrol...SCM_Moto
  404dc8:	3372 6f43 746e 6f72 006c 0000 4352 5f4d     r3Control...RCM_
  404dd8:	7953 7473 6d65 0000 6f4d 7564 656c 6449     System..ModuleId
  404de8:	0000 0000 4352 5f4d 6553 736e 726f 0031     ....RCM_Sensor1.
  404df8:	6553 736e 726f 5631 6c6f 6174 6567 0000     Sensor1Voltage..
  404e08:	6553 736e 726f 5431 6d65 6570 6172 7574     Sensor1Temperatu
  404e18:	6572 0000 6553 736e 726f 4631 6f6f 0000     re..Sensor1Foo..
  404e28:	6553 736e 726f 4231 7261 0000 6574 7473     Sensor1Bar..test
  404e38:	6143 6c6c 6162 6b63 203a 4353 5f4d 5645     Callback: SCM_EV
  404e48:	4e45 5f54 4f46 3d4f 6425 202c 7872 6843     ENT_FOO=%d, rxCh
  404e58:	6e61 253d 2c64 7420 4378 6168 3d6e 6425     an=%d, txChan=%d
  404e68:	202c 6f63 6e75 6574 3d72 6425 000a 0000     , counter=%d....
  404e78:	4353 3a4d 6920 6143 486e 7a61 7854 203a     SCM: iCanHazTx: 
  404e88:	6425 203a 7025 202c 7830 7825 203a 7325     %d: %p, 0x%x: %s
  404e98:	000a 0000 0d0a 4520 7478 6e65 6564 2064     ...... Extended 
  404ea8:	656d 7373 6761 2065 6572 6563 7669 6465     message received
  404eb8:	6920 206e 7852 6220 6675 6566 2e72 5420      in Rx buffer. T
  404ec8:	6568 7220 6365 6965 6576 2064 6164 6174     he received data
  404ed8:	6920 3a73 0d20 000a 0d0a 5320 6174 646e      is: ..... Stand
  404ee8:	7261 2064 656d 7373 6761 2065 6572 6563     ard message rece
  404ef8:	7669 6465 6920 206e 7852 6220 6675 6566     ived in Rx buffe
  404f08:	2e72 5420 6568 7220 6365 6965 6576 2064     r. The received 
  404f18:	6164 6174 6920 3a73 0d20 000a 2020 6425     data is: ...  %d
  404f28:	0000 0000 0d0a 5320 6174 646e 7261 2064     ...... Standard 
  404f38:	656d 7373 6761 2065 6572 6563 7669 6465     message received
  404f48:	6920 206e 4946 4f46 3020 202e 6854 2065      in FIFO 0. The 
  404f58:	6572 6563 7669 6465 6420 7461 2061 7369     received data is
  404f68:	203a 0a0d 0000 0000 0d0a 4520 7478 6e65     : ........ Exten
  404f78:	6564 2064 656d 7373 6761 2065 6572 6563     ded message rece
  404f88:	7669 6465 6920 206e 4946 4f46 3120 202e     ived in FIFO 1. 
  404f98:	6854 2065 6572 6563 7669 6465 6420 7461     The received dat
  404fa8:	2061 7369 203a 0a0d 0000 0000 203a 434d     a is: ......: MC
  404fb8:	4e41 6220 7375 6f20 6666 6520 7272 726f     AN bus off error
  404fc8:	202c 6572 692d 696e 6974 6c61 7a69 7461     , re-initializat
  404fd8:	6f69 2e6e 0d20 0d0a 000a 0000 7250 746f     ion. .......Prot
  404fe8:	636f 6c6f 4120 4b43 6520 7272 726f 202c     ocol ACK error, 
  404ff8:	6c70 6165 6573 6420 756f 6c62 2065 6863     please double ch
  405008:	6365 206b 6874 2065 6c63 636f 206b 6e69     eck the clock in
  405018:	7420 6f77 6220 616f 6472 2e73 0d20 0d0a      two boards. ...
  405028:	000a 0000 7250 746f 636f 6c6f 6620 726f     ....Protocol for
  405038:	616d 2074 7265 6f72 2c72 7020 656c 7361     mat error, pleas
  405048:	2065 6f64 6275 656c 6320 6568 6b63 7420     e double check t
  405058:	6568 6320 6f6c 6b63 6920 206e 7774 206f     he clock in two 
  405068:	6f62 7261 7364 202e 0a0d 0a0d 0000 0000     boards. ........
  405078:	202c 7566 636e 6974 6e6f 203a 0000 0000     , function: ....
  405088:	7361 6573 7472 6f69 206e 2522 2273 6620     assertion "%s" f
  405098:	6961 656c 3a64 6620 6c69 2065 2522 2273     ailed: file "%s"
  4050a8:	202c 696c 656e 2520 2564 2573 0a73 0000     , line %d%s%s...

004050b8 <_global_impure_ptr>:
  4050b8:	0018 2040 3130 3332 3534 3736 3938 4241     ..@ 0123456789AB
  4050c8:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  4050d8:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  4050e8:	296c 0000                                   l)..

004050ec <blanks.7217>:
  4050ec:	2020 2020 2020 2020 2020 2020 2020 2020                     

004050fc <zeroes.7218>:
  4050fc:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40510c:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

0040511c <_ctype_>:
  40511c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40512c:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40513c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40514c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40515c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40516c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40517c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40518c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40519c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00405220 <_init>:
  405220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405222:	bf00      	nop
  405224:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405226:	bc08      	pop	{r3}
  405228:	469e      	mov	lr, r3
  40522a:	4770      	bx	lr

0040522c <__init_array_start>:
  40522c:	00402cc9 	.word	0x00402cc9

00405230 <__frame_dummy_init_array_entry>:
  405230:	0040018d                                ..@.

00405234 <_fini>:
  405234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405236:	bf00      	nop
  405238:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40523a:	bc08      	pop	{r3}
  40523c:	469e      	mov	lr, r3
  40523e:	4770      	bx	lr

00405240 <__fini_array_start>:
  405240:	00400169 	.word	0x00400169
