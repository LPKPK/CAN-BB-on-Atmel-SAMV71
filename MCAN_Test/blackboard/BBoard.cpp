/** @file BBoard.cpp
*
* @brief Defines accessor functions for blackboard variables in a C++ class
*
* @par
* Copyright (c) 2021 Sunrise Labs, Inc.
* All rights reserved.
*/

#include "BBoard.h"

namespace bb
{

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// *** AUTOGENERATED BY BBGEN.  DO NOT EDIT THIS SECTION: BB_CPP_DEF


/// @brief Auto-generated blackboard CPP definition for the SCM (type = BB_CPP_DEF) subsystem.


/**
 * @brief Gets the SCM_TestFloofy value from the blackboard.
 * Test
 * @return int32_t value of SCM_TestFloofy in Test
 */
int32_t BBoard::get_SCM_TestFloofy()
{
    return bb_get_SCM_TestFloofy();
}

/**
 * @brief Sets the SCM_TestFloofy value within the blackboard.
 * @see bb_get_SCM_TestFloofy for a description of this property.
 * @param value int32_t in Test
 */
void BBoard::set_SCM_TestFloofy(const int32_t value)
{
    bb_set_SCM_TestFloofy(value);
}

/**
 * @brief Gets the SCM_motor1Acceleration value from the blackboard.
 * Motor 1 Acceleration
 * @return int16_t value of SCM_motor1Acceleration in step/s^2
 */
float32_T BBoard::get_SCM_motor1Acceleration()
{
    return bb_get_SCM_motor1Acceleration();
}

/**
 * @brief Sets the SCM_motor1Acceleration value within the blackboard.
 * @see bb_get_SCM_motor1Acceleration for a description of this property.
 * @param value int16_t in step/s^2
 */
void BBoard::set_SCM_motor1Acceleration(const float32_T value)
{
    bb_set_SCM_motor1Acceleration(value);
}

/**
 * @brief Gets the SCM_motor1Deceleration value from the blackboard.
 * Test
 * @return int16_t value of SCM_motor1Deceleration in step/s^2
 */
float32_T BBoard::get_SCM_motor1Deceleration()
{
    return bb_get_SCM_motor1Deceleration();
}

/**
 * @brief Sets the SCM_motor1Deceleration value within the blackboard.
 * @see bb_get_SCM_motor1Deceleration for a description of this property.
 * @param value int16_t in step/s^2
 */
void BBoard::set_SCM_motor1Deceleration(const float32_T value)
{
    bb_set_SCM_motor1Deceleration(value);
}

/**
 * @brief Gets the SCM_motor1MaxSpeed value from the blackboard.
 * Test
 * @return int16_t value of SCM_motor1MaxSpeed in step/s
 */
float32_T BBoard::get_SCM_motor1MaxSpeed()
{
    return bb_get_SCM_motor1MaxSpeed();
}

/**
 * @brief Sets the SCM_motor1MaxSpeed value within the blackboard.
 * @see bb_get_SCM_motor1MaxSpeed for a description of this property.
 * @param value int16_t in step/s
 */
void BBoard::set_SCM_motor1MaxSpeed(const float32_T value)
{
    bb_set_SCM_motor1MaxSpeed(value);
}

/**
 * @brief Gets the SCM_motor1MinSpeed value from the blackboard.
 * Test
 * @return int16_t value of SCM_motor1MinSpeed in step/s
 */
float32_T BBoard::get_SCM_motor1MinSpeed()
{
    return bb_get_SCM_motor1MinSpeed();
}

/**
 * @brief Sets the SCM_motor1MinSpeed value within the blackboard.
 * @see bb_get_SCM_motor1MinSpeed for a description of this property.
 * @param value int16_t in step/s
 */
void BBoard::set_SCM_motor1MinSpeed(const float32_T value)
{
    bb_set_SCM_motor1MinSpeed(value);
}

/**
 * @brief Gets the SCM_Motor1Control value from the blackboard.
 * Test
 * @return int8_t value of SCM_Motor1Control in steps
 */
int8_t BBoard::get_SCM_Motor1Control()
{
    return bb_get_SCM_Motor1Control();
}

/**
 * @brief Sets the SCM_Motor1Control value within the blackboard.
 * @see bb_get_SCM_Motor1Control for a description of this property.
 * @param value int8_t in steps
 */
void BBoard::set_SCM_Motor1Control(const int8_t value)
{
    bb_set_SCM_Motor1Control(value);
}

/**
 * @brief Gets the RCM_ModuleId value from the blackboard.
 * RCM Module ID
 * @return int8_t value of RCM_ModuleId in data
 */
int8_t BBoard::get_RCM_ModuleId()
{
    return bb_get_RCM_ModuleId();
}

/**
 * @brief Sets the RCM_ModuleId value within the blackboard.
 * @see bb_get_RCM_ModuleId for a description of this property.
 * @param value int8_t in data
 */
void BBoard::set_RCM_ModuleId(const int8_t value)
{
    bb_set_RCM_ModuleId(value);
}

/**
 * @brief Gets the RCM_Sensor1Voltage value from the blackboard.
 * Voltage for Sensor 1
 * @return int16_t value of RCM_Sensor1Voltage in V
 */
float32_T BBoard::get_RCM_Sensor1Voltage()
{
    return bb_get_RCM_Sensor1Voltage();
}

/**
 * @brief Sets the RCM_Sensor1Voltage value within the blackboard.
 * @see bb_get_RCM_Sensor1Voltage for a description of this property.
 * @param value int16_t in V
 */
void BBoard::set_RCM_Sensor1Voltage(const float32_T value)
{
    bb_set_RCM_Sensor1Voltage(value);
}

/**
 * @brief Gets the RCM_Sensor1Temperature value from the blackboard.
 * Temperature for Sensor 1
 * @return int16_t value of RCM_Sensor1Temperature in C
 */
float32_T BBoard::get_RCM_Sensor1Temperature()
{
    return bb_get_RCM_Sensor1Temperature();
}

/**
 * @brief Sets the RCM_Sensor1Temperature value within the blackboard.
 * @see bb_get_RCM_Sensor1Temperature for a description of this property.
 * @param value int16_t in C
 */
void BBoard::set_RCM_Sensor1Temperature(const float32_T value)
{
    bb_set_RCM_Sensor1Temperature(value);
}

/**
 * @brief Gets the RCM_Sensor1Foo value from the blackboard.
 * Voltage for Sensor 1
 * @return int16_t value of RCM_Sensor1Foo in V
 */
float32_T BBoard::get_RCM_Sensor1Foo()
{
    return bb_get_RCM_Sensor1Foo();
}

/**
 * @brief Sets the RCM_Sensor1Foo value within the blackboard.
 * @see bb_get_RCM_Sensor1Foo for a description of this property.
 * @param value int16_t in V
 */
void BBoard::set_RCM_Sensor1Foo(const float32_T value)
{
    bb_set_RCM_Sensor1Foo(value);
}

/**
 * @brief Gets the RCM_Sensor1Bar value from the blackboard.
 * Temperature for Sensor 1
 * @return int16_t value of RCM_Sensor1Bar in C
 */
float32_T BBoard::get_RCM_Sensor1Bar()
{
    return bb_get_RCM_Sensor1Bar();
}

/**
 * @brief Sets the RCM_Sensor1Bar value within the blackboard.
 * @see bb_get_RCM_Sensor1Bar for a description of this property.
 * @param value int16_t in C
 */
void BBoard::set_RCM_Sensor1Bar(const float32_T value)
{
    bb_set_RCM_Sensor1Bar(value);
}


// *** AUTOGENERATED BY BBGEN.  DO NOT EDIT THIS SECTION: BB_CPP_DEF
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


}

